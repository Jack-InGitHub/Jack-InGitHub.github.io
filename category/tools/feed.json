{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"tools\" category",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2024/b58cbef5/",
            "url": "https://www.oikiou.top/2024/b58cbef5/",
            "title": "Obsidian",
            "date_published": "2024-03-08T02:23:15.000Z",
            "content_html": "<h1 id=\"一些格式问题\"><a href=\"#一些格式问题\" class=\"headerlink\" title=\"一些格式问题\"></a>一些格式问题</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%%\"></a>%%</h2><p>两个百分号在html中是“一个模板引擎系统，其语法基于jinja。”</p>\n<ul>\n<li>Obsidian 会默认把CRLF的换行符自动转换成LF的<br>   我们需要将单独这个仓库的git配置成<code>autocrlf = false</code>以保证换行符的统一。</li>\n</ul>\n",
            "tags": [
                "markdown",
                "obsidian"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/c65a4228/",
            "url": "https://www.oikiou.top/2023/c65a4228/",
            "title": "Frp",
            "date_published": "2023-11-03T11:12:15.000Z",
            "content_html": "<h1 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h1><p>frp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。</p>\n<blockquote>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><p>  通过在具有公网 IP 的节点上部署 frp 服务端，您可以轻松地将内网服务穿透到公网，并享受以下专业特性：</p>\n<ul>\n<li>多种协议支持：客户端服务端通信支持 TCP、QUIC、KCP 和 Websocket 等多种协议。</li>\n<li>TCP 连接流式复用：在单个连接上承载多个请求，减少连接建立时间，降低请求延迟。</li>\n<li>代理组间的负载均衡。</li>\n<li>端口复用：多个服务可以通过同一个服务端端口暴露。</li>\n<li>P2P 通信：流量不必经过服务器中转，充分利用带宽资源。</li>\n<li>客户端插件：提供多个原生支持的客户端插件，如静态文件查看、HTTPS&#x2F;HTTP 协议转换、HTTP、SOCKS5 代理等，以便满足各种需求。</li>\n<li>服务端插件系统：高度可扩展的服务端插件系统，便于根据自身需求进行功能扩展。</li>\n<li>用户友好的 UI 页面：提供服务端和客户端的用户界面，使配置和监控变得更加方便。</li>\n</ul>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>  frp 主要由两个组件组成：客户端(frpc) 和 服务端(frps)。通常情况下，服务端部署在具有公网 IP 地址的机器上，而客户端部署在需要穿透的内网服务所在的机器上。</p>\n<p>  由于内网服务缺乏公网 IP 地址，因此无法直接被非局域网内的用户访问。用户通过访问服务端的 frps，frp 负责根据请求的端口或其他信息将请求路由到相应的内网机器，从而实现通信。</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>  在 frp 中，一个代理对应一个需要公开访问的内网服务。一个客户端可以同时配置多个代理，以满足不同的需求。</p>\n<h2 id=\"代理类型\"><a href=\"#代理类型\" class=\"headerlink\" title=\"代理类型\"></a>代理类型</h2><p>  frp 支持多种代理类型，以适应不同的使用场景。以下是一些常见的代理类型：</p>\n<ul>\n<li><strong>TCP</strong>：提供纯粹的 TCP 端口映射，使服务端能够根据不同的端口将请求路由到不同的内网服务。</li>\n<li><strong>UDP</strong>：提供纯粹的 UDP 端口映射，与 TCP 代理类似，但用于 UDP 流量。</li>\n<li><strong>HTTP</strong>：专为 HTTP 应用设计，支持修改 Host Header 和增加鉴权等额外功能。</li>\n<li><strong>HTTPS</strong>：类似于 HTTP 代理，但专门用于处理 HTTPS 流量。</li>\n<li><strong>STCP</strong>：提供安全的 TCP 内网代理，要求在被访问者和访问者的机器上都部署 frpc，不需要在服务端暴露端口。</li>\n<li><strong>SUDP</strong>：提供安全的 UDP 内网代理，与 STCP 类似，需要在被访问者和访问者的机器上都部署 frpc，不需要在服务端暴露端口。</li>\n<li><strong>XTCP</strong>：点对点内网穿透代理，与 STCP 类似，但流量不需要经过服务器中转。</li>\n<li><strong>TCPMUX</strong>：支持服务端 TCP 端口的多路复用，允许通过同一端口访问不同的内网服务。</li>\n</ul>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><blockquote>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>  您可以从 GitHub 的 <a href=\"https://github.com/fatedier/frp/releases\">Release</a> 页面中下载最新版本的客户端和服务器二进制文件。所有文件都打包在一个压缩包中，还包含了一份完整的配置参数说明。</p>\n<h2 id=\"部署-1\"><a href=\"#部署-1\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ol>\n<li>解压下载的压缩包。</li>\n<li>将 <code>frpc</code> 复制到内网服务所在的机器上。</li>\n<li>将 <code>frps</code> 复制到拥有公网 IP 地址的机器上，并将它们放在任意目录。</li>\n</ol>\n<h2 id=\"开始使用！\"><a href=\"#开始使用！\" class=\"headerlink\" title=\"开始使用！\"></a>开始使用！</h2><ol>\n<li>编写配置文件，目前支持的文件格式包括 TOML&#x2F;YAML&#x2F;JSON，旧的 INI 格式仍然支持，但已经不再推荐。</li>\n<li>使用以下命令启动服务器：<code>./frps -c ./frps.toml</code>。</li>\n<li>使用以下命令启动客户端：<code>./frpc -c ./frpc.toml</code>。</li>\n<li>如果需要在后台长期运行，建议结合其他工具，如 <code>systemd</code> 和 <code>supervisor</code>。</li>\n</ol>\n</blockquote>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><a href=\"https://gofrp.org/zh-cn/docs/examples/\">配置示例</a></p>\n<blockquote>\n<p>  具体配置可以参考官方文档，写的挺详细的，不过提示一点，配置文件的配置项有顺序要求，需要注意。</p>\n<p>  例如<code>frpc</code>的配置中<code>auth.token</code> 需要放在全局配置里面，不能放在<code>[[proxies]]</code>等等配置选项后面。</p>\n</blockquote>\n<h2 id=\"配置文件参考\"><a href=\"#配置文件参考\" class=\"headerlink\" title=\"配置文件参考\"></a>配置文件参考</h2><h3 id=\"frps\"><a href=\"#frps\" class=\"headerlink\" title=\"frps\"></a>frps</h3><p><a href=\"https://github.com/fatedier/frp/blob/dev/conf/frps_full_example.toml\">frps</a></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues.</span><br><br><span class=\"hljs-comment\"># A literal address or host name for IPv6 must be enclosed</span><br><span class=\"hljs-comment\"># in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;</span><br><span class=\"hljs-comment\"># For single &quot;bindAddr&quot; field, no need square brackets, like `bindAddr = &quot;::&quot;`.</span><br><span class=\"hljs-attr\">bindAddr</span> = <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span><br><span class=\"hljs-attr\">bindPort</span> = <span class=\"hljs-number\">7000</span><br><br><span class=\"hljs-comment\"># udp port used for kcp protocol, it can be same with &#x27;bindPort&#x27;.</span><br><span class=\"hljs-comment\"># if not set, kcp is disabled in frps.</span><br><span class=\"hljs-attr\">kcpBindPort</span> = <span class=\"hljs-number\">7000</span><br><br><span class=\"hljs-comment\"># udp port used for quic protocol.</span><br><span class=\"hljs-comment\"># if not set, quic is disabled in frps.</span><br><span class=\"hljs-comment\"># quicBindPort = 7002</span><br><br><span class=\"hljs-comment\"># Specify which address proxy will listen for, default value is same with bindAddr</span><br><span class=\"hljs-comment\"># proxyBindAddr = &quot;127.0.0.1&quot;</span><br><br><span class=\"hljs-comment\"># quic protocol options</span><br><span class=\"hljs-comment\"># transport.quic.keepalivePeriod = 10</span><br><span class=\"hljs-comment\"># transport.quic.maxIdleTimeout = 30</span><br><span class=\"hljs-comment\"># transport.quic.maxIncomingStreams = 100000</span><br><br><span class=\"hljs-comment\"># Heartbeat configure, it&#x27;s not recommended to modify the default value</span><br><span class=\"hljs-comment\"># The default value of heartbeatTimeout is 90. Set negative value to disable it.</span><br><span class=\"hljs-comment\"># transport.heartbeatTimeout = 90</span><br><br><span class=\"hljs-comment\"># Pool count in each proxy will keep no more than maxPoolCount.</span><br><span class=\"hljs-attr\">transport.maxPoolCount</span> = <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-comment\"># If tcp stream multiplexing is used, default is true</span><br><span class=\"hljs-comment\"># transport.tcpMux = true</span><br><br><span class=\"hljs-comment\"># Specify keep alive interval for tcp mux.</span><br><span class=\"hljs-comment\"># only valid if tcpMux is true.</span><br><span class=\"hljs-comment\"># transport.tcpMuxKeepaliveInterval = 60</span><br><br><span class=\"hljs-comment\"># tcpKeepalive specifies the interval between keep-alive probes for an active network connection between frpc and frps.</span><br><span class=\"hljs-comment\"># If negative, keep-alive probes are disabled.</span><br><span class=\"hljs-comment\"># transport.tcpKeepalive = 7200</span><br><br><span class=\"hljs-comment\"># transport.tls.force specifies whether to only accept TLS-encrypted connections. By default, the value is false.</span><br><span class=\"hljs-attr\">transport.tls.force</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># transport.tls.certFile = &quot;server.crt&quot;</span><br><span class=\"hljs-comment\"># transport.tls.keyFile = &quot;server.key&quot;</span><br><span class=\"hljs-comment\"># transport.tls.trustedCaFile = &quot;ca.crt&quot;</span><br><br><span class=\"hljs-comment\"># If you want to support virtual host, you must set the http port for listening (optional)</span><br><span class=\"hljs-comment\"># <span class=\"hljs-doctag\">Note:</span> http port and https port can be same with bindPort</span><br><span class=\"hljs-attr\">vhostHTTPPort</span> = <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">vhostHTTPSPort</span> = <span class=\"hljs-number\">443</span><br><br><span class=\"hljs-comment\"># Response header timeout(seconds) for vhost http server, default is 60s</span><br><span class=\"hljs-comment\"># vhostHTTPTimeout = 60</span><br><br><span class=\"hljs-comment\"># tcpmuxHTTPConnectPort specifies the port that the server listens for TCP</span><br><span class=\"hljs-comment\"># HTTP CONNECT requests. If the value is 0, the server will not multiplex TCP</span><br><span class=\"hljs-comment\"># requests on one single port. If it&#x27;s not - it will listen on this value for</span><br><span class=\"hljs-comment\"># HTTP CONNECT requests. By default, this value is 0.</span><br><span class=\"hljs-comment\"># tcpmuxHTTPConnectPort = 1337</span><br><br><span class=\"hljs-comment\"># If tcpmuxPassthrough is true, frps won&#x27;t do any update on traffic.</span><br><span class=\"hljs-comment\"># tcpmuxPassthrough = false</span><br><br><span class=\"hljs-comment\"># Configure the web server to enable the dashboard for frps.</span><br><span class=\"hljs-comment\"># dashboard is available only if webServer.port is set.</span><br><span class=\"hljs-attr\">webServer.addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span><br><span class=\"hljs-attr\">webServer.port</span> = <span class=\"hljs-number\">7500</span><br><span class=\"hljs-attr\">webServer.user</span> = <span class=\"hljs-string\">&quot;admin&quot;</span><br><span class=\"hljs-attr\">webServer.password</span> = <span class=\"hljs-string\">&quot;admin&quot;</span><br><span class=\"hljs-comment\"># webServer.tls.certFile = &quot;server.crt&quot;</span><br><span class=\"hljs-comment\"># webServer.tls.keyFile = &quot;server.key&quot;</span><br><span class=\"hljs-comment\"># dashboard assets directory(only for debug mode)</span><br><span class=\"hljs-comment\"># webServer.assetsDir = &quot;./static&quot;</span><br><br><span class=\"hljs-comment\"># Enable golang pprof handlers in dashboard listener.</span><br><span class=\"hljs-comment\"># Dashboard port must be set first</span><br><span class=\"hljs-attr\">webServer.pprofEnable</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># enablePrometheus will export prometheus metrics on webServer in /metrics api.</span><br><span class=\"hljs-attr\">enablePrometheus</span> = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># console or real logFile path like ./frps.log</span><br><span class=\"hljs-attr\">log.to</span> = <span class=\"hljs-string\">&quot;./frps.log&quot;</span><br><span class=\"hljs-comment\"># trace, debug, info, warn, error</span><br><span class=\"hljs-attr\">log.level</span> = <span class=\"hljs-string\">&quot;info&quot;</span><br><span class=\"hljs-attr\">log.maxDays</span> = <span class=\"hljs-number\">3</span><br><span class=\"hljs-comment\"># disable log colors when log.to is console, default is false</span><br><span class=\"hljs-attr\">log.disablePrintColor</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># DetailedErrorsToClient defines whether to send the specific error (with debug info) to frpc. By default, this value is true.</span><br><span class=\"hljs-attr\">detailedErrorsToClient</span> = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># auth.method specifies what authentication method to use authenticate frpc with frps.</span><br><span class=\"hljs-comment\"># If &quot;token&quot; is specified - token will be read into login message.</span><br><span class=\"hljs-comment\"># If &quot;oidc&quot; is specified - OIDC (Open ID Connect) token will be issued using OIDC settings. By default, this value is &quot;token&quot;.</span><br><span class=\"hljs-attr\">auth.method</span> = <span class=\"hljs-string\">&quot;token&quot;</span><br><br><span class=\"hljs-comment\"># auth.additionalScopes specifies additional scopes to include authentication information.</span><br><span class=\"hljs-comment\"># Optional values are HeartBeats, NewWorkConns.</span><br><span class=\"hljs-comment\"># auth.additionalScopes = [&quot;HeartBeats&quot;, &quot;NewWorkConns&quot;]</span><br><br><span class=\"hljs-comment\"># auth token</span><br><span class=\"hljs-attr\">auth.token</span> = <span class=\"hljs-string\">&quot;12345678&quot;</span><br><br><span class=\"hljs-comment\"># oidc issuer specifies the issuer to verify OIDC tokens with.</span><br><span class=\"hljs-attr\">auth.oidc.issuer</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><span class=\"hljs-comment\"># oidc audience specifies the audience OIDC tokens should contain when validated.</span><br><span class=\"hljs-attr\">auth.oidc.audience</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><span class=\"hljs-comment\"># oidc skipExpiryCheck specifies whether to skip checking if the OIDC token is expired.</span><br><span class=\"hljs-attr\">auth.oidc.skipExpiryCheck</span> = <span class=\"hljs-literal\">false</span><br><span class=\"hljs-comment\"># oidc skipIssuerCheck specifies whether to skip checking if the OIDC token&#x27;s issuer claim matches the issuer specified in OidcIssuer.</span><br><span class=\"hljs-attr\">auth.oidc.skipIssuerCheck</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># userConnTimeout specifies the maximum time to wait for a work connection.</span><br><span class=\"hljs-comment\"># userConnTimeout = 10</span><br><br><span class=\"hljs-comment\"># Only allow frpc to bind ports you list. By default, there won&#x27;t be any limit.</span><br><span class=\"hljs-attr\">allowPorts</span> = [<br>  &#123; start = <span class=\"hljs-number\">2000</span>, end = <span class=\"hljs-number\">3000</span> &#125;,<br>  &#123; single = <span class=\"hljs-number\">3001</span> &#125;,<br>  &#123; single = <span class=\"hljs-number\">3003</span> &#125;,<br>  &#123; start = <span class=\"hljs-number\">4000</span>, end = <span class=\"hljs-number\">50000</span> &#125;<br>]<br><br><span class=\"hljs-comment\"># Max ports can be used for each client, default value is 0 means no limit</span><br><span class=\"hljs-attr\">maxPortsPerClient</span> = <span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\"># If subDomainHost is not empty, you can set subdomain when type is http or https in frpc&#x27;s configure file</span><br><span class=\"hljs-comment\"># When subdomain is test, the host used by routing is test.frps.com</span><br><span class=\"hljs-attr\">subDomainHost</span> = <span class=\"hljs-string\">&quot;frps.com&quot;</span><br><br><span class=\"hljs-comment\"># custom 404 page for HTTP requests</span><br><span class=\"hljs-comment\"># custom404Page = &quot;/path/to/404.html&quot;</span><br><br><span class=\"hljs-comment\"># specify udp packet size, unit is byte. If not set, the default value is 1500.</span><br><span class=\"hljs-comment\"># This parameter should be same between client and server.</span><br><span class=\"hljs-comment\"># It affects the udp and sudp proxy.</span><br><span class=\"hljs-attr\">udpPacketSize</span> = <span class=\"hljs-number\">1500</span><br><br><span class=\"hljs-comment\"># Retention time for NAT hole punching strategy data.</span><br><span class=\"hljs-attr\">natholeAnalysisDataReserveHours</span> = <span class=\"hljs-number\">168</span><br><br><span class=\"hljs-comment\"># ssh tunnel gateway</span><br><span class=\"hljs-comment\"># If you want to enable this feature, the bindPort parameter is required, while others are optional.</span><br><span class=\"hljs-comment\"># By default, this feature is disabled. It will be enabled if bindPort is greater than 0.</span><br><span class=\"hljs-comment\"># sshTunnelGateway.bindPort = 2200</span><br><span class=\"hljs-comment\"># sshTunnelGateway.privateKeyFile = &quot;/home/frp-user/.ssh/id_rsa&quot;</span><br><span class=\"hljs-comment\"># sshTunnelGateway.autoGenPrivateKeyPath = &quot;&quot;</span><br><span class=\"hljs-comment\"># sshTunnelGateway.authorizedKeysFile = &quot;/home/frp-user/.ssh/authorized_keys&quot;</span><br><br><span class=\"hljs-section\">[[httpPlugins]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;user-manager&quot;</span><br><span class=\"hljs-attr\">addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1:9000&quot;</span><br><span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;/handler&quot;</span><br><span class=\"hljs-attr\">ops</span> = [<span class=\"hljs-string\">&quot;Login&quot;</span>]<br><br><span class=\"hljs-section\">[[httpPlugins]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;port-manager&quot;</span><br><span class=\"hljs-attr\">addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1:9001&quot;</span><br><span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;/handler&quot;</span><br><span class=\"hljs-attr\">ops</span> = [<span class=\"hljs-string\">&quot;NewProxy&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"frpc\"><a href=\"#frpc\" class=\"headerlink\" title=\"frpc\"></a>frpc</h3><p><a href=\"https://github.com/fatedier/frp/blob/dev/conf/frpc_full_example.toml\">frpc</a></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues.</span><br><br><span class=\"hljs-comment\"># A literal address or host name for IPv6 must be enclosed</span><br><span class=\"hljs-comment\"># in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;</span><br><span class=\"hljs-comment\"># For single &quot;bindAddr&quot; field, no need square brackets, like `bindAddr = &quot;::&quot;`.</span><br><span class=\"hljs-attr\">bindAddr</span> = <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span><br><span class=\"hljs-attr\">bindPort</span> = <span class=\"hljs-number\">7000</span><br><br><span class=\"hljs-comment\"># udp port used for kcp protocol, it can be same with &#x27;bindPort&#x27;.</span><br><span class=\"hljs-comment\"># if not set, kcp is disabled in frps.</span><br><span class=\"hljs-attr\">kcpBindPort</span> = <span class=\"hljs-number\">7000</span><br><br><span class=\"hljs-comment\"># udp port used for quic protocol.</span><br><span class=\"hljs-comment\"># if not set, quic is disabled in frps.</span><br><span class=\"hljs-comment\"># quicBindPort = 7002</span><br><br><span class=\"hljs-comment\"># Specify which address proxy will listen for, default value is same with bindAddr</span><br><span class=\"hljs-comment\"># proxyBindAddr = &quot;127.0.0.1&quot;</span><br><br><span class=\"hljs-comment\"># quic protocol options</span><br><span class=\"hljs-comment\"># transport.quic.keepalivePeriod = 10</span><br><span class=\"hljs-comment\"># transport.quic.maxIdleTimeout = 30</span><br><span class=\"hljs-comment\"># transport.quic.maxIncomingStreams = 100000</span><br><br><span class=\"hljs-comment\"># Heartbeat configure, it&#x27;s not recommended to modify the default value</span><br><span class=\"hljs-comment\"># The default value of heartbeatTimeout is 90. Set negative value to disable it.</span><br><span class=\"hljs-comment\"># transport.heartbeatTimeout = 90</span><br><br><span class=\"hljs-comment\"># Pool count in each proxy will keep no more than maxPoolCount.</span><br><span class=\"hljs-attr\">transport.maxPoolCount</span> = <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-comment\"># If tcp stream multiplexing is used, default is true</span><br><span class=\"hljs-comment\"># transport.tcpMux = true</span><br><br><span class=\"hljs-comment\"># Specify keep alive interval for tcp mux.</span><br><span class=\"hljs-comment\"># only valid if tcpMux is true.</span><br><span class=\"hljs-comment\"># transport.tcpMuxKeepaliveInterval = 60</span><br><br><span class=\"hljs-comment\"># tcpKeepalive specifies the interval between keep-alive probes for an active network connection between frpc and frps.</span><br><span class=\"hljs-comment\"># If negative, keep-alive probes are disabled.</span><br><span class=\"hljs-comment\"># transport.tcpKeepalive = 7200</span><br><br><span class=\"hljs-comment\"># transport.tls.force specifies whether to only accept TLS-encrypted connections. By default, the value is false.</span><br><span class=\"hljs-attr\">transport.tls.force</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># transport.tls.certFile = &quot;server.crt&quot;</span><br><span class=\"hljs-comment\"># transport.tls.keyFile = &quot;server.key&quot;</span><br><span class=\"hljs-comment\"># transport.tls.trustedCaFile = &quot;ca.crt&quot;</span><br><br><span class=\"hljs-comment\"># If you want to support virtual host, you must set the http port for listening (optional)</span><br><span class=\"hljs-comment\"># <span class=\"hljs-doctag\">Note:</span> http port and https port can be same with bindPort</span><br><span class=\"hljs-attr\">vhostHTTPPort</span> = <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">vhostHTTPSPort</span> = <span class=\"hljs-number\">443</span><br><br><span class=\"hljs-comment\"># Response header timeout(seconds) for vhost http server, default is 60s</span><br><span class=\"hljs-comment\"># vhostHTTPTimeout = 60</span><br><br><span class=\"hljs-comment\"># tcpmuxHTTPConnectPort specifies the port that the server listens for TCP</span><br><span class=\"hljs-comment\"># HTTP CONNECT requests. If the value is 0, the server will not multiplex TCP</span><br><span class=\"hljs-comment\"># requests on one single port. If it&#x27;s not - it will listen on this value for</span><br><span class=\"hljs-comment\"># HTTP CONNECT requests. By default, this value is 0.</span><br><span class=\"hljs-comment\"># tcpmuxHTTPConnectPort = 1337</span><br><br><span class=\"hljs-comment\"># If tcpmuxPassthrough is true, frps won&#x27;t do any update on traffic.</span><br><span class=\"hljs-comment\"># tcpmuxPassthrough = false</span><br><br><span class=\"hljs-comment\"># Configure the web server to enable the dashboard for frps.</span><br><span class=\"hljs-comment\"># dashboard is available only if webServer.port is set.</span><br><span class=\"hljs-attr\">webServer.addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span><br><span class=\"hljs-attr\">webServer.port</span> = <span class=\"hljs-number\">7500</span><br><span class=\"hljs-attr\">webServer.user</span> = <span class=\"hljs-string\">&quot;admin&quot;</span><br><span class=\"hljs-attr\">webServer.password</span> = <span class=\"hljs-string\">&quot;admin&quot;</span><br><span class=\"hljs-comment\"># webServer.tls.certFile = &quot;server.crt&quot;</span><br><span class=\"hljs-comment\"># webServer.tls.keyFile = &quot;server.key&quot;</span><br><span class=\"hljs-comment\"># dashboard assets directory(only for debug mode)</span><br><span class=\"hljs-comment\"># webServer.assetsDir = &quot;./static&quot;</span><br><br><span class=\"hljs-comment\"># Enable golang pprof handlers in dashboard listener.</span><br><span class=\"hljs-comment\"># Dashboard port must be set first</span><br><span class=\"hljs-attr\">webServer.pprofEnable</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># enablePrometheus will export prometheus metrics on webServer in /metrics api.</span><br><span class=\"hljs-attr\">enablePrometheus</span> = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># console or real logFile path like ./frps.log</span><br><span class=\"hljs-attr\">log.to</span> = <span class=\"hljs-string\">&quot;./frps.log&quot;</span><br><span class=\"hljs-comment\"># trace, debug, info, warn, error</span><br><span class=\"hljs-attr\">log.level</span> = <span class=\"hljs-string\">&quot;info&quot;</span><br><span class=\"hljs-attr\">log.maxDays</span> = <span class=\"hljs-number\">3</span><br><span class=\"hljs-comment\"># disable log colors when log.to is console, default is false</span><br><span class=\"hljs-attr\">log.disablePrintColor</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># DetailedErrorsToClient defines whether to send the specific error (with debug info) to frpc. By default, this value is true.</span><br><span class=\"hljs-attr\">detailedErrorsToClient</span> = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># auth.method specifies what authentication method to use authenticate frpc with frps.</span><br><span class=\"hljs-comment\"># If &quot;token&quot; is specified - token will be read into login message.</span><br><span class=\"hljs-comment\"># If &quot;oidc&quot; is specified - OIDC (Open ID Connect) token will be issued using OIDC settings. By default, this value is &quot;token&quot;.</span><br><span class=\"hljs-attr\">auth.method</span> = <span class=\"hljs-string\">&quot;token&quot;</span><br><br><span class=\"hljs-comment\"># auth.additionalScopes specifies additional scopes to include authentication information.</span><br><span class=\"hljs-comment\"># Optional values are HeartBeats, NewWorkConns.</span><br><span class=\"hljs-comment\"># auth.additionalScopes = [&quot;HeartBeats&quot;, &quot;NewWorkConns&quot;]</span><br><br><span class=\"hljs-comment\"># auth token</span><br><span class=\"hljs-attr\">auth.token</span> = <span class=\"hljs-string\">&quot;12345678&quot;</span><br><br><span class=\"hljs-comment\"># oidc issuer specifies the issuer to verify OIDC tokens with.</span><br><span class=\"hljs-attr\">auth.oidc.issuer</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><span class=\"hljs-comment\"># oidc audience specifies the audience OIDC tokens should contain when validated.</span><br><span class=\"hljs-attr\">auth.oidc.audience</span> = <span class=\"hljs-string\">&quot;&quot;</span><br><span class=\"hljs-comment\"># oidc skipExpiryCheck specifies whether to skip checking if the OIDC token is expired.</span><br><span class=\"hljs-attr\">auth.oidc.skipExpiryCheck</span> = <span class=\"hljs-literal\">false</span><br><span class=\"hljs-comment\"># oidc skipIssuerCheck specifies whether to skip checking if the OIDC token&#x27;s issuer claim matches the issuer specified in OidcIssuer.</span><br><span class=\"hljs-attr\">auth.oidc.skipIssuerCheck</span> = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># userConnTimeout specifies the maximum time to wait for a work connection.</span><br><span class=\"hljs-comment\"># userConnTimeout = 10</span><br><br><span class=\"hljs-comment\"># Only allow frpc to bind ports you list. By default, there won&#x27;t be any limit.</span><br><span class=\"hljs-attr\">allowPorts</span> = [<br>  &#123; start = <span class=\"hljs-number\">2000</span>, end = <span class=\"hljs-number\">3000</span> &#125;,<br>  &#123; single = <span class=\"hljs-number\">3001</span> &#125;,<br>  &#123; single = <span class=\"hljs-number\">3003</span> &#125;,<br>  &#123; start = <span class=\"hljs-number\">4000</span>, end = <span class=\"hljs-number\">50000</span> &#125;<br>]<br><br><span class=\"hljs-comment\"># Max ports can be used for each client, default value is 0 means no limit</span><br><span class=\"hljs-attr\">maxPortsPerClient</span> = <span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\"># If subDomainHost is not empty, you can set subdomain when type is http or https in frpc&#x27;s configure file</span><br><span class=\"hljs-comment\"># When subdomain is test, the host used by routing is test.frps.com</span><br><span class=\"hljs-attr\">subDomainHost</span> = <span class=\"hljs-string\">&quot;frps.com&quot;</span><br><br><span class=\"hljs-comment\"># custom 404 page for HTTP requests</span><br><span class=\"hljs-comment\"># custom404Page = &quot;/path/to/404.html&quot;</span><br><br><span class=\"hljs-comment\"># specify udp packet size, unit is byte. If not set, the default value is 1500.</span><br><span class=\"hljs-comment\"># This parameter should be same between client and server.</span><br><span class=\"hljs-comment\"># It affects the udp and sudp proxy.</span><br><span class=\"hljs-attr\">udpPacketSize</span> = <span class=\"hljs-number\">1500</span><br><br><span class=\"hljs-comment\"># Retention time for NAT hole punching strategy data.</span><br><span class=\"hljs-attr\">natholeAnalysisDataReserveHours</span> = <span class=\"hljs-number\">168</span><br><br><span class=\"hljs-comment\"># ssh tunnel gateway</span><br><span class=\"hljs-comment\"># If you want to enable this feature, the bindPort parameter is required, while others are optional.</span><br><span class=\"hljs-comment\"># By default, this feature is disabled. It will be enabled if bindPort is greater than 0.</span><br><span class=\"hljs-comment\"># sshTunnelGateway.bindPort = 2200</span><br><span class=\"hljs-comment\"># sshTunnelGateway.privateKeyFile = &quot;/home/frp-user/.ssh/id_rsa&quot;</span><br><span class=\"hljs-comment\"># sshTunnelGateway.autoGenPrivateKeyPath = &quot;&quot;</span><br><span class=\"hljs-comment\"># sshTunnelGateway.authorizedKeysFile = &quot;/home/frp-user/.ssh/authorized_keys&quot;</span><br><br><span class=\"hljs-section\">[[httpPlugins]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;user-manager&quot;</span><br><span class=\"hljs-attr\">addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1:9000&quot;</span><br><span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;/handler&quot;</span><br><span class=\"hljs-attr\">ops</span> = [<span class=\"hljs-string\">&quot;Login&quot;</span>]<br><br><span class=\"hljs-section\">[[httpPlugins]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;port-manager&quot;</span><br><span class=\"hljs-attr\">addr</span> = <span class=\"hljs-string\">&quot;127.0.0.1:9001&quot;</span><br><span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">&quot;/handler&quot;</span><br><span class=\"hljs-attr\">ops</span> = [<span class=\"hljs-string\">&quot;NewProxy&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"一个当前使用的配置参考\"><a href=\"#一个当前使用的配置参考\" class=\"headerlink\" title=\"一个当前使用的配置参考\"></a>一个当前使用的配置参考</h2><p>Frps</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># Server Addr</span><br><span class=\"hljs-attr\">bindAddr</span> = <span class=\"hljs-string\">&quot;x.x.x.x&quot;</span><br><span class=\"hljs-attr\">bindPort</span> = <span class=\"hljs-number\">32700</span><br><br><span class=\"hljs-attr\">vhostHTTPPort</span> = <span class=\"hljs-number\">32080</span><br><span class=\"hljs-attr\">vhostHTTPSPort</span> = <span class=\"hljs-number\">32443</span><br><br><span class=\"hljs-comment\"># Web Server</span><br><span class=\"hljs-comment\"># 监控网页</span><br><span class=\"hljs-attr\">webServer.addr</span> = <span class=\"hljs-string\">&quot;x.x.x.x&quot;</span><br><span class=\"hljs-attr\">webServer.port</span> = <span class=\"hljs-number\">32777</span><br><span class=\"hljs-attr\">webServer.user</span> = <span class=\"hljs-string\">&quot;user&quot;</span><br><span class=\"hljs-attr\">webServer.password</span> = <span class=\"hljs-string\">&quot;password&quot;</span><br><br><span class=\"hljs-comment\"># auth</span><br><span class=\"hljs-comment\"># 鉴权</span><br><span class=\"hljs-attr\">auth.method</span> = <span class=\"hljs-string\">&quot;token&quot;</span><br><span class=\"hljs-attr\">auth.additionalScopes</span> = [<span class=\"hljs-string\">&quot;NewWorkConns&quot;</span>]<br><span class=\"hljs-attr\">auth.token</span> = <span class=\"hljs-string\">&quot;password&quot;</span><br><br><span class=\"hljs-comment\"># allow port</span><br><span class=\"hljs-comment\"># 配置允许使用的端口范围</span><br><span class=\"hljs-attr\">allowPorts</span> = [<br>  &#123; start = <span class=\"hljs-number\">32005</span>, end = <span class=\"hljs-number\">32032</span> &#125;,<br>  &#123; single = <span class=\"hljs-number\">32064</span> &#125;<br>]<br><br><span class=\"hljs-comment\"># subdomain</span><br><span class=\"hljs-comment\"># 可以通过特定的子域名访问</span><br><span class=\"hljs-attr\">subdomainHost</span> = <span class=\"hljs-string\">&quot;x.xxx.top&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>Frpc</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># Server Addr</span><br><span class=\"hljs-attr\">serverAddr</span> = <span class=\"hljs-string\">&quot;x.x.x.x&quot;</span><br><span class=\"hljs-attr\">serverPort</span> = <span class=\"hljs-number\">32700</span><br><span class=\"hljs-comment\"># 用户名配置，避免proxies.name的重名</span><br><span class=\"hljs-attr\">user</span> = <span class=\"hljs-string\">&quot;pandora&quot;</span><br><span class=\"hljs-comment\"># 鉴权</span><br><span class=\"hljs-attr\">auth.method</span> = <span class=\"hljs-string\">&quot;token&quot;</span><br><span class=\"hljs-attr\">auth.token</span> = <span class=\"hljs-string\">&quot;password&quot;</span><br><br><span class=\"hljs-comment\"># tcp 代理</span><br><span class=\"hljs-section\">[[proxies]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;name&quot;</span><br><span class=\"hljs-attr\">type</span> = <span class=\"hljs-string\">&quot;tcp&quot;</span><br><span class=\"hljs-attr\">localIP</span> = <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span><br><span class=\"hljs-attr\">localPort</span> = <span class=\"hljs-number\">5000</span><br><span class=\"hljs-attr\">remotePort</span> = <span class=\"hljs-number\">32005</span><br><span class=\"hljs-comment\"># 加密</span><br><span class=\"hljs-attr\">transport.useEncryption</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">transport.useCompression</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">healthCheck.type</span> = <span class=\"hljs-string\">&quot;tcp&quot;</span><br><br><span class=\"hljs-comment\"># https 代理</span><br><span class=\"hljs-section\">[[proxies]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;nas_https&quot;</span><br><span class=\"hljs-attr\">type</span> = <span class=\"hljs-string\">&quot;https&quot;</span><br><span class=\"hljs-attr\">localIP</span> = <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span><br><span class=\"hljs-attr\">localPort</span> = <span class=\"hljs-number\">5001</span><br><span class=\"hljs-attr\">transport.useEncryption</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">transport.useCompression</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-comment\"># 域名配置</span><br><span class=\"hljs-attr\">customDomains</span> = [<span class=\"hljs-string\">&quot;a.x.xxx.top&quot;</span>]<br><br><span class=\"hljs-comment\"># p2p 打洞</span><br><span class=\"hljs-section\">[[proxies]]</span><br><span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;p2p_nas&quot;</span><br><span class=\"hljs-attr\">type</span> = <span class=\"hljs-string\">&quot;xtcp&quot;</span><br><span class=\"hljs-comment\"># 只有共享密钥 (secretKey) 与服务器端一致的用户才能访问该服务</span><br><span class=\"hljs-attr\">secretKey</span> = <span class=\"hljs-string\">&quot;password&quot;</span><br><span class=\"hljs-attr\">localIP</span> = <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span><br><span class=\"hljs-attr\">localPort</span> = <span class=\"hljs-number\">22</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n",
            "tags": [
                "frp"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/52f35219/",
            "url": "https://www.oikiou.top/2023/52f35219/",
            "title": "ProxmoxVE",
            "date_published": "2023-08-24T14:57:15.000Z",
            "content_html": "<h1 id=\"ProxmoxVE\"><a href=\"#ProxmoxVE\" class=\"headerlink\" title=\"ProxmoxVE\"></a>ProxmoxVE</h1><h2 id=\"一些前置知识\"><a href=\"#一些前置知识\" class=\"headerlink\" title=\"一些前置知识\"></a>一些前置知识</h2><h3 id=\"qcow2-raw-vmdk-磁盘格式的区别\"><a href=\"#qcow2-raw-vmdk-磁盘格式的区别\" class=\"headerlink\" title=\"qcow2 raw vmdk 磁盘格式的区别\"></a>qcow2 raw vmdk 磁盘格式的区别</h3><p>KVM 虚拟化中使用的镜像格式通常为 RAW 和 QCOW2 两种格式.</p>\n<blockquote>\n<h2 id=\"RAW-img\"><a href=\"#RAW-img\" class=\"headerlink\" title=\"RAW (img)\"></a>RAW (img)</h2><p>  RAW 的原意是「未被加工的」, 所以 RAW 格式镜像文件又被称为 <em>原始镜像</em> 或 <em>裸设备镜像</em>, 从这些称谓可以看出, RAW 格式镜像文件能够直接当作一个块设备, 以供 GuestOS 使用. 也就是说 KVM 的 GuestOS 可以直接从 RAW 镜像中启动, 就如 HostOS 直接从硬盘中启动一般.</p>\n<ul>\n<li>是一种裸设备格式，通常提供良好的性能。</li>\n<li>简单且原生，易于使用和转换到其他格式。</li>\n<li>支持直接挂载，可以作为文件系统使用。</li>\n<li>不支持快照、压缩或加密等高级功能。</li>\n<li>占用空间取决于实际使用的数据量，类似于物理磁盘。</li>\n</ul>\n<p>  <strong>块设备</strong>: IO 设备中的一类, 将信息存储在固定大小的块中, 并且每个块都有自己的地址, 常用的块设备有硬盘.</p>\n<p>  <strong>因为 RAW 镜像文件赤裸裸的特性带来了下列好处:</strong></p>\n<ul>\n<li>使用 dd 指令创建一个 File 就能够模拟 RAW 镜像文件</li>\n<li>性能较 QCOW2 要更高 (I&#x2F;O 效率更高25%左右)</li>\n<li>支持裸设备的原生特性, 例如: 直接挂载</li>\n<li>能够随意转换格式, 甚至作为其他两种格式转换时的中间格式</li>\n<li>能够使用 dd 指令来追加 RAW 镜像文件的空间</li>\n</ul>\n<p>  <strong>相对的, RAW 镜像文件也具有一个非常大的缺陷, 就是不支持快照.</strong> 所以才有了后来 QCOW 和 QCOW2 的发展.</p>\n<h2 id=\"QCOW2-QEMU-COW-2\"><a href=\"#QCOW2-QEMU-COW-2\" class=\"headerlink\" title=\"QCOW2 (QEMU-COW 2)\"></a>QCOW2 (QEMU-COW 2)</h2><p>  (摘自官方文档)QEMU copy-on-write format with a range of special features, including the ability to take multiple snapshots, smaller images on filesystems that don’t support sparse files, optional AES encryption, and optional zlib compression<br>  QEMU-COW 镜像文件具有一系列特性, 支持包括 <strong>多重快照</strong>(能够创建基于之前镜像的新镜像, 速度更快), <strong>占用更小的存储空间</strong>(不支持稀疏特性, 不会预先分配指定 Size 的存储空间), <strong>可选的 AES 加密方式</strong>, <strong>可选的 zlib 压缩方式</strong> 等功能.</p>\n<p>  QCOW2 镜像格式是 KVM-QEMU 支持的磁盘镜像格式之一, <strong>其表现形式为在一个系统文件中模拟一个具有一定 Size 的块设备.</strong></p>\n<ul>\n<li>支持快照功能，允许在不增加存储空间的前提下创建多个虚拟机状态的快照。</li>\n<li>支持压缩，可以减少存储空间的使用。</li>\n<li>支持加密，以保护虚拟机磁盘数据的安全性。</li>\n<li>支持Copy-on-Write，只有当数据被修改时才会占用新的存储空间。</li>\n<li>性能接近RAW格式，但提供了更多的高级功能。</li>\n</ul>\n<h2 id=\"VMDK-Virtual-Machine-Disk\"><a href=\"#VMDK-Virtual-Machine-Disk\" class=\"headerlink\" title=\"VMDK (Virtual Machine Disk)\"></a>VMDK (Virtual Machine Disk)</h2><ul>\n<li>主要由VMware使用，支持多种VMware产品。</li>\n<li>支持动态分配和固定大小的虚拟硬盘。</li>\n<li>与VMware的虚拟化环境紧密集成，提供了良好的性能和稳定性。</li>\n<li>支持快照功能，但与QCOW2的快照实现不同。</li>\n<li>通常不用于非VMware环境，与其他虚拟化平台的兼容性有限。</li>\n</ul>\n</blockquote>\n<h3 id=\"网卡怎么选-VirtIO-E1000-RTL8139\"><a href=\"#网卡怎么选-VirtIO-E1000-RTL8139\" class=\"headerlink\" title=\"网卡怎么选 VirtIO E1000 RTL8139\"></a>网卡怎么选 VirtIO E1000 RTL8139</h3><p>“<strong>RTL8139</strong>”（古董级别，性能较差，古老系统使用）速率可以达到100Mb&#x2F;s，这个网卡的兼容性最好。</p>\n<blockquote>\n<p>   这个网卡模式是qemu-kvm默认的模拟网卡类型，RTL8139是Realtek半导体公司的一个10&#x2F;100M网卡系列，是曾经非常流行（当然现在看来有点古老）且兼容性好的网卡，几乎所有的现代操作系统都对RTL8139网卡驱动的提供支持。</p>\n</blockquote>\n<p>“<strong>E1000</strong>”（水桶选手，千兆速率，各项都很均衡）速率可以达到1Gb&#x2F;s，这个网卡的兼容性较好。</p>\n<blockquote>\n<p>  提供Intel e1000系列的网卡模拟，纯的QEMU（非qemu-kvm）默认就是提供Intel e1000系列的虚拟网卡。</p>\n<p>  英特尔<code>e1000</code>甚至为相当古老和不知名的操作系统提供了驱动程序。但物理 e1000 网卡的硬件相当复杂，因此会因为需要对其进行仿真而产生一些开销。</p>\n</blockquote>\n<p>“<strong>VirtIO</strong>” （性能之王，兼容极差）速率可以达到10Gb&#x2F;s，这个网卡的兼容性最差，很多系统需要安装特定驱动才能使用。</p>\n<blockquote>\n<p>  是支持半虚拟化IO（virtio）的设备。</p>\n<p>  如果您在虚拟机内运行的内容都支持<code>virtio</code>，它可能会为您提供最佳性能，因为它允许虚拟机跳过大多数相关步骤模拟虚拟网卡并控制虚拟硬件，主机利用实际物理网卡的硬件功能，最大限度地提高虚拟机流量的效益。</p>\n<p>  VirtIO windows的驱动文件可以在这里下载：<a href=\"https://github.com/virtio-win/virtio-win-pkg-scripts\">https://github.com/virtio-win/virtio-win-pkg-scripts</a></p>\n<p>  <a href=\"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/\">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/</a></p>\n</blockquote>\n<h3 id=\"硬盘接口怎么选-IDE-SATA-SCSI-VirtIO\"><a href=\"#硬盘接口怎么选-IDE-SATA-SCSI-VirtIO\" class=\"headerlink\" title=\"硬盘接口怎么选 IDE SATA SCSI VirtIO\"></a>硬盘接口怎么选 IDE SATA SCSI VirtIO</h3><p>IDE 速度最差，兼容性较好，比较古老的接口了</p>\n<p>SATA 速度不错，兼容性也可以。</p>\n<p>SCSI （通常称为VirtIO SCSI ）</p>\n<p>VirtIO （通常称为VirtIO Block）</p>\n<blockquote>\n<p>  一般来说，不鼓励使用<code>IDE</code>或 ，<code>SATA</code>因为它们相对较慢。在其最佳实践指南中，Proxmox 建议使用 VirtIO SCSI，即<code>SCSI</code>连接到<code>VirtIO SCSI</code>控制器的总线（在最新的 Proxmox 版本上默认选择）。这是假设您在具有快速磁盘阵列的服务器上运行 Proxmox，稍后会详细介绍。</p>\n<p>  使用<code>SCSI</code>或<code>VirtIO</code>。差异可以忽略不计，但两者都远远优于<code>SATA</code>。Proxmox 建议使用，<code>SCSI</code>因为它更新且维护得更好。</p>\n<p>  <img src=\"/2023/52f35219/bus-types-table.png\" alt=\"img\"></p>\n<p>  <img src=\"/2023/52f35219/image-41.png\" alt=\"img\"></p>\n</blockquote>\n<p>即local-lvm对应&#x2F;dev&#x2F;pve&#x2F;data，&#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso</p>\n<p>默认存在local目录，对应&#x2F;var&#x2F;lib&#x2F;vz</p>\n<h2 id=\"一些教程\"><a href=\"#一些教程\" class=\"headerlink\" title=\"一些教程\"></a>一些教程</h2><p>PVE 安装 <a href=\"https://www.right.com.cn/forum/thread-8159418-1-1.html\">https://www.right.com.cn/forum/thread-8159418-1-1.html</a></p>\n<p>PVE 的群晖安装 <a href=\"https://post.smzdm.com/p/a8x84l27/\">https://post.smzdm.com/p/a8x84l27/</a></p>\n<p><a href=\"https://www.cnblogs.com/mokou/p/17042705.html\">https://www.cnblogs.com/mokou/p/17042705.html</a></p>\n<p><a href=\"https://post.smzdm.com/p/apv5xvk9/\">https://post.smzdm.com/p/apv5xvk9/</a></p>\n<p>群晖引导 <a href=\"https://github.com/fbelavenuto/arpl\">https://github.com/fbelavenuto/arpl</a></p>\n<p><a href=\"https://wp.gxnas.com/12245.html\">https://wp.gxnas.com/12245.html</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p> 准备工作</p>\n<ul>\n<li><p>确保符合安装软件的最低要求</p>\n<blockquote>\n<ul>\n<li>CPU: 64bit (Intel EMT64 or AMD64)</li>\n<li><a href=\"https://pve.proxmox.com/wiki/FAQ#Supported_CPU_chips\" title=\"FAQ\">Intel VT&#x2F;AMD-V capable CPU</a>&#x2F;Mainboard for KVM full virtualization support</li>\n<li>RAM: 1 GB RAM, plus additional RAM needed for guests</li>\n<li>Hard drive with at least 16 GiB of space, plus additional space needed for guests</li>\n<li>One network card (NIC)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>下载PVE的ISO镜像<br>  <a href=\"https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/\">https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/</a><br>  <a href=\"https://www.proxmox.com/downloads\">https://www.proxmox.com/downloads</a></p>\n</li>\n<li><p>准备一个u盘</p>\n</li>\n<li><p>将ISO写入u盘</p>\n<ul>\n<li>rufus</li>\n<li>Win32DiskImager</li>\n</ul>\n</li>\n<li><p>使电脑从u盘启动</p>\n</li>\n<li><p>重启设备，正式进入安装流程</p>\n</li>\n<li><p>这里有两种安装方式</p>\n<ul>\n<li>图形化界面安装 (Graphical)（首选，用户体验更佳，交互更简单）</li>\n<li>终端UI界面安装 (Terminal UI)（备选，兼容性强，遇到非常新、非常旧的cpu，第一种方法无法使用的情况下就可以选用这种方式）</li>\n</ul>\n</li>\n<li><p>硬盘格式</p>\n<ul>\n<li>这里有好几种硬盘格式可选。EXT4、XFS、ZFS 和 BTRFS。我只有一两个硬盘，数据相对不是特别的重要，就选默认的ext4了。<ul>\n<li>几种格式的对比。<ul>\n<li><a href=\"https://forum.proxmox.com/threads/choose-between-ext4-xfs-zfs-and-btrfs-why.135128/\">Choose between EXT4, XFS, ZFS and BTRFS ? Why ?</a></li>\n<li><a href=\"https://linux.cn/article-7083-1.html\">如何选择文件系统：EXT4、Btrfs 和 XFS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>系统将会自动安装，安装后会自动重启</p>\n</li>\n<li><p><code>ping</code>对应地址，重启后不久正常通信后即可访问<code>pve ip:8006</code>进入管理界面</p>\n</li>\n<li><p>重启后，PVE显示器也会提示管理地址。</p>\n</li>\n<li><p>至此安装结束</p>\n</li>\n<li><p>推荐安装完成后再安装上一个PVETools。参考下文。</p>\n</li>\n</ul>\n<h1 id=\"Cmd\"><a href=\"#Cmd\" class=\"headerlink\" title=\"Cmd\"></a>Cmd</h1><h2 id=\"虚拟机-操作指令\"><a href=\"#虚拟机-操作指令\" class=\"headerlink\" title=\"虚拟机 操作指令\"></a>虚拟机 操作指令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">取得虚拟机当前状态</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">pvesh get /nodes/&lt;节点<span class=\"hljs-built_in\">id</span>&gt;/qemu/&lt;虚拟机<span class=\"hljs-built_in\">id</span>&gt;/status/current</span><br>pvesh get /nodes/pve/qemu/107/status/current<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">关闭虚拟机</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">pvesh create /nodes/&lt;节点<span class=\"hljs-built_in\">id</span>&gt;/qemu/&lt;虚拟机<span class=\"hljs-built_in\">id</span>&gt;/status/stop</span><br>pvesh create /nodes/pve/qemu/107/status/stop<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动虚拟机</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">pvesh create /nodes/&lt;节点<span class=\"hljs-built_in\">id</span>&gt;/qemu/&lt;虚拟机<span class=\"hljs-built_in\">id</span>&gt;/status/start</span><br>pvesh create /nodes/pve/qemu/107/status/start<br><br><br><br><br><br>qm &lt;命令&gt; &lt;vmid&gt; [选项]<br>qm [create|set] &lt;vmid&gt;  # 创建虚拟机<br>    --memory  &lt;MBYTES&gt;    memory in MB (64 - 8192)<br>    --sockets &lt;N&gt;         set number of CPU sockets &lt;N&gt;<br>    --cores &lt;N&gt;           set cores per socket to &lt;N&gt;<br>    --ostype NAME         specify OS type<br>    --onboot [yes|no]     start at boot<br>    --keyboard XX         set vnc keyboard layout<br>    --cpuunits &lt;num&gt;      CPU weight for a VM<br>    --name &lt;text&gt;         set a name for the VM<br>    --description &lt;text&gt;  set VM description<br>    --boot [a|c|d|n]      specify boot order<br>    --bootdisk &lt;disk&gt;     enable booting from &lt;disk&gt;<br>    --acpi (yes|no)       enable/disable ACPI<br>    --kvm (yes|no)        enable/disable KVM<br>    --tdf (yes|no)        enable/disable time drift fix<br>    --localtime (yes|no)  set the RTC to local time<br>    --vga (gd5446|vesa)   specify VGA type<br>    --vlan[0-9u]          MODEL=XX:XX:XX:XX:XX:XX[,MODEL=YY:YY:YY:YY:YY:YY]<br>    --ide&lt;N&gt;              [volume=]volume,[,media=cdrom|disk]<br>                          [,cyls=c,heads=h,secs=s[,trans=t]]<br>                          [,cache=none|writethrough|writeback]<br>                          [,snapshot=on|off][,cache=on|off][,format=f]<br>                          [,werror=enospc|ignore|report|stop]<br>                          [,rerror=ignore|report|stop]<br>                          [,backup=no|yes]<br>    --ide&lt;N&gt; &lt;GBYTES&gt;     create new disk<br>    --ide&lt;N&gt; delete       remove drive - destroy image<br>    --ide&lt;N&gt; undef        remove drive - keep image<br>    --cdrom &lt;file&gt;        is an alias for --ide2 &lt;file&gt;,media=cdrom<br>    --scsi&lt;N&gt;             [volume=]volume,[,media=cdrom|disk]<br>                          [,cyls=c,heads=h,secs=s[,trans=t]]<br>                          [,snapshot=on|off][,format=f]<br>                          [,cache=none|writethrough|writeback]<br>                          [,werror=enospc|ignore|report|stop]<br>                          [,backup=no|yes]<br>    --scsi&lt;N&gt; &lt;GBYTES&gt;    create new disk<br>    --scsi&lt;N&gt; delete      remove drive - destroy image<br>    --scsi&lt;N&gt; undef       remove drive - keep image<br>    --virtio&lt;N&gt;           [volume=]volume,[,media=cdrom|disk]<br>                          [,cyls=c,heads=h,secs=s[,trans=t]]<br>                          [,snapshot=on|off][,format=f]<br>                          [,cache=none|writethrough|writeback]<br>                          [,werror=enospc|ignore|report|stop]<br>                          [,rerror=ignore|report|stop]<br>                          [,backup=no|yes]<br>    --virtio&lt;N&gt; &lt;GBYTES&gt;  create new disk<br>    --virtio&lt;N&gt; delete    remove drive - destroy image<br>    --virtio&lt;N&gt; undef     remove drive - keep image<br>    <br>qm monitor &lt;vmid&gt;         # 连接到虚拟机控制监视器<br>qm start &lt;vmid&gt;               # 启动实例<br>qm shutdown &lt;vmid&gt;      # 优雅停止实例 发送关机命令<br>qm wait &lt;vmid&gt; [time]   wait until vm is stopped<br>qm stop &lt;vmid&gt;               # 停止实例 强制停止<br>qm reset &lt;vmid&gt;              # 重启实例 相当于stop然后再start<br>qm suspend &lt;vmid&gt;        # 暂停实例<br>qm resume &lt;vmid&gt;         # 恢复实例<br>qm cad &lt;vmid&gt;               #发送按键 ctrl-alt-delete<br>qm destroy &lt;vmid&gt;        # 销毁实例（删除所有已使用/拥有的卷）<br>qm unlock &lt;vmid&gt;         # 清除迁移/备份锁<br>qm status &lt;vmid&gt;          # 显示实例状态<br>qm cdrom &lt;vmid&gt; [&lt;device&gt;] &lt;path&gt;  set cdrom path. &lt;device is ide2 by default&gt;<br>qm cdrom &lt;vmid&gt; [&lt;device&gt;] eject   eject cdrom<br>qm unlink &lt;vmid&gt; &lt;volume&gt;  delete unused disk images<br>qm vncproxy &lt;vmid&gt; &lt;ticket&gt;  open vnc proxy<br>qm vnc &lt;vmid&gt;           start (X11) vncviewer (experimental)<br>qm showcmd &lt;vmid&gt;     # 显示命令行（调试信息）<br>qm list                             # 列出所有虚拟机<br>qm startall                       # 启动所有虚拟机 当onboot=1时<br>qm stopall [timeout]       # 停止所有虚拟机（默认超时为3分钟）<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"集群-操作指令\"><a href=\"#集群-操作指令\" class=\"headerlink\" title=\"集群 操作指令\"></a>集群 操作指令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看集群资源状况</span><br>pvesh get /cluster/resources<br><br><br><br>pvesr list\t\t\t# 列出存储复制作业<br>ha-manager status   # 查看HA状态<br>pvecm nodes    \t\t# 查看集群节点<br>pvecm status    \t# 查看集群状态<br>pveperf<br>pve-firewall compile  \t# 查看防火墙规则<br>pve-firewall localnet  \t# 输出本地网络信息<br>pve-firewall restart    # 重启防火墙<br>pve-firewall stop      \t# 停止防火墙<br>pve-firewall start      # 启动防火墙<br><br><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"PVE-Tools-的安装\"><a href=\"#PVE-Tools-的安装\" class=\"headerlink\" title=\"PVE Tools 的安装\"></a>PVE Tools 的安装</h2><p>Github地址：<a href=\"https://github.com/ivanhao/pvetools\">https://github.com/ivanhao/pvetools</a></p>\n<h2 id=\"安装软件出现-401-Unauthorized\"><a href=\"#安装软件出现-401-Unauthorized\" class=\"headerlink\" title=\"安装软件出现 401  Unauthorized\"></a>安装软件出现 401  Unauthorized</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">E: Failed to fetch https:<span class=\"hljs-regexp\">//</span>enterprise.proxmox.com<span class=\"hljs-regexp\">/debian/</span>pve<span class=\"hljs-regexp\">/dists/</span>buster/InRelease  <span class=\"hljs-number\">401</span>  Unauthorized [IP: <span class=\"hljs-number\">212.224</span>.<span class=\"hljs-number\">123.70</span> <span class=\"hljs-number\">443</span>]<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在pve管理界面内，更新，存储库<ul>\n<li>将带<code>enterprise</code>字样的库禁用。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"apt-update-订阅库不可用的问题\"><a href=\"#apt-update-订阅库不可用的问题\" class=\"headerlink\" title=\"apt update 订阅库不可用的问题\"></a>apt update 订阅库不可用的问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Err:5 https://enterprise.proxmox.com/debian/ceph-quincy bookworm InRelease  401  Unauthorized [IP: 51.79.228.122 443]<br>Hit:6 http://security.debian.org bookworm-security InRelease<br>Reading package lists... Done<br>E: Failed to fetch https://enterprise.proxmox.com/debian/ceph-quincy/dists/bookworm/InRelease  401  Unauthorized [IP: 51.79.228.122 443]<br>E: The repository &#x27;https://enterprise.proxmox.com/debian/ceph-quincy bookworm In Release&#x27; is not signed.<br>N: Updating from such a repository can&#x27;t be done securely, and is therefore disa bled by default.<br>N: See apt-secure(8) manpage for repository creation and user configuration details.<br></code></pre></td></tr></table></figure>\n\n<p>The <strong>apt</strong> package manager on the fresh Proxmox host is configured to download packages from <strong>Enterprise Repository</strong> by default. You must have a paid subscription to use this repo. If you don’t have paid subscription you should switch to <strong>No-Subscription Repository</strong>.</p>\n<blockquote>\n<p>  新 Proxmox 主机上的 <strong>apt</strong> 包管理器默认配置为从 <strong>Enterprise Repository 企业存储库</strong> 下载包。 您必须付费订阅才能使用此存储库。 如果您没有付费订阅，您应该切换到<strong>No-Subscription Repository 无订阅存储库</strong>。</p>\n</blockquote>\n<p>Either delete <code>/etc/apt/sources.list.d/pve-enterprise.list</code> file or comment all lines in this file with <code>#</code>.</p>\n<p>Create new file <code>/etc/apt/sources.list.d/pve-no-subscription.list</code> with content:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">deb http://download.proxmox.com/debian/pve buster pve-no-subscription<br><br><span class=\"hljs-comment\"># PVE 8.0</span><br>deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription<br><span class=\"hljs-comment\"># 镜像源</span><br>deb http://mirrors.ustc.edu.cn/proxmox/debian/pve/ bookworm pve-no-subscription<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"apt-update-的时候-NO-PUBKEY-问题\"><a href=\"#apt-update-的时候-NO-PUBKEY-问题\" class=\"headerlink\" title=\"apt update 的时候 NO_PUBKEY 问题\"></a>apt update 的时候 NO_PUBKEY 问题</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 7BF2812E8A6E88E0<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shel\">apt-get install gnupg2 -y<br>wget http://download.proxmox.com/debian/key.asc <br>apt-key add key.asc<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"修改PVE的管理地址\"><a href=\"#修改PVE的管理地址\" class=\"headerlink\" title=\"修改PVE的管理地址\"></a>修改PVE的管理地址</h2><h3 id=\"无法进入web管理界面\"><a href=\"#无法进入web管理界面\" class=\"headerlink\" title=\"无法进入web管理界面\"></a>无法进入web管理界面</h3><ol>\n<li><p>编辑 interface 文件</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">vi /etc/network/<span class=\"hljs-built_in\">int</span>erfaces<br></code></pre></td></tr></table></figure>\n\n<p>通过键盘上下左右移动到address这行的IP地址，按一次i进入修改状态，修改为新的IP地址，如果需要网关则修改gateway这行，修改完成确认无误后按一次ESC键输入“:wq”回车保存退出。</p>\n</li>\n<li><p>修改显示</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vi <span class=\"hljs-regexp\">/etc/i</span>ssue<br></code></pre></td></tr></table></figure>\n\n<p>通过键盘上下左右移动到https:&#x2F;&#x2F;这行的IP地址，按一次i进入修改状态，修改为新的IP地址，端口8006不要改，修改完成确认无误后按一次ESC键输入“:wq”回车保存退出。</p>\n</li>\n<li><p>修改 hosts 文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vi <span class=\"hljs-regexp\">/etc/</span>hosts<br></code></pre></td></tr></table></figure>\n\n<p>通过键盘上下左右移动到第2行的IP地址，按一次i进入修改状态，修改为新的IP地址，修改完成确认无误后按一次ESC键输入“:wq”回车保存退出。</p>\n</li>\n<li><p><strong>reboot</strong>，重启PVE！</p>\n</li>\n</ol>\n<h3 id=\"可以进入web管理界面\"><a href=\"#可以进入web管理界面\" class=\"headerlink\" title=\"可以进入web管理界面\"></a>可以进入web管理界面</h3><p>如果是PVE版本大于等于6.1，则可以使用web管理页面的网络选项菜单中修改vmbr0的IP，修改完成后，点击应用配置生效即可。此操作无需重启服务器即可应用新IP。</p>\n<p><img src=\"/2023/52f35219/2983653-20221011173336293-1137047342.png\" alt=\"img\"></p>\n<p>修改显示的访问的链接地址。<br>重启后的提示语还是显示原来的https:&#x2F;&#x2F;旧IP:8006。这个要是以后忘了就容易出问题。可以更改&#x2F;etc&#x2F;hosts文件，也可以在web管理页面主机处修改，修改完记得保存。此操作修改完需要重启才可刷新显示提示语。</p>\n<p><img src=\"/2023/52f35219/2983653-20221011173352327-326543372.png\" alt=\"img\"></p>\n<h2 id=\"PVE-导入img磁盘文件-qm-importovf-qm-importovf\"><a href=\"#PVE-导入img磁盘文件-qm-importovf-qm-importovf\" class=\"headerlink\" title=\"PVE 导入img磁盘文件 qm importovf qm importovf\"></a>PVE 导入img磁盘文件 qm importovf qm importovf</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Create a new VM using parameters <span class=\"hljs-built_in\">read</span> from an OVF manifest</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">An <span class=\"hljs-built_in\">alias</span> <span class=\"hljs-keyword\">for</span> qm disk import.</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">          &lt;虚拟机ID&gt; &lt;清单&gt;      &lt;存储&gt; [选项]</span><br>qm importovf &lt;vmid&gt; &lt;manifest&gt; &lt;storage&gt; [OPTIONS]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br>qm importdisk 102 /var/lib/vz/template/iso/openwrt.img local-lvm<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"qemu-img-img转换为qcow2\"><a href=\"#qemu-img-img转换为qcow2\" class=\"headerlink\" title=\"qemu-img img转换为qcow2\"></a>qemu-img img转换为qcow2</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">转换</span><br>qemu-img convert -f raw -O qcow2 file.img tofile.qcow2<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">导入</span><br>qm importdisk 101 xxxfile.qcow2 local-lvm<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pvetools工具安装省电后无法睿频\"><a href=\"#pvetools工具安装省电后无法睿频\" class=\"headerlink\" title=\"pvetools工具安装省电后无法睿频\"></a>pvetools工具安装省电后无法睿频</h2><h2 id=\"自动调整运行频率\"><a href=\"#自动调整运行频率\" class=\"headerlink\" title=\"自动调整运行频率\"></a>自动调整运行频率</h2><p>网上有很多教程会修改<code>vi /etc/default/grub</code>文件，将<code>driver</code>改成<code>acpi-cpufreq</code>。</p>\n<p>我的CPU是J4125，在<code>intel_cpufreq</code>下也可以使用<code>conservative ondemand userspace powersave performance schedutil</code>这些模式。所有就没有去修改。</p>\n<p><a href=\"https://blog.51cto.com/picker/5020502\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br>apt-get install cpufrequtils<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看cpu当前信息</span><br>cpufreq-info<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看可以使用的模式</span><br>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">例如J4125这里会输出  conservative ondemand userspace powersave performance schedutil</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前运行的模式</span><br>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor<br></code></pre></td></tr></table></figure>\n\n\n\n<p>cpu运行自动配置文件<code>/etc/init.d/cpufrequtils</code></p>\n<ul>\n<li>这个文件在开机的时候会自动调用，自动运行<ul>\n<li>这个文件主要的内容就是运行<code>cpufreq-set</code>指令调整运行模式和频率</li>\n<li>这个文件会优先读取和使用<code>/etc/default/cpufrequtils</code>文件的内容</li>\n</ul>\n</li>\n<li>编辑这个文件<code>vi /etc/init.d/cpufrequtils</code><ul>\n<li>修改频率 模式 保存</li>\n</ul>\n</li>\n<li>重启</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\">## BEGIN INIT INFO</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Provides:       cpufrequtils</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Required-Start: <span class=\"hljs-variable\">$remote_fs</span> loadcpufreq</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Required-Stop:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Default-Start:  2 3 4 5</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Default-Stop:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Short-Description: <span class=\"hljs-built_in\">set</span> CPUFreq kernel parameters</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Description: utilities to deal with CPUFreq Linux</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">      kernel support</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\">## END INIT INFO</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"></span><br>DESC=&quot;CPUFreq Utilities&quot;<br><br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>CPUFREQ_SET=/usr/bin/cpufreq-set<br>CPUFREQ_INFO=/usr/bin/cpufreq-info<br>CPUFREQ_OPTIONS=&quot;&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">use lsb-base</span><br>. /lib/lsb/init-functions<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Which governor to use. Must be one of the governors listed <span class=\"hljs-keyword\">in</span>:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">  <span class=\"hljs-built_in\">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\"># and which limits to set. Both MIN_SPEED and MAX_SPEED must be values</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">listed <span class=\"hljs-keyword\">in</span>:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">  <span class=\"hljs-built_in\">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">a value of 0 <span class=\"hljs-keyword\">for</span> any of the two variables will disabling the use of</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">that <span class=\"hljs-built_in\">limit</span> variable.</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\"># WARNING: the correct kernel module must already be loaded or compiled in.</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\"># Set ENABLE to &quot;true&quot; to let the script run at boot time.</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\"># eg:   ENABLE=&quot;true&quot;</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">      GOVERNOR=<span class=\"hljs-string\">&quot;ondemand&quot;</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">      MAX_SPEED=1000</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">      MIN_SPEED=500</span><br><br>ENABLE=&quot;true&quot;<br>GOVERNOR=&quot;ondemand&quot;<br>MAX_SPEED=&quot;0&quot;<br>MIN_SPEED=&quot;0&quot;<br><br>check_governor_avail() &#123;<br>        info=&quot;/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors&quot;<br>        if [ -f $info ] &amp;&amp; grep -q &quot;\\&lt;$GOVERNOR\\&gt;&quot; $info ; then<br>                return 0;<br>        fi<br>        return 1;<br>&#125;<br><br>[ -x $CPUFREQ_SET ] || exit 0<br><br>if [ -f /etc/default/cpufrequtils ] ; then<br>        . /etc/default/cpufrequtils<br>fi<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-keyword\">if</span> not enabled <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">exit</span> gracefully</span><br>[ &quot;$ENABLE&quot; = &quot;true&quot; ] || exit 0<br><br>if [ -n &quot;$MAX_SPEED&quot; ] &amp;&amp; [ $MAX_SPEED != &quot;0&quot; ] ; then<br>        CPUFREQ_OPTIONS=&quot;$CPUFREQ_OPTIONS --max $MAX_SPEED&quot;<br>fi<br><br>if [ -n &quot;$MIN_SPEED&quot; ] &amp;&amp; [ $MIN_SPEED != &quot;0&quot; ] ; then<br>        CPUFREQ_OPTIONS=&quot;$CPUFREQ_OPTIONS --min $MIN_SPEED&quot;<br>fi<br><br>if [ -n &quot;$GOVERNOR&quot; ] ; then<br>        CPUFREQ_OPTIONS=&quot;$CPUFREQ_OPTIONS --governor $GOVERNOR&quot;<br>fi<br><br>CPUS=$(cat /proc/stat|sed -ne &#x27;s/^cpu\\([[:digit:]]\\+\\).*/\\1/p&#x27;)<br>RETVAL=0<br>case &quot;$1&quot; in<br>        start|force-reload|restart|reload)<br>                log_action_begin_msg &quot;$DESC: Setting $GOVERNOR CPUFreq governor&quot;<br>                if check_governor_avail ; then<br>                        for cpu in $CPUS ; do<br>                                log_action_cont_msg &quot;CPU$&#123;cpu&#125;&quot;<br>                                $CPUFREQ_SET --cpu $cpu $CPUFREQ_OPTIONS 2&gt;&amp;1 &gt; /dev/null || \\<br>                                        RETVAL=$?<br>                        done<br>                        log_action_end_msg $RETVAL &quot;&quot;<br>                else<br>                        log_action_cont_msg &quot;disabled, governor not available&quot;<br>                        log_action_end_msg $RETVAL<br>                fi<br>                ;;<br>        stop)<br>                ;;<br>        *)<br>                echo &quot;Usage: $0 &#123;start|stop|restart|reload|force-reload&#125;&quot;<br>                exit 1<br>esac<br><br>exit 0<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pve-合并local-lvm和local分区\"><a href=\"#pve-合并local-lvm和local分区\" class=\"headerlink\" title=\"pve 合并local-lvm和local分区\"></a>pve 合并local-lvm和local分区</h2><p><a href=\"https://blog.csdn.net/weixin_52960369/article/details/135450871\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">lsblk 查看一下分区结构</span> <br>lsblk<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">备份一下 虚拟机的磁盘文件。。。 这一步我没做。。。。。 悲剧了</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除 local-lvm 千万注意备份一下 pve/data/ 目录下的 disk 虚拟磁盘文件 PVE8.2.2我照着这么操作直接把磁盘文件给删掉了，我人都傻了。。。。。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">后面几个就是在删除磁盘文件</span><br>lvremove pve/data<br>Removing pool pve/data will remove 3 dependent volume(s). Proceed? [y/n]: y<br>Do you really want to remove active logical volume pve/vm-220-disk-0? [y/n]: y<br>  Logical volume &quot;vm-220-disk-0&quot; successfully removed.<br>Do you really want to remove active logical volume pve/vm-300-disk-0? [y/n]: y<br>  Logical volume &quot;vm-300-disk-0&quot; successfully removed.<br>Do you really want to remove active logical volume pve/vm-220-disk-1? [y/n]: y<br>  Logical volume &quot;vm-220-disk-1&quot; successfully removed.<br>Do you really want to remove active logical volume pve/data? [y/n]: y<br>  Logical volume &quot;data&quot; successfully removed.<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">扩展<span class=\"hljs-built_in\">local</span></span><br>lvextend -l +100%FREE -r pve/root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看状态</span><br>lsblk<br></code></pre></td></tr></table></figure>\n\n<p>在管理页面删除local-LVM<br><img src=\"/ProxmoxVE.assets/image-20240626174453544.png\"></p>\n<p>修改 local 的属性将local-lvm的功能加上去。</p>\n<h2 id=\"安装群晖\"><a href=\"#安装群晖\" class=\"headerlink\" title=\"安装群晖\"></a>安装群晖</h2><p><a href=\"https://post.smzdm.com/p/a2036n3n/\">参考</a></p>\n<ul>\n<li>创建虚拟机<ul>\n<li>操作系统<ul>\n<li>不需要使用介质</li>\n</ul>\n</li>\n<li>系统<ul>\n<li>机型，这里大部分教程推荐使用 <code>q35</code><ul>\n<li><code>q35</code>比默认的<code>i440fx</code>机型更新，性能更好</li>\n<li>也有人说<code>i440fx</code>兼容性更好，有些小bug在<code>i440fx</code>上不会出现。</li>\n</ul>\n</li>\n<li>其他默认即可</li>\n</ul>\n</li>\n<li>磁盘<ul>\n<li>这里需要注意群晖只支持<code>sata</code>，无法支持性能更强的<code>scsi</code>。</li>\n<li>后面将引导转换为磁盘的时候也需要注意接口要是<code>sata</code>的。</li>\n</ul>\n</li>\n<li>CPU<ul>\n<li>类型<ul>\n<li>host 代表使用和主机一样的CPU信息和架构（通用性差，性能更优）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内存</li>\n<li>网络<ul>\n<li>网络这里有些引导不支持<code>VirtlO</code>，就要要改为<code>E1000</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加引导<ul>\n<li>将引导<code>*.img</code>文件上传到PVE内</li>\n<li>使用 <code>qm importdisk</code> 指令导入img文件用作磁盘<ul>\n<li><a href=\"#PVE%20%E5%AF%BC%E5%85%A5img%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%20qm%20importovf%20qm%20importovf\">PVE 导入img磁盘文件 qm importovf qm importovf</a></li>\n</ul>\n</li>\n<li>将虚拟机内<code>未使用</code>的磁盘改为<code>sata</code>接口，并添加到虚拟机内</li>\n</ul>\n</li>\n<li>硬盘直通<ul>\n<li>。。。。。</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">args: -device &#x27;qemu-xhci,addr=0x18&#x27; -drive &#x27;id=synoboot,file=/root/synoboot.img,if=none,format=raw&#x27; -device &#x27;usb-storage,id=synoboot,drive=synoboot,bootindex=1&#x27;<br></code></pre></td></tr></table></figure>\n<p>关闭虚拟机，编辑虚拟机配置文件 &#x2F;etc&#x2F;pve&#x2F;qemu-server&#x2F;100.conf ，100是对应虚拟机ID，在顶部添加大佬的这一段代码，img路径改成对应的路径。改完后WebUI没有显示的，禁用掉其他启动项，直接启动虚拟机即可</p>\n<h2 id=\"硬盘直通\"><a href=\"#硬盘直通\" class=\"headerlink\" title=\"硬盘直通\"></a>硬盘直通</h2><p>参考资料：<br><a href=\"https://foxi.buduanwang.vip/virtualization/1754.html/\">Proxmox VE pve硬盘直通</a></p>\n<p>PVE的直通分为两种</p>\n<ul>\n<li>直通控制器（sata控制器、nvme控制器）<ul>\n<li>接近裸机性能，损耗非常低</li>\n<li>是一个物理磁盘，虚拟机可以获取真实硬盘信息，具有smart属性。</li>\n<li>磁盘由虚拟机管理，虚拟机可以获取磁盘控制权</li>\n<li><strong>要求PVE系统不能安装在控制器下属磁盘内</strong></li>\n</ul>\n</li>\n<li>直通单个硬盘或者分区<ul>\n<li>CPU性能越好，越接近裸机性能，损耗较低</li>\n<li>硬盘会在虚拟机内会认为是一个qemu-hdd</li>\n<li>磁盘由PVE管理</li>\n<li>限制<ul>\n<li>sata最大6个</li>\n<li>ide最大3个</li>\n<li>scsi最大128个</li>\n<li>virtio-blk最大32个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>列出当前的所有磁盘</strong><br>我们可以通过下面命令，列出当前的硬盘列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ls -la /dev/disk/by-id/|grep -v dm|grep -v lvm|grep -v part<br></code></pre></td></tr></table></figure>\n<p>nvme开头的是nvme硬盘，ata开头是走sata或者ata通道的设备。scsi是scsi设备-阵列卡raid或者是直通卡上的硬盘。</p>\n<h3 id=\"直通单个硬盘-分区\"><a href=\"#直通单个硬盘-分区\" class=\"headerlink\" title=\"直通单个硬盘&amp;分区\"></a>直通单个硬盘&amp;分区</h3><p>我们可以通过<code>qm set &lt;vmid&gt; --scsi[n] /dev/disk/by-id/xxxxxxx</code> 进行直通。<code>qm set &lt;vmid&gt; --delete scsi[n]</code>来取消直通。<br>vmid指的是虚拟机ID；–scsi[n]指的是接口（同样的还有scsi、sata、ide、virtio），n指的是端口号；&#x2F;dev….指的是需要直通的硬盘&amp;分区路径</p>\n<p>实例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">qm set 220 --sata1 /dev/disk/by-id/ata-Netac_SSD_512GB_AA20230802512G645320<br><br>qm set 101 --scsi1 /dev/disk/by-id/nvme-INTEL_SSDPE2KX020T8_BTLJ039307142P0BGN<br><br></code></pre></td></tr></table></figure>\n<p>建议为scsi设备，这样性能理论上是最优秀的。</p>\n<p><code>qm help set</code> 可以获取帮助信息。</p>\n<h3 id=\"直通控制器\"><a href=\"#直通控制器\" class=\"headerlink\" title=\"直通控制器\"></a>直通控制器</h3><p>磁盘控制器直通之后，虚拟机可以获得全部的磁盘属性。</p>\n<p>需要注意的是，你需要多个磁盘控制器，且Proxmox VE系统安装在非需要直通的硬盘控制器上，否则会将系统直通给虚拟机，导致系统崩溃。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看PCI控制器</span><br>lspci<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看硬盘分布情况</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">有pve-root的，便是pve所在的硬盘</span><br>lsblk<br><br>ls -la /sys/dev/block/|grep -v loop |grep -v dm<br></code></pre></td></tr></table></figure>\n\n<p>需要按照这个教程开启硬件直通功能<br><a href=\"https://foxi.buduanwang.vip/virtualization/pve/561.html/\">https://foxi.buduanwang.vip/virtualization/pve/561.html/</a></p>\n<p>开启后在控制面板直接添加PCI设备即可。<br><img src=\"/2023/52f35219/image-20240729150809676.png\"><br><img src=\"/2023/52f35219/image-20240729150802776.png\"></p>\n",
            "tags": [
                "pve",
                "virtual"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-30T02:23:15.000Z",
            "content_html": "<h1 id=\"LVGL\"><a href=\"#LVGL\" class=\"headerlink\" title=\"LVGL\"></a>LVGL</h1><p>Github：<a href=\"https://github.com/lvgl/lvgl/\">https://github.com/lvgl/lvgl/</a></p>\n<p>LVGL：<a href=\"https://lvgl.io/\">https://lvgl.io/</a></p>\n<p>LVGL（轻巧多功能图形库）是一个免费的开源图形库，提供创建具有易于使用的图形元素、精美的视觉效果和低内存占用的嵌入式 GUI 所需的一切。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>丰富且强大的模块化<a href=\"https://docs.lvgl.io/master/widgets/index.html\">图形组件</a>：按钮 (buttons)、图表 (charts)、列表 (lists)、滑动条 (sliders)、图片 (images) 等</li>\n<li>高级的图形引擎：动画、抗锯齿、透明度、平滑滚动、图层混合等效果</li>\n<li>支持多种<a href=\"https://docs.lvgl.io/master/overview/indev.html\">输入设备</a>：触摸屏、 键盘、编码器、按键等</li>\n<li>支持<a href=\"https://docs.lvgl.io/master/overview/display.html\">多显示设备</a></li>\n<li>不依赖特定的硬件平台，可以在任何显示屏上运行</li>\n<li>配置可裁剪（最低资源占用：64 kB Flash，16 kB RAM）</li>\n<li>基于UTF-8的多语种支持，例如中文、日文、韩文、阿拉伯文等</li>\n<li>可以通过<a href=\"https://docs.lvgl.io/master/overview/style.html\">类CSS</a>的方式来设计、布局图形界面（例如：<a href=\"https://docs.lvgl.io/master/layouts/flex.html\">Flexbox</a>、<a href=\"https://docs.lvgl.io/master/layouts/grid.html\">Grid</a>）</li>\n<li>支持操作系统、外置内存、以及硬件加速（LVGL已内建支持STM32 DMA2D、SWM341 DMA2D、NXP PXP和VGLite）</li>\n<li>即便仅有<a href=\"https://docs.lvgl.io/master/porting/display.html\">单缓冲区(frame buffer)</a>的情况下，也可保证渲染如丝般顺滑</li>\n<li>全部由C编写完成，并支持C++调用</li>\n<li>支持Micropython编程，参见：<a href=\"https://blog.lvgl.io/2019-02-20/micropython-bindings\">LVGL API in Micropython</a></li>\n<li>支持<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>仿真，可以无硬件依托进行开发</li>\n<li>丰富详实的<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>详尽的<a href=\"http://docs.lvgl.io/\">文档</a>以及API参考手册，可线上查阅或可下载为PDF格式</li>\n</ul>\n<h3 id=\"硬件要求\"><a href=\"#硬件要求\" class=\"headerlink\" title=\"硬件要求\"></a>硬件要求</h3><table>\n<thead>\n<tr>\n<th><strong>要求</strong></th>\n<th><strong>最低要求</strong></th>\n<th><strong>建议要求</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>架构</strong></td>\n<td>16、32、64位微控制器或微处理器</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>时钟</strong></td>\n<td>&gt; 16 MHz</td>\n<td>&gt; 48 MHz</td>\n</tr>\n<tr>\n<td><strong>Flash&#x2F;ROM</strong></td>\n<td>&gt; 64 kB</td>\n<td>&gt; 180 kB</td>\n</tr>\n<tr>\n<td><strong>Static RAM</strong></td>\n<td>&gt; 16 kB</td>\n<td>&gt; 48 kB</td>\n</tr>\n<tr>\n<td><strong>Draw buffer</strong></td>\n<td>&gt; 1 × <em>hor. res.</em> pixels</td>\n<td>&gt; 1&#x2F;10屏幕大小</td>\n</tr>\n<tr>\n<td><strong>编译器</strong></td>\n<td>C99或更新</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><em>注意：资源占用情况与具体硬件平台、编译器等因素有关，上表中仅给出参考值</em></p>\n<h1 id=\"如何入门\"><a href=\"#如何入门\" class=\"headerlink\" title=\"如何入门\"></a>如何入门</h1><p>请按照如下顺序来学习LVGL：</p>\n<ol>\n<li>使用<a href=\"https://lvgl.io/demos\">网页在线例程</a>来体验LVGL</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/intro/index.html\">简介</a>章节来初步了解LVGL</li>\n<li>再来阅读一下文档快速<a href=\"https://docs.lvgl.io/master/get-started/quick-overview.html\">快速概览</a>章节来了解LVGL的基本知识</li>\n<li>学习如何使用<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>来在电脑上仿真LVGL</li>\n<li>试着动手实践一些<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>参考<a href=\"https://docs.lvgl.io/master/porting/index.html\">移植指南</a>尝试将LVGL移植到一块开发板上，LVGL也已经提供了一些移植好的<a href=\"https://github.com/lvgl?q=lv_port_\">工程</a></li>\n<li>仔细阅读文档<a href=\"https://docs.lvgl.io/master/overview/index.html\">总览</a>章节来更加深入的了解和熟悉LVGL</li>\n<li>浏览文档<a href=\"https://docs.lvgl.io/master/widgets/index.html\">组件(Widgets)</a>章节来了解如何使用它们</li>\n<li>如果你有问题可以到LVGL<a href=\"http://forum.lvgl.io/\">论坛</a>提问</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/CONTRIBUTING.html\">如何向社区贡献</a>章节来看看你能帮LVGL社区做些什么，以促进LVGL软件质量的不断提高</li>\n</ol>\n<h1 id=\"模拟器入门\"><a href=\"#模拟器入门\" class=\"headerlink\" title=\"模拟器入门\"></a>模拟器入门</h1><p>您可以<strong>仅使用PC试用</strong>LVGL（即没有任何开发板）。LVGL将在PC上的模拟器环境中运行，任何人都可以编写和试验真正的LVGL应用程序。</p>\n<p>在PC上使用模拟器具有以下优点：</p>\n<ul>\n<li>硬件独立 - 编写代码，在PC上运行它，并在显示器上查看结果。</li>\n<li>跨平台 - 任何Windows，Linux或macOS系统都可以运行PC模拟器。</li>\n<li>可移植性 - 编写的代码是可移植的，这意味着您可以在迁移到嵌入式硬件时简单地复制它。</li>\n<li>易于验证 - 模拟器对于报告错误也非常有用，因为它为每个用户提供了一个通用平台。因此，最好在模拟器中重现错误并在<a href=\"https://forum.lvgl.io/\">论坛</a>中使用该代码片段。</li>\n</ul>\n<p><a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">PC 上的模拟器 — LVGL 文档</a></p>\n",
            "tags": [
                "linux",
                "cmake"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-29T13:57:15.000Z",
            "content_html": "<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>CMake是开源、跨平台的构建工具，可以让我们通过编写简单的配置文件去生成本地的Makefile，这个配置文件是<strong>独立于运行平台和编译器</strong>的，这样就不用亲自去编写Makefile了，而且配置文件可以直接拿到其它平台上使用，无需修改，非常方便。</p>\n<p><a href=\"https://blog.csdn.net/whahu1989/article/details/82078563\">Linux下CMake简明教程_linux中cmake_爱就是恒久忍耐的博客-CSDN博客</a></p>\n<h1 id=\"CMake-的安装\"><a href=\"#CMake-的安装\" class=\"headerlink\" title=\"CMake 的安装\"></a>CMake 的安装</h1><h2 id=\"Ubuntu下的安装\"><a href=\"#Ubuntu下的安装\" class=\"headerlink\" title=\"Ubuntu下的安装\"></a>Ubuntu下的安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install cmake</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cmake --version</span><br>cmake version 3.16.3<br>.....<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这样就安装好了</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CMake语法\"><a href=\"#CMake语法\" class=\"headerlink\" title=\"CMake语法\"></a>CMake语法</h1><h2 id=\"最简单的版本\"><a href=\"#最简单的版本\" class=\"headerlink\" title=\"最简单的版本\"></a>最简单的版本</h2><blockquote>\n<p>  环境：只有一个main.c的<code>hello world</code>文件，没有任何依赖。</p>\n</blockquote>\n<p>在<code>main.c</code>的同级目录下建立一个文件，文件名叫<code>CMakeFileLists.txt</code>，这个文件名不能变更，只能是这个形式。</p>\n<p>文件内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-comment\"># cmake的最低版本要求是2.8</span><br><span class=\"hljs-keyword\">cmake_minimum_required</span>(VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-comment\"># 工程名</span><br><span class=\"hljs-keyword\">project</span>(download)<br><br><span class=\"hljs-comment\"># 使用main.c这个源文件 生成elf文件 生成的文件名字叫main</span><br><span class=\"hljs-keyword\">add_executable</span>(main, main.c)<br></code></pre></td></tr></table></figure>\n\n<p>我们在当前目录（<code>main.c</code>和<code>CMakeFileLists.txt</code>的目录下）运行<code>cmake .</code>，含义就是在当前目录下执行cmake。执行成功后会生成<code>Makefils</code>以及一些cmake运行时自动生成的文件。</p>\n<p>这个时候我们使用命令<code>make</code>就可以看到正确编译了。</p>\n<h2 id=\"一个目录下的多个源文件\"><a href=\"#一个目录下的多个源文件\" class=\"headerlink\" title=\"一个目录下的多个源文件\"></a>一个目录下的多个源文件</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 当前目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span>(. SRC_LIST)<br><br><span class=\"hljs-comment\"># 在add_executable里调用SRC_LIST（注意调用变量时的写法）</span><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<p><code>aux_source_directory()</code>也存在弊端，它<strong>会把指定目录下的所有源文件都加进来</strong>，可能会加入一些我们不需要的文件，此时我们可以使用<strong>set命令</strong>去新建变量来存放需要的源文件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># set 命令设置变量存放源文件</span><br><span class=\"hljs-keyword\">set</span>( SRC_LIST<br>\t ./main.c<br>\t ./testFunc1.c<br>\t ./testFunc.c)<br><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不同目录下的多个源文件\"><a href=\"#不同目录下的多个源文件\" class=\"headerlink\" title=\"不同目录下的多个源文件\"></a>不同目录下的多个源文件</h2><blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 修改输出位置</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUT_PATH和PROJECT_SOURCE_DIR是CMake自带的预定义变量</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUTPUT_PATH ：目标二进制可执行文件的存放位置</span><br><span class=\"hljs-comment\"># PROJECT_SOURCE_DIR：工程的根目录</span><br><span class=\"hljs-keyword\">set</span> (EXECUTABLE_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class=\"hljs-comment\"># 当前src目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span> (src SRC_LIST)<br><br><span class=\"hljs-comment\"># 将include文件夹设定为头文件搜索路径</span><br><span class=\"hljs-comment\"># 该命令是用来向工程添加多个指定头文件的搜索路径，路径之间用空格分隔。</span><br><span class=\"hljs-keyword\">include_directories</span> (<span class=\"hljs-keyword\">include</span>)<br><br><span class=\"hljs-comment\"># 生成elf文件</span><br><span class=\"hljs-keyword\">add_executable</span> (main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"静态库和动态库的编译\"><a href=\"#静态库和动态库的编译\" class=\"headerlink\" title=\"静态库和动态库的编译\"></a>静态库和动态库的编译</h2><p>编译出动态库和静态库，然后等着让其它程序去使用。</p>\n<blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./lib<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">3.5</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-keyword\">set</span> (SRC_LIST <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/xxx.c)<br><br><span class=\"hljs-comment\"># 生成动态库或静态库</span><br><span class=\"hljs-comment\"># 第1个参数指定库的名字；</span><br><span class=\"hljs-comment\"># 第2个参数决定是动态还是静态，如果没有就默认静态；</span><br><span class=\"hljs-comment\"># 第3个参数指定生成库的源文件</span><br><span class=\"hljs-keyword\">add_library</span> (testFunc_shared SHARED <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><span class=\"hljs-keyword\">add_library</span> (testFunc_static STATIC <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><br><span class=\"hljs-comment\"># 设置最终生成的库的名称，还有其它功能，如设置库的版本号等等</span><br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_shared PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_static PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><br><span class=\"hljs-keyword\">set</span> (LIBRARY_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对库进行链接\"><a href=\"#对库进行链接\" class=\"headerlink\" title=\"对库进行链接\"></a>对库进行链接</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)<br><br><span class=\"hljs-keyword\">target_link_libraries</span> (main <span class=\"hljs-variable\">$&#123;TESTFUNC_LIB&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>find_library: 在指定目录下查找指定库，并把<strong>库的绝对路径</strong>存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是HINTS，第4个参数是路径，其它用法可以参考cmake文档</li>\n<li>target_link_libraries: 把目标文件与库文件进行链接</li>\n</ul>\n<p>ps：在lib目录下有testFunc的静态库和动态库，find_library(TESTFUNC_LIB testFunc …默认是查找动态库，如果想直接指定使用动态库还是静态库，可以写成find_library(TESTFUNC_LIB libtestFunc.so …或者find_library(TESTFUNC_LIB libtestFunc.a …</p>\n<p>ps： 查看elf文件使用了哪些库，可以使用readelf -d .&#x2F;xx来查看</p>\n<p>之前本节教程使用的是库查找方法是link_directories，但是很多读者反映运行时有问题，本人去官方文档上查了下，发现不建议使用了，推荐使用find_library或者find_package</p>\n<h2 id=\"添加编译选项\"><a href=\"#添加编译选项\" class=\"headerlink\" title=\"添加编译选项\"></a>添加编译选项</h2><p>有时编译程序时想添加一些编译选项，如-Wall，-std&#x3D;c++11等，就可以使用add_compile_options来进行操作。</p>\n<p><code>add_compile_options(-std=c++11 -Wall) </code></p>\n<h2 id=\"更加完善的目录结构及编译选项\"><a href=\"#更加完善的目录结构及编译选项\" class=\"headerlink\" title=\"更加完善的目录结构及编译选项\"></a>更加完善的目录结构及编译选项</h2><blockquote>\n<p>  文件结构</p>\n<p>  构建的时候我们需要先<code>cd build</code>，然后再<code>cmake ..</code>构建，最后<code>make -j8</code>编译即可。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">.<br>├── build<br>├── CMakeLists.txt<br>├── libzip<br>│   ├── ioapi.c<br>│   ├── ioapi.h<br>│   ├── unzip.c<br>│   └── unzip.h<br>├── main<br>│   └── curl_zip.c<br>├── tools<br>    └── log<br>        └── log.h<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cmake_minimum_required(VERSION 3.0)<br>project(curl_zip)<br><br>set(Target down)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置语言标准</span><br>set(CMAKE_C_STANDARD 11)<br>set(CMAKE_CXX_STANDARD 17)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为当前路径以及子目录的源文件加入由-D预编译定义</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_definitions(-DFOO -DDEBUG ...)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置C++编译参数(CMAKE_CXX_FLAGS是全局变量)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_FLAGS <span class=\"hljs-string\">&quot;-Wall std=c++11 -Wextra -fPIC -g&quot;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置指定的C++编译器版本是必须的，如果不设置，或者为OFF，则指定版本不可用时，会使用上一版本。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置编译器选项</span><br>add_compile_options(-O3 -Wall) <br><br><br>message(&quot;Target=&quot; $&#123;Target&#125;)<br>message(&quot;---------- Start building ----------&quot;)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置包含路径</span><br>include_directories(    $&#123;PROJECT_SOURCE_DIR&#125;/libzip<br>                        $&#123;PROJECT_SOURCE_DIR&#125;/tools/log<br>)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把xxx目录下所有源文件写入变量SRC_LIST</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/libzip           SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/src/curl         SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/main             SRC_LIST)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以SRC_LIST为源文件生成目标文件xxx</span><br><span class=\"hljs-meta prompt_\">add_executable($</span><span class=\"language-bash\">&#123;Target&#125; <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建库文件</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_library(&lt;name&gt; [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">目标文件链接的库</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">target_link_libraries() 总是指明 PRIVATE、PUBLIC 、INTERFACE</span><br>target_link_libraries( $&#123;Target&#125;<br>    pthread<br>    curl<br>    z<br>)<br><br>message(&quot;---------- Stop  building ----------&quot;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "linux",
                "cmake"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/efa34a49/",
            "url": "https://www.oikiou.top/2023/efa34a49/",
            "title": "speedtest.net 测速",
            "date_published": "2023-03-26T07:39:31.000Z",
            "content_html": "<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p>对于以前安装过<code>speedtest-cli</code>版本用户来说，需要先卸载原来的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install curl<br>curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash<br>sudo apt-get install speedtest<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Service-ID-List\"><a href=\"#Service-ID-List\" class=\"headerlink\" title=\"Service ID List\"></a>Service ID List</h1><p><a href=\"https://williamyaps.github.io/wlmjavascript/servercli.html\">Speedtest Server List (williamyaps.github.io)</a></p>\n<blockquote>\n<p>  我们可以在<code>www.speedtest.net</code>可以看到当前所选节点的ID，鼠标停留在当前节点名字上，浏览器会显示这个节点的链接，这个链接最后面的字段<code>id=xxxx</code>就是这个节点的ID。</p>\n</blockquote>\n<p>现在有很多节点已经不能用了，下面的是2023.3.26测试可用的。</p>\n<ul>\n<li>中国电信</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点位置</th>\n<th align=\"center\">服务器id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">上海</td>\n<td align=\"center\">3633</td>\n</tr>\n<tr>\n<td align=\"center\">广东广州5G</td>\n<td align=\"center\">27594</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>中国联通</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点位置</th>\n<th align=\"center\">服务器id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">上海</td>\n<td align=\"center\">24447</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>中国移动</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点位置</th>\n<th align=\"center\">服务器id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">浙江 杭州 5G</td>\n<td align=\"center\">54312</td>\n</tr>\n<tr>\n<td align=\"center\">北京</td>\n<td align=\"center\">25858</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其他</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>节点位置</th>\n<th>服务器id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>福州</td>\n<td>56354</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "speedtest",
                "tools"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/a2c49dae/",
            "url": "https://www.oikiou.top/2022/a2c49dae/",
            "title": "PowerShell",
            "date_published": "2022-12-19T12:48:05.000Z",
            "content_html": "<h1 id=\"PowerShell\"><a href=\"#PowerShell\" class=\"headerlink\" title=\"PowerShell\"></a>PowerShell</h1><h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"PowerShell-Oh-My-Posh-美化\"><a href=\"#PowerShell-Oh-My-Posh-美化\" class=\"headerlink\" title=\"PowerShell + Oh My Posh 美化\"></a>PowerShell + Oh My Posh 美化</h2><p><a href=\"https://www.edgeless.top/PowerShell%E7%BE%8E%E5%8C%96/\">参考 PowerShell美化</a></p>\n<h2 id=\"PowerShell-获取当前文件夹名称-仅获取当前文件夹名\"><a href=\"#PowerShell-获取当前文件夹名称-仅获取当前文件夹名\" class=\"headerlink\" title=\"PowerShell 获取当前文件夹名称 仅获取当前文件夹名\"></a>PowerShell 获取当前文件夹名称 仅获取当前文件夹名</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">(<span class=\"hljs-built_in\">get-item</span> .).name<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Powershell获取当前时间\"><a href=\"#Powershell获取当前时间\" class=\"headerlink\" title=\"Powershell获取当前时间\"></a>Powershell获取当前时间</h2><p><a href=\"http://www.splaybow.com/post/powershell-get-date.html\">参考 PowerShell使用Get-Date获取日期和时间</a></p>\n<p>在PowerShell中直接调用<code>Get-Date</code>，可以返回当前的日期和时间，包括年、月、日、时、分、秒。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-built_in\">PS</span> &gt; <span class=\"hljs-built_in\">Get-Date</span><br><span class=\"hljs-number\">2022</span>年<span class=\"hljs-number\">12</span>月<span class=\"hljs-number\">19</span>日 <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">28</span><br></code></pre></td></tr></table></figure>\n\n<p>使用<code>-Format</code>参数来获取<code>Get-Date</code>中的年、月、日、时、分、秒。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">yyyy 年<br>M    月<br>d    日<br>h    小时（12小时制）<br>H    小时（24小时制）<br>m    分钟<br>s    秒<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-built_in\">PS</span> &gt; <span class=\"hljs-built_in\">Get-Date</span> <span class=\"hljs-literal\">-Format</span> HH:mm:ss<br><span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">11</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Powershell-ANSI颜色\"><a href=\"#Powershell-ANSI颜色\" class=\"headerlink\" title=\"Powershell ANSI颜色\"></a>Powershell ANSI颜色</h2><p>参考:<br><a href=\"https://juejin.cn/post/6920241597846126599\">了解 ANSI 转义码的 color 设置</a><br><a href=\"https://zhuanlan.zhihu.com/p/570148970\">ANSI转义代码</a></p>\n<blockquote>\n<p>  To use one of the ANSI escape codes, we need a literal <a href=\"https://en.wikipedia.org/wiki/Escape_character#ASCII_escape_character\">ESC character</a>. This is octal 033, or decimal 27. In Bash, you would use <code>&quot;\\033&quot;</code> or <code>&quot;\\e&quot;</code>; There’s no direct equivalent sequence in PowerShell but you can instead embed an expression: <code>&quot;$([char]27)&quot;</code></p>\n<p>  PowerShell 中没有直接等效的序列，但您可以改为嵌入一个表达式：<code>&quot;$([char]27)&quot;</code>，也就是说要将<code>\\e</code>修改为<code>$([char]27)</code></p>\n<p>  例如<code>\\e[32;1m text \\e[0m</code> 修改为 <code>$([char]27)[32;1m text $([char]27)[0m</code></p>\n</blockquote>\n<p><strong>ANSI Escape code编码中有专门控制字符颜色的控制符，</strong>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">\\e[37;44;3;1m<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>\\e</code> 代表开始ANSI Escape code</li>\n<li><code>[</code> 代表转义序列开始符 CSI，Control Sequence Introducer</li>\n<li><code>37;44;4;1</code> 代表以<code>; </code>分隔的文本样式控制符，其中 37 代表文本前景色为白色，44代表背景为蓝色，3代表斜体，1代表加粗，<code>;</code>的数量不做限制</li>\n<li><code>m</code> 代表结束控制符序列</li>\n</ul>\n<h4 id=\"常用文本样式控制符\"><a href=\"#常用文本样式控制符\" class=\"headerlink\" title=\"常用文本样式控制符\"></a>常用文本样式控制符</h4><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>重置&#x2F;正常</td>\n<td>关闭所有属性。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>粗体或增加强度</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>弱化（降低强度）</td>\n<td>未广泛支持。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>斜体</td>\n<td>未广泛支持。有时视为反相显示。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>下划线</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>缓慢闪烁</td>\n<td>低于每分钟150次。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>快速闪烁</td>\n<td>MS-DOS ANSI.SYS；每分钟150以上；未广泛支持。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>反显</td>\n<td>前景色与背景色交换。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>隐藏</td>\n<td>未广泛支持。</td>\n</tr>\n<tr>\n<td>9</td>\n<td>划除</td>\n<td>字符清晰，但标记为删除。未广泛支持。</td>\n</tr>\n<tr>\n<td>10</td>\n<td>主要（默认）字体</td>\n<td></td>\n</tr>\n<tr>\n<td>11–19</td>\n<td>替代字体</td>\n<td>选择替代字体</td>\n</tr>\n<tr>\n<td>20</td>\n<td>尖角体</td>\n<td>几乎无支持。</td>\n</tr>\n<tr>\n<td>21</td>\n<td>关闭粗体或双下划线</td>\n<td>关闭粗体未广泛支持；双下划线几乎无支持。</td>\n</tr>\n<tr>\n<td>22</td>\n<td>正常颜色或强度</td>\n<td>不强不弱。</td>\n</tr>\n<tr>\n<td>23</td>\n<td>非斜体、非尖角体</td>\n<td></td>\n</tr>\n<tr>\n<td>24</td>\n<td>关闭下划线</td>\n<td>去掉单双下划线。</td>\n</tr>\n<tr>\n<td>25</td>\n<td>关闭闪烁</td>\n<td></td>\n</tr>\n<tr>\n<td>27</td>\n<td>关闭反显</td>\n<td></td>\n</tr>\n<tr>\n<td>28</td>\n<td>关闭隐藏</td>\n<td></td>\n</tr>\n<tr>\n<td>29</td>\n<td>关闭划除</td>\n<td></td>\n</tr>\n<tr>\n<td>30–37</td>\n<td>设置前景色</td>\n<td>参见下面的颜色表。</td>\n</tr>\n<tr>\n<td>38</td>\n<td>设置前景色</td>\n<td>下一个参数是5;n或2;r;g;b，见下。</td>\n</tr>\n<tr>\n<td>39</td>\n<td>默认前景色</td>\n<td>由具体实现定义（按照标准）。</td>\n</tr>\n<tr>\n<td>40–47</td>\n<td>设置背景色</td>\n<td>参见下面的颜色表。</td>\n</tr>\n<tr>\n<td>48</td>\n<td>设置背景色</td>\n<td>下一个参数是5;n或2;r;g;b，见下。</td>\n</tr>\n<tr>\n<td>49</td>\n<td>默认背景色</td>\n<td>由具体实现定义（按照标准）。</td>\n</tr>\n<tr>\n<td>51</td>\n<td>Framed</td>\n<td></td>\n</tr>\n<tr>\n<td>52</td>\n<td>Encircled</td>\n<td></td>\n</tr>\n<tr>\n<td>53</td>\n<td>上划线</td>\n<td></td>\n</tr>\n<tr>\n<td>54</td>\n<td>Not framed or encircled</td>\n<td></td>\n</tr>\n<tr>\n<td>55</td>\n<td>关闭上划线</td>\n<td></td>\n</tr>\n<tr>\n<td>60</td>\n<td>表意文字下划线或右边线</td>\n<td>几乎无支持。</td>\n</tr>\n<tr>\n<td>61</td>\n<td>表意文字双下划线或双右边线</td>\n<td></td>\n</tr>\n<tr>\n<td>62</td>\n<td>表意文字上划线或左边线</td>\n<td></td>\n</tr>\n<tr>\n<td>63</td>\n<td>表意文字双上划线或双左边线</td>\n<td></td>\n</tr>\n<tr>\n<td>64</td>\n<td>表意文字着重标志</td>\n<td></td>\n</tr>\n<tr>\n<td>65</td>\n<td>表意文字属性关闭</td>\n<td>重置60–64的所有效果。</td>\n</tr>\n<tr>\n<td>90–97</td>\n<td>设置明亮的前景色</td>\n<td>aixterm（非标准）。</td>\n</tr>\n<tr>\n<td>100–107</td>\n<td>设置明亮的背景色</td>\n<td>aixterm（非标准）。</td>\n</tr>\n</tbody></table>\n<p>颜色对照表</p>\n<p><img src=\"/PowerShell.assets/e9436bb4998a4fbf9bd5abbe74121ccdtplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp\" alt=\"3bit-color\"></p>\n<h2 id=\"Powershell-修改提示符的文字内容和颜色\"><a href=\"#Powershell-修改提示符的文字内容和颜色\" class=\"headerlink\" title=\"Powershell 修改提示符的文字内容和颜色\"></a>Powershell 修改提示符的文字内容和颜色</h2><p><a href=\"https://www.lfhacks.com/tech/powershell-prompt-customization/\">参考: Powershell 修改提示符的文字内容和颜色</a></p>\n<p><a href=\"https://blog.vvzero.com/2019/07/22/set-user-alias-for-windows-PowerShell/\">参考: 为 Windows PowerShell 设置 User Alias （命令别名）</a></p>\n<ol>\n<li><p>首先我们先找到Powershell的配置文件的路径, 我们输入命令<code>echo $profile</code>就能显示.</p>\n</li>\n<li><p>如果这个文件不存在, 我们输入命令<code>notepad $Profile</code>或者<code>code $Profile</code>去新建一个文件.</p>\n</li>\n<li><p>Powershell 有一个特殊的函数： <code>prompt</code> 函数，这个函数规定了提示符的内容和外观。</p>\n<p>我们可以利用下面的命令可以查看当前使用的 <code>prompt</code> 函数的内容：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">(<span class=\"hljs-built_in\">Get-Command</span> Prompt).ScriptBlock<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过 <code>prompt</code> 函数的返回值我们就能自定义提示符。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prompt</span></span> &#123;<br>  <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$</span>([char]27)[32m&quot;</span> + <span class=\"hljs-variable\">$</span>(<span class=\"hljs-built_in\">Get-Date</span> <span class=\"hljs-literal\">-Format</span> HH:mm:ss) + <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$</span>([char]27)[0m&quot;</span> +<br>  <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$</span>([char]27)[95m&quot;</span> + <span class=\"hljs-variable\">$</span>((<span class=\"hljs-built_in\">get-item</span> .).name) + <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$</span>([char]27)[0m&quot;</span> +<br>  <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$</span>([char]27)[33m&gt;<span class=\"hljs-variable\">$</span>([char]27)[0m&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  第一行 <code>Get-Date</code>获取当前系统的时间, <code>-Format</code>格式化使用<code>HH:mm:ss</code>的格式, 前后使用了ANSI颜色转义将前景色设置为深绿色</p>\n<p>  第二行 <code>(get-item .).name</code>获取了当前文件夹的名称, 并设置前景色为深紫色</p>\n<p>  第三行 输出一个深黄色的<code>&gt;</code>符号</p>\n</blockquote>\n</li>\n<li><p>输入 <code>. $Profile</code> 命令生效。(注意这里是大小写不敏感的)</p>\n</li>\n</ol>\n<h2 id=\"Powershell-起别名-User-Alias-命令别名\"><a href=\"#Powershell-起别名-User-Alias-命令别名\" class=\"headerlink\" title=\"Powershell 起别名(User Alias) 命令别名\"></a>Powershell 起别名(User Alias) 命令别名</h2><p><a href=\"https://blog.vvzero.com/2019/07/22/set-user-alias-for-windows-PowerShell/\">参考 为 Windows PowerShell 设置 User Alias （命令别名）</a></p>\n<blockquote>\n<p>  我们的思路就是将命令设置成为一个<code>function</code>, 运行这个<code>function</code>执行特定的指令即可.</p>\n</blockquote>\n<p>两个思路:</p>\n<ol>\n<li><p>使用<code>New-Alias</code>指令, 添加到Powershell的<code>$Profile</code>文件里面, 每次启动运行一次. 这个命令里面不能含有空格.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-alias?view=powershell-7.3\">参考 Microsoft的Powershell文档</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 此命令创建一个名为 List 的别名来表示 Get-ChildItem cmdlet。</span><br><span class=\"hljs-built_in\">New-Alias</span> <span class=\"hljs-literal\">-Name</span> <span class=\"hljs-string\">&quot;List&quot;</span> <span class=\"hljs-built_in\">Get-ChildItem</span><br><span class=\"hljs-comment\"># 为notepad++ 设置别名 np</span><br><span class=\"hljs-built_in\">New-Alias</span> <span class=\"hljs-literal\">-Name</span> <span class=\"hljs-string\">&quot;np&quot;</span> notepad++.exe<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>function</code>指令, 添加到Powershell的<code>$Profile</code>文件里面, 把指令当作<code>function</code>的名称来调用, 这样命令可以带有空格.</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 带参数的function</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">np</span>+</span> &#123;<br>    <span class=\"hljs-keyword\">param</span> (<br>        <span class=\"hljs-variable\">$ComputerName</span><br>    )<br>    notepad++.exe <span class=\"hljs-variable\">$ComputerName</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "ps",
                "powershell"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/6fb71d96/",
            "url": "https://www.oikiou.top/2022/6fb71d96/",
            "title": "单位换算",
            "date_published": "2022-11-01T14:57:15.000Z",
            "content_html": "<h1 id=\"单位换算\"><a href=\"#单位换算\" class=\"headerlink\" title=\"单位换算\"></a>单位换算</h1><h1 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">★ -----------------</span><br>1 km = 1000 m<br>1 m  = 100  cm<br>1 cm = 10   mm<br>1 mm = 1000 um<br><br>1    inch = 2.54 cm<br>1/10 inch = 2.54 mm<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">--------------------</span><br>1 km = 1000 m<br>1 m  = 10   dm<br>1 dm = 10   cm<br>1 cm = 10   mm<br>1 m  = 1000 mm<br>1 mm = 1000 um<br>1 um = 1000 nm<br>1 nm = 1000 pm <br>1 pm = 1000 fm<br>1 fm = 1000 am<br>...<br>1 inch              = 2.54 cm<br>1 cm                = 0.3937008 inch<br>...<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\">1 海里(nautical mile) = 1852 m = 1.852 km</span><br>1 km                = 0.5399568 海里(nautical mile)<br>...<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">英制长度单位</span><br>1 英里(mile)          = 1.609344 km<br>1 km                = 0.6213712 英里(mile)<br>...<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">天文学长度单位</span><br>1 光年                = 9.4653×10^12 km<br>1 天文单位 ≈ 1.496亿 千米<br>...<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">我国传统的长度单位</span><br>1 km                = 2 里<br>1 里                 = 150 丈 = 500 米<br>1 丈                 = 10尺<br>1 丈                 = 3.33米<br>1 尺                 = 3.33分米<br>1 m                 = 0.3 丈 = 3 尺 = 30 寸<br>1 cm                = 3 分 = 30 厘<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"时间单位\"><a href=\"#时间单位\" class=\"headerlink\" title=\"时间单位\"></a>时间单位</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">★ -----------------</span><br>1 s  = 1000 ms<br>1 ms = 1000 us<br>1 us = 1000 ns<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   -----------------</span><br>1 minute = 60 s<br>1 s  = 1000 ms<br>1 ms = 1000 us<br>1 us = 1000 ns<br>1 ns = 1000 ps<br><br>100年      = 1世纪<br>365.25天   = 1年<br>1平太阳日     = 24小时3分56.555秒<br>1恒星日      = 23小时56分4.091秒<br>1太阳年(回归年) = 365.2422天(= 365天5小时48分46秒)<br>1恒星年      = 365.2564天(= 365天6小时9分9.5秒)<br>1朔望月      = 29.5306天<br>1恒星月      = 27.3712天<br>1太阳年      = 12个朔望日 = 354.36天<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"速度\"><a href=\"#速度\" class=\"headerlink\" title=\"速度\"></a>速度</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">★ -----------------</span><br>1 m/s  = 3.6 km/h<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   -----------------</span><br>1 mph  = 1.609344 km/h<br>1 km/h = 0.6213712 mph<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"温度\"><a href=\"#温度\" class=\"headerlink\" title=\"温度\"></a>温度</h1><p>$$<br>℉ &#x3D; ℃ * (9&#x2F;5) + 32<br>$$</p>\n<p>$$<br>℃ &#x3D; (℉ - 32)*(5&#x2F;9)<br>$$</p>\n<p>$$<br>K &#x3D; ℃ + 273.15<br>$$</p>\n<p>$$<br>℃ &#x3D; K - 273.15<br>$$</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">25 ℃ = 298.15 K = 77 F<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"电容单位\"><a href=\"#电容单位\" class=\"headerlink\" title=\"电容单位\"></a>电容单位</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>1 F  = 1000 mF<br>1 mF = 1000 uF<br>1 uF = 1000 nF<br>1 nF = 1000 pF<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/6fb71d96/tutorials068_001_zh.gif\" alt=\"C\"></p>\n<ul>\n<li>数值中的<code>R</code>代表小数点<code>.</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标示</th>\n<th align=\"left\">电阻</th>\n<th align=\"left\">电容</th>\n<th align=\"left\">电感</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">120</td>\n<td align=\"left\">12Ω</td>\n<td align=\"left\">12pF</td>\n<td align=\"left\">12μH</td>\n</tr>\n<tr>\n<td align=\"left\">122</td>\n<td align=\"left\">1.2kΩ</td>\n<td align=\"left\">1.2nF</td>\n<td align=\"left\">1.2mH</td>\n</tr>\n<tr>\n<td align=\"left\">124</td>\n<td align=\"left\">120kΩ</td>\n<td align=\"left\">120nF</td>\n<td align=\"left\">120mH</td>\n</tr>\n<tr>\n<td align=\"left\">126</td>\n<td align=\"left\">12MΩ</td>\n<td align=\"left\">12μF</td>\n<td align=\"left\">12H</td>\n</tr>\n<tr>\n<td align=\"left\">R15</td>\n<td align=\"left\">0.15Ω</td>\n<td align=\"left\">0.15pF</td>\n<td align=\"left\">0.15μH</td>\n</tr>\n<tr>\n<td align=\"left\">1R5</td>\n<td align=\"left\">1.5Ω</td>\n<td align=\"left\">1.5pF</td>\n<td align=\"left\">1.5μH</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">误差符号</th>\n<th align=\"center\">误差</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ｆ</td>\n<td align=\"center\">±1％</td>\n</tr>\n<tr>\n<td align=\"center\">Ｇ</td>\n<td align=\"center\">±2％</td>\n</tr>\n<tr>\n<td align=\"center\">Ｊ</td>\n<td align=\"center\">±5％</td>\n</tr>\n<tr>\n<td align=\"center\">Ｋ</td>\n<td align=\"center\">±10％</td>\n</tr>\n<tr>\n<td align=\"center\">Ｍ</td>\n<td align=\"center\">±20％</td>\n</tr>\n<tr>\n<td align=\"center\">Ｚ</td>\n<td align=\"center\">80%,－20%</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "unit",
                "m",
                "cm",
                "mm",
                "s",
                "us"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/9d389561/",
            "url": "https://www.oikiou.top/2022/9d389561/",
            "title": "Tmux 终端复用器(Terminal Multiplexer)",
            "date_published": "2022-09-29T15:57:15.000Z",
            "content_html": "<h1 id=\"tmux-终端复用器-terminal-multiplexer\"><a href=\"#tmux-终端复用器-terminal-multiplexer\" class=\"headerlink\" title=\"tmux 终端复用器(terminal multiplexer)\"></a>tmux 终端复用器(terminal multiplexer)</h1><p>☆为重要内容</p>\n<h1 id=\"Tmux-简介\"><a href=\"#Tmux-简介\" class=\"headerlink\" title=\"Tmux 简介\"></a>Tmux 简介</h1><p>tmux 终端复用器(terminal multiplexer)</p>\n<h2 id=\"tmux-能干什么\"><a href=\"#tmux-能干什么\" class=\"headerlink\" title=\"tmux 能干什么\"></a>tmux 能干什么</h2><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> 。</p>\n<p>会话的一个重要特点是，窗口与其中启动的进程是<a href=\"https://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">连在一起</a>的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>\n<p>一个典型的例子就是，<a href=\"https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">SSH 登录</a>远程计算机，打开一个远程窗口执行一个命令例如<code>iperf3 -s</code>。这时，关掉SSH，会发现<code>iperf3</code>进程也被关掉了。这是因为<code>iperf3</code>属于SSH的子进程，SSH作为父进程，如果父进程关掉了，子进程也就关掉了。</p>\n<p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</p>\n<p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p>\n<blockquote>\n<ul>\n<li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li>\n<li>它可以让新窗口”接入”已经存在的会话。</li>\n<li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li>\n<li>它还支持窗口任意的垂直和水平拆分。</li>\n</ul>\n</blockquote>\n<p>类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。</p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><p>Tmux 一般需要自己安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Ubuntu 或 Debian</span><br>$ <span class=\"hljs-built_in\">sudo</span> apt-get install tmux<br><br><span class=\"hljs-comment\"># 启动</span><br>$ tmux<br><br><span class=\"hljs-comment\"># 退出</span><br>$ <span class=\"hljs-built_in\">exit</span><br></code></pre></td></tr></table></figure>\n\n<p>启动后底部<u>左边</u>是<strong>窗口</strong>信息（编号和名称），<u>右侧</u>是系统信息。</p>\n<p><img src=\"/2022/9d389561/image-20220929235001871.png\" alt=\"image-20220929235001871\"></p>\n<p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p>\n<h2 id=\"前缀键☆\"><a href=\"#前缀键☆\" class=\"headerlink\" title=\"前缀键☆\"></a><strong>前缀键</strong>☆</h2><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p>\n<p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p>\n<h2 id=\"会话-窗格-窗口-的概念☆\"><a href=\"#会话-窗格-窗口-的概念☆\" class=\"headerlink\" title=\"会话  窗格  窗口  的概念☆\"></a><strong>会话  窗格  窗口  的概念</strong>☆</h2><blockquote>\n<p>  会话 session<br>  窗口 windows<br>  窗格 pane</p>\n</blockquote>\n<ul>\n<li><code>tmux new</code>的是会话, 会话可以包括多个窗口, 窗口内可以有多个窗格</li>\n</ul>\n<ul>\n<li><code>tmux ls</code> 列出的是会话</li>\n</ul>\n<p><img src=\"/2022/9d389561/image-20220930003505311.png\" alt=\"image-20220930003505311\"></p>\n<h1 id=\"会话的管理\"><a href=\"#会话的管理\" class=\"headerlink\" title=\"会话的管理\"></a>会话的管理</h1><h2 id=\"快捷键☆\"><a href=\"#快捷键☆\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><p>下面是一些会话相关的快捷键。</p>\n<blockquote>\n<ul>\n<li><code>Ctrl+b d</code>：分离当前会话。</li>\n<li><code>Ctrl+b s</code>：列出所有会话。</li>\n<li><code>Ctrl+b $</code>：重命名当前会话。</li>\n</ul>\n</blockquote>\n<h2 id=\"3-1-new新建会话☆\"><a href=\"#3-1-new新建会话☆\" class=\"headerlink\" title=\"3.1 new新建会话☆\"></a>3.1 new新建会话☆</h2><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 直接新建一个</span><br>$ tmux<br><span class=\"hljs-comment\"># 新建并设置一个名字</span><br>$ tmux new -s &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令新建一个指定名称的会话。</p>\n<p>在<code>tmux</code>内应该是无法执行这个指令的, 需要分屏参考下面的窗格操作章节.</p>\n<h2 id=\"3-2-detach分离会话☆\"><a href=\"#3-2-detach分离会话☆\" class=\"headerlink\" title=\"3.2 detach分离会话☆\"></a>3.2 detach分离会话☆</h2><p>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux detach<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p>\n<p><code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux <span class=\"hljs-built_in\">ls</span><br><span class=\"hljs-comment\"># or</span><br>$ tmux list-session<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-3-attach接入会话☆\"><a href=\"#3-3-attach接入会话☆\" class=\"headerlink\" title=\"3.3 attach接入会话☆\"></a>3.3 attach接入会话☆</h2><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux attach -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux attach -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-4-kill-session杀死会话☆\"><a href=\"#3-4-kill-session杀死会话☆\" class=\"headerlink\" title=\"3.4 kill-session杀死会话☆\"></a>3.4 kill-session杀死会话☆</h2><p><code>tmux kill-session</code>命令用于杀死某个会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux kill-session -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux kill-session -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-5-切换会话\"><a href=\"#3-5-切换会话\" class=\"headerlink\" title=\"3.5 切换会话\"></a>3.5 切换会话</h2><p><code>tmux switch</code>命令用于切换会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux switch -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux switch -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-6-重命名会话\"><a href=\"#3-6-重命名会话\" class=\"headerlink\" title=\"3.6 重命名会话\"></a>3.6 重命名会话</h2><p><code>tmux rename-session</code>命令用于重命名会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux rename-session -t 0 &lt;new-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将0号会话重命名。</p>\n<h1 id=\"窗格操作\"><a href=\"#窗格操作\" class=\"headerlink\" title=\"窗格操作\"></a>窗格操作</h1><h2 id=\"快捷键☆-1\"><a href=\"#快捷键☆-1\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><blockquote>\n<ul>\n<li><code>Ctrl+b %</code>：划分左右两个窗格。☆</li>\n<li><code>Ctrl+b &quot;</code>：划分上下两个窗格。☆</li>\n<li><code>Ctrl+b &lt;arrow key&gt;</code>：光标切换到其他窗格。<code>&lt;arrow key&gt;</code>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键<code>↓</code>。☆</li>\n<li><code>Ctrl+b ;</code>：光标切换到上一个窗格。</li>\n<li><code>Ctrl+b o</code>：光标切换到下一个窗格。</li>\n<li><code>Ctrl+b &#123;</code>：当前窗格与上一个窗格交换位置。☆</li>\n<li><code>Ctrl+b &#125;</code>：当前窗格与下一个窗格交换位置。☆</li>\n<li><code>Ctrl+b Ctrl+o</code>：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</li>\n<li><code>Ctrl+b Alt+o</code>：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</li>\n<li><code>Ctrl+b x</code>：关闭当前窗格。☆</li>\n<li><code>Ctrl+b !</code>：将当前窗格拆分为一个独立窗口。</li>\n<li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li>\n<li><code>Ctrl+b Ctrl+&lt;arrow key&gt;</code>：按箭头方向调整窗格大小。☆</li>\n<li><code>Ctrl+b q</code>：显示窗格编号。</li>\n</ul>\n</blockquote>\n<h2 id=\"5-1-划分窗格\"><a href=\"#5-1-划分窗格\" class=\"headerlink\" title=\"5.1 划分窗格\"></a>5.1 划分窗格</h2><p><code>tmux split-window</code>命令用来划分窗格。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 划分上下两个窗格</span><br>$ tmux split-window<br><br><span class=\"hljs-comment\"># 划分左右两个窗格</span><br>$ tmux split-window -h<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"5-2-移动光标\"><a href=\"#5-2-移动光标\" class=\"headerlink\" title=\"5.2 移动光标\"></a>5.2 移动光标</h2><p><code>tmux select-pane</code>命令用来移动光标位置。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 光标切换到上方窗格</span><br>$ tmux select-pane -U<br><br><span class=\"hljs-comment\"># 光标切换到下方窗格</span><br>$ tmux select-pane -D<br><br><span class=\"hljs-comment\"># 光标切换到左边窗格</span><br>$ tmux select-pane -L<br><br><span class=\"hljs-comment\"># 光标切换到右边窗格</span><br>$ tmux select-pane -R<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"5-3-交换窗格位置\"><a href=\"#5-3-交换窗格位置\" class=\"headerlink\" title=\"5.3 交换窗格位置\"></a>5.3 交换窗格位置</h2><p><code>tmux swap-pane</code>命令用来交换窗格位置。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 当前窗格上移</span><br>$ tmux swap-pane -U<br><br><span class=\"hljs-comment\"># 当前窗格下移</span><br>$ tmux swap-pane -D<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"窗口管理\"><a href=\"#窗口管理\" class=\"headerlink\" title=\"窗口管理\"></a>窗口管理</h1><h2 id=\"快捷键☆-2\"><a href=\"#快捷键☆-2\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><p>下面是一些窗口操作的快捷键。</p>\n<blockquote>\n<ul>\n<li><code>Ctrl+b c</code>：创建一个新窗口，状态栏会显示多个窗口的信息。</li>\n<li><code>Ctrl+b p</code>：切换到上一个窗口（按照状态栏上的顺序）。</li>\n<li><code>Ctrl+b n</code>：切换到下一个窗口。</li>\n<li><code>Ctrl+b &lt;number&gt;</code>：切换到指定编号的窗口，其中的<code>&lt;number&gt;</code>是状态栏上的窗口编号。</li>\n<li><code>Ctrl+b w</code>：从列表中选择窗口。</li>\n<li><code>Ctrl+b ,</code>：窗口重命名。</li>\n</ul>\n</blockquote>\n<h2 id=\"6-1-新建窗口\"><a href=\"#6-1-新建窗口\" class=\"headerlink\" title=\"6.1 新建窗口\"></a>6.1 新建窗口</h2><p><code>tmux new-window</code>命令用来创建新窗口。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux new-window<br><br><span class=\"hljs-comment\"># 新建一个指定名称的窗口</span><br>$ tmux new-window -n &lt;window-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"6-2-切换窗口\"><a href=\"#6-2-切换窗口\" class=\"headerlink\" title=\"6.2 切换窗口\"></a>6.2 切换窗口</h2><p><code>tmux select-window</code>命令用来切换窗口。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 切换到指定编号的窗口</span><br>$ tmux select-window -t &lt;window-number&gt;<br><br><span class=\"hljs-comment\"># 切换到指定名称的窗口</span><br>$ tmux select-window -t &lt;window-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"6-3-重命名窗口\"><a href=\"#6-3-重命名窗口\" class=\"headerlink\" title=\"6.3 重命名窗口\"></a>6.3 重命名窗口</h2><p><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux rename-window &lt;new-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"一些其他的快捷键\"><a href=\"#一些其他的快捷键\" class=\"headerlink\" title=\"一些其他的快捷键\"></a>一些其他的快捷键</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 列出所有快捷键，及其对应的 Tmux 命令</span><br>$ tmux list-keys<br><br><span class=\"hljs-comment\"># 列出所有 Tmux 命令及其参数</span><br>$ tmux list-commands<br><br><span class=\"hljs-comment\"># 列出当前所有 Tmux 会话的信息</span><br>$ tmux info<br><br><span class=\"hljs-comment\"># 重新加载当前的 Tmux 配置</span><br>$ tmux source-file ~/.tmux.conf<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"开启鼠标支持\"><a href=\"#开启鼠标支持\" class=\"headerlink\" title=\"开启鼠标支持\"></a>开启鼠标支持</h2><p>tmux2 以上版本和 tmux2 以上版本有所不同</p>\n<blockquote>\n<p>  查看版本<code>tmux -V</code></p>\n<p>  注意大写</p>\n</blockquote>\n<h3 id=\"tmux2-以上\"><a href=\"#tmux2-以上\" class=\"headerlink\" title=\"tmux2 以上\"></a>tmux2 以上</h3><p><strong>写入配置文件</strong></p>\n<p>在<code>~/.tmux.conf</code>中加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Enable mouse mode (tmux 2.1 and above)</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># Mouse based copy</span><br>bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;reattach-to-user-namespace pbcopy&quot;</span><br>bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;reattach-to-user-namespace pbcopy&quot;</span> <br></code></pre></td></tr></table></figure>\n\n<p><strong>临时使用</strong></p>\n<p>按完前缀ctrl+B后，再按冒号：进入<code>命令行</code>模式，输入<code>set -g mouse on</code></p>\n<h3 id=\"tmux2-以下\"><a href=\"#tmux2-以下\" class=\"headerlink\" title=\"tmux2 以下\"></a>tmux2 以下</h3><p><strong>写入配置文件</strong></p>\n<p>在<code>~/.tmux.conf</code>中加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">setw -g mouse-resize-pane on<br>setw -g mouse-select-pane on<br>setw -g mouse-select-window on<br>setw -g mode-mouse on<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  这几行的作用分别是:<br>  开启用鼠标拖动调节pane的大小（拖动位置是pane之间的分隔线）<br>  开启用鼠标点击pane来激活该pane<br>  开启用鼠标点击来切换活动window（点击位置是状态栏的窗口名称）<br>  开启window&#x2F;pane里面的鼠标支持（也即可以用鼠标滚轮回滚显示窗口内容，此时还可以用鼠标选取文本）</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/\">A Quick and Easy Guide to tmux</a></li>\n<li><a href=\"https://danielmiessler.com/study/tmux/\">Tactical tmux: The 10 Most Important Commands</a></li>\n<li><a href=\"https://linuxize.com/post/getting-started-with-tmux/\">Getting started with Tmux</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/10/tmux.html\">阮一峰</a></li>\n</ul>\n",
            "tags": [
                "linux",
                "tmux"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/471570a6/",
            "url": "https://www.oikiou.top/2022/471570a6/",
            "title": "SpaceDesk手机用作电脑屏幕",
            "date_published": "2022-08-29T14:57:15.000Z",
            "content_html": "<h1 id=\"SpaceDesk\"><a href=\"#SpaceDesk\" class=\"headerlink\" title=\"SpaceDesk\"></a>SpaceDesk</h1><p>在windows主机上虚拟出一块屏幕, 通过网络传输到其他带屏设备上.</p>\n<ul>\n<li>投屏到手机支持触摸</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"https://www.spacedesk.net/\">https://www.spacedesk.net/</a></p>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"软件没有验证功能-不安全\"><a href=\"#软件没有验证功能-不安全\" class=\"headerlink\" title=\"软件没有验证功能(不安全)\"></a>软件没有验证功能(不安全)</h2><p>有一次在公司用手机客户端, 直接连接上了公司其他同事的电脑屏幕.</p>\n<p>公司的网络ip是dhcp的无法固定, 而且网络质量并不好, 所以我选择电脑开热点 手机连电脑热点.</p>\n<p>防火墙加规则,只允许热点网段的IP入站.</p>\n<p><img src=\"/2022/471570a6/image-20220811195054454.png\" alt=\"image-20220811195054454\"></p>\n<p><img src=\"/2022/471570a6/image-20220811194925793.png\" alt=\"image-20220811194925793\"></p>\n",
            "tags": [
                "windows",
                "spacedesk",
                "投屏"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/fd90dc4c/",
            "url": "https://www.oikiou.top/2022/fd90dc4c/",
            "title": "使用Jlink 烧写SPI Flash存储芯片",
            "date_published": "2022-08-26T15:23:05.000Z",
            "content_html": "<h1 id=\"使用Jlink-烧写SPI-Flash存储芯片\"><a href=\"#使用Jlink-烧写SPI-Flash存储芯片\" class=\"headerlink\" title=\"使用Jlink 烧写SPI Flash存储芯片\"></a>使用Jlink 烧写SPI Flash存储芯片</h1><p>参考:</p>\n<p><a href=\"https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/\">https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/</a></p>\n<h1 id=\"硬件连接\"><a href=\"#硬件连接\" class=\"headerlink\" title=\"硬件连接\"></a>硬件连接</h1><h2 id=\"SPI-Single\"><a href=\"#SPI-Single\" class=\"headerlink\" title=\"SPI &amp; Single\"></a>SPI &amp; Single</h2><p><img src=\"/2022/fd90dc4c/formatpng.png\" alt=\"img\"></p>\n<p><img src=\"/2022/fd90dc4c/pinout-spi-20-pin.gif\" alt=\"引出线 spi 20 针\"></p>\n<h2 id=\"QSPI-Quad\"><a href=\"#QSPI-Quad\" class=\"headerlink\" title=\"QSPI &amp; Quad\"></a>QSPI &amp; Quad</h2><p><img src=\"/2022/fd90dc4c/pinout-qspi-20-pin.png\" alt=\"img\"></p>\n<blockquote>\n<p>  注意:</p>\n<p>  这里要注意的一点，正版的Jlink仿真器1脚是输入引脚，是外部提供参考电平的，但由于现在大部分的JLink仿真器都是学习(dao)版的，1脚不是输入，而是3.3v的输出(并不确定也有可能是5V的, 盗版的Jlink真的是什么乱七八糟的都有)，所以正常情况下可以直接用这个管教来给SPI Flash供电。</p>\n<p>  <strong>关于 nRESET 的注意事项</strong>：如果有另一个设备&#x2F;外围设备也控制 SPI 闪存（例如闪存连接到的 CPU），则 J-Link 的 nRESET 应连接到目标系统的复位或 CPU 的复位引脚确保 J-Link 可以在对 SPI 闪存进行编程时保持 CPU 处于复位状态。</p>\n<p>  <strong>一开始没注意到这个功能, 现在回过头来再看, 有这个功能之后烧芯片简直不要太简单, 根本不需要拆芯片了, 直接用芯片夹就可以烧录了.</strong></p>\n</blockquote>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>安装Jlink套件的时候会自带<code>JFlashSPI.exe</code>在开始菜单名称应该类似<code>J-Flash SPI</code>, 这是J-Flash的GUI程序,还有一个命令行的不多做介绍.</p>\n<blockquote>\n<p>  如果没有找到自带的, 请更新Jlink套件, 旧版确实不带这个东西.</p>\n<p>  Segger Jlink套件下载链接 <a href=\"https://www.segger.com/downloads/jlink/\">https://www.segger.com/downloads/jlink/</a></p>\n</blockquote>\n<p><img src=\"/2022/fd90dc4c/image-20220826224742256.png\" alt=\"image-20220826224742256\"></p>\n<p>点击<code>target -&gt; connet</code>连接到Jlink, 它会自动检测大部分SPI闪存, </p>\n<blockquote>\n<p>  有时候识别的具体型号并不准确, 但是这不重要他们参数类似, 可以正常完成编程的工作.</p>\n<p>  Jlink支持的SPI Flash型号可以在<a href=\"https://www.segger.com/products/debug-probes/j-link/technology/cpus-and-devices/supported-spi-flashes/\">点击这里</a>找到.</p>\n</blockquote>\n<p>点击<code>file -&gt; open data file </code>我们打开要烧录的文件.</p>\n<blockquote>\n<p>  bin 文件需要设定起始地址</p>\n<p>  hex文件自带了位置信息</p>\n</blockquote>\n<p>点击<code>target -&gt; auto</code>可以自动将文件烧录进去 还会进行读回校验.</p>\n<p>至此烧录完成.</p>\n<p><strong>Tips:</strong></p>\n<blockquote>\n<p>  点击<code>target -&gt; read back</code> 可以将SPI Flash内的数据读取出来<br>  点击<code>options -&gt; settings -&gt; setup -&gt; interface speed</code>可以修改时钟速度. </p>\n</blockquote>\n<p><strong>Other:</strong></p>\n<p>Jlink真的是超级牛的工具, J-Scope, RTT这些都很好用, 还有很多高级功能我还没用上.<br>我前面有写过RTT的笔记, 在调试一个项目的时候没法使用串口, 当时就是用RTT搭建了一个log平台.</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"winbood-W25Q128封装\"><a href=\"#winbood-W25Q128封装\" class=\"headerlink\" title=\"winbood W25Q128封装\"></a>winbood W25Q128封装</h2><p><img src=\"/2022/fd90dc4c/image-20220826104542006.png\" alt=\"image-20220826104542006\"></p>\n<p><img src=\"/2022/fd90dc4c/20210622091839750557.png\" alt=\"img\"></p>\n",
            "tags": [
                "flash",
                "spi",
                "j-link",
                "jlink",
                "j-tag"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/f96c3c41/",
            "url": "https://www.oikiou.top/2022/f96c3c41/",
            "title": "静态网页 静态博客",
            "date_published": "2022-08-21T14:57:15.000Z",
            "content_html": "<h1 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h1><h1 id=\"静态网页生成器\"><a href=\"#静态网页生成器\" class=\"headerlink\" title=\"静态网页生成器\"></a>静态网页生成器</h1><p><a href=\"https://jekyllrb.com/\">Jekyll</a>（由 Github 构建的用于为其 Github 页面提供支持的 Ruby 生成器）、</p>\n<p><a href=\"https://gohugo.io/\">Hugo</a>（构建在 Go 编程之上的极快静态生成器）语言）和</p>\n<p><a href=\"https://hexo.io/\">Hexo</a>（基于 Node.js 的快速网站生成器）。</p>\n<p><strong>参考</strong></p>\n<p><a href=\"https://www.techiediaries.com/jekyll-hugo-hexo/\">How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo</a></p>\n<p><a href=\"https://stackshare.io/stackups/hexo-vs-hugo-vs-jekyll\">StackShare</a></p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>TBD</p>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>TBD</p>\n<h2 id=\"Hugo\"><a href=\"#Hugo\" class=\"headerlink\" title=\"Hugo\"></a>Hugo</h2><p>TBD</p>\n<h1 id=\"Hexo-1\"><a href=\"#Hexo-1\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"Hexo-部署\"><a href=\"#Hexo-部署\" class=\"headerlink\" title=\"Hexo 部署\"></a>Hexo 部署</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">HEXO文档_参考链接</a></p>\n<p><strong>要求:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br></code></pre></td></tr></table></figure>\n\n<p>安装Node.js，windows下载安装包即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt update <br>sudo apt install nodejs<br>sudo apt install npm<br></code></pre></td></tr></table></figure>\n\n<p><strong>部署:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 全局安装</span><br>npm install hexo-cli -g<br><span class=\"hljs-comment\"># 或者 local 安装</span><br>npm install hexo-cli<br><br><span class=\"hljs-comment\"># 全局安装</span><br>hexo -v<br><span class=\"hljs-comment\"># local安装</span><br>npx hexo -v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-CMD\"><a href=\"#Hexo-CMD\" class=\"headerlink\" title=\"Hexo CMD\"></a>Hexo CMD</h2><h3 id=\"Init-初始化\"><a href=\"#Init-初始化\" class=\"headerlink\" title=\"Init 初始化\"></a>Init 初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo init [folder]<br></code></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h3 id=\"new-新建\"><a href=\"#new-新建\" class=\"headerlink\" title=\"new 新建\"></a>new 新建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo new [layout] &lt;title&gt;<br>hexo new <span class=\"hljs-string\">&quot;post title with whitespace&quot;</span><br>hexo new page --path about/me <span class=\"hljs-string\">&quot;About me&quot;</span><br>hexo new page -p     about/me <span class=\"hljs-string\">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<h3 id=\"generate-生成\"><a href=\"#generate-生成\" class=\"headerlink\" title=\"generate 生成\"></a>generate 生成</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成静态文件。</span><br>hexo generate<br><span class=\"hljs-comment\"># 该命令可以简写为</span><br>hexo g<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th></th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-d</td>\n<td>–deploy</td>\n<td align=\"left\"><strong>文件生成后立即部署网站</strong></td>\n</tr>\n<tr>\n<td align=\"left\">-w</td>\n<td>–watch</td>\n<td align=\"left\"><strong>监视文件变动</strong></td>\n</tr>\n<tr>\n<td align=\"left\">-b</td>\n<td>–bail</td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td>–force</td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，<br>如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br/>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\">-c</td>\n<td>–concurrency</td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<h3 id=\"publish-草稿\"><a href=\"#publish-草稿\" class=\"headerlink\" title=\"publish 草稿\"></a>publish 草稿</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">hexo publish [layout] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filename</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h3 id=\"server-服务器\"><a href=\"#server-服务器\" class=\"headerlink\" title=\"server 服务器\"></a>server 服务器</h3><p>在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">hexo <span class=\"hljs-keyword\">server</span><br>hexo s<br></code></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件(不会更新)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-i</code></td>\n<td align=\"left\"><code>hexo server -i 192.168.1.1</code> 指定监听的IP</td>\n</tr>\n</tbody></table>\n<h3 id=\"deploy-部署\"><a href=\"#deploy-部署\" class=\"headerlink\" title=\"deploy 部署\"></a>deploy 部署</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-comment\"># 部署网站。</span><br>hexo <span class=\"hljs-keyword\">deploy</span><br><span class=\"hljs-comment\"># 该命令可以简写为：</span><br>hexo d<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h3 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h3><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">hexo</span> migrate &lt;<span class=\"hljs-keyword\">type</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\">迁移内容</a>。</p>\n<h3 id=\"clean-清理\"><a href=\"#clean-清理\" class=\"headerlink\" title=\"clean 清理\"></a>clean 清理</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean<br></code></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo list &lt;<span class=\"hljs-keyword\">type</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"Hexo-Config-yml\"><a href=\"#Hexo-Config-yml\" class=\"headerlink\" title=\"Hexo _Config.yml\"></a>Hexo _Config.yml</h2><blockquote>\n<h3 id=\"Home-page-setting\"><a href=\"#Home-page-setting\" class=\"headerlink\" title=\"Home page setting\"></a>Home page setting</h3><p>  <code>index_generator.order_by</code>  文章的顺序</p>\n<ul>\n<li><code>-date</code> 默认情况下按日期降序排序(从新到旧)。</li>\n<li><code>-update</code> 按更新时间排序(<code>-</code> &#x3D; 从新到旧)。</li>\n</ul>\n</blockquote>\n<h1 id=\"Hexo-Theme\"><a href=\"#Hexo-Theme\" class=\"headerlink\" title=\"Hexo Theme\"></a>Hexo Theme</h1><p>我是直接在github搜索 <code>hexo theme</code>看到了几个 star 比较多而且比较活跃的 repository </p>\n<ul>\n<li><p><strong><a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a></strong> 5.5K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31.png\" alt=\"img\"></p>\n</li>\n<li><p><strong><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">fluid</a></strong> 4.8K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f666c7569642d6465762f737461746963406d61737465722f6865786f2d7468656d652d666c7569642f73637265656e73686f74732f696e6465782e706e67.png\" alt=\"ScreenShot\"></p>\n</li>\n<li><p><a href=\"https://github.com/blinkfox/hexo-theme-matery\">matery</a>(blinkfox) 4.5K star</p>\n<p><img src=\"/2022/f96c3c41/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67.png\" alt=\"首页\"></p>\n<p><img src=\"/2022/f96c3c41/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67.png\" alt=\"首页文章列表\"></p>\n</li>\n<li><p><strong><a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a></strong> 4.3K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6a65727279633132372f43444e406d322f696d672f7468656d652d627574746572666c792d726561646d652e706e67.png\" alt=\"img\"></p>\n</li>\n<li><p><a href=\"https://github.com/volantis-x/hexo-theme-volantis\">volantis</a> 1.5k star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30332f31382f663550516c576973766d397a62674b2e6a7067.jpeg\" alt=\"img\"></p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30332f31382f585742476639354532743162646e6c2e6a7067.jpeg\" alt=\"img\"></p>\n</li>\n</ul>\n<p>其中 <code>fluid</code> 和 <code>volantis</code> 最对我胃口, 最后选择的 <code>fluid</code>, 后期可能会改成<code>volantis</code>或者<code>icarus</code>试试看, 主要是喜欢简洁些, 又能有一定的观赏性的.</p>\n<h2 id=\"Fluid\"><a href=\"#Fluid\" class=\"headerlink\" title=\"Fluid\"></a>Fluid</h2><p>参考文档</p>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></p>\n<p>theme 的 Github</p>\n<p><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">https://github.com/fluid-dev/hexo-theme-fluid</a></p>\n<h3 id=\"自带的内置图标库\"><a href=\"#自带的内置图标库\" class=\"headerlink\" title=\"自带的内置图标库\"></a>自带的内置图标库</h3><p><a href=\"https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87\">内置社交图标</a> </p>\n<p><img src=\"/2022/f96c3c41/iconfont.f8319467.png\" alt=\"内置图标\"></p>\n<h1 id=\"Hexo-Note\"><a href=\"#Hexo-Note\" class=\"headerlink\" title=\"Hexo Note\"></a>Hexo Note</h1><h2 id=\"Hexo-Permalink简化\"><a href=\"#Hexo-Permalink简化\" class=\"headerlink\" title=\"Hexo Permalink简化\"></a>Hexo Permalink简化</h2><p>参考:</p>\n<p><a href=\"https://blog.csdn.net/Galahadzhou/article/details/105355733\">Hexo Permalink简化</a></p>\n<p>Note:</p>\n<p>使用<code>hexo-abbrlink</code>插件实现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># install</span><br>npm install hexo-abbrlink --save<br><span class=\"hljs-comment\"># setting edit _config.yml</span><br>permalink: posts/:abbrlink.html<br>abbrlink:<br>  alg: crc32  <span class=\"hljs-comment\"># 算法：crc16(default) and crc32</span><br>  rep: hex    <span class=\"hljs-comment\"># 进制：dec(default) and hex</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-图片链接问题\"><a href=\"#hexo-图片链接问题\" class=\"headerlink\" title=\"hexo 图片链接问题\"></a>hexo 图片链接问题</h2><p><strong><code>hexo</code>本地图片显示问题</strong></p>\n<p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p>\n<ol>\n<li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,在使用相对或绝对路径进行引用</li>\n<li>配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径. </li>\n<li>使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code> </li>\n<li>!new!. <code>hexo init</code>的时候会自动copy一个插件 <code>hexo-renderer-marked</code> 这个插件可以开启相对路径的支持,但是需要改一些代码</li>\n</ol>\n<p>但是在配置过程中发现这三种方式都多多少少存在一些问题,前两中首页跟内容页会有一个加载失败的问题,而第三种则失去了<code>markdown</code>的意义.</p>\n<p><strong>方法四:</strong></p>\n<p>官方手册上提到过, <a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexo-renderer-marked</a> 3.1.0已经开始支持相对路径了.但是可以看到它支持的路径似乎并不合理, 其他的md阅读器是不能识别这样的路径的.</p>\n<p><img src=\"/2022/f96c3c41/image-20220815153651988.png\" alt=\"image-20220815153651988\"></p>\n<p>参考: <a href=\"https://github.com/hexojs/hexo-renderer-marked/issues/216\">https://github.com/hexojs/hexo-renderer-marked/issues/216</a></p>\n<ol>\n<li><p>修改<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">marked:</span><br>  <span class=\"hljs-attr\">prependRoot:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">postAsset:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件<code>node_modules\\hexo-renderer-marked\\lib\\renderer.js</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^(#|\\/\\/|http(s)?:)/</span>.<span class=\"hljs-title function_\">test</span>(href) &amp;&amp; !relative_link &amp;&amp; prependRoot) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!href.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>) &amp;&amp; !href.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;\\\\&#x27;</span>) &amp;&amp; postPath) &#123;<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PostAsset</span> = hexo.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">&#x27;PostAsset&#x27;</span>);<br>    <span class=\"hljs-comment\">// findById requires forward slash</span><br>    <span class=\"hljs-comment\">// ***************** Add the following code *******************</span><br>    <span class=\"hljs-keyword\">const</span> fixPostPath = <span class=\"hljs-title function_\">join</span>(postPath, <span class=\"hljs-string\">&#x27;../&#x27;</span>);<br>    <span class=\"hljs-keyword\">const</span> asset = <span class=\"hljs-title class_\">PostAsset</span>.<span class=\"hljs-title function_\">findById</span>(<span class=\"hljs-title function_\">join</span>(fixPostPath, href.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\\\/g</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>)));<br>    <span class=\"hljs-comment\">// const asset = PostAsset.findById(join(postPath, href.replace(/\\\\/g, &#x27;/&#x27;)));</span><br>    <span class=\"hljs-comment\">// ************************** End *****************************</span><br>    <span class=\"hljs-comment\">// asset.path is backward slash in Windows</span><br>    <span class=\"hljs-keyword\">if</span> (asset) href = asset.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\\\/g</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>);<br>  &#125;<br>  href = url_for.<span class=\"hljs-title function_\">call</span>(hexo, href);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>enjoy it</li>\n</ol>\n<p><strong>方法二:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># 设置<br><span class=\"hljs-attr\">post_asset_folder</span>:<span class=\"hljs-literal\">true</span><br># 安装插件 asset-image<br>npm install <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/CodeFalling/hexo-asset-image  --save</span><br># typora中设置图片为相对路径 看下图<br>./$&#123;filename&#125;<br># 运行查看<br>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/f96c3c41/image-20220815133503275.png\" alt=\"image-20220815133503275\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>   Env:使用方法四</p>\n<ul>\n<li>文件名不能带有空格, title 可以带空格 (<code>hexo new</code>的时候需要注意这一点)<ul>\n<li>修改 <code>node_modules\\hexo-renderer-marked\\lib\\renderer.js</code>文件可能可以改善这点. -&gt; TBD</li>\n</ul>\n</li>\n<li>md文件名要和图片等等资源文件夹同名 -&gt; 注定了不能使用 <code>./$&#123;filename&#125;.assets</code>这种方案, 一定要改成<code>./$&#123;filename&#125;</code>才行</li>\n</ul>\n</blockquote>\n<h2 id=\"Hexo-跳过一些文件-不渲染某些文件\"><a href=\"#Hexo-跳过一些文件-不渲染某些文件\" class=\"headerlink\" title=\"Hexo 跳过一些文件,不渲染某些文件\"></a>Hexo 跳过一些文件,不渲染某些文件</h2><p>搜索引擎确认网站所有权时往往会提供一个html文件来进行验证，要是这个文件被渲染了，验证自然就会失败了。或者，有时候会写一些简单的html示例页面或<code>README.md</code>，这也是不希望Hexo渲染的。因此有必要针对某个文件或者目录进行排除。</p>\n<p>Hexo博客的基本内容是一些Markdown文件，放在<code>source/_post</code>文件夹下，每个文件对应一篇文章。除此之外，放在<code>source</code>文件夹下的所有开头不是下划线的文件，在<code>hexo generate</code>的时候，都会被拷贝到<code>public</code>文件夹下。但是，Hexo默认会渲染所有的HTML和Markdown文件，导致我的README.md直接转成html格式了。。。</p>\n<p>怎么样避开这个坑呢？如果只有一个HTML文件的话，可以简单地在文件开头加上<code>layout: false</code>一行即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-string\">&lt;html&gt;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<p>如果有多个要避开渲染的md文件，显然是不可能使用这种方法的。这时候需要使用<code>skip_render</code>配置。根据<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">Hexo文档</a>中的说明，通过在<code>_config.yml</code>配置文件中使用<code>skip_render</code>参数，可以跳过指定文件的渲染。使用方式如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">skip_render</span>:<span class=\"hljs-meta\"> [games/**, depview/**, knowledge/**]</span><br></code></pre></td></tr></table></figure>\n\n<p>这里的路径匹配可以使用正则表达式。</p>\n<p><strong>注意：<code>skip_render</code>参数设置的路径是相对于<code>source</code>目录的路径。</strong>例如，需要跳过渲染source&#x2F;README.md，只需要设置 <code>skip_render:README.md</code>。</p>\n<p>在设置了跳过渲染之后，最好使用<code>hexo clean</code>清除以前的编译结果，保证配置生效。</p>\n<h2 id=\"hexo-开启RSS订阅-feed-atom\"><a href=\"#hexo-开启RSS订阅-feed-atom\" class=\"headerlink\" title=\"hexo 开启RSS订阅 feed atom\"></a>hexo 开启RSS订阅 feed atom</h2><p>基于<code>hexo-generator-feed</code></p>\n<p>先安装这个包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-generator-feed<br></code></pre></td></tr></table></figure>\n\n<p>然后在在<code>_config.yml</code>文件中配置该插件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">feed:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">atom</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">atom.xml</span><br>    <span class=\"hljs-attr\">limit:</span> <span class=\"hljs-number\">20</span><br>    <span class=\"hljs-attr\">hub:</span><br>    <span class=\"hljs-attr\">content:</span><br>    <span class=\"hljs-attr\">content_limit:</span><br>    <span class=\"hljs-attr\">content_limit_delim:</span> <span class=\"hljs-string\">&#x27; &#x27;</span><br>    <span class=\"hljs-attr\">order_by:</span> <span class=\"hljs-string\">-date</span><br>    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">/images/favicon.png</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  参数的含义：</p>\n<ul>\n<li><code>type</code>: <code>RSS</code>的类型(<code>atom/rss2</code>)</li>\n<li><code>path</code>: 文件路径,默认是<code>atom.xml/rss2.xml</code></li>\n<li><code>limit</code>: 展示文章的数量,使用<strong>0</strong>或则<strong>false</strong>代表展示全部</li>\n<li><code>hub</code>:</li>\n<li><code>content</code>: 在<code>RSS</code>文件中是否包含内容 ,有3个值 <code>true/false</code>默认不填为<code>false</code></li>\n<li><code>content_limit</code>: 指定内容的长度作为摘要,仅仅在上面<code>content</code>设置为<code>false</code>和<code>没有自定义的描述出现</code></li>\n<li><code>content_limit_delim</code>: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</li>\n<li><code>order_by</code>: 顺序排列方式</li>\n<li><code>icon</code>: 图标路径</li>\n</ul>\n</blockquote>\n<p>配置好之后运行<code>hexo clean &amp; hexo g</code>就可以找到你博客的<code>pubilc</code> 文件夹下发现<code>atom.xml</code>文件了</p>\n<p>我们可以在<code>关于(about)</code>页面添加RSS源, 有些主题可以在头像下面自动开启, 这些都是后话了.</p>\n<p>配置RSS的时候发现还有一些其他的推送方式, 比如邮件推送, 浏览器通知推送等等.</p>\n<h3 id=\"RSS阅读器\"><a href=\"#RSS阅读器\" class=\"headerlink\" title=\"RSS阅读器\"></a>RSS阅读器</h3><p><a href=\"https://feedly.com/\">Feedly.com</a> 这个比较满意, 文章显示和界面都不错</p>\n<p><a href=\"https://www.inoreader.com/\">inoreader</a>: 订阅的文章展示效果也还不错(卡片形式).</p>\n<p><a href=\"https://theoldreader.com/\">the old reader</a>: 这个是比较老牌的RSS阅读器了</p>\n<p>参考链接:</p>\n<p><a href=\"https://segmentfault.com/a/1190000012647294\">为hexo博客添加RSS订阅功能</a></p>\n<p><a href=\"https://sean10.github.io/2020/06/27/hexo%E5%BC%80%E5%90%AFatom%E8%AE%A2%E9%98%85/\">hexo开启atom订阅</a></p>\n<h2 id=\"hexo-静态网页压缩\"><a href=\"#hexo-静态网页压缩\" class=\"headerlink\" title=\"hexo 静态网页压缩\"></a>hexo 静态网页压缩</h2><p>了解到有三个插件可以做到这个功能(<code>hexo-neat</code>, <code>gulp</code>, <code>Hexo-all-minifier</code>)</p>\n<p><code>gulp</code>存在各种乱七八糟的依赖关系, 推荐直接用<code>Hexo-all-minifier</code>一套走.</p>\n<h3 id=\"1-hexo-neat\"><a href=\"#1-hexo-neat\" class=\"headerlink\" title=\"1. hexo-neat\"></a>1. hexo-neat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-neat --save</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在 _config.yml 添加配置</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">博文压缩</span><br>neat_enable: true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩html</span><br>neat_html:<br>  enable: true<br>  exclude:<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩css</span><br>neat_css:<br>  enable: true<br>  exclude:<br>    - &#x27;**/*.min.css&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩js</span><br>neat_js:<br>  enable: true<br>  mangle: true<br>  output:<br>  compress:<br>  exclude:<br>    - &#x27;**/*.min.js&#x27;<br>    - &#x27;**/jquery.fancybox.pack.js&#x27;<br>    - &#x27;**/index.js&#x27;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-gulp\"><a href=\"#2-gulp\" class=\"headerlink\" title=\"2. gulp\"></a>2. gulp</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装gulp</span><br>npm install gulp --save<br><span class=\"hljs-comment\"># 安装gulp依赖</span><br>npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin --save<br></code></pre></td></tr></table></figure>\n<p><strong>创建 gulpfile.js 文件</strong></p>\n<p>在<code>Hexo</code>站点根目录下创建<code>gulpfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> minifycss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-minify-css&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> uglify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-uglify&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> htmlmin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlmin&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> htmlclean = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlclean&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> imagemin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-imagemin&#x27;</span>);<br><span class=\"hljs-comment\">// 压缩css文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.css&#x27;</span>)<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">minifycss</span>())<br>  .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 压缩html文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.html&#x27;</span>)<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlclean</span>())<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlmin</span>(&#123;<br>    <span class=\"hljs-attr\">removeComments</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyJS</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyCSS</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyURLs</span>: <span class=\"hljs-literal\">true</span>,<br>  &#125;))<br>  .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>))<br>&#125;);<br><span class=\"hljs-comment\">// 压缩js文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>([<span class=\"hljs-string\">&#x27;./public/**/.js&#x27;</span>,<span class=\"hljs-string\">&#x27;!./public/js/**/*min.js&#x27;</span>])<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">uglify</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 压缩 public/demo 目录内图片</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-images&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/demo/**/*.*&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">imagemin</span>(&#123;<br>           <span class=\"hljs-attr\">optimizationLevel</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span><br>           <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span><br>           <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br>           <span class=\"hljs-attr\">multipass</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span><br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public/uploads&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 默认任务 gulp 4.0 适用的方式</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;default&#x27;</span>, gulp.<span class=\"hljs-title function_\">parallel</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-js&#x27;</span><br> <span class=\"hljs-comment\">//build the website</span><br>));<br></code></pre></td></tr></table></figure>\n\n<p>只要每次在执行<code>hexo g</code>命令后执行<code>gulp</code>就可以进行静态资源压缩，压缩后再同步到github上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo cl &amp; hexo g &amp; gulp<br>hexo d<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"注意-这里部署的时候出了一个问题\"><a href=\"#注意-这里部署的时候出了一个问题\" class=\"headerlink\" title=\"注意: 这里部署的时候出了一个问题\"></a><strong>注意: 这里部署的时候出了一个问题</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Error [ERR_REQUIRE_ESM]: require() of ES Module xxx\\hexo\\node_modules\\gulp-imagemin\\index.js from xxx\\hexo\\gulpfile.js not supported.<br>Instead change the require of index.js <span class=\"hljs-keyword\">in</span> xxx\\hexo\\gulpfile.js to a dynamic import() <span class=\"hljs-built_in\">which</span> is available <span class=\"hljs-keyword\">in</span> all CommonJS modules.<br>    at Object.&lt;anonymous&gt; (xxx\\hexo\\gulpfile.js:6:16)<br>    at async Promise.all (index 0) &#123;<br>  code: <span class=\"hljs-string\">&#x27;ERR_REQUIRE_ESM&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  gulp-imagemin 8.0.0 and above are now ESM only. You can downgrade gulp-imagemin to 7.1.0 which is commonjs and it should work fine.</p>\n<blockquote>\n<p>  This package is now pure ESM. Please read this.</p>\n</blockquote>\n<p>  <a href=\"https://github.com/sindresorhus/gulp-imagemin/releases/tag/v8.0.0\">https://github.com/sindresorhus/gulp-imagemin/releases/tag/v8.0.0</a></p>\n</blockquote>\n<p><strong>最终找到说是包的版本太高导致的</strong></p>\n<p>重新安装特定版本的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 先卸载掉这些包</span><br>npm uninstall gulp<br>npm uninstall gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin<br>npm uninstall gulp-minify-css <br><br><span class=\"hljs-comment\"># 重新安装</span><br>npm install gulp@4.0.2 --save<br>npm install gulp-htmlclean@4.0.2 gulp-htmlmin@5.0.1 gulp-clean-css@4.2.0 gulp-uglify@3.0.2 gulp-imagemin@7.1.0 --save<br>npm install gulp-babel@8.0.0 babel-preset-env@1.7.0 babel-preset-mobx@2.0.0 --save<br>npm install gulp-miniify-css@1.2.4 -save<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  包的版本可以参考这个<br>  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;babel-preset-env&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^1.7.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;babel-preset-mobx&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.0.2&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-babel&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^8.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-clean-css&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.2.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-htmlclean&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.7.22&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-htmlmin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^5.0.1&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-imagemin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^7.1.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-uglify&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^3.0.2&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-minify-css&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^1.2.4&quot;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<p>把<code>gulpfile.js</code>也改动了一下, </p>\n<p>在<code>minify-images</code>项里面我的图片是随文章存放的, 并不是全部存放在<code>img</code>等文件夹下面, 所以只能用全文件匹配去做图片压缩, 代价就是速度很忙, 希望有大佬来指点一下如何更好的修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> gulp      = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> htmlmin   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlmin&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> htmlclean = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlclean&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> uglify    = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-uglify&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> imagemin  = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-imagemin&#x27;</span>)<br><span class=\"hljs-keyword\">var</span> minifycss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-minify-css&#x27;</span>);<br><br><span class=\"hljs-comment\">// 压缩html</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// 匹配所有 .html结尾的文件</span><br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlclean</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlmin</span>(&#123;<br>            <span class=\"hljs-attr\">removeComments</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyJS</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyCSS</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyURLs</span>: <span class=\"hljs-literal\">true</span>,<br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class=\"hljs-comment\">// 压缩css</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.css&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">minifycss</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class=\"hljs-comment\">// 压缩js</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>([<span class=\"hljs-string\">&#x27;./public/**/.js&#x27;</span>, <span class=\"hljs-string\">&#x27;!./public/js/**/*min.js&#x27;</span>])<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">uglify</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;)<br><br><span class=\"hljs-comment\">// 压缩图片</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-images&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.*&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">imagemin</span>(&#123;<br>            <span class=\"hljs-attr\">optimizationLevel</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span><br>            <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span><br>            <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br>            <span class=\"hljs-attr\">multipass</span>: <span class=\"hljs-literal\">false</span>,     <span class=\"hljs-comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span><br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;)<br><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;default&#x27;</span>, gulp.<span class=\"hljs-title function_\">series</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-images&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-Hexo-all-minifier\"><a href=\"#3-Hexo-all-minifier\" class=\"headerlink\" title=\"3. Hexo-all-minifier\"></a>3. Hexo-all-minifier</h3><blockquote>\n<p>  <a href=\"https://github.com/chenzhutian/hexo-all-minifier\">https://github.com/chenzhutian/hexo-all-minifier</a></p>\n<p>  <a href=\"https://archive.vincent0700.com/2019/12/31/034_Usage_of_hexo-all-minifier_copy/\">Hexo 资源压缩 | hexo-all-minifier</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装</span><br>npm install hexo-all-minifier --save<br><br><span class=\"hljs-comment\"># 在_config.yml文件添加配置</span><br>all_minifier: <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># </span><br>hexo cl &amp; hexo g <br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Hexo-Sitemap\"><a href=\"#Hexo-Sitemap\" class=\"headerlink\" title=\"Hexo Sitemap\"></a>Hexo Sitemap</h2><blockquote>\n<p>   据网友所言: 谷歌就xx乱爬, 百度就xx乱删, 必应就xx不收录</p>\n</blockquote>\n<p>为了让博文能够被google或百度检索，需要先将网站收录到他们的库里面，我们可以在谷歌的站长平台里面提交我们的sitemap文件，告诉浏览器应该我们的站点有哪些页面，这样他就会去爬取收录了。</p>\n<blockquote>\n<p>  站点地图是一种文件，您可以在其中提供与您网站中的网页、视频或其他文件有关的信息，还可以说明这些内容之间的关系。Google 等搜索引擎会读取此文件，以便更高效地抓取您的网站。站点地图会告诉 Google 您认为网站中的哪些网页和文件比较重要，还会提供与这些文件有关的重要信息。例如，网页上次更新的时间和网页是否有任何备用的语言版本。</p>\n<p>  您可以使用站点地图提供与特定类型的网页内容（包括<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/video-sitemaps\">视频</a>、<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/image-sitemaps\">图片</a>和<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/news-sitemap\">新闻</a>内容）有关的信息。例如：</p>\n<ul>\n<li>站点地图视频条目可以指定视频的时长、评分以及适合哪些年龄段的受众。</li>\n<li>站点地图图片条目中可包含网页中所含图片的位置。</li>\n<li>站点地图新闻条目中可包含报道标题和发布日期。</li>\n</ul>\n<p>  <strong>我需要站点地图吗？</strong></p>\n<p>  如果您网站上的网页链接得当，那么 Google 通常能够发现其中的大多数网页。链接得当是指您认为重要的所有网页都可以通过某些形式的导航（例如您网站的菜单，或您放入网页中的链接）抵达。即便如此，站点地图仍有助于我们更加高效地抓取规模更大、更复杂的网站或更特殊的文件。</p>\n</blockquote>\n<h3 id=\"生成sitemap-xml\"><a href=\"#生成sitemap-xml\" class=\"headerlink\" title=\"生成sitemap.xml\"></a>生成<code>sitemap.xml</code></h3><p>首先我们安装生成sitemao的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 谷歌的</span><br>npm install hexo-generator-sitemap --save<br><span class=\"hljs-comment\"># 百度的</span><br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure>\n\n<p>修改配置文件<code>_config.yml</code>增加下面这些内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Plugins:<br>- hexo-generator-sitemap<br>- hexo-generator-baidu-sitemap<br><br>baidusitemap:<br>  path: baidusitemap.xml<br>sitemap:<br>  path: sitemap.xml<br></code></pre></td></tr></table></figure>\n\n<p>生成<code>sitemap.xml</code>文件, 重新生成网站, 在网站根目录就可以看到<code>sitemap.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo cl &amp; hexo g <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交sitemap-xml\"><a href=\"#提交sitemap-xml\" class=\"headerlink\" title=\"提交sitemap.xml\"></a>提交<code>sitemap.xml</code></h3><p><a href=\"https://www.google.com/webmasters/tools\">GoogleSearchConsole</a></p>\n<p><a href=\"https://www.bing.com/webmasters/\">BingWebMaster</a></p>\n<p><a href=\"https://ziyuan.baidu.com/site/index\">百度资源平台</a></p>\n<p><strong>下面讲一下谷歌的</strong></p>\n<p>登录<a href=\"https://www.google.com/webmasters/tools\">GoogleSearchConsole</a>, 按照提示验证站点的所有权</p>\n<p>打开谷歌控制台选择-&gt;<strong>索引</strong>-&gt;<strong>站点地图</strong>，在添加新的站点地图中填入你的<code>sitemap.xml</code>的路径, 这里直接写<code>sitemap.xml</code>即可。</p>\n<p><img src=\"/2022/f96c3c41/image-20220918004138059.png\" alt=\"image-20220918004138059\"></p>\n<blockquote>\n<p>   这个谷歌真是让我大无语, 一直显示无法获取, 一直没法解决这个问题, 网址检查显示没什么问题, 但是一直显示无法获取真是麻了.</p>\n<p>  求助群友后他们推荐使用 Hexo-SEO-AutoPush</p>\n</blockquote>\n<h3 id=\"收录查询\"><a href=\"#收录查询\" class=\"headerlink\" title=\"收录查询\"></a>收录查询</h3><ol>\n<li><p>通过网站管理平台的控制台去看数据</p>\n</li>\n<li><p>搜索引擎直接搜索</p>\n</li>\n</ol>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">site:</span>oikiou.top<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"手动生成Sitemap文件\"><a href=\"#手动生成Sitemap文件\" class=\"headerlink\" title=\"手动生成Sitemap文件\"></a>手动生成Sitemap文件</h3><p><a href=\"https://www.xml-sitemaps.com/\">https://www.xml-sitemaps.com/</a></p>\n<h2 id=\"Hexo-SEO-AutoPush的使用\"><a href=\"#Hexo-SEO-AutoPush的使用\" class=\"headerlink\" title=\"Hexo-SEO-AutoPush的使用\"></a>Hexo-SEO-AutoPush的使用</h2><p><a href=\"https://github.com/Lete114/Hexo-SEO-AutoPush\">https://github.com/Lete114/Hexo-SEO-AutoPush</a></p>\n<blockquote>\n<p>  注意以下几点: </p>\n<ol>\n<li>由于生成的 actions 是在<code>.github/workflows/HexoSeoAutoPush.yml</code>，点开头的文件或文件夹都会被视为隐藏文件，所以 hexo 不会将隐藏文件部署到 pages，需要新增配置<code>ignore_hidden</code></li>\n</ol>\n<pre><code class=\"hljs\"> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">deploy:<br> ignore_hidden: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 忽略隐藏文件及文件夹(目录)</span><br></code></pre></td></tr></table></figure>\n \n</code></pre>\n<ol start=\"2\">\n<li><p>Bing的<code>API</code>在登录控制台后的<em>右上角齿轮上</em>可以找到, 如果找不到可能是界面更新导致的, 请参考官方文档</p>\n</li>\n<li><p>注意google的信息填写方式</p>\n<p><code>google_private_key</code>是填写Json内的 <code>private_key </code> 不是<code>private_key_id </code>注意区分. </p>\n<p>而且<code>google_private_key </code> 是带双引号的需要注意, 而<code>google_client_email</code>填写的时候是不带双引号的.</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>形似</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>google_client_email</td>\n<td><a href=\"mailto:&#120;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#x78;&#x78;&#120;&#46;&#x67;&#115;&#101;&#114;&#118;&#x69;&#99;&#101;&#97;&#x63;&#99;&#111;&#117;&#x6e;&#x74;&#x2e;&#x63;&#111;&#x6d;\">&#120;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#x78;&#x78;&#120;&#46;&#x67;&#115;&#101;&#114;&#118;&#x69;&#99;&#101;&#97;&#x63;&#99;&#111;&#117;&#x6e;&#x74;&#x2e;&#x63;&#111;&#x6d;</a></td>\n<td>【必填】Value 输入谷歌的 client_email</td>\n</tr>\n<tr>\n<td>google_private_key</td>\n<td>“—–BEGIN PRIVATE KEY—–\\nxxxxxx\\n—–END PRIVATE KEY—–\\n”</td>\n<td>【必填】Value 输入谷歌的 private_key （注意：填写的时候需要使用<strong>双引号</strong>包起来，如: <code>&quot;private_key&quot;</code>）</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</blockquote>\n<p>在Github内点击Action-&gt;Hexo SEO Auto Push -&gt; 查看执行情况 没有报错就是执行的没问题, 稍等片刻刷新控制台就可以看到提交的信息.</p>\n<p>打开<a href=\"https://www.bing.com/webmasters/\">Home - Bing Webmaster Tools</a>, <code>URL提交</code>标签</p>\n<p>在<a href=\"https://console.cloud.google.com/apis/dashboard\">Google Cloud Platform</a> 中查看.</p>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意:\"></a><strong>注意:</strong></h3><p>部署的时候报了下面这个错误, 当时弄这个东西的时候是半夜, 脑子不清醒(各位同学注意早睡早起, 熬夜效率是极其低下的), <code>private_key</code>填写错了发生了这个错误, 有相似错误的同学可以看看是不是<code>private_key</code>有问题.</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">Run npx hexoautopush *** ***<br>Error: error:<span class=\"hljs-number\">0909006</span>C:PEM routines:get_name:no start line<br>    at Sign.sign (internal<span class=\"hljs-regexp\">/crypto/</span>sig.js:<span class=\"hljs-number\">110</span>:<span class=\"hljs-number\">29</span>)<br>    at Object.sign (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/jwa/i</span>ndex.js:<span class=\"hljs-number\">152</span>:<span class=\"hljs-number\">45</span>)<br>    at Object.jwsSign [as sign] (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/jws/</span>lib/sign-stream.js:<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">24</span>)<br>    at GoogleToken.requestToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">225</span>:<span class=\"hljs-number\">31</span>)<br>    at GoogleToken.getTokenAsyncInner (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">163</span>:<span class=\"hljs-number\">21</span>)<br>    at GoogleToken.getTokenAsync (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">142</span>:<span class=\"hljs-number\">55</span>)<br>    at GoogleToken.getToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">94</span>:<span class=\"hljs-number\">21</span>)<br>    at JWT.refreshTokenNoCache (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/jwtclient.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">36</span>)<br>    at JWT.refreshToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/oauth2client.js:<span class=\"hljs-number\">145</span>:<span class=\"hljs-number\">25</span>)<br>    at JWT.authorizeAsync (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/jwtclient.js:<span class=\"hljs-number\">152</span>:<span class=\"hljs-number\">35</span>) &#123;<br>  library: <span class=\"hljs-string\">&#x27;PEM routines&#x27;</span>,<br>  <span class=\"hljs-keyword\">function</span>: <span class=\"hljs-string\">&#x27;get_name&#x27;</span>,<br>  reason: <span class=\"hljs-string\">&#x27;no start line&#x27;</span>,<br>  code: <span class=\"hljs-string\">&#x27;ERR_OSSL_PEM_NO_START_LINE&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Hexo博客修改Archive页面显示文章数量\"><a href=\"#Hexo博客修改Archive页面显示文章数量\" class=\"headerlink\" title=\"Hexo博客修改Archive页面显示文章数量\"></a>Hexo博客修改Archive页面显示文章数量</h2><p>默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置</p>\n<p>这里我们借助<code>hexo-generator-archive</code>来实现这个功能, 因为Archive分页的话看起来贼难受, 如果能将所有的文章全部显示那就舒服了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 先安装包</span><br>npm install hexo-generator-archive --save<br></code></pre></td></tr></table></figure>\n\n<p>编辑<code>_config.yml</code>新增以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Pagination</span><br><span class=\"hljs-comment\">## Set per_page to 0 to disable pagination</span><br><span class=\"hljs-attr\">index_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">32</span><br><br><span class=\"hljs-attr\">index_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-attr\">archive_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">20</span>  \t<span class=\"hljs-comment\">#为0时表示不分页全展示</span><br>  <span class=\"hljs-attr\">yearly:</span> <span class=\"hljs-literal\">false</span>  \t<span class=\"hljs-comment\">#按年生成归档</span><br>  <span class=\"hljs-attr\">monthly:</span> <span class=\"hljs-literal\">false</span> \t<span class=\"hljs-comment\">#按月生成归档</span><br><br><span class=\"hljs-attr\">tag_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">10</span><br><br><span class=\"hljs-attr\">category_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">50</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p>\n</blockquote>\n<h1 id=\"Comment-评论系统\"><a href=\"#Comment-评论系统\" class=\"headerlink\" title=\"Comment 评论系统\"></a>Comment 评论系统</h1><h2 id=\"cusdis-系统\"><a href=\"#cusdis-系统\" class=\"headerlink\" title=\"cusdis 系统\"></a>cusdis 系统</h2><p>功能较少,看起来非常轻量, 也可以私有部署,正打算私有部署的时候看到了<code>twikoo</code>所以就转入<code>twikoo</code>了,因为cusdis现阶段功能确实有些少.</p>\n<h2 id=\"twikoo-系统\"><a href=\"#twikoo-系统\" class=\"headerlink\" title=\"twikoo 系统\"></a>twikoo 系统</h2><p>twikoo支持docker私有部署，这是它吸引我的一点，这也是我对比几个之后最终敲定下来选择的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>官网：<a href=\"https://twikoo.js.org/\">https://twikoo.js.org/</a></p>\n<p>Docker：<a href=\"https://hub.docker.com/r/imaegoo/twikoo\">https://hub.docker.com/r/imaegoo/twikoo</a></p>\n<p><del>私有docker部署部署半天还是不成功, 看起来像是需要HTTPS才行.</del></p>\n<p>功能挺丰富的,<del>就是半天没部署成功</del></p>\n<blockquote>\n<p>  部署后没有启用HTTPS<br>  fluid 配置里面又启动了强行使用HTTPS,<br>  F12,看consel发现,ERR_SSL_PROTOCOL_ERROR,被重定向到了HTTPS去了</p>\n</blockquote>\n<h3 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h3><p>安装好docker后直接运行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在当前文件夹下创建Data文件用于存放 twikoo 的评论数据</span><br>docker run --name twikoo -e TWIKOO_THROTTLE=512 -p 8884:8080 -v $&#123;PWD&#125;/data:/app/data -d --restart=always imaegoo/twikoo<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl http://localhost:8080/<br></code></pre></td></tr></table></figure>\n\n<p>看到有输出就表示正常部署了。</p>\n<h4 id=\"启用HTTPS\"><a href=\"#启用HTTPS\" class=\"headerlink\" title=\"启用HTTPS\"></a>启用HTTPS</h4><p>配置前置 Nginx 服务器或负载网关，以通过 HTTPS 访问 Twikoo，如下 Nginx 配置可供参考。</p>\n<p><code>service nginx status</code> 我们可以找到nginx的配置文件在哪。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">http &#123;<br>    server &#123;<br>        listen       80;<br>        listen       [::]:80;<br>        # 重定向到https<br>        return       301 https://$server_name$request_uri;<br>    &#125;<br>    server &#123;<br>        listen       443 ssl;<br>        listen       [::]:443 ssl;<br>        # 下面两就是证书文件<br>        ssl_certificate      cert/fullchain.pem;<br>        ssl_certificate_key  cert/privkey.pem;<br>        # 连接到docker twikoo的端口<br>        location / &#123;<br>            proxy_pass   http://127.0.0.1:8080;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用Caddy将会变得非常简单</p>\n<p>Caddy 的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">www.youdomain.com &#123;<br>    encode zstd gzip<br>    reverse_proxy 127.0.0.1:8884<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"dockers-部署后升级\"><a href=\"#dockers-部署后升级\" class=\"headerlink\" title=\"dockers 部署后升级\"></a>dockers 部署后升级</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">　拉取新版本</span> <br>docker pull imaegoo/twikoo<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">停止旧版本容器</span> <br>docker stop twikoo<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">　删除旧版本容器</span> <br>docker rm twikoo<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动新版本容器</span><br>dockr run .......<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关于设置面板的头像风格类型\"><a href=\"#关于设置面板的头像风格类型\" class=\"headerlink\" title=\"关于设置面板的头像风格类型\"></a>关于设置面板的头像风格类型</h3><blockquote>\n<p>  头像风格类型<br>  404：如果没有任何图像与电子邮件哈希无关，则不加载任何图像，而是返回HTTP 404（找不到文件）响应<br>  mp：（神秘人物）一个人的简单卡通风格的轮廓（不随电子邮件哈希值而变化）<br>  identicon：基于电子邮件哈希的几何图案<br>  monsterid：生成的具有不同颜色，面孔等的“怪物”<br>  wavatar：生成的具有不同特征和背景的面孔<br>  retro：生成的令人敬畏的8位街机风格像素化面孔<br>  robohash：具有不同颜色，面部等的生成的机器人<br>  blank：透明的PNG图像（以下为演示目的添加到HTML的边框）</p>\n</blockquote>\n<ul>\n<li><p>Twikoo我是用的docker,nginx和ssl配置可以参考<a href=\"https://hub.docker.com/r/imaegoo/twikoo\">DockerHub</a>, https的端口是可以更改的, 默认的443占用了换成别的就好.</p>\n</li>\n<li><p>twikoo的即时推送尝试了几个譬如 Qmsq, server酱等等发现又一系列的问题 都不尽如人意  最后选择的是最简单的邮件通知.</p>\n</li>\n</ul>\n<h2 id=\"remark42\"><a href=\"#remark42\" class=\"headerlink\" title=\"remark42\"></a>remark42</h2><h1 id=\"部署平台-托管平台\"><a href=\"#部署平台-托管平台\" class=\"headerlink\" title=\"部署平台(托管平台)\"></a>部署平台(托管平台)</h1><p><a href=\"https://i.vince.pub/p/hexo-static/\">常见静态网站托管平台使用及多节点部署方案</a></p>\n<p><img src=\"/2022/f96c3c41/2fc062cb2.svg\" alt=\"节点\"></p>\n<p>现阶段比较好的方案是<code>coding</code>和<code>github+netlify</code>.</p>\n<h1 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h1><p><strong>字体族（<code>font-family</code>）</strong></p>\n<blockquote>\n<p>   <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family</a></p>\n</blockquote>\n<p><strong>调色板灵感</strong></p>\n<blockquote>\n<p>   <a href=\"https://www.webdesignrankings.com/resources/lolcolors/\">https://www.webdesignrankings.com/resources/lolcolors/</a></p>\n</blockquote>\n<p><strong>ISO-8601 日期</strong></p>\n<blockquote>\n<p>  <a href=\"http://momentjs.cn/docs/#/parsing/string-format/\">http://momentjs.cn/docs/#/parsing/string-format/</a></p>\n</blockquote>\n<p><strong>代码高亮风格</strong></p>\n<blockquote>\n<p>  highlightjs:  <a href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a></p>\n<p>  prismjs:  <a href=\"https://prismjs.com/\">https://prismjs.com/</a></p>\n</blockquote>\n<p><strong>Logo生成器</strong></p>\n<blockquote>\n<p>  adobe: <a href=\"https://www.adobe.com/express/create/logo\">https://www.adobe.com/express/create/logo</a></p>\n</blockquote>\n<p><strong>图床</strong></p>\n<blockquote>\n<p>  <a href=\"https://postimg.cc/\">https://postimg.cc/</a></p>\n</blockquote>\n<p><strong>壁纸</strong></p>\n<blockquote>\n<p>  <a href=\"https://wallpapercrafter.com/\">https://wallpapercrafter.com/</a></p>\n</blockquote>\n<p><strong>实时获取网站的<code>Favicon.ion</code>文件</strong></p>\n<blockquote>\n<p>  <a href=\"https://tools.ly522.com/ico/\">https://tools.ly522.com/ico/</a></p>\n<p>  远程实时获取并显示网站的Favicon.ico文件，美化网站外链显示效果。</p>\n</blockquote>\n<p><strong>bing壁纸接口</strong></p>\n<blockquote>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/uhd.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸UHD超高清原图&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/1920x1080.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸1080P高清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/1366x768.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸普清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/m.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸手机版1080P高清&quot;</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_uhd.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸UHD超高清原图&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸1080P高清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_1366x768.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸普清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_m.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸手机版1080P高清&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h1 id=\"一些知识\"><a href=\"#一些知识\" class=\"headerlink\" title=\"一些知识\"></a>一些知识</h1><h2 id=\"Creative-Commons-licenses\"><a href=\"#Creative-Commons-licenses\" class=\"headerlink\" title=\"Creative Commons licenses\"></a>Creative Commons licenses</h2><p><a href=\"https://www.wur.nl/en/article/What-are-Creative-Commons-licenses.htm\">What are Creative Commons licenses?</a></p>\n<p><img src=\"/2022/f96c3c41/licences_3bf0e9af_670x502.jpg\" alt=\"知识共享许可.jpg\"></p>\n<h2 id=\"Gravatar-Cravatar\"><a href=\"#Gravatar-Cravatar\" class=\"headerlink\" title=\"Gravatar &amp; Cravatar\"></a>Gravatar &amp; Cravatar</h2><p><a href=\"https://en.gravatar.com/\">Gravatar</a> &amp; <a href=\"https://cravatar.cn/\">Cravatar</a>的差异</p>\n<h3 id=\"Gravatar\"><a href=\"#Gravatar\" class=\"headerlink\" title=\"Gravatar\"></a>Gravatar</h3><p>Gravatar是一项用于提供在全球范围内使用的头像服务。只要你在Gravatar的服务器上上传了你自己的头像，你便可以在其他任何支持Gravatar的博客、论坛等地方使用它。</p>\n<h3 id=\"Cravatar-cn\"><a href=\"#Cravatar-cn\" class=\"headerlink\" title=\"Cravatar  (cn)\"></a>Cravatar  (cn)</h3><p>Cravatar 是 Gravatar 在中国的完美替代方案,从此你可以自由的上传和分享头像。</p>\n<p><strong>与 Gravatar API 兼容</strong></p>\n<p>为了降低你的使用成本，我们的 API 规范始终保持与 Gravatar 100% 兼容</p>\n<p><strong>独有的三级头像匹配机制</strong></p>\n<p>当访客请求自己的头像时，我们会按此顺序分三级匹配头像：<strong>Cravatar-&gt;Gravatar-&gt;QQ 头像</strong>，对于博客站，这平均可以为 70% 的访客提供准确的头像</p>\n",
            "tags": [
                "hexo",
                "jekyll",
                "fluid",
                "cusdis",
                "twikoo",
                "blog",
                "gravatar",
                "cravatar"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/c6d84d87/",
            "url": "https://www.oikiou.top/2022/c6d84d87/",
            "title": "Hyper-V",
            "date_published": "2022-08-16T05:12:15.000Z",
            "content_html": "<h1 id=\"家庭版启用Hyper-V\"><a href=\"#家庭版启用Hyper-V\" class=\"headerlink\" title=\"家庭版启用Hyper-V\"></a>家庭版启用Hyper-V</h1><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p>将下面代码改成<code>.bat</code>文件，管理员运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pushd &quot;%~dp0&quot;<br>dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum &gt;hv.txt<br>for /f %%i in (&#x27;findstr /i . hv.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot;<br>del hv.txt<br>Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL<br>Pause<br></code></pre></td></tr></table></figure>\n\n<p>重启后在控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能-&gt;勾选Hyper-V复选框</p>\n<h2 id=\"卸载-禁用\"><a href=\"#卸载-禁用\" class=\"headerlink\" title=\"卸载 &amp; 禁用\"></a>卸载 &amp; 禁用</h2><ol>\n<li><p>在控制面板中禁用 Hyper-V</p>\n<ol>\n<li>在“控制面板”中，打开“程序和功能”。</li>\n<li>选择“启用或关闭 Windows 功能”。</li>\n<li>展开 <strong>Hyper-V</strong>，展开 <strong>Hyper-V 平台</strong>，然后清除“Hyper-V 虚拟机监控程序”复选框。</li>\n</ol>\n</li>\n<li><p>在 PowerShell 中禁用 Hyper-V</p>\n<ol>\n<li><p>打开提升权限的 PowerShell 窗口。</p>\n</li>\n<li><p>运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "hyperv"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/1d3ed0f3/",
            "url": "https://www.oikiou.top/2022/1d3ed0f3/",
            "title": "VScode插件CommentTranslate在WSL内无效",
            "date_published": "2022-08-10T14:57:15.000Z",
            "content_html": "<h1 id=\"VScode插件CommentTranslate在WSL内无效\"><a href=\"#VScode插件CommentTranslate在WSL内无效\" class=\"headerlink\" title=\"VScode插件CommentTranslate在WSL内无效\"></a>VScode插件CommentTranslate在WSL内无效</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/intellism/vscode-comment-translate/issues/64\">https://github.com/intellism/vscode-comment-translate/issues/64</a></p>\n<ol>\n<li><p>找到相关语言语法规则文件。如C&#x2F;CPP、bat、css、java、python，这些文件都是在Windows版本的VSCode中内置的，文件路径在 <code>C:\\Users\\ **userNmae** \\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions</code>改过安装路径的是<code>Microsoft VS Code\\resources\\app\\extensions</code></p>\n<p><img src=\"/2022/1d3ed0f3/image-20220811202401467.png\" alt=\"image-20220811202401467\"></p>\n</li>\n</ol>\n<p>​\t</p>\n<ol>\n<li><p>将语法规则的<strong>高亮规则</strong>文件夹拷贝到远程vscode的相关插件目录。以C语言为例，将<code>cpp</code>目录下的高亮规则文件夹<code>syntaxes</code>拷贝到远程C&#x2F;C++插件（<code>ms-vscode.cpptools-x.x.x</code>）目录下。如果你使用SSH远程，远程插件的目录在<code>~/.vscode-server/extensions/ms-vscode.cpptools-x.x.x</code>。</p>\n<p><img src=\"/2022/1d3ed0f3/image-20220811202845203.png\" alt=\"image-20220811202845203\"></p>\n</li>\n<li><p>修改远程插件，添加语法高亮规则。修改远程插件的<code>package.json</code>文件，如C&#x2F;C++插件（<code>ms-vscode.cpptools-x.x.x</code>）目录下的<code>package.json</code>文件，将刚才cpp语法规则文件夹中的<code>package.json</code>文件的”<code>grammars</code>“部分拷贝出来，粘贴到远程插件的<code>package.json</code>的<code>contributes</code>部分中去。</p>\n<p>如果遇到格式难以复制，可以全选内容然后按Shift+Alt+F格式化选定内容。<img src=\"/2022/1d3ed0f3/image-20220811202944334.png\" alt=\"image-20220811202944334\"></p>\n</li>\n</ol>\n<p><img src=\"/2022/1d3ed0f3/image-20220811203114753.png\" alt=\"image-20220811203114753\"></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\"><span class=\"hljs-string\">&quot;grammars&quot;</span>: [<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;c&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.c&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/c.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cpp.embedded.macro&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cpp.embedded.macro.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cpp.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.c.platform&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/platform.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cuda-cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cuda-cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cuda-cpp.tmLanguage.json&quot;</span><br>          &#125;<br>      ],<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vscode",
                "commenttranslate",
                "wsl"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/f5f9fa9b/",
            "url": "https://www.oikiou.top/2022/f5f9fa9b/",
            "title": "Docker",
            "date_published": "2022-07-21T13:38:15.000Z",
            "content_html": "<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h1 id=\"Docker是什么-如何理解Docker\"><a href=\"#Docker是什么-如何理解Docker\" class=\"headerlink\" title=\"Docker是什么&amp;如何理解Docker\"></a>Docker是什么&amp;如何理解Docker</h1><p>Docker的底层原理</p>\n<p>cgroup</p>\n<p>namespace</p>\n<p>容器(container)有不同的状态, 停止状态</p>\n<p>镜像(image)是docker生命周期中的构建或打包阶段, 而容器(container)则是启动或执行阶段.</p>\n<p>docker hub</p>\n<p>!!ADD ME!!</p>\n<p><img src=\"/2022/f5f9fa9b/architecture.svg\" alt=\"Docker Architecture Diagram\"></p>\n<p><img src=\"/2022/f5f9fa9b/mark4536000.image\" alt=\"img\"></p>\n<p><img src=\"/2022/f5f9fa9b/watermark16682557597978.png\" alt=\"x\"></p>\n<p><img src=\"/2022/f5f9fa9b/watermark.png\" alt=\"xx\"></p>\n<p><img src=\"/2022/f5f9fa9b/202111041612065293278565.png\" alt=\"何種應用適合PaaS平台容器/微服務架構釋疑| 網管人\"></p>\n<h2 id=\"Docker-和-VM-的区别\"><a href=\"#Docker-和-VM-的区别\" class=\"headerlink\" title=\"Docker 和 VM 的区别\"></a>Docker 和 VM 的区别</h2><p>二者的不同：</p>\n<ul>\n<li>VM(VMware)在宿主机器、宿主机器操作系统的基础上创建虚拟层、虚拟化的操作系统、虚拟化的仓库，然后再安装应用；</li>\n<li>Container(Docker容器)，在宿主机器、宿主机器操作系统上创建Docker引擎，在引擎的基础上再安装应用。</li>\n</ul>\n<p><img src=\"/2022/f5f9fa9b/9114e4a753de14a7531e867b908e6660.png\" alt=\"img\"></p>\n<p><strong>与传统VM特性对比：</strong><br>作为一种轻量级的虚拟化方式，Docker在运行应用上跟传统的虚拟机方式相比具有显著优势：</p>\n<ul>\n<li>Docker 容器很快，启动和停止可以在秒级实现，这相比传统的虚拟机方式要快得多。</li>\n<li>Docker 容器对系统资源需求很少，一台主机上可以同时运行数千个Docker容器。</li>\n<li>Docker 通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。</li>\n<li>Docker 通过Dockerfile配置文件来支持灵活的自动化创建和部署机制，提高工作效率。</li>\n<li>Docker 容器除了运行其中的应用之外，基本不消耗额外的系统资源，保证应用性能的同时，尽量减小系统开销。</li>\n<li>Docker 利用Linux系统上的多种防护机制实现了严格可靠的隔离。从1.3版本开始，Docker引入了安全选项和镜像签名机制，极大地提高了使用Docker的安全性。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Docker</th>\n<th>VM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动速度</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为MB</td>\n<td>一般为GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于原生</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单机支持上千个容器</td>\n<td>一般几十个</td>\n</tr>\n</tbody></table>\n<h1 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h1><p><strong>Docker Desktop</strong></p>\n<p>参考官方的安装<a href=\"https://docs.docker.com/get-docker/\">文档</a></p>\n<p>Ubuntu的安装参考<a href=\"https://docs.docker.com/desktop/install/ubuntu/\">文档</a></p>\n<p><strong>Docker Engine</strong></p>\n<p>Engine安装<a href=\"https://docs.docker.com/engine/install/ubuntu/\">文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Add Docker<span class=\"hljs-string\">&#x27;s official GPG key:</span></span><br>sudo apt-get update<br>sudo apt-get install ca-certificates curl gnupg<br>sudo install -m 0755 -d /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br>sudo chmod a+r /etc/apt/keyrings/docker.gpg<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Add the repository to Apt sources:</span></span><br>echo \\<br>  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\<br><span class=\"hljs-meta prompt_\">  $</span><span class=\"language-bash\"><span class=\"hljs-string\">(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\</span></span><br><span class=\"hljs-string\"><span class=\"language-bash\">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br>sudo apt-get update<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Install Docker</span></span><br>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Add your user to the docker group</span></span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">可以运行docker命令不再加sudo</span></span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">!注意! 需要注销后重新登录</span></span><br>sudo usermod -aG docker $USER<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Testing the installation</span></span><br>docker version<br>sudo docker run hello-world<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Docker入门-命令\"><a href=\"#Docker入门-命令\" class=\"headerlink\" title=\"Docker入门&amp;命令\"></a>Docker入门&amp;命令</h1><h2 id=\"☆-docker-run\"><a href=\"#☆-docker-run\" class=\"headerlink\" title=\"☆ docker run\"></a>☆ docker run</h2><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-a stdin</code>: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li>\n<li>☆<code>-d</code>: 后台运行容器，并返回容器ID；</li>\n<li>☆<code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><code>-P</code>: 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>\n<li><code>-p</code>: 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>\n<li>☆<code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li>☆<code>--name=&quot;nginx-lb&quot;</code>: 为容器指定一个名称；</li>\n<li><code>--dns 8.8.8.8</code>: 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><code>--dns-search example.com</code>: 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><code>-h &quot;mars&quot;</code>: 指定容器的hostname；</li>\n<li>☆<code>-e username=&quot;ritchie&quot;</code>: 设置环境变量；</li>\n<li><code>--env-file=[]</code>: 从指定文件读入环境变量；</li>\n<li><code>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;</code>: 绑定容器到指定CPU运行；</li>\n<li><code>-m</code>:设置容器使用内存最大值；</li>\n<li><code>--net=&quot;bridge&quot;</code>: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li>\n<li><code>--link=[]</code>: 添加链接到另一个容器；</li>\n<li><code>--expose=[]</code>: 开放一个端口或一组端口；</li>\n<li>☆<code>--volume , -v</code>: 绑定一个卷, (或者称作<strong>映射文件夹</strong>，将特定文件夹映射到特定目录)</li>\n<li><code>–rm</code>: 容器退出时自动删除</li>\n<li>☆<code>--restart </code>: 指定重启策略 容器在退出时应该或不应该如何重新启动。可选参数有<code>no</code>、<code> always</code>、<code>on-failure[:max-retries]</code>、<code>unless-stopped</code></li>\n</ul>\n<h3 id=\"设置工作目录-w\"><a href=\"#设置工作目录-w\" class=\"headerlink\" title=\"设置工作目录 (-w)\"></a>设置工作目录 (-w)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker  run -w /path/to/dir/ -i -t  ubuntu <span class=\"hljs-built_in\">pwd</span><br>/path/to/dir<br></code></pre></td></tr></table></figure>\n\n<p><code>-w</code> 允许命令在给定的目录中执行，这里是 <code>/path/to/dir/</code>。 如果路径不存在，则在容器内创建。</p>\n<h3 id=\"挂载卷-v-–read-only\"><a href=\"#挂载卷-v-–read-only\" class=\"headerlink\" title=\"挂载卷 (-v, –read-only)\"></a>挂载卷 (-v, –read-only)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker  run  -v `<span class=\"hljs-built_in\">pwd</span>`:`<span class=\"hljs-built_in\">pwd</span>` -w `<span class=\"hljs-built_in\">pwd</span>` -i -t  ubuntu <span class=\"hljs-built_in\">pwd</span><br><br><span class=\"hljs-comment\"># 只读(ro)和读写(rw)权限</span><br>docker run -v <span class=\"hljs-variable\">$PWD</span>/web:var/www/html/web:ro<br></code></pre></td></tr></table></figure>\n\n<p><code>-v</code>标志将当前工作目录挂载到容器中。 <code>-w</code> 让命令在当前工作目录中执行，方法是将工作目录更改为pwd返回的值。所以这个组合使用容器执行命令，但在当前工作目录中。</p>\n<h3 id=\"发布或者暴露端口-p-–expose\"><a href=\"#发布或者暴露端口-p-–expose\" class=\"headerlink\" title=\"发布或者暴露端口 (-p, –expose)\"></a>发布或者暴露端口 (-p, –expose)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -p 127.0.0.1:80:8080/tcp ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>这将容器的端口8080绑定到主机的127.0.0.1上的TCP端口80。还可以指定udp和sctp端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run --expose 80 ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>这会暴露容器的端口80，而不会将端口发布到主机系统接口。</p>\n<h3 id=\"设置环境变量-e-–env-–env-file\"><a href=\"#设置环境变量-e-–env-–env-file\" class=\"headerlink\" title=\"设置环境变量(-e, –env, –env-file)\"></a>设置环境变量(-e, –env, –env-file)</h3><p>可以通过<code>-e, --env, --env-file</code> 设置容器的环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -e MYVAR1 --<span class=\"hljs-built_in\">env</span> MYVAR2=foo --env-file ./env.list ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>本地已经export的环境变量，可以不用&#x3D;号和值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> VAR1=value1<br><span class=\"hljs-built_in\">export</span> VAR2=value2<br><br>$ docker run --<span class=\"hljs-built_in\">env</span> VAR1 --<span class=\"hljs-built_in\">env</span> VAR2 ubuntu <span class=\"hljs-built_in\">env</span> | grep VAR<br>VAR1=value1<br>VAR2=value2<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在容器上设置元数据-l-–label-–label-file\"><a href=\"#在容器上设置元数据-l-–label-–label-file\" class=\"headerlink\" title=\"在容器上设置元数据(-l, –label, –label-file)\"></a>在容器上设置元数据(-l, –label, –label-file)</h3><p>可以通过<code>-l, --label, --label-file</code> 设置容器的label：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker run -l my-label --label com.example.foo=bar ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将容器连接到网络-–network\"><a href=\"#将容器连接到网络-–network\" class=\"headerlink\" title=\"将容器连接到网络(–network)\"></a>将容器连接到网络(–network)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -itd --network=my-net busybox<br>docker run -itd --network=my-net --ip=10.10.9.75 busybox<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>docker connect</code> 命令</p>\n<h3 id=\"从容器挂载卷-–volumes-from\"><a href=\"#从容器挂载卷-–volumes-from\" class=\"headerlink\" title=\"从容器挂载卷(–volumes-from)\"></a>从容器挂载卷(–volumes-from)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run --volumes-from 777f7dc92da7 --volumes-from ba8c0c54f0f2:ro -i -t ubuntu <span class=\"hljs-built_in\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-start-stop-restart\"><a href=\"#☆-docker-start-stop-restart\" class=\"headerlink\" title=\"☆ docker start&#x2F;stop&#x2F;restart\"></a>☆ docker start&#x2F;stop&#x2F;restart</h2><p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p>\n<p><strong>docker stop</strong> :停止一个运行中的容器</p>\n<p><strong>docker restart</strong> :重启容器</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker start [OPTIONS] CONTAINER [CONTAINER...]<br>docker stop [OPTIONS] CONTAINER [CONTAINER...]<br>docker restart [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>启动已被停止的容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker start myrunoob<br></code></pre></td></tr></table></figure>\n\n<p>停止运行中的容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker stop myrunoob<br></code></pre></td></tr></table></figure>\n\n<p>重启容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker restart myrunoob<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-kill\"><a href=\"#docker-kill\" class=\"headerlink\" title=\"docker kill\"></a>docker kill</h2><p><strong>docker kill</strong> :杀掉一个运行中的容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker kill [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-s</code>:向容器发送一个信号</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>杀掉运行中的容器“docker_ubuntu”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"hljs-built_in\">kill</span> -s KILL docker_ubuntu</span><br>docker_ubuntu<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-rm\"><a href=\"#☆-docker-rm\" class=\"headerlink\" title=\"☆ docker rm\"></a>☆ docker rm</h2><p><strong>docker rm ：</strong>删除一个或多个容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> :通过 SIGKILL 信号强制删除一个运行中的容器。</li>\n<li><code>-l</code>:移除容器间的网络连接，而非容器本身。</li>\n<li><code>-v</code>:删除与容器关联的卷。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>强制删除容器 db01、db02：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -f db01 db02<br></code></pre></td></tr></table></figure>\n\n<p>移除容器 nginx01 对容器 db01 的连接，连接名 db：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -l db <br></code></pre></td></tr></table></figure>\n\n<p>删除容器 nginx01, 并删除容器挂载的数据卷：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -v nginx01<br></code></pre></td></tr></table></figure>\n\n<p>删除所有已经停止的容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm $(docker ps -a -q)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-pause-unpause\"><a href=\"#docker-pause-unpause\" class=\"headerlink\" title=\"docker pause&#x2F;unpause\"></a>docker pause&#x2F;unpause</h2><p><strong>docker pause</strong> :暂停容器中所有的进程。</p>\n<p><strong>docker unpause</strong> :恢复容器中所有的进程。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pause CONTAINER [CONTAINER...]<br>docker unpause CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>暂停数据库容器db01提供服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pause db01<br></code></pre></td></tr></table></figure>\n\n<p>恢复数据库容器 db01 提供服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker unpause db01<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-create\"><a href=\"#docker-create\" class=\"headerlink\" title=\"docker create\"></a>docker create</h2><p><strong>docker create ：</strong>创建一个新的容器但不启动它</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>语法同 <code>docker run</code></p>\n<p><strong>实例</strong></p>\n<p>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker create  --name myrunoob  nginx:latest      <br>09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-exec\"><a href=\"#☆-docker-exec\" class=\"headerlink\" title=\"☆ docker exec\"></a>☆ docker exec</h2><p><strong>docker exec ：</strong>在运行的容器中执行命令</p>\n<ul>\n<li>典型的使用, 在docker中运行<code>bash</code>, 所使用的命令就是<code>docker exec -ti my_container /bin/bash</code></li>\n</ul>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-d</code>:分离模式: 在后台运行</li>\n<li><code>-i</code>:即使没有附加也保持STDIN 打开</li>\n<li><code>-t</code>:分配一个伪终端</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>在容器 mynginx 中以交互模式执行容器内 &#x2F;root&#x2F;runoob.sh 脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh<br>http://www.runoob.com/<br></code></pre></td></tr></table></figure>\n\n<p>在容器 mynginx 中开启一个交互模式的终端:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash<br>root@b1a0703e41e7:/#<br></code></pre></td></tr></table></figure>\n\n<p>也可以通过 <strong>docker ps -a</strong> 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p>\n<p>查看已经在运行的容器 ID：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">docker ps -a</span> <br>...<br>9df70f9a0714        openjdk             &quot;/usercode/script.sh…&quot; <br>...<br></code></pre></td></tr></table></figure>\n\n<p>第一列的 9df70f9a0714 就是容器 ID。</p>\n<p>通过 exec 命令对指定的容器执行 bash:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">docker <span class=\"hljs-built_in\">exec</span> -it 9df70f9a0714 /bin/bash</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-容器管理-container-↓\"><a href=\"#↓-容器管理-container-↓\" class=\"headerlink\" title=\"↓ 容器管理 container ↓\"></a>↓ 容器管理 container ↓</h2><h2 id=\"☆-docker-ps\"><a href=\"#☆-docker-ps\" class=\"headerlink\" title=\"☆ docker ps\"></a>☆ docker ps</h2><p><strong>docker ps :</strong> 列出容器</p>\n<ul>\n<li>典型使用方法, 列出所有的容器(container), <code>docker ps -a</code></li>\n</ul>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker ps [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-a</code> :显示所有的容器，包括未运行的。</li>\n<li><code>-f</code> :根据条件过滤显示的内容。</li>\n<li><code>--format</code> :指定返回值的模板文件。</li>\n<li><code>-l</code>:显示最近创建的容器。</li>\n<li><code>-n</code>:列出最近创建的n个容器。</li>\n<li><code>--no-trunc</code> :不截断输出。</li>\n<li><code>-q</code> :静默模式，只显示容器编号。</li>\n<li><code>-s</code>:显示总的文件大小。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>列出所有在运行的容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps<br>CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES<br>09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myrunoob<br>96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp   mymysql<br></code></pre></td></tr></table></figure>\n\n<p>输出详情介绍：</p>\n<p><strong>CONTAINER ID:</strong> 容器 ID。</p>\n<p><strong>IMAGE:</strong> 使用的镜像。</p>\n<p><strong>COMMAND:</strong> 启动容器时运行的命令。</p>\n<p><strong>CREATED:</strong> 容器的创建时间。</p>\n<p><strong>STATUS:</strong> 容器状态。</p>\n<p>状态有7种：</p>\n<ul>\n<li>created（已创建）</li>\n<li>restarting（重启中）</li>\n<li>running（运行中）</li>\n<li>removing（迁移中）</li>\n<li>paused（暂停）</li>\n<li>exited（停止）</li>\n<li>dead（死亡）</li>\n</ul>\n<p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\\udp）。</p>\n<p><strong>NAMES:</strong> 自动分配的容器名称。</p>\n<p>列出最近创建的5个容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps -n 5<br>CONTAINER ID        IMAGE               COMMAND                   CREATED           <br>09b93464c2f7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...     <br>b8573233d675        nginx:latest        &quot;/bin/bash&quot;               2 days ago   ...     <br>b1a0703e41e7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...    <br>f46fb1dec520        5c6e1090e771        &quot;/bin/sh -c &#x27;set -x \\t&quot;   2 days ago   ...   <br>a63b4a5597de        860c279d2fec        &quot;bash&quot;                    2 days ago   ...<br></code></pre></td></tr></table></figure>\n\n<p>列出所有创建的容器ID。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps -a -q<br>09b93464c2f7<br>b8573233d675<br>b1a0703e41e7<br>f46fb1dec520<br>a63b4a5597de<br>6a4aa42e947b<br>de7bb36e7968<br>43a432b73776<br>664a8ab1a585<br>ba52eb632bbd<br>...<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-inspect-获取容器信息\"><a href=\"#docker-inspect-获取容器信息\" class=\"headerlink\" title=\"docker inspect 获取容器信息\"></a>docker inspect 获取容器信息</h2><p><strong>docker inspect :</strong> 获取容器&#x2F;镜像的元数据。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker inspect [OPTIONS] NAME|ID [NAME|ID...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> :指定返回值的模板文件。</li>\n<li><code>-s</code>显示总的文件大小。</li>\n<li><code>--type</code>为指定类型返回JSON。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>获取镜像mysql:5.6的元信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker inspect mysql:5.6<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec&quot;,<br>        &quot;RepoTags&quot;: [<br>            &quot;mysql:5.6&quot;<br>        ],<br>        &quot;RepoDigests&quot;: [],<br>        &quot;Parent&quot;: &quot;&quot;,<br>        &quot;Comment&quot;: &quot;&quot;,<br>        &quot;Created&quot;: &quot;2016-05-24T04:01:41.168371815Z&quot;,<br>        &quot;Container&quot;: &quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54&quot;,<br>        &quot;ContainerConfig&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;b0cf605c7757&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;ExposedPorts&quot;: &#123;<br>                &quot;3306/tcp&quot;: &#123;&#125;<br>            &#125;,<br>...<br></code></pre></td></tr></table></figure>\n\n<p>获取正在运行的容器mymysql的 IP。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mymysql<br>172.17.0.3<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-top-查看容器内进程信息\"><a href=\"#☆-docker-top-查看容器内进程信息\" class=\"headerlink\" title=\"☆ docker top 查看容器内进程信息\"></a>☆ docker top 查看容器内进程信息</h2><p>**docker top :**查看容器中运行的进程信息，支持 ps 命令参数。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker top [OPTIONS] CONTAINER [ps OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>容器运行时不一定有&#x2F;bin&#x2F;bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。</p>\n<p><strong>实例</strong></p>\n<p>查看容器mymysql的进程信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker top mymysql<br>UID    PID    PPID    C      STIME   TTY  TIME       CMD<br>999    40347  40331   18     00:58   ?    00:00:02   mysqld<br></code></pre></td></tr></table></figure>\n\n<p>查看所有运行容器的进程信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span>  `docker ps |grep Up|awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>`;<span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> \\ &amp;&amp;docker top <span class=\"hljs-variable\">$i</span>; <span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-update-动态更新容器配置\"><a href=\"#☆-docker-update-动态更新容器配置\" class=\"headerlink\" title=\"☆ docker update 动态更新容器配置\"></a>☆ docker update 动态更新容器配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker update [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>The <code>docker update</code> and <code>docker container update</code> commands are not supported for Windows containers.</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称、简写</th>\n<th>默认</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--blkio-weight</code></td>\n<td></td>\n<td>块 IO（相对权重），介于 10 到 1000 之间，或 0 禁用（默认 0）</td>\n</tr>\n<tr>\n<td><code>--cpu-period</code></td>\n<td></td>\n<td>限制CPU CFS（完全公平调度程序）周期</td>\n</tr>\n<tr>\n<td><code>--cpu-quota</code></td>\n<td></td>\n<td>限制CPU CFS（完全公平调度程序）配额</td>\n</tr>\n<tr>\n<td><code>--cpu-rt-period</code></td>\n<td></td>\n<td>限制CPU实时周期（以微秒为单位）</td>\n</tr>\n<tr>\n<td><code>--cpu-rt-runtime</code></td>\n<td></td>\n<td>将CPU实时运行时间限制在微秒级</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#cpu-shares\"><code>--cpu-shares</code></a>,<a href=\"https://docs.docker.com/engine/reference/commandline/update/#cpu-shares\"><code>-c</code></a></td>\n<td></td>\n<td>CPU 份额（相对权重）</td>\n</tr>\n<tr>\n<td><code>--cpus</code></td>\n<td></td>\n<td>CPU数量</td>\n</tr>\n<tr>\n<td><code>--cpuset-cpus</code></td>\n<td></td>\n<td>允许执行的 CPU (0-3, 0,1)</td>\n</tr>\n<tr>\n<td><code>--cpuset-mems</code></td>\n<td></td>\n<td>允许执行的 MEM (0-3, 0,1)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#memory\"><code>--memory</code></a>,<a href=\"https://docs.docker.com/engine/reference/commandline/update/#memory\"><code>-m</code></a></td>\n<td></td>\n<td>内存限制 (bytes)</td>\n</tr>\n<tr>\n<td><code>--memory-reservation</code></td>\n<td></td>\n<td>内存软限制</td>\n</tr>\n<tr>\n<td><code>--memory-swap</code></td>\n<td></td>\n<td>交换限制等于内存加交换：-1 启用无限制交换</td>\n</tr>\n<tr>\n<td><code>--pids-limit</code></td>\n<td></td>\n<td><a href=\"https://docs.docker.com/engine/api/v1.40/\"><strong>API 1.40+</strong></a> 调整容器 pid 限制（设置 -1 表示无限制）</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#restart\"><code>--restart</code></a></td>\n<td></td>\n<td>容器退出时应用的重新启动策略</td>\n</tr>\n</tbody></table>\n<h4 id=\"restart\"><a href=\"#restart\" class=\"headerlink\" title=\"restart\"></a>restart</h4><p>–restart具体参数值详细信息：</p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>no</code></td>\n<td>不要自动重启容器。 （默认）</td>\n</tr>\n<tr>\n<td><code>on-failure[:max-retries]</code></td>\n<td>如果容器因错误而退出（表现为非零退出代码），请重新启动容器。 （可选）使用该选项限制 Docker 守护进程尝试重新启动容器的次数<code>:max-retries</code>。该<code>on-failure</code>策略仅在容器因失败退出时提示重新启动。<strong>如果守护进程重新启动，它不会重新启动容器。</strong></td>\n</tr>\n<tr>\n<td><code>always</code></td>\n<td>如果容器停止，请务必重新启动容器。如果手动停止，则只有当 Docker 守护进程重新启动或手动重新启动容器本身时，它才会重新启动。 （请参阅<a href=\"https://docs.docker.com/config/containers/start-containers-automatically/#restart-policy-details\">重启政策详细信息</a>中列出的第二个项目符号 ）</td>\n</tr>\n<tr>\n<td><code>unless-stopped</code></td>\n<td>与 类似<code>always</code>，只不过当容器停止（手动或其他方式）时，即使 Docker 守护进程重新启动，它也不会重新启动。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>no - 容器退出时，不重启容器；</li>\n<li>on-failure - 只有在非0状态退出时才从新启动容器；</li>\n<li>always - 无论退出状态是如何，都重启容器；</li>\n</ul>\n<p>还可以在使用on-failure策略时，指定<a href=\"https://pythonjishu.com/tag/docker/\">Docker</a>将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> <span class=\"hljs-attribute\">--restart</span>=on-failure:10 &lt;CONTAINER ID&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-attach-附着容器\"><a href=\"#docker-attach-附着容器\" class=\"headerlink\" title=\"docker attach 附着容器\"></a>docker attach 附着容器</h2><p>**docker attach :**附着到正在运行中的容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker attach [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p><code>--no-stdin=false</code> 不连接标准输入</p>\n<p><code>--sig-proxy=true</code> 将所有信号传递给进程（非TTY模式时也一样）但不传送SIGCHLD、SIGKILL、SIGSTOP信号。经常使用的信号如下：</p>\n<h4 id=\"detach\"><a href=\"#detach\" class=\"headerlink\" title=\"detach\"></a><strong>detach</strong></h4><p>要在不退出 shell 的情况下分离 tty，请使用转义序列<code>Ctrl+P</code>后跟<code>Ctrl+ Q</code>。更多细节<a href=\"https://docs.docker.com/engine/reference/commandline/attach/\">在这里</a>。</p>\n<ul>\n<li>docker run -t -i → 可以<code>^P^Q</code>使用 docker attach 分离和重新附加</li>\n<li>docker run -i → 不能用<code>^P^Q</code>;分离 会破坏标准输入</li>\n<li>docker run → 不能用<code>^P^Q</code>;分离 可以 SIGKILL 客户端；可以使用 docker attach 重新附加</li>\n<li><code>docker attach --sig-proxy=false</code> 可以使用 <code>^C</code>来进行detach, <code>CTRL+c</code></li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><strong>注意</strong></h3><p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>\n<blockquote>\n<p>  官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy&#x3D;false来确保CTRL-D或CTRL-C不会关闭容器。</p>\n</blockquote>\n<p><strong>实例</strong></p>\n<p>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker attach --sig-proxy=false mynginx<br>192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-events\"><a href=\"#docker-events\" class=\"headerlink\" title=\"docker events\"></a>docker events</h2><p><strong>docker events :</strong> 从服务器获取实时事件</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker events [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-f ：</strong>根据条件过滤事件；</li>\n<li><strong>–since ：</strong>从指定的时间戳后显示所有事件;</li>\n<li><strong>–until ：</strong>流水时间显示到指定的时间为止；</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>显示docker 2016年7月1日后的所有事件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker events  --since=&quot;1467302400&quot;<br>2016-07-08T19:44:54.501277677+08:00 network connect 66f958fd13dc4314ad20034e576d5c5eba72e0849dcc38ad9e8436314a4149d4 (container=b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64, name=bridge, type=bridge)<br>2016-07-08T19:44:54.723876221+08:00 container start b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (image=nginx:latest, name=elegant_albattani)<br>2016-07-08T19:44:54.726110498+08:00 container resize b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (height=39, image=nginx:latest, name=elegant_albattani, width=167)<br>2016-07-08T19:46:22.137250899+08:00 container die b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (exitCode=0, image=nginx:latest, name=elegant_albattani)<br>...<br></code></pre></td></tr></table></figure>\n\n<p>显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; <br>2016-07-11T00:38:53.975174837+08:00 container start 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:51:17.022572452+08:00 container kill 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql, signal=9)<br>2016-07-11T00:51:17.132532080+08:00 container die 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (exitCode=137, image=mysql:5.6, name=mymysql)<br>2016-07-11T00:51:17.514661357+08:00 container destroy 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.551984549+08:00 container create c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.557405864+08:00 container attach c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.844134112+08:00 container start c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:19.140141428+08:00 container die c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (exitCode=1, image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:05.941019136+08:00 container destroy c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:07.965128417+08:00 container create a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:08.188734598+08:00 container start a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:20.010876777+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T01:06:01.395365098+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br></code></pre></td></tr></table></figure>\n\n<p>如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如–since&#x3D;”2016-07-01”。</p>\n<h2 id=\"☆-docker-logs\"><a href=\"#☆-docker-logs\" class=\"headerlink\" title=\"☆ docker logs\"></a>☆ docker logs</h2><p><strong>docker logs :</strong> 获取容器的日志</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logs [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> : 跟踪日志输出</li>\n<li><code>--since</code>显示某个开始时间的所有日志</li>\n<li><code>-t</code> 显示时间戳</li>\n<li><code>--tail</code>仅列出最新N条容器日志</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>跟踪查看容器mynginx的日志输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker logs -f mynginx<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.239.130/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>...<br></code></pre></td></tr></table></figure>\n\n<p>查看容器mynginx从2016年7月1日后的最新10条日志。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-wait\"><a href=\"#docker-wait\" class=\"headerlink\" title=\"docker wait\"></a>docker wait</h2><p><strong>docker wait :</strong> 阻塞运行直到容器停止，然后打印出它的退出代码。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker wait [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker wait CONTAINER<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-export-导出\"><a href=\"#docker-export-导出\" class=\"headerlink\" title=\"docker export 导出\"></a>docker export 导出</h2><p>**docker export :**将文件系统作为一个tar归档文件导出到STDOUT。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker export [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-o</code>将输入内容写到文件。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将id为a404c6c174a2的容器按日期保存为tar文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2<br>runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar<br>mysql-20160711.tar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-port\"><a href=\"#docker-port\" class=\"headerlink\" title=\"docker port\"></a>docker port</h2><p><strong>docker port :</strong> 列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>查看容器mynginx的端口映射情况。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker port mymysql<br>3306/tcp -&gt; 0.0.0.0:3306<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-stats-统计\"><a href=\"#docker-stats-统计\" class=\"headerlink\" title=\"docker stats 统计\"></a>docker stats 统计</h2><p><strong>docker stats :</strong> 统计显示容器资源的使用情况，包括：CPU、内存、网络 I&#x2F;O 等。</p>\n<p>stats: abbr. 统计（statistics）；</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker stats [OPTIONS] [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><code>--all , -a</code> :显示所有的容器，包括未运行的。</li>\n<li><code>format</code> :指定返回值的模板文件。</li>\n<li><code>--no-stream</code> :展示当前状态就直接退出了，不再实时更新。</li>\n<li><code>--no-trunc</code> :不截断输出。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>列出所有在运行的容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$  docker stats<br>CONTAINER ID        NAME                                    CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS<br>b95a83497c91        awesome_brattain                        0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9<br>67b2525d8ad1        foobar                                  0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2<br>e5c383697914        test-1951.1.kay7x1lh1twk9c0oig50sd5tr   0.00%               196KiB / 1.952GiB     0.01%               71.2kB / 0B         770kB / 0B          1<br>4bda148efbc0        random.1.vnc8on831idyr42slu578u3cr      0.00%               1.672MiB / 1.952GiB   0.08%               110kB / 0B          578kB / 0B          2<br></code></pre></td></tr></table></figure>\n\n<p>输出详情介绍：</p>\n<p><strong>CONTAINER ID 与 NAME:</strong> 容器 ID 与名称。</p>\n<p><strong>CPU % 与 MEM %:</strong> 容器使用的 CPU 和内存的百分比。</p>\n<p><strong>MEM USAGE &#x2F; LIMIT:</strong> 容器正在使用的总内存，以及允许使用的内存总量。</p>\n<p><strong>NET I&#x2F;O:</strong> 容器通过其网络接口发送和接收的数据量。</p>\n<p><strong>BLOCK I&#x2F;O:</strong> 容器从主机上的块设备读取和写入的数据量。</p>\n<p><strong>PIDs:</strong> 容器创建的进程或线程数。</p>\n<p>根据容器等 ID 或名称现实信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats awesome_brattain 67b2525d8ad1<br><br>CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS<br>b95a83497c91        awesome_brattain    0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9<br>67b2525d8ad1        foobar              0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2<br></code></pre></td></tr></table></figure>\n\n<p>以 JSON 格式输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats nginx --no-stream --format &quot;&#123;&#123; json . &#125;&#125;&quot;<br>  &#123;&quot;BlockIO&quot;:&quot;0B / 13.3kB&quot;,&quot;CPUPerc&quot;:&quot;0.03%&quot;,&quot;Container&quot;:&quot;nginx&quot;,&quot;ID&quot;:&quot;ed37317fbf42&quot;,&quot;MemPerc&quot;:&quot;0.24%&quot;,&quot;MemUsage&quot;:&quot;2.352MiB / 982.5MiB&quot;,&quot;Name&quot;:&quot;nginx&quot;,&quot;NetIO&quot;:&quot;539kB / 606kB&quot;,&quot;PIDs&quot;:&quot;2&quot;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出指定的信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats --all --format &quot;table &#123;&#123;.Container&#125;&#125;\\t&#123;&#123;.CPUPerc&#125;&#125;\\t&#123;&#123;.MemUsage&#125;&#125;&quot; fervent_panini 5acfcb1b4fd1 drunk_visvesvaraya big_heisenberg<br>  &#123;&quot;BlockIO&quot;:&quot;0B / 13.3kB&quot;,&quot;CPUPerc&quot;:&quot;0.03%&quot;,&quot;Container&quot;:&quot;nginx&quot;,&quot;ID&quot;:&quot;ed37317fbf42&quot;,&quot;MemPerc&quot;:&quot;0.24%&quot;,&quot;MemUsage&quot;:&quot;2.352MiB / 982.5MiB&quot;,&quot;Name&quot;:&quot;nginx&quot;,&quot;NetIO&quot;:&quot;539kB / 606kB&quot;,&quot;PIDs&quot;:&quot;2&quot;&#125;<br><br>CONTAINER                CPU %               MEM USAGE / LIMIT<br>fervent_panini           0.00%               56KiB / 15.57GiB<br>5acfcb1b4fd1             0.07%               32.86MiB / 15.57GiB<br>drunk_visvesvaraya       0.00%               0B / 0B<br>big_heisenberg           0.00%               0B / 0B<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-镜像管理-image-↓\"><a href=\"#↓-镜像管理-image-↓\" class=\"headerlink\" title=\"↓ 镜像管理 image ↓\"></a>↓ 镜像管理 image ↓</h2><h2 id=\"Docker-commit\"><a href=\"#Docker-commit\" class=\"headerlink\" title=\"Docker commit\"></a>Docker commit</h2><p><a href=\"https://yeasy.gitbook.io/docker_practice/image/commit\">参考链接: 利用 commit 理解镜像构成</a></p>\n<p>**docker commit :**从容器创建一个新的镜像。</p>\n<blockquote>\n<p>  我们并不推荐使用这个命令构建image, 我们会推荐使用更加强大的Dockerfile来进行构建</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :提交的镜像作者；</p>\n</li>\n<li><p><code>-c</code>使用Dockerfile指令来创建镜像；</p>\n</li>\n<li><p><code>-m</code>提交时的说明文字；</p>\n</li>\n<li><p><code>-p</code> :在commit时，将容器暂停。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 <br>sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057<br>runoob@runoob:~$ docker images mymysql:v1<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>mymysql             v1                  37af1236adef        15 seconds ago      329 MB<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <strong><code>Docker commit</code>释义</strong></p>\n<p>  要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>\n<p>  <strong>慎用 <code>docker commit</code></strong></p>\n<p>  使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p>\n<p>  首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的 <code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，将会导致镜像极为臃肿。</p>\n<p>  此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p>\n<p>  而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p>\n</blockquote>\n<h2 id=\"☆-docker-cp-Copy-Data\"><a href=\"#☆-docker-cp-Copy-Data\" class=\"headerlink\" title=\"☆ docker cp (Copy Data)\"></a>☆ docker cp (Copy Data)</h2><p><code>docker cp</code> :用于容器与主机之间的数据拷贝。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-L</code>保持源目标中的链接</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp /www/runoob 96f7f14e99ab:/www/<br></code></pre></td></tr></table></figure>\n\n<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp /www/runoob 96f7f14e99ab:/www<br></code></pre></td></tr></table></figure>\n\n<p>将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp  96f7f14e99ab:/www /tmp/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-diff\"><a href=\"#docker-diff\" class=\"headerlink\" title=\"docker diff\"></a>docker diff</h2><p><code>docker diff</code> : 检查容器里文件结构的更改。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker diff [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>查看容器mymysql的文件结构更改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker diff mymysql<br>A /logs<br>A /mysql_data<br>C /run<br>C /run/mysqld<br>A /run/mysqld/mysqld.pid<br>A /run/mysqld/mysqld.sock<br>C /tmp<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-镜像仓库管理-↓\"><a href=\"#↓-镜像仓库管理-↓\" class=\"headerlink\" title=\"↓ 镜像仓库管理 ↓\"></a>↓ 镜像仓库管理 ↓</h2><h2 id=\"docker-login-logout\"><a href=\"#docker-login-logout\" class=\"headerlink\" title=\"docker login&#x2F;logout\"></a>docker login&#x2F;logout</h2><p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>\n<p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker login [OPTIONS] [SERVER]<br>docker logout [OPTIONS] [SERVER]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-u</code> :登陆的用户名</li>\n<li><code>-p</code> :登陆的密码</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>登陆到Docker Hub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker login -u 用户名 -p 密码<br></code></pre></td></tr></table></figure>\n\n<p>登出Docker Hub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logout<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a>docker pull</h2><p><strong>docker pull :</strong> 从镜像仓库中拉取或者更新指定镜像</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :拉取所有 tagged 镜像</p>\n</li>\n<li><p><code>--disable-content-trust</code>忽略镜像的校验,默认开启</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从Docker Hub下载java最新版镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull java<br></code></pre></td></tr></table></figure>\n\n<p>从Docker Hub下载REPOSITORY为java的所有镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull -a java<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-push\"><a href=\"#docker-push\" class=\"headerlink\" title=\"docker push\"></a>docker push</h2><p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker push [OPTIONS] NAME[:TAG]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--disable-content-trust</code> :忽略镜像的校验,默认开启</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>上传本地镜像myapache:v1到镜像仓库中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker push myapache:v1<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"☆-docker-search\"><a href=\"#☆-docker-search\" class=\"headerlink\" title=\"☆ docker search\"></a>☆ docker search</h2><p><strong>docker search :</strong> 从Docker Hub查找镜像</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker search [OPTIONS] TERM<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--automated</code> :只列出 automated build类型的镜像；</li>\n<li><code>--no-trunc</code> :显示完整的镜像描述；</li>\n<li><code>-f &lt;过滤条件&gt;</code>:列出收藏数不小于指定值的镜像。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker search -f stars=10 java<br>NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED<br>java                  Java is a concurrent, class-based...   1037    [OK]       <br>anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]<br>develar/java                                                 46                 [OK]<br>isuper/java-oracle    This repository contains all java...   38                 [OK]<br>lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]<br>nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<p><strong>NAME:</strong> 镜像仓库源的名称</p>\n<p><strong>DESCRIPTION:</strong> 镜像的描述</p>\n<p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p>\n<p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>\n<p><strong>AUTOMATED:</strong> 自动构建。</p>\n<h2 id=\"↓-本地镜像管理-↓\"><a href=\"#↓-本地镜像管理-↓\" class=\"headerlink\" title=\"↓ 本地镜像管理 ↓\"></a>↓ 本地镜像管理 ↓</h2><h2 id=\"☆-docker-images\"><a href=\"#☆-docker-images\" class=\"headerlink\" title=\"☆ docker images\"></a>☆ docker images</h2><p><strong>docker images :</strong> 列出本地镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker images [OPTIONS] [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</p>\n</li>\n<li><p><code>--digests</code> :显示镜像的摘要信息；</p>\n</li>\n<li><p><code>-f</code> :显示满足条件的镜像；</p>\n</li>\n<li><p><code>--format</code> :指定返回值的模板文件；</p>\n</li>\n<li><p><code>--no-trunc</code> :显示完整的镜像信息；</p>\n</li>\n<li><p><code>-q</code> :只显示镜像ID。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>查看本地镜像列表。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker images<br>REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE<br>mymysql                 v1                  37af1236adef        5 minutes ago       329 MB<br>runoob/ubuntu           v4                  1c06aa18edee        2 days ago          142.1 MB<br>&lt;none&gt;                  &lt;none&gt;              5c6e1090e771        2 days ago          165.9 MB<br>httpd                   latest              ed38aaffef30        11 days ago         195.1 MB<br>alpine                  latest              4e38e38c8ce0        2 weeks ago         4.799 MB<br>mongo                   3.2                 282fd552add6        3 weeks ago         336.1 MB<br>redis                   latest              4465e4bcad80        3 weeks ago         185.7 MB<br>php                     5.6-fpm             025041cd3aa5        3 weeks ago         456.3 MB<br>python                  3.5                 045767ddf24a        3 weeks ago         684.1 MB<br>...<br></code></pre></td></tr></table></figure>\n\n<p>列出本地镜像中REPOSITORY为ubuntu的镜像列表。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker images  ubuntu<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>ubuntu              14.04               90d5884b1ee0        9 weeks ago         188 MB<br>ubuntu              15.10               4e3b13c8a266        3 months ago        136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-rmi\"><a href=\"#docker-rmi\" class=\"headerlink\" title=\"docker rmi\"></a>docker rmi</h2><p><strong>docker rmi :</strong> 删除本地一个或多个镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rmi [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-f</code> :强制删除；</p>\n</li>\n<li><p><code>--no-prune</code>不移除该镜像的过程镜像，默认移除；</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>强制删除本地镜像 runoob&#x2F;ubuntu:v4。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker rmi -f runoob/ubuntu:v4<br>Untagged: runoob/ubuntu:v4<br>Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072be<br>Deleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-tag\"><a href=\"#docker-tag\" class=\"headerlink\" title=\"docker tag\"></a>docker tag</h2><p><strong>docker tag :</strong> 标记本地镜像，将其归入某一仓库。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>将镜像ubuntu:15.10标记为 runoob&#x2F;ubuntu:v3 镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker tag ubuntu:15.10 runoob/ubuntu:v3<br>root@runoob:~# docker images   runoob/ubuntu:v3<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>runoob/ubuntu       v3                  4e3b13c8a266        3 months ago        136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"☆-docker-build\"><a href=\"#☆-docker-build\" class=\"headerlink\" title=\"☆ docker build\"></a>☆ docker build</h2><p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build [OPTIONS] PATH | URL | -<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--build-arg=[]</code>设置镜像创建时的变量；</li>\n<li><code>--cpu-shares</code>设置 cpu 使用权重；</li>\n<li><code>--cpu-period</code>限制 CPU CFS周期；</li>\n<li><code>--cpu-quota</code>限制 CPU CFS配额；</li>\n<li><code>--cpuset-cpus</code>指定使用的CPU id；</li>\n<li><code>--cpuset-mems</code>指定使用的内存 id；</li>\n<li><code>--disable-content-trust</code>忽略校验，默认开启；</li>\n<li><code>-f</code> :指定要使用的Dockerfile路径；</li>\n<li><code>--force-rm</code>设置镜像过程中删除中间容器；</li>\n<li><code>--isolation</code>使用容器隔离技术；</li>\n<li><code>--label=[]</code>设置镜像使用的元数据；</li>\n<li><code>-m</code>设置内存最大值；</li>\n<li><code>--memory-swap</code>:设置Swap的最大值为内存+swap，”-1”表示不限swap；</li>\n<li><code>--no-cache</code>:创建镜像的过程不使用缓存；</li>\n<li><code>--pull</code>:尝试去更新镜像的新版本；</li>\n<li><code>--quiet, -q</code>:安静模式，成功后只输出镜像 ID；</li>\n<li><code>--rm</code>:设置镜像成功后删除中间容器；</li>\n<li><code>--shm-size</code>:设置&#x2F;dev&#x2F;shm的大小，默认值是64M；</li>\n<li><code>--ulimit</code>:Ulimit配置。</li>\n<li><code>--squash</code>:将 Dockerfile 中所有的操作压缩为一层。</li>\n<li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>\n<li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob&#x2F;ubuntu:v1。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build -t runoob/ubuntu:v1 . <br></code></pre></td></tr></table></figure>\n\n<p>使用URL <strong>github.com&#x2F;creack&#x2F;docker-firefox</strong> 的 Dockerfile 创建镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build github.com/creack/docker-firefox<br></code></pre></td></tr></table></figure>\n\n<p>也可以通过 -f Dockerfile 文件的位置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -f /path/to/a/Dockerfile .</span><br></code></pre></td></tr></table></figure>\n\n<p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -t <span class=\"hljs-built_in\">test</span>/myapp .</span><br>Sending build context to Docker daemon 2.048 kB<br>Error response from daemon: Unknown instruction: RUNCMD<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"docker-history\"><a href=\"#docker-history\" class=\"headerlink\" title=\"docker history\"></a>docker history</h2><p><strong>docker history :</strong> 查看指定镜像的创建历史。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker history [OPTIONS] IMAGE<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-H</code>:以可读的格式打印镜像大小和日期，默认为true；</p>\n</li>\n<li><p><code>--no-trunc</code> :显示完整的提交记录；</p>\n</li>\n<li><p><code>-q</code> :仅列出提交记录ID。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>查看本地镜像runoob&#x2F;ubuntu:v3的创建历史。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker history runoob/ubuntu:v3<br>IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT<br>4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B                 <br>&lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#x27;s/^#\\s*\\(deb.*universe\\)$/   1.863 kB            <br>&lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /u   701 B               <br>&lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-save\"><a href=\"#docker-save\" class=\"headerlink\" title=\"docker save\"></a>docker save</h2><p><strong>docker save :</strong> 将指定镜像保存成 tar 归档文件。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker save [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><code>-o</code>:输出到的文件。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将镜像 runoob&#x2F;ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3<br>runoob@runoob:~$ ll my_ubuntu_v3.tar<br>-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-load\"><a href=\"#docker-load\" class=\"headerlink\" title=\"docker load\"></a>docker load</h2><p><strong>docker load :</strong> 导入使用 <a href=\"https://www.runoob.com/docker/docker-save-command.html\">docker save</a> 命令导出的镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker load [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><p><code>--input , -i</code>: 指定导入的文件，代替 STDIN。</p>\n</li>\n<li><p><code>--quiet , -q</code>: 精简输出信息。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>导入镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker image <span class=\"hljs-built_in\">ls</span></span><br><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker load &lt; busybox.tar.gz</span><br><br>Loaded image: busybox:latest<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images</span><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>busybox             latest              769b9341d937        7 weeks ago         2.489 MB<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker load --input fedora.tar</span><br><br>Loaded image: fedora:rawhide<br><br>Loaded image: fedora:20<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images</span><br><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>busybox             latest              769b9341d937        7 weeks ago         2.489 MB<br>fedora              rawhide             0d20aec6529d        7 weeks ago         387 MB<br>fedora              20                  58394af37342        7 weeks ago         385.5 MB<br>fedora              heisenbug           58394af37342        7 weeks ago         385.5 MB<br>fedora              latest              58394af37342        7 weeks ago         385.5 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-import\"><a href=\"#docker-import\" class=\"headerlink\" title=\"docker import\"></a>docker import</h2><p><strong>docker import :</strong> 从归档文件中创建镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-c</code>:应用docker 指令创建镜像；</p>\n</li>\n<li><p><code>-m</code>:提交时的说明文字；</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob&#x2F;ubuntu:v4</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  <br>sha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39<br>runoob@runoob:~$ docker images runoob/ubuntu:v4<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>runoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h2><p><code>docker info</code> : 显示 Docker 信息，主机详细系统信息，镜像和容器信息。</p>\n<h2 id=\"docker-version\"><a href=\"#docker-version\" class=\"headerlink\" title=\"docker version\"></a>docker version</h2><p><code>docker version</code> :显示 Docker 版本信息。</p>\n<h1 id=\"Dockerfile的使用\"><a href=\"#Dockerfile的使用\" class=\"headerlink\" title=\"Dockerfile的使用\"></a>Dockerfile的使用</h1><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h2 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">❯ mkdir web_docker<br>❯ cd web_docker<br>❯ touch Dockerfile<br>❯ tree .. -f<br>..<br>└── ../web_docker<br>    └── ../web_docker/Dockerfile<br></code></pre></td></tr></table></figure>\n\n<p>在上面的命令中, 我们创建了 <code>web_docker</code>文件夹, <code>web_docker</code>文件夹就是我们的构建环境(build environment), docker称此环境为上下文(context)，或者构建上下文(context), docker会在构建镜像时构建上下文和该上下文中的文件和目录，上传到docker守护进程，这样docker守护进程就能直接访问你想在镜像中存储的任何代码文件和其他数据。</p>\n<h2 id=\"dockerfile-示例\"><a href=\"#dockerfile-示例\" class=\"headerlink\" title=\"dockerfile 示例\"></a>dockerfile 示例</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># version 0.0.1</span><br><span class=\"hljs-keyword\">FROM</span> ubuntu:<span class=\"hljs-number\">14.04</span><br><span class=\"hljs-keyword\">MAINTAINER</span> James Turnbull <span class=\"hljs-string\">&quot;james@example.com&quot;</span><br><span class=\"hljs-keyword\">ENV</span> REFRESHED_AT <span class=\"hljs-number\">2014</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">01</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get -y -q install nginx</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;Hi i am in you container&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  Dockerfile也支持注释, 使用#开头就是注释了</p>\n</blockquote>\n<hr>\n<h2 id=\"指令详解\"><a href=\"#指令详解\" class=\"headerlink\" title=\"指令详解\"></a>指令详解</h2><h3 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h3><p>构建镜像基于哪个镜像</p>\n<h3 id=\"MANTAINER\"><a href=\"#MANTAINER\" class=\"headerlink\" title=\"MANTAINER\"></a>MANTAINER</h3><p>镜像维护者 姓名 邮箱地址</p>\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">RUN &lt;命令行命令&gt;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><br></code></pre></td></tr></table></figure>\n\n<p>exec 格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">例如：</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">RUN [<span class=\"hljs-string\">&quot;./test.php&quot;</span>, <span class=\"hljs-string\">&quot;dev&quot;</span>, <span class=\"hljs-string\">&quot;offline&quot;</span>] 等价于 RUN ./test.php dev offline</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">COPY [--chown=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span>&gt;</span>] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">源路径1</span>&gt;</span>...  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">目标路径</span>&gt;</span><br>COPY [--chown=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span>&gt;</span>] [&quot;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">源路径1</span>&gt;</span>&quot;,...  &quot;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">目标路径</span>&gt;</span>&quot;]<br></code></pre></td></tr></table></figure>\n\n<p>**[–chown&#x3D;<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>\n<p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> hom* /mydir/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> hom?.txt /mydir/</span><br></code></pre></td></tr></table></figure>\n\n<p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>\n<ul>\n<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>\n<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>\n<ul>\n<li>CMD 在docker run 时运行。</li>\n<li>RUN 是在 docker build。</li>\n</ul>\n<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> &lt;shell 命令&gt; </span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...] </span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...]  <span class=\"hljs-comment\"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span><br></code></pre></td></tr></table></figure>\n\n<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>\n<h3 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>\n<p>但是, 如果运行 docker run 时使用了 –entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</p>\n<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">ENTRYPOINT <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;&lt;executeable&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...]</span><br></code></pre></td></tr></table></figure>\n\n<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>\n<p>示例：</p>\n<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> nginx<br><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;nginx&quot;</span>, <span class=\"hljs-string\">&quot;-c&quot;</span>] <span class=\"hljs-comment\"># 定参</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class=\"hljs-comment\"># 变参 </span></span><br></code></pre></td></tr></table></figure>\n\n<p>1、不传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ docker <span class=\"hljs-keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"hljs-built_in\">test</span></span><br></code></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">nginx -c <span class=\"hljs-regexp\">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure>\n\n<p>2、传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ docker <span class=\"hljs-keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"hljs-built_in\">test</span> -c /etc/nginx/new.conf</span><br></code></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程(&#x2F;etc&#x2F;nginx&#x2F;new.conf:假设容器内已有此文件)</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">nginx -c <span class=\"hljs-regexp\">/etc/</span>nginx/<span class=\"hljs-keyword\">new</span>.conf<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ENV <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span><br>ENV <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key1</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value1</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key2</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value2</span>&gt;</span>...<br></code></pre></td></tr></table></figure>\n\n<p>以下示例设置 NODE_VERSION &#x3D; 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENV</span> NODE_VERSION <span class=\"hljs-number\">7.2</span>.<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> curl -SLO <span class=\"hljs-string\">&quot;https://nodejs.org/dist/v<span class=\"hljs-variable\">$NODE_VERSION</span>/node-v<span class=\"hljs-variable\">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \\</span><br><span class=\"language-bash\">  &amp;&amp; curl -SLO <span class=\"hljs-string\">&quot;https://nodejs.org/dist/v<span class=\"hljs-variable\">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ARG\"><a href=\"#ARG\" class=\"headerlink\" title=\"ARG\"></a>ARG</h3><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>\n<p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ARG <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">参数名</span>&gt;</span>[=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">默认值</span>&gt;</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">VOLUME</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;路径1&gt;&quot;</span>, <span class=\"hljs-string\">&quot;&lt;路径2&gt;&quot;</span>...]</span><br><span class=\"hljs-keyword\">VOLUME</span><span class=\"language-bash\"> &lt;路径&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>仅仅只是声明端口。</p>\n<p>作用：</p>\n<ul>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>\n<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">EXPOSE</span> &lt;端口<span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-meta\"> [&lt;端口2&gt;...]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>\n<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">WORKDIR <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">工作目录路径</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">USER <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">用户名</span>&gt;</span>[:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">用户组</span>&gt;</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"HEALTHCHECK\"><a href=\"#HEALTHCHECK\" class=\"headerlink\" title=\"HEALTHCHECK\"></a>HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>\n<p>格式：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">HEALTHCHECK [选项] <span class=\"hljs-built_in\">CMD</span> &lt;命令&gt;：设置检查容器健康状况的命令<br>HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令<br><br>HEALTHCHECK [选项] <span class=\"hljs-built_in\">CMD</span> &lt;命令&gt; : 这边 <span class=\"hljs-built_in\">CMD</span> 后面跟随的命令使用，可以参考 <span class=\"hljs-built_in\">CMD</span> 的用法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ONBUILD <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">其它指令</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h3><p>LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">LABEL <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> ...<br></code></pre></td></tr></table></figure>\n\n<p>比如我们可以添加镜像的作者：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">LABEL org<span class=\"hljs-selector-class\">.opencontainers</span><span class=\"hljs-selector-class\">.image</span>.authors=<span class=\"hljs-string\">&quot;runoob&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h1>",
            "tags": [
                "docker",
                "dockerfile",
                "namespace",
                "cgroup",
                "dockerhub"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/a8b000ae/",
            "url": "https://www.oikiou.top/2022/a8b000ae/",
            "title": "RDPWrap",
            "date_published": "2022-07-20T14:57:15.000Z",
            "content_html": "<h1 id=\"RDPWrap\"><a href=\"#RDPWrap\" class=\"headerlink\" title=\"RDPWrap\"></a>RDPWrap</h1><ul>\n<li>RDP程序源Github</li>\n</ul>\n<p><a href=\"https://github.com/stascorp/rdpwrap\">https://github.com/stascorp/rdpwrap</a></p>\n<ul>\n<li>新版RDP配置文件</li>\n</ul>\n<p><a href=\"https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini\">https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini</a></p>\n<p><a href=\"https://github.com/affinityv/INI-RDPWRAP\">https://github.com/affinityv/INI-RDPWRAP</a></p>\n<p>win11可用 <a href=\"https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini\">https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini</a></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li><p><code>install.bat</code>安装</p>\n</li>\n<li><p><code>RDPConf.exe</code>检查是否成功开启</p>\n<p><img src=\"/2022/a8b000ae/image-20211209105711309.png\" alt=\"image-20211209105711309\"></p>\n</li>\n<li><p>新的操作系统一般来说第三项是红色的,如果是绿色的就表示正常可以使用了</p>\n</li>\n<li><p>如果异常按以下进行操作</p>\n<ol>\n<li>管理员打开<code>PowerShell</code>运行<code>get-service termservice|stop-service -force</code>停掉RDP进程</li>\n<li>从<a href=\"https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini\">RDP配置文件</a>下载新的配置文件</li>\n<li>将下载的配置文件复制到<code>C:\\Program Files\\RDP Wrapper\\rdpwrap.ini</code>替换原文件</li>\n<li>管理员打开<code>PowerShell</code>运行<code>get-service termservice|start-service</code>重新运行RDP</li>\n<li><code>RDPConf.exe</code>检查已经成功开启</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "windows",
                "rdpwrap",
                "rdp"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/aa858de8/",
            "url": "https://www.oikiou.top/2022/aa858de8/",
            "title": "Wordpress",
            "date_published": "2022-02-21T14:57:15.000Z",
            "content_html": "<h1 id=\"Wordpress\"><a href=\"#Wordpress\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h1><h2 id=\"LNMP安装\"><a href=\"#LNMP安装\" class=\"headerlink\" title=\"LNMP安装\"></a>LNMP安装</h2><p><a href=\"https://lnmp.org/\">https://lnmp.org/</a></p>\n<p><strong>LNMP一键安装包是什么?</strong></p>\n<p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS&#x2F;RHEL&#x2F;Fedora&#x2F;Aliyun&#x2F;Amazon、Debian&#x2F;Ubuntu&#x2F;Raspbian&#x2F;Deepin&#x2F;Mint Linux VPS或独立主机安装LNMP(Nginx&#x2F;MySQL&#x2F;PHP)、LNMPA(Nginx&#x2F;MySQL&#x2F;PHP&#x2F;Apache)、LAMP(Apache&#x2F;MySQL&#x2F;PHP)生产环境的Shell程序。</p>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 登录</span><br>mysql -u root -p<br><br><span class=\"hljs-comment\"># 如果报找不到命令 cd到对应目录去登录</span><br><span class=\"hljs-built_in\">cd</span> /usr/local/mariadb10/bin/<br>./mysql -u root -p<br><br><span class=\"hljs-comment\"># 切换到mysql数据库</span><br>use mysql<br><br><span class=\"hljs-comment\"># 执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。</span><br>CREATE DATABASE IF NOT EXISTS wordpress;<br><br><span class=\"hljs-comment\"># 执行以下命令，创建一个新用户。例如 “user”，登录密码为 123456。</span><br>CREATE USER <span class=\"hljs-string\">&#x27;user&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br><span class=\"hljs-comment\"># 执行以下命令，赋予用户对 “wordpress” 数据库的全部权限。</span><br>GRANT ALL PRIVILEGES ON wordpress.* TO <span class=\"hljs-string\">&#x27;user&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br><span class=\"hljs-comment\"># 执行以下命令，设置 root 帐户密码</span><br>ALTER USER root@localhost IDENTIFIED VIA mysql_native_password USING PASSWORD(<span class=\"hljs-string\">&#x27;输入您的密码&#x27;</span>);<br><br><span class=\"hljs-comment\"># 执行以下命令，使所有配置生效。</span><br>FLUSH PRIVILEGES;<br><br><span class=\"hljs-comment\"># 退出</span><br>\\q<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Wordpress-1\"><a href=\"#Wordpress-1\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h2><h4 id=\"修改-WordPress-配置文件\"><a href=\"#修改-WordPress-配置文件\" class=\"headerlink\" title=\"修改 WordPress 配置文件\"></a>修改 WordPress 配置文件</h4><ol>\n<li><p>依次执行以下命令，进入 WordPress 安装目录，将<code>wp-config-sample.php</code>文件复制到<code>wp-config.php</code>文件中，并将原先的示例配置文件保留作为备份。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> /home/wwwroot/wordpress<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">cp</span> <span class=\"hljs-keyword\">wp</span>-config-sample.php <span class=\"hljs-keyword\">wp</span>-config.php<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下命令，打开并编辑新创建的配置文件。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">vim</span> <span class=\"hljs-keyword\">wp</span>-config.php<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按 <strong>i</strong> 切换至编辑模式，找到文件中 MySQL 的部分，并将相关配置信息修改为 <a href=\"https://cloud.tencent.com/document/product/213/8044#database\">配置 WordPress 数据库</a> 中的内容。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-comment\">// ** MySQL settings - You can get this info from your web host ** //</span><br><span class=\"hljs-comment\">/** The name of the database for WordPress */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_NAME&#x27;</span>, <span class=\"hljs-string\">&#x27;wordpress&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL database username */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_USER&#x27;</span>, <span class=\"hljs-string\">&#x27;user&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL database password */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_PASSWORD&#x27;</span>, <span class=\"hljs-string\">&#x27;123456&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL hostname */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_HOST&#x27;</span>, <span class=\"hljs-string\">&#x27;localhost&#x27;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改完成后，按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p>\n</li>\n</ol>\n<h3 id=\"开启HTTPS支持\"><a href=\"#开启HTTPS支持\" class=\"headerlink\" title=\"开启HTTPS支持\"></a>开启HTTPS支持</h3><h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><h2 id=\"获取域名\"><a href=\"#获取域名\" class=\"headerlink\" title=\"获取域名\"></a>获取域名</h2><p>这里有一个免费的域名, 先凑合用着吧</p>\n<p><a href=\"https://www.freenom.com/\">https://www.freenom.com/</a></p>\n<blockquote>\n<p>  freenom 注册方法</p>\n<p>  <a href=\"https://zhuanlan.zhihu.com/p/115535965\">https://zhuanlan.zhihu.com/p/115535965</a></p>\n<p>  Freenom常见问题解决方法</p>\n<p>  <a href=\"http://www.360doc.com/content/21/0124/00/30583588_958609144.shtml\">http://www.360doc.com/content/21/0124/00/30583588_958609144.shtml</a></p>\n</blockquote>\n<ul>\n<li><p>注册的时候搜索要加上后缀不然会显示  不可用</p>\n</li>\n<li><p>checkout 到购物车改成 12月 free</p>\n</li>\n<li><p>谷歌邮箱直接登录 登录后要更改自己的个人信息里面的地址(改成ip所在地) 不然无法成功注册</p>\n</li>\n<li><p>菜单栏 servers -&gt; my domains 就可以看到地址了</p>\n</li>\n<li><p>最后再修改一下NS服务器</p>\n<ul>\n<li><p>Manage Domain -&gt; Management Tools -&gt; nameserver -&gt; Use custom nameservers (enter below)</p>\n</li>\n<li><p>这里填写cloudflare 或者 dnspod 给出来的 Nameservers 就好了</p>\n</li>\n<li><p>类似于</p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">NS</td>\n<td align=\"left\">katja.ns.cloudflare.com</td>\n</tr>\n<tr>\n<td align=\"left\">NS</td>\n<td align=\"left\">kirk.ns.cloudflare.com</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>域名的<a href=\"https://www.vpsgo.com/tag/ns%E8%AE%B0%E5%BD%95\">NS记录</a>（<a href=\"https://www.vpsgo.com/tag/name-server\">Name Server</a>）是指处理域名解析的服务器，说白点就是你的域名由谁家来解析。一般购买了域名后，默认的NS记录就是指向域名提供商的（例如NameSilo的默认就由它自己解析）。你可以修改域名的NS记录，让它由不同的解析服务商来解析，例如可以指向<a href=\"https://www.vpsgo.com/tag/cloudflare\">Cloudflare</a>或者<a href=\"https://www.vpsgo.com/tag/dnspod\">DNSPod</a>。</p>\n<p>之后DNS（Domain Name System），常用的<a href=\"https://www.vpsgo.com/tag/dns%E8%AE%B0%E5%BD%95\">DNS记录</a>包括域名解析中A记录、CNAME、MX记录。<a href=\"https://www.vpsgo.com/tag/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95\">域名A记录</a>又称为IP指向，就是说你这个域名代表什么IP；域名CNAME是指别名指向，就是说指向另一个域名，例如可以设置test.vpsgo.com指向<a href=\"http://www.vpsgo.com;域名的mx记录就是邮件交换记录,是做邮件服务器需要设置的.本文主要介绍域名a记录解析./\">www.vpsgo.com；域名的MX记录就是邮件交换记录，是做邮件服务器需要设置的。本文主要介绍域名A记录解析。</a></p>\n<blockquote>\n<p>  cloudflare 解析</p>\n<p>  <a href=\"https://zhuanlan.zhihu.com/p/56423186\">https://zhuanlan.zhihu.com/p/56423186</a></p>\n<p>  <a href=\"https://www.vpsgo.com/domain-ns-cloudflare-dnspod.html#NS\">https://www.vpsgo.com/domain-ns-cloudflare-dnspod.html#NS</a></p>\n</blockquote>\n<h1 id=\"HTTPS-SSL-TLS\"><a href=\"#HTTPS-SSL-TLS\" class=\"headerlink\" title=\"HTTPS SSL&#x2F;TLS\"></a>HTTPS SSL&#x2F;TLS</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><h3 id=\"acme-sh\"><a href=\"#acme-sh\" class=\"headerlink\" title=\"acme.sh\"></a>acme.sh</h3><p><a href=\"https://ruby-china.org/topics/31983\">https://ruby-china.org/topics/31983</a></p>\n<p><a href=\"https://ruby-china.org/topics/28471\">https://ruby-china.org/topics/28471</a></p>\n<p><a href=\"https://ruby-china.org/topics/25543\">https://ruby-china.org/topics/25543</a></p>\n<p><a href=\"https://ruby-china.org/topics/31942\">https://ruby-china.org/topics/31942</a></p>\n<h3 id=\"caddy\"><a href=\"#caddy\" class=\"headerlink\" title=\"caddy\"></a>caddy</h3><p><a href=\"https://caddyserver.com/docs/quick-starts/https\">https://caddyserver.com/docs/quick-starts/https</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 acme.sh</span><br>curl https://get.acme.sh | sh<br><br><span class=\"hljs-comment\"># 然后重新载入一下 .bashrc</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc <br><br><span class=\"hljs-comment\"># 至此acme安装完成</span><br>acme.sh<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 注册账号</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --register-account -m jackliuworkemail@gmail.com  --server zerossl<br><br><span class=\"hljs-comment\"># 为lager.cf创建密钥</span><br><span class=\"hljs-comment\"># -k 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --issue -d lager.cf --standalone -k ec-256<br><br><span class=\"hljs-comment\"># 由于 Let&#x27;s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。</span><br><span class=\"hljs-comment\"># 查看计划任务</span><br> crontab -l<br><span class=\"hljs-comment\"># 手动更新 ECC 证书，执行：</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --renew -d lager.cf --force --ecc<br><br><span class=\"hljs-comment\"># 请注意：reloadcmd非常重要。证书可以自动续订，但是，如果没有正确的“reloadcmd”，证书可能无法刷新到您的服务器（如nginx或apache），那么您的网站将无法在60天内显示续订证书。</span><br><span class=\"hljs-comment\"># 注意：无论什么情况，密钥(即上面的lager.cf.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</span><br>acme.sh --installcert -d lager.cf \\<br>--keypath       /usr/local/nginx/ssl/lager.cf.key \\<br>--fullchainpath /usr/local/nginx/ssl/lager.cf.cer \\<br>--reloadcmd     <span class=\"hljs-string\">&quot;sudo service nginx force-reload&quot;</span>  --force --ecc<br><br><span class=\"hljs-comment\"># 生成 dhparam.pem 文件</span><br>openssl dhparam -out /usr/local/nginx/ssl/lager.cf.pem 2048<br><br><br><span class=\"hljs-comment\"># 配置nginx 启用 https</span><br>vim /usr/local/nginx/conf/nginx.conf<br><br><span class=\"hljs-comment\"># 检查配置</span><br><span class=\"hljs-built_in\">sudo</span> service nginx configtest<br><span class=\"hljs-comment\"># 重启服务</span><br><span class=\"hljs-built_in\">sudo</span> service nginx restart<br><br><br><span class=\"hljs-comment\">#验证 SSL</span><br><span class=\"hljs-comment\">#访问 ssllabs.com 输入你的域名，检查 SSL 的配置是否都正常：</span><br>https://ssllabs.com/ssltest/analyze.html?d=ruby-china.org<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h3><ul>\n<li><code>ssl_dhparam</code> 未配置，将导致 ssllabs.com 的评分降到 B，并给 <code>This server supports weak Diffie-Hellman (DH) key exchange parameters. Grade capped to B.</code> 的警告。</li>\n<li><code>ssl_prefer_server_ciphers on</code> 也是一个必要的配置，否则会 A+ 变成 A-;</li>\n<li>如果你需要兼容老系统或老浏览器的话，你需要配置 <code>ssl_ciphers</code>，详见 <a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Mozilla Server_Side_TLS 的介绍</a>，Nginx 里面 <code>ssl_ciphers</code> 默认值是 <code>HIGH:!aNULL:!MD5;</code> <a href=\"https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers\">ref</a></li>\n</ul>\n<h2 id=\"acme-sh-1\"><a href=\"#acme-sh-1\" class=\"headerlink\" title=\"acme.sh\"></a>acme.sh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 查看证书列表</span><br>acme.sh --list<br><br><span class=\"hljs-comment\"># 删除证书</span><br>acme.sh remove Main_Domain (证书的主域名，上述证书列表中可看见)<br><br><span class=\"hljs-comment\"># 升级 acme.sh 到最新版 :</span><br>acme.sh --upgrade<br><br><span class=\"hljs-comment\"># 如果你不想手动升级, 可以开启自动升级:</span><br>acme.sh --upgrade --auto-upgrade<br><br><span class=\"hljs-comment\">#你也可以随时关闭自动更新:</span><br>acme.sh --upgrade --auto-upgrade 0 <br><br><span class=\"hljs-comment\"># 如果出错, 请添加 debug log：</span><br>acme.sh --issue ..... --debug <br><span class=\"hljs-comment\"># 或者：</span><br>acme.sh --issue ..... --debug 2<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"ngix\"><a href=\"#ngix\" class=\"headerlink\" title=\"ngix\"></a>ngix</h2><h3 id=\"nginx-config-1\"><a href=\"#nginx-config-1\" class=\"headerlink\" title=\"nginx config 1\"></a>nginx config 1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>    listen 80; <span class=\"hljs-comment\">#如果硬性要求全部走https协议，这一行去除</span><br>    listen 443 ssl http2; <span class=\"hljs-comment\">#如果硬性要求全部走https协议，这里去除ssl</span><br>    server_name chandao.test.com;<br><br>    ssl_certificate /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer;<br>    ssl_certificate_key /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key;<br>    ssl_dhparam /usr/local/nginx/ssl/lager.cf.pem;<br><br>    <span class=\"hljs-comment\">#ssl性能调优</span><br>    <span class=\"hljs-comment\">#nginx 1.13.0支持了TLSv1.3,TLSv1.3相比之前的TLSv1.2、TLSv1.1等性能大幅提升</span><br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    <span class=\"hljs-comment\"># ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br>    <span class=\"hljs-comment\"># ssl_prefer_server_ciphers on|off 作用：是否由服务器决定采用哪种加密算法</span><br>    <span class=\"hljs-comment\"># 如果ssl协议支持tlsv1 tls1.1这种老协议，设置为 on ，并配合ssl_ciphers使用</span><br>    <span class=\"hljs-comment\"># 如果ssl协议只支持tlsv1.2 tlsv1.3新协议，设置为 off （nginx默认为off），因为新协议不再采纳此参数</span><br>    ssl_prefer_server_ciphers on;<br>    ssl_session_timeout 10m;<br>    <span class=\"hljs-comment\">#使用ssl_session_cache优化https下Nginx的性能</span><br>    ssl_session_cache <span class=\"hljs-built_in\">builtin</span>:1000 shared:SSL:10m;<br>    <span class=\"hljs-comment\">#OCSP Stapling 开启。OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度</span><br>    ssl_stapling on;<br>    <span class=\"hljs-comment\">#OCSP Stapling 验证开启</span><br>    ssl_stapling_verify on;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-config-2\"><a href=\"#nginx-config-2\" class=\"headerlink\" title=\"nginx config 2\"></a>nginx config 2</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>  <span class=\"hljs-comment\"># 新增</span><br>  <span class=\"hljs-attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"hljs-number\">1</span> TLSv1.<span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-attribute\">ssl_prefer_server_ciphers</span> <span class=\"hljs-literal\">on</span>;<br>  <span class=\"hljs-comment\"># 兼容其他老浏览器的 ssl_ciphers 设置请访问 https://wiki.mozilla.org/Security/Server_Side_TLS</span><br><br>  <span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-comment\"># 新增</span><br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">443</span> ssl;<br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /home/ubuntu/www/ssl/www.your-app.com.key.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /home/ubuntu/www/ssl/www.your-app.com.key;<br>    <span class=\"hljs-comment\"># ssl_dhparam </span><br>    <span class=\"hljs-attribute\">ssl_dhparam</span>             /home/ubuntu/www/ssl/dhparam.pem;<br><br>    <span class=\"hljs-comment\"># 其他省略</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>80 重定向到 443</p>\n<p>这些办法试了好多次都不太行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>  listen       80 default_server;<br>  server_name  www.lager.cf;<br>  <span class=\"hljs-built_in\">return</span> 301 https://$server_name<span class=\"hljs-variable\">$request_uri</span>;<br>&#125;<br><br><br>server &#123;<br>    listen      80;<br>    server_name    www.awesomes.cn,awesomes.cn;<br>    rewrite ^(.*)$  https://$host<span class=\"hljs-variable\">$1</span> permanent;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"v2ray-tls-websocket-流量伪装\"><a href=\"#v2ray-tls-websocket-流量伪装\" class=\"headerlink\" title=\"v2ray + tls + websocket 流量伪装\"></a>v2ray + tls + websocket 流量伪装</h1><p><a href=\"https://www.bwgss.org/616.html\">https://www.bwgss.org/616.html</a></p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ol>\n<li><p>证书(Certificate) – *.cer *.crt</p>\n</li>\n<li><p>私钥(Private Key) – *.key</p>\n</li>\n<li><p>证书签名请求(Certificate signing request) – *.csr</p>\n</li>\n<li><p>编码方式: 1. pem - base64编码 2. der - 二进制编码(少见), cer,key,csr 均可用这两种编码方式</p>\n</li>\n<li><p>证书吊销列表(Certificate Revocation List) – *.crl</p>\n</li>\n<li><p>jks（javakeystone）— 是JAVA的keytools证书工具支持的证书私钥格式，javakeystone 里面存放着key和信任的CA，key和CA可以有多个。</p>\n</li>\n</ol>\n<p><img src=\"/2022/aa858de8/1606053801673.png\" alt=\"Wordpress\"></p>\n",
            "tags": [
                "ssl",
                "https",
                "wordpress",
                "web",
                "mysql",
                "nginx"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/9f39ed86/",
            "url": "https://www.oikiou.top/2021/9f39ed86/",
            "title": "VSCode多行编辑被占用",
            "date_published": "2021-12-15T15:23:05.000Z",
            "content_html": "<p>关键词:</p>\n<p>查看 Windows 10 快捷键 占用 VSCode 多行编辑 ctrl alt uparrow</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>VSCode 的多行编辑 ctrl + alt +uparrow 失效.<br>电脑环境:win10 19042.1387</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li><p>检查VSCode的快捷键设置,<img src=\"https://img-blog.csdnimg.cn/c85c8402840543d4a4b7afcf26e04bc0.png\" alt=\"VSCode1\"><br>看起来是没有问题的,</p>\n</li>\n<li><p>以前也遇到过这个情况当时是把VSCode重装后就好了看,这次试了试似乎并不行.</p>\n</li>\n<li><p>检查是不是其他软件占用了全局快捷键,搜索发现很多相关软件都失效不能用.</p>\n<ul>\n<li>PChunter <strong>很久没更新了不支持我的电脑的当前版本</strong></li>\n<li>FindGlobalHotkey  <strong>无效</strong></li>\n<li>spy++ <strong>太复杂,可能我不太会用也是没找到是不是什么按键占用了</strong></li>\n<li><a href=\"https://www.zhihu.com/question/288316686/answer/1656650885\">win10怎么查看快捷键是被什么占用了？</a></li>\n<li><a href=\"https://github.com/BlackINT3/OpenArk\">OpenArk </a> <strong>(最终解决方案)</strong></li>\n</ul>\n</li>\n<li><p>github下载OpenArk后打开就能看到快捷键占用, 输入对应快捷键就可以筛选,<br><strong>最终找到万恶之源, 电脑插着耳机没有发现在播歌, 网易云关掉全局快捷键, 问题消失</strong><br><img src=\"/2021/9f39ed86/9b96c314b5994739a4db98c7d00c834b.png\" alt=\"VSCode2\"></p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/BlackINT3/OpenArk\">https://github.com/BlackINT3/OpenArk</a><br><img src=\"/2021/9f39ed86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Li05rW355qE5Z-O,size_20,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"VSCode3\"></p>\n<h1 id=\"其他冲突的快捷键\"><a href=\"#其他冲突的快捷键\" class=\"headerlink\" title=\"其他冲突的快捷键\"></a>其他冲突的快捷键</h1><p>ctrl + shift + f 和微软的拼音输入法有冲突</p>\n",
            "tags": [
                "windows",
                "vscode"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/30f8332a/",
            "url": "https://www.oikiou.top/2021/30f8332a/",
            "title": "手动添加JLink不支持的芯片",
            "date_published": "2021-11-03T06:39:31.000Z",
            "content_html": "<h1 id=\"手动添加JLink不支持的芯片\"><a href=\"#手动添加JLink不支持的芯片\" class=\"headerlink\" title=\"手动添加JLink不支持的芯片\"></a>手动添加JLink不支持的芯片</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>市场上的新芯片层出不穷，JLink的官方支持不可能完全跟得上，这就尴尬了。但是好在Segger在设计时就想到了这一点，允许用户自己添加新芯片或扩展官方已经支持的芯片。本文只讲如何添加新芯片，参考的资料为<code>UM08001_JLink.pdf</code>中的第12章——<code>Open Flashloader</code>。</p>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>在添加前，JFlash里找不到BARROT的任何型号，</p>\n<p>添加后如下图</p>\n<p><img src=\"/2021/30f8332a/image-20211019164827957.png\" alt=\"image-20211019164827957\"></p>\n<h2 id=\"添加方法\"><a href=\"#添加方法\" class=\"headerlink\" title=\"添加方法\"></a>添加方法</h2><ul>\n<li><p>找到Jlink安装目录下的<code>JLinkDevices.xml</code>并打开；</p>\n</li>\n<li><p>默认位置<code>C:\\Program Files\\SEGGER\\JLink</code></p>\n<p>在打开的文件添加如下内容，因为这个文件里没有任何BARROT的芯片，所以我添加到文件末尾，如果文件已经有同厂家的其它芯片，建议还是放一起，方便维护。效果和代码放下面了，代码的解释在后面！</p>\n<p><img src=\"/2021/30f8332a/image-20211019164859196.png\" alt=\"image-20211019164859196\"></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--                  --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- BARROT (BR8551) --&gt;</span><br><span class=\"hljs-comment\">&lt;!--                  --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Device</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChipInfo</span> <span class=\"hljs-attr\">Vendor</span>=<span class=\"hljs-string\">&quot;BARROT&quot;</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;BR8551&quot;</span> <span class=\"hljs-attr\">Core</span>=<span class=\"hljs-string\">&quot;JLINK_CORE_CORTEX_M3&quot;</span> <span class=\"hljs-attr\">WorkRAMAddr</span>=<span class=\"hljs-string\">&quot;0x2000C000&quot;</span> <span class=\"hljs-attr\">WorkRAMSize</span>=<span class=\"hljs-string\">&quot;0x00004000&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlashBankInfo</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;ROM&quot;</span> <span class=\"hljs-attr\">BaseAddr</span>=<span class=\"hljs-string\">&quot;0x00000000&quot;</span> <span class=\"hljs-attr\">MaxSize</span>=<span class=\"hljs-string\">&quot;0x00060000&quot;</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">&quot;D:\\\\Project\\\\Panda\\\\Code\\\\bamboo\\\\panda\\\\tools\\\\Keil\\\\VFlash.FLM&quot;</span> <span class=\"hljs-attr\">LoaderType</span>=<span class=\"hljs-string\">&quot;FLASH_ALGO_TYPE_OPEN&quot;</span> <span class=\"hljs-attr\">AlwaysPresent</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlashBankInfo</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;LR_IROM1&quot;</span> <span class=\"hljs-attr\">BaseAddr</span>=<span class=\"hljs-string\">&quot;0x10000000&quot;</span> <span class=\"hljs-attr\">MaxSize</span>=<span class=\"hljs-string\">&quot;0x00080000&quot;</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">&quot;D:\\\\Project\\\\Panda\\\\Code\\\\bamboo\\\\panda\\\\tools\\\\Keil\\\\VFlash.FLM&quot;</span> <span class=\"hljs-attr\">LoaderType</span>=<span class=\"hljs-string\">&quot;FLASH_ALGO_TYPE_OPEN&quot;</span> <span class=\"hljs-attr\">AlwaysPresent</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Device</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>保存文件就添加完了，可以验证是否如文章开头的效果一样</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><ul>\n<li>最开始的三行是注释，注释嘛，随便写了，清晰明了就行；</li>\n<li><code>&lt;Device&gt;</code>和<code>&lt;/Device&gt;</code>必须成对出现，而且没有属性表。每个（系列）芯片都对应着这么一对。</li>\n<li><code>ChipInfo</code>是描述芯片的信息，必须在 <code>&lt;Device&gt;</code>和<code>&lt;/Device&gt;</code>内。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Vendor</td>\n<td align=\"center\">芯片厂家的名字，比如这里的”BARROT”</td>\n</tr>\n<tr>\n<td align=\"center\">Name</td>\n<td align=\"center\">芯片的具体型号，我用的就是BR8551</td>\n</tr>\n<tr>\n<td align=\"center\">Core</td>\n<td align=\"center\">芯片的内核，这个必须是JLink支持的内核之一，具体的名字可以在文档里的12.5.3.1    Attribute values - Core章节找到。</td>\n</tr>\n<tr>\n<td align=\"center\">WorkRAMAddr</td>\n<td align=\"center\">芯片RAM的起始地址，这个可以在用户手册里找到，也可以打开SDK里的官方例程，然后在工程配置里找到</td>\n</tr>\n<tr>\n<td align=\"center\">WorkRAMSize</td>\n<td align=\"center\">芯片RAM的大小，同样可以在用户手册里找到，也可以打开SDK里的官方例程，然后在工程配置里找到</td>\n</tr>\n<tr>\n<td align=\"center\">Aliases</td>\n<td align=\"center\">同系列的相同RAM和FLASH的型号</td>\n</tr>\n<tr>\n<td align=\"center\">JLinkScriptFile</td>\n<td align=\"center\">高级用法，有些芯片操作比较特殊，可以通过脚本去实现，这里我用不上</td>\n</tr>\n</tbody></table>\n<hr>\n<ul>\n<li><code>FlashBankInfo</code>描述芯片的Flash信息，有多块flash的话，每块对应一个<code>FlashBankInfo</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Name</td>\n<td align=\"center\">flash的名字，名字可以随便起</td>\n</tr>\n<tr>\n<td align=\"center\">BaseAddr</td>\n<td align=\"center\">flash的起始地址，可以在用户手册里找到</td>\n</tr>\n<tr>\n<td align=\"center\">MaxSize</td>\n<td align=\"center\">flash的大小，可以在用户手册里找到</td>\n</tr>\n<tr>\n<td align=\"center\">Loader</td>\n<td align=\"center\">烧录的算法，segger官方的是*.elf格式，*.flm是ARM的格式，keil里就用这个。这个路径可以是绝对地址也可以是相对地址，相对地址的话是从<code>JLinkDevices.xml</code>所在的路径为起始地址。</td>\n</tr>\n<tr>\n<td align=\"center\">LoaderType</td>\n<td align=\"center\">必须是12.5.4.1    Attribute values - LoaderType中列出的类型之一，目前只有FLASH_ALGO_TYPE_OPEN一个类型，而*.flm是支持这个类型的</td>\n</tr>\n<tr>\n<td align=\"center\">AlwaysPresent</td>\n<td align=\"center\">指示这个块flash是不是一直存在，本文是内部flash，当然一直存在</td>\n</tr>\n</tbody></table>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/d7fae221ac47\">工欲善其事，必先利其器：动手给JLink添加官方不支持的芯片</a></p>\n",
            "tags": [
                "j-link",
                "jlink"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/18d811b/",
            "url": "https://www.oikiou.top/2021/18d811b/",
            "title": "J-Link RTT的使用方法",
            "date_published": "2021-09-24T12:28:40.000Z",
            "content_html": "<h1 id=\"J-Link-RTT-JTrace\"><a href=\"#J-Link-RTT-JTrace\" class=\"headerlink\" title=\"J-Link RTT &amp; JTrace\"></a>J-Link RTT &amp; JTrace</h1><h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>Jlink可用直接输出调试信息，省去串口工具（配置麻烦+硬件接线乱+占用IO）</p>\n<p>Jlink输出调试信息有两种</p>\n<ul>\n<li>Jlink的Trace</li>\n<li>Jlink的RTT (Real Time Transfer)</li>\n</ul>\n<h2 id=\"Jlink-Trace\"><a href=\"#Jlink-Trace\" class=\"headerlink\" title=\"Jlink Trace\"></a>Jlink Trace</h2><hr>\n<p>！！！待完善！！！</p>\n<hr>\n<p>MDK 环境下：</p>\n<p><img src=\"/2021/18d811b/132307095276873.png\" alt=\"img\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port8(n)    (*((volatile unsigned char *)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port16(n)   (*((volatile unsigned short*)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DEMCR           (*((volatile unsigned long *)(0xE000EDFC)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TRCENA          0x01000000</span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fputc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ch, FILE *f)</span> <br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (DEMCR &amp; TRCENA) &#123;<br>    <span class=\"hljs-keyword\">while</span> (ITM_Port32(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>);<br>    ITM_Port8(<span class=\"hljs-number\">0</span>) = ch;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span>(ch);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"RTT\"><a href=\"#RTT\" class=\"headerlink\" title=\"RTT\"></a>RTT</h2><p><a href=\"https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/\">Jlink RTT 官网资料</a></p>\n<p>RTT其实原理就是读取RAM上某个Buff的数据，这个Buff可以通过RTT的CB(control block)找到。</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><p>下载Jlink的工具后，安装后程序目录有Samples文件夹(default: C:\\Program Files\\SEGGER\\JLink\\Samples)，文件夹内就有RTT的源码。</p>\n<ol>\n<li>将源码的<code>RTT/</code>目录下 <code>SEGGER_RTT_Printf.c</code>  <code>SEGGER_RTT.c</code> 两个文件添加到工程里，并解决头文件包含问题。</li>\n<li>看 <code>Examples/</code>目录下就有使用历程，移植到你的工程就好。可以参考<code>Main_RTT_InputEchoApp.c</code>和<code>Main_RTT_PrintfTest.c</code>。</li>\n<li>打开 <code>J-Link RTT Viewer</code>软件，选择<code>Device</code>，输入<code>RTT Control Block</code>的地址connect即可。<ol>\n<li><code>RTT Control Block</code>的地址可以输入RAM的范围让<code>J-Link RTT Viewer</code>软件自己去搜索。</li>\n<li>也可手动输入，而RTT_V754a的<code>RTT Control Block</code>是<code>_SEGGER_RTT</code> 在<code> file:SEGGER_RTT.c line:279</code>。<img src=\"/2021/18d811b/image-20210917214218565.png\" alt=\"image-20210917214218565\"></li>\n</ol>\n</li>\n<li>一顿操作下来正常就可以收到数据了。</li>\n</ol>\n<h3 id=\"RTT-源码\"><a href=\"#RTT-源码\" class=\"headerlink\" title=\"RTT 源码\"></a>RTT 源码</h3><h4 id=\"Included-files\"><a href=\"#Included-files\" class=\"headerlink\" title=\"Included files\"></a>Included files</h4><ul>\n<li><code>RTT/</code><ul>\n<li><code>SEGGER_RTT.c</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT.h</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT_ASM_ARMv7M.S</code>    - ARMv7M 的优化实现</li>\n<li><code>SEGGER_RTT_Printf.c</code>        - (‘ SEGGER_RTT_Printf() ‘)的简单实现。</li>\n</ul>\n</li>\n<li><code>Syscalls/</code><ul>\n<li><code>SEGGER_RTT_Syscalls_*.c</code>    - <code>printf()</code> 重定向</li>\n</ul>\n</li>\n<li><code>Config/</code><ul>\n<li><code>SEGGER_RTT_Conf.h</code>          - RTT配置文件。</li>\n</ul>\n</li>\n<li><code>Examples/</code><ul>\n<li><code>Main_RTT_InputEchoApp.c</code>    - Example application which echoes input on Channel 0.</li>\n<li><code>Main_RTT_MenuApp.c</code>         - Example application to demonstrate RTT bi-directional functionality.</li>\n<li><code>Main_RTT_PrintfTest.c</code>      - Example application to test RTT’s simple printf implementation.</li>\n<li><code>Main_RTT_SpeedTestApp.c</code>    - Example application to measure RTT performance. (Requires embOS)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">函数名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SEGGER_RTT_Read()</td>\n<td align=\"center\">从输入缓冲区读取数据。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Write()</td>\n<td align=\"center\">将数据写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WriteString()</td>\n<td align=\"center\">将\\0结尾字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_printf()</td>\n<td align=\"center\">将格式化的字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_GetKey()</td>\n<td align=\"center\">从输入缓冲区 0 中获取一个字符。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_HasKey()</td>\n<td align=\"center\">检查输入缓冲区 0 中是否有字符可用。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WaitKey()</td>\n<td align=\"center\">等待输入缓冲区 0 中的字符可用并获取它。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigUpBuffer()</td>\n<td align=\"center\">配置向上（输出）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigDownBuffer()</td>\n<td align=\"center\">配置向下（输入）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Init()</td>\n<td align=\"center\">仅使用 RAM 目标时初始化 RTT 控制块结构。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_SetTerminal()</td>\n<td align=\"center\">将“虚拟”终端设置为通过 Write 和 WriteString 用于通道 0 上的输出。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_TerminalOut()</td>\n<td align=\"center\">通过“虚拟”终端发送以\\0结尾的字符串。</td>\n</tr>\n</tbody></table>\n<h3 id=\"RTT-软件\"><a href=\"#RTT-软件\" class=\"headerlink\" title=\"RTT 软件\"></a>RTT 软件</h3><p><img src=\"/2021/18d811b/image-20210918101414512.png\" alt=\"image-20210918101414512\"></p>\n<ul>\n<li><p><code>J-Link RTT Viewer</code>软件用的比较多</p>\n</li>\n<li><p><code>J-Link RTT Logger</code>软件可以将输出的数据保存到文件，并显示通信速率和通信数据量。</p>\n</li>\n<li><p><code>J-Link RTT Client</code>可以在调试的时候，充当客户端，输出数据。据说支持中文</p>\n</li>\n</ul>\n<h3 id=\"note：\"><a href=\"#note：\" class=\"headerlink\" title=\"note：\"></a>note：</h3><ul>\n<li>程序如果跑在RAM中，J-Link可能会错误地识别出init部分中的块，而不是数据部分中的实际块。为了防止这种情况，将SEGGER_RTT_IN_RAM的定义设置为1。现在，J-Link将在应用程序中调用第一个SEGGER_RTT函数之后找到正确的RTT缓冲区。建议在应用程序开始时调用SEGGER_RTT_Init()。</li>\n</ul>\n<h4 id=\"不同通道输出数据\"><a href=\"#不同通道输出数据\" class=\"headerlink\" title=\"不同通道输出数据\"></a>不同通道输出数据</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 0\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 1\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 2\\r\\n&quot;</span>);<br><br><br><br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">0</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 0\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">1</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 1\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">2</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 2\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输出带颜色的字符\"><a href=\"#输出带颜色的字符\" class=\"headerlink\" title=\"输出带颜色的字符\"></a>输出带颜色的字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Control sequences, based on ANSI.</span><br><span class=\"hljs-comment\">// Can be used to control color, and clear the screen</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_RESET                <span class=\"hljs-string\">&quot;\\x1B[0m&quot;</span>         <span class=\"hljs-comment\">// Reset to default colors</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_CLEAR                <span class=\"hljs-string\">&quot;\\x1B[2J&quot;</span>         <span class=\"hljs-comment\">// Clear screen, reposition cursor to top left</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLACK           <span class=\"hljs-string\">&quot;\\x1B[2;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_RED             <span class=\"hljs-string\">&quot;\\x1B[2;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_GREEN           <span class=\"hljs-string\">&quot;\\x1B[2;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_YELLOW          <span class=\"hljs-string\">&quot;\\x1B[2;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLUE            <span class=\"hljs-string\">&quot;\\x1B[2;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_MAGENTA         <span class=\"hljs-string\">&quot;\\x1B[2;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_CYAN            <span class=\"hljs-string\">&quot;\\x1B[2;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_WHITE           <span class=\"hljs-string\">&quot;\\x1B[2;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLACK    <span class=\"hljs-string\">&quot;\\x1B[1;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_RED      <span class=\"hljs-string\">&quot;\\x1B[1;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_GREEN    <span class=\"hljs-string\">&quot;\\x1B[1;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_YELLOW   <span class=\"hljs-string\">&quot;\\x1B[1;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLUE     <span class=\"hljs-string\">&quot;\\x1B[1;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_MAGENTA  <span class=\"hljs-string\">&quot;\\x1B[1;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_CYAN     <span class=\"hljs-string\">&quot;\\x1B[1;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_WHITE    <span class=\"hljs-string\">&quot;\\x1B[1;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLACK             <span class=\"hljs-string\">&quot;\\x1B[24;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_RED               <span class=\"hljs-string\">&quot;\\x1B[24;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_GREEN             <span class=\"hljs-string\">&quot;\\x1B[24;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_YELLOW            <span class=\"hljs-string\">&quot;\\x1B[24;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLUE              <span class=\"hljs-string\">&quot;\\x1B[24;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_MAGENTA           <span class=\"hljs-string\">&quot;\\x1B[24;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_CYAN              <span class=\"hljs-string\">&quot;\\x1B[24;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_WHITE             <span class=\"hljs-string\">&quot;\\x1B[24;47m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLACK      <span class=\"hljs-string\">&quot;\\x1B[4;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_RED        <span class=\"hljs-string\">&quot;\\x1B[4;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_GREEN      <span class=\"hljs-string\">&quot;\\x1B[4;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_YELLOW     <span class=\"hljs-string\">&quot;\\x1B[4;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLUE       <span class=\"hljs-string\">&quot;\\x1B[4;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_MAGENTA    <span class=\"hljs-string\">&quot;\\x1B[4;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_CYAN       <span class=\"hljs-string\">&quot;\\x1B[4;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_WHITE      <span class=\"hljs-string\">&quot;\\x1B[4;47m&quot;</span></span><br><br><br>SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,RTT_CTRL_RESET<span class=\"hljs-string\">&quot;Red: &quot;</span>\\<br>                       RTT_CTRL_TEXT_RED<span class=\"hljs-string\">&quot;This text is red.&quot;</span>\\<br>                       RTT_CTRL_BG_BRIGHT_GREEN<span class=\"hljs-string\">&quot;This background is green.\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入字符\"><a href=\"#输入字符\" class=\"headerlink\" title=\"输入字符\"></a>输入字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    <span class=\"hljs-type\">char</span> r = SEGGER_RTT_GetKey();<br>    SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;input:%c\\r\\n&quot;</span>, r);<br>&#125;<br><br><br><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    ReadNum = SEGGER_RTT_Read(<span class=\"hljs-number\">0</span>,&amp;acIn[<span class=\"hljs-number\">0</span>], <span class=\"hljs-keyword\">sizeof</span>(acIn));<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">20</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0x0A</span> != acIn[i])<br>        &#123;<br>            ReadNum++;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    SEGGER_RTT_Write(<span class=\"hljs-number\">0</span>,acIn,ReadNum);<br>    ReadNum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(acIn,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(acIn));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "j-link",
                "rtt",
                "serial",
                "debug",
                "jlink"
            ]
        }
    ]
}