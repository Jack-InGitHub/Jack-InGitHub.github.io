{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"language\" category",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2024/ee69e452/",
            "url": "https://www.oikiou.top/2024/ee69e452/",
            "title": "CSS",
            "date_published": "2024-02-26T00:08:08.000Z",
            "content_html": "<h1 id=\"JS-JavaScript\"><a href=\"#JS-JavaScript\" class=\"headerlink\" title=\"JS (JavaScript)\"></a>JS (JavaScript)</h1><h1 id=\"JS-简介\"><a href=\"#JS-简介\" class=\"headerlink\" title=\"JS 简介\"></a>JS 简介</h1><p>JavaScript 是 web 开发人员必须学习的 3 门语言中的一门：</p>\n<ol>\n<li><strong>HTML</strong> 定义了网页的内容</li>\n<li><strong>CSS</strong> 描述了网页的布局</li>\n<li><strong>JavaScript</strong> 控制了网页的行为</li>\n</ol>\n<h2 id=\"JS-特性\"><a href=\"#JS-特性\" class=\"headerlink\" title=\"JS 特性\"></a>JS 特性</h2><ul>\n<li>JavaScript 是脚本语言</li>\n<li>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</li>\n<li>JavaScript 是一种轻量级的编程语言。</li>\n<li>JavaScript 是可插入 HTML 页面的编程代码。</li>\n<li>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</li>\n<li>JavaScript 很容易学习。</li>\n</ul>\n",
            "tags": [
                "web",
                "html",
                "js"
            ]
        },
        {
            "id": "https://www.oikiou.top/2024/ee69e452/",
            "url": "https://www.oikiou.top/2024/ee69e452/",
            "title": "CSS",
            "date_published": "2024-02-21T00:08:08.000Z",
            "content_html": "<h1 id=\"CSS-Cascading-Style-Sheets\"><a href=\"#CSS-Cascading-Style-Sheets\" class=\"headerlink\" title=\"CSS (Cascading Style Sheets)\"></a>CSS (Cascading Style Sheets)</h1>",
            "tags": [
                "web",
                "css",
                "html"
            ]
        },
        {
            "id": "https://www.oikiou.top/2024/2eec1551/",
            "url": "https://www.oikiou.top/2024/2eec1551/",
            "title": "HTML",
            "date_published": "2024-02-21T00:08:08.000Z",
            "content_html": "<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h1 id=\"HTML-概述\"><a href=\"#HTML-概述\" class=\"headerlink\" title=\"HTML 概述\"></a>HTML 概述</h1><h2 id=\"HTML-是什么\"><a href=\"#HTML-是什么\" class=\"headerlink\" title=\"HTML 是什么\"></a>HTML 是什么</h2><p>HTML 是用来描述网页的一种语言。</p>\n<ul>\n<li>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>\n<li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li>\n<li>标记语言是一套<strong>标记标签</strong> (markup tag)</li>\n<li>HTML 使用标记标签来<strong>描述</strong>网页</li>\n<li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li>\n<li>HTML文档也叫做 <strong>web 页面</strong></li>\n</ul>\n<h2 id=\"HTML-标签\"><a href=\"#HTML-标签\" class=\"headerlink\" title=\"HTML 标签\"></a>HTML 标签</h2><p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p>\n<ul>\n<li>HTML 标签是由 <em>尖括号</em> 包围的关键词，比如 <code>&lt;html&gt;</code></li>\n<li>HTML 标签通常是 <em>成对出现</em> 的，比如<code> &lt;b&gt; </code>和 <code>&lt;/b&gt;</code></li>\n<li>标签对中的第一个标签是 <em>开始标签</em> ，第二个标签是 <em>结束标签</em></li>\n<li>开始和结束标签也被称为 <em>开放标签</em> 和 <em>闭合标签</em></li>\n</ul>\n<h2 id=\"HTML-页面结构\"><a href=\"#HTML-页面结构\" class=\"headerlink\" title=\"HTML 页面结构\"></a>HTML 页面结构</h2><p><img src=\"/2024/2eec1551/02A7DD95-22B4-4FB9-B994-DDB5393F7F03.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>  只有 <code>&lt;body&gt;</code> 区域 才会在浏览器中显示。</p>\n</blockquote>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"&lt;!DOCTYPE&gt; 声明\"></a>&lt;!DOCTYPE&gt; 声明</h3><p><code>&lt;!DOCTYPE&gt;</code>声明用于标识网页文件，<code>&lt;!DOCTYPE&gt;</code> 是文档类型声明（Document Type Declaration）的缩写。</p>\n<p>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。</p>\n<p>doctype 声明是不区分大小写的。</p>\n<p><strong>HTML5</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>HTML 4.01</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">HTML</span> <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span><br><span class=\"hljs-meta\"><span class=\"hljs-string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>XHTML 1.0</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span> <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span><br><span class=\"hljs-meta\"><span class=\"hljs-string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"charset-编码格式\"><a href=\"#charset-编码格式\" class=\"headerlink\" title=\"charset 编码格式\"></a>charset 编码格式</h3><p>指定html文件的编码格式 UTF-8 或 GBK …</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"HTML-元素\"><a href=\"#HTML-元素\" class=\"headerlink\" title=\"HTML 元素\"></a>HTML 元素</h1><h2 id=\"HTML元素的语法\"><a href=\"#HTML元素的语法\" class=\"headerlink\" title=\"HTML元素的语法\"></a>HTML元素的语法</h2><table>\n<thead>\n<tr>\n<th align=\"left\">开始标签 *</th>\n<th align=\"left\">元素内容</th>\n<th align=\"left\">结束标签 *</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>&lt;p&gt;</code></td>\n<td align=\"left\">这是一个段落</td>\n<td align=\"left\"><code>&lt;/p&gt;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;a href=&quot;default.htm&quot;&gt;</code></td>\n<td align=\"left\">这是一个链接</td>\n<td align=\"left\"><code>&lt;/a&gt;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;br&gt;</code></td>\n<td align=\"left\">换行</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**<em><strong>开始标签常被称为</strong>起始标签（opening tag）</em>*</p>\n<p>**<em><strong>结束标签常称为</strong>闭合标签（closing tag）</em>*</p>\n<h2 id=\"HTML元素的特性\"><a href=\"#HTML元素的特性\" class=\"headerlink\" title=\"HTML元素的特性\"></a>HTML元素的特性</h2><ul>\n<li>HTML 元素以<strong>开始标签</strong>起始</li>\n<li>HTML 元素以<strong>结束标签</strong>终止</li>\n<li><strong>元素的内容</strong>是开始标签与结束标签之间的内容</li>\n<li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li>\n<li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li>\n<li>大多数 HTML 元素可拥有<strong>属性</strong></li>\n<li>不要忘记结束标签！</li>\n<li>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</li>\n<li>HTML 标签对大小写不敏感：<code>&lt;P&gt;</code> 等同于 <code>&lt;p&gt;</code>。万维网联盟（W3C）在 HTML 4 中<strong>推荐使用小写</strong>，而在未来 HTML 版本中会强制使用小写。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><strong>标题</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>这是一个标题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"HTML-标签-1\"><a href=\"#HTML-标签-1\" class=\"headerlink\" title=\"HTML 标签\"></a>HTML 标签</h1><p>每个元素都有一个标签</p>\n<p><strong>标题</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>这是一个标题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>段落</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是一个段落。<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>链接</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://www.oikiou.net&quot;</span>&gt;</span>这是一个链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>图像</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/images/logo.png&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;258&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;39&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>注释</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 这是一个注释 --&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"标签-List\"><a href=\"#标签-List\" class=\"headerlink\" title=\"标签 List\"></a>标签 List</h2><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td align=\"left\"><strong>基础</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;!DOCTYPE&gt;</code></td>\n<td align=\"left\">定义文档类型。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;html&gt;</code></td>\n<td align=\"left\">定义一个 HTML 文档</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;title&gt;</code></td>\n<td align=\"left\">为文档定义一个标题</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;body&gt;</code></td>\n<td align=\"left\">定义文档的主体</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;h1&gt; to &lt;h6&gt;</code></td>\n<td align=\"left\">定义 HTML 标题</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;p&gt;</code></td>\n<td align=\"left\">定义一个段落</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;br&gt;</code></td>\n<td align=\"left\">定义简单的折行。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;hr&gt;</code></td>\n<td align=\"left\">定义水平线。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;!--...--&gt;</code></td>\n<td align=\"left\">定义一个注释</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>格式</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;acronym&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 定义只取首字母的缩写。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;abbr&gt;</code></td>\n<td align=\"left\">定义一个缩写。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;address&gt;</code></td>\n<td align=\"left\">定义文档作者或拥有者的联系信息。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;b&gt;</code></td>\n<td align=\"left\">定义粗体文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;bdi&gt;</code></td>\n<td align=\"left\">允许您设置一段文本，使其脱离其父元素的文本方向设置。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;bdo&gt;</code></td>\n<td align=\"left\">定义文本的方向。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;big&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 定义大号文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;blockquote&gt;</code></td>\n<td align=\"left\">定义块引用。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;center&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。定义居中文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;cite&gt;</code></td>\n<td align=\"left\">定义引用(citation)。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;code&gt;</code></td>\n<td align=\"left\">定义计算机代码文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;del&gt;</code></td>\n<td align=\"left\">定义被删除文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dfn&gt;</code></td>\n<td align=\"left\">定义定义项目。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;em&gt;</code></td>\n<td align=\"left\">定义强调文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;font&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。 定义文本的字体、尺寸和颜色</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;i&gt;</code></td>\n<td align=\"left\">定义斜体文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;ins&gt;</code></td>\n<td align=\"left\">定义被插入文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;kbd&gt;</code></td>\n<td align=\"left\">定义键盘文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;mark&gt;</code></td>\n<td align=\"left\">定义带有记号的文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;meter&gt;</code></td>\n<td align=\"left\">定义度量衡。仅用于已知最大和最小值的度量。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;pre&gt;</code></td>\n<td align=\"left\">定义预格式文本</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;progress&gt;</code></td>\n<td align=\"left\">定义运行中的任务进度（进程）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;q&gt;</code></td>\n<td align=\"left\">定义短的引用。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;rp&gt;</code></td>\n<td align=\"left\">定义不支持 ruby 元素的浏览器所显示的内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;rt&gt;</code></td>\n<td align=\"left\">定义字符（中文注音或字符）的解释或发音。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;ruby&gt;</code></td>\n<td align=\"left\">定义 ruby 注释（中文注音或字符）。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;s&gt;</code></td>\n<td align=\"left\">定义加删除线的文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;samp&gt;</code></td>\n<td align=\"left\">定义计算机代码样本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;small&gt;</code></td>\n<td align=\"left\">定义小号文本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;strike&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。 定义加删除线的文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;strong&gt;</code></td>\n<td align=\"left\">定义语气更为强烈的强调文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;sub&gt;</code></td>\n<td align=\"left\">定义下标文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;sup&gt;</code></td>\n<td align=\"left\">定义上标文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;time&gt;</code></td>\n<td align=\"left\">定义一个日期&#x2F;时间</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;tt&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 定义打字机文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;u&gt;</code></td>\n<td align=\"left\">定义下划线文本。</td>\n</tr>\n<tr>\n<td>☆</td>\n<td align=\"left\"><code>&lt;var&gt;</code></td>\n<td align=\"left\">定义文本的变量部分。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;wbr&gt;</code></td>\n<td align=\"left\">规定在文本中的何处适合添加换行符。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>表单</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;form&gt;</code></td>\n<td align=\"left\">定义一个 HTML 表单，用于用户输入。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;input&gt;</code></td>\n<td align=\"left\">定义一个输入控件</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;textarea&gt;</code></td>\n<td align=\"left\">定义多行的文本输入控件。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;button&gt;</code></td>\n<td align=\"left\">定义按钮。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;select&gt;</code></td>\n<td align=\"left\">定义选择列表（下拉列表）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;optgroup&gt;</code></td>\n<td align=\"left\">定义选择列表中相关选项的组合。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;option&gt;</code></td>\n<td align=\"left\">定义选择列表中的选项。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;label&gt;</code></td>\n<td align=\"left\">定义 input 元素的标注。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;fieldset&gt;</code></td>\n<td align=\"left\">定义围绕表单中元素的边框。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;legend&gt;</code></td>\n<td align=\"left\">定义 fieldset 元素的标题。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;datalist&gt;</code></td>\n<td align=\"left\">规定了 input 元素可能的选项列表。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;keygen&gt;</code></td>\n<td align=\"left\">规定用于表单的密钥对生成器字段。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;output&gt;</code></td>\n<td align=\"left\">定义一个计算的结果</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>框架</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;frame&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 定义框架集的窗口或框架。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;frameset&gt;</code></td>\n<td align=\"left\">HTML5不再支持。定义框架集。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;noframes&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 定义针对不支持框架的用户的替代内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;iframe&gt;</code></td>\n<td align=\"left\">定义内联框架。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>图像</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;img&gt;</code></td>\n<td align=\"left\">定义图像。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;map&gt;</code></td>\n<td align=\"left\">定义图像映射。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;area&gt;</code></td>\n<td align=\"left\">定义图像地图内部的区域。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;canvas&gt;</code></td>\n<td align=\"left\">通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;figcaption&gt;</code></td>\n<td align=\"left\">定义一个 caption for a <figure> element</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;figure&gt;</code></td>\n<td align=\"left\">figure 标签用于对元素进行组合。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>Audio&#x2F;Video</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;audio&gt;</code></td>\n<td align=\"left\">定义声音，比如音乐或其他音频流。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;source&gt;</code></td>\n<td align=\"left\">定义media元素 (<video> 和 <audio>)的媒体资源。media</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;track&gt;</code></td>\n<td align=\"left\">为媒体(<video> 和 <audio>)元素定义外部文本轨道。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;video&gt;</code></td>\n<td align=\"left\">定义一个音频或者视频</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>链接</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;a&gt;</code></td>\n<td align=\"left\">定义一个链接</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;link&gt;</code></td>\n<td align=\"left\">定义文档与外部资源的关系。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;main&gt;</code></td>\n<td align=\"left\">定义文档的主体部分。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;nav&gt;</code></td>\n<td align=\"left\">定义导航链接</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>列表</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;ul&gt;</code></td>\n<td align=\"left\">定义一个无序列表</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;ol&gt;</code></td>\n<td align=\"left\">定义一个有序列表</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;li&gt;</code></td>\n<td align=\"left\">定义一个列表项</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dir&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。 定义目录列表。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dl&gt;</code></td>\n<td align=\"left\">定义一个定义列表</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dt&gt;</code></td>\n<td align=\"left\">定义一个定义定义列表中的项目。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dd&gt;</code></td>\n<td align=\"left\">定义定义列表中项目的描述。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;menu&gt;</code></td>\n<td align=\"left\">定义菜单列表。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;command&gt;</code></td>\n<td align=\"left\">定义用户可能调用的命令（比如单选按钮、复选框或按钮）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>表格</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;table&gt;</code></td>\n<td align=\"left\">定义一个表格</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;caption&gt;</code></td>\n<td align=\"left\">定义表格标题。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;th&gt;</code></td>\n<td align=\"left\">定义表格中的表头单元格。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;tr&gt;</code></td>\n<td align=\"left\">定义表格中的行。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;td&gt;</code></td>\n<td align=\"left\">定义表格中的单元。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;thead&gt;</code></td>\n<td align=\"left\">定义表格中的表头内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;tbody&gt;</code></td>\n<td align=\"left\">定义表格中的主体内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;tfoot&gt;</code></td>\n<td align=\"left\">定义表格中的表注内容（脚注）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;col&gt;</code></td>\n<td align=\"left\">定义表格中一个或多个列的属性值。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;colgroup&gt;</code></td>\n<td align=\"left\">定义表格中供格式化的列组。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>样式&#x2F;节</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;style&gt;</code></td>\n<td align=\"left\">定义文档的样式信息。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;div&gt;</code></td>\n<td align=\"left\">定义文档中的节。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;span&gt;</code></td>\n<td align=\"left\">定义文档中的节。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;header&gt;</code></td>\n<td align=\"left\">定义一个文档头部部分</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;footer&gt;</code></td>\n<td align=\"left\">定义一个文档底部</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;section&gt;</code></td>\n<td align=\"left\">定义了文档的某个区域</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;article&gt;</code></td>\n<td align=\"left\">定义一个文章内容</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;aside&gt;</code></td>\n<td align=\"left\">定义其所处内容之外的内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;details&gt;</code></td>\n<td align=\"left\">定义了用户可见的或者隐藏的需求的补充细节。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;dialog&gt;</code></td>\n<td align=\"left\">定义一个对话框或者窗口</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;summary&gt;</code></td>\n<td align=\"left\">定义一个可见的标题。 当用户点击标题时会显示出详细信息。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>元信息</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;head&gt;</code></td>\n<td align=\"left\">定义关于文档的信息</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;meta&gt;</code></td>\n<td align=\"left\">定义关于 HTML 文档的元信息。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;base&gt;</code></td>\n<td align=\"left\">定义页面中所有链接的默认地址或默认目标。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;basefont&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。 定义页面中文本的默认字体、颜色或尺寸。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><strong>程序</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;script&gt;</code></td>\n<td align=\"left\">定义客户端脚本。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;noscript&gt;</code></td>\n<td align=\"left\">定义针对不支持客户端脚本的用户的替代内容。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;applet&gt;</code></td>\n<td align=\"left\">HTML5不再支持。 HTML 4.01 已废弃。 定义嵌入的 applet。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;embed&gt;</code></td>\n<td align=\"left\">定义了一个容器，用来嵌入外部应用或者互动程序（插件）。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;object&gt;</code></td>\n<td align=\"left\">定义嵌入的对象。</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"><code>&lt;param&gt;</code></td>\n<td align=\"left\">定义对象的参数。</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTML-属性\"><a href=\"#HTML-属性\" class=\"headerlink\" title=\"HTML 属性\"></a>HTML 属性</h1><h2 id=\"HTML属性-的特征\"><a href=\"#HTML属性-的特征\" class=\"headerlink\" title=\"HTML属性 的特征\"></a>HTML属性 的特征</h2><ul>\n<li>HTML 元素可以设置<strong>属性</strong></li>\n<li>属性可以在元素中添加<strong>附加信息</strong></li>\n<li>属性一般描述于<strong>开始标签</strong></li>\n<li>属性总是以名称&#x2F;值对的形式出现，**比如：name&#x3D;”value”**。</li>\n<li>属性值应该始终被包括在<strong>引号内</strong>。<ul>\n<li>双引号是最常用的，在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- href=&quot;http://www.baidu.com&quot; 就是 HTML属性 --&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;http://www.baidu.com&quot;</span>&gt;</span> Baidu <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考List\"><a href=\"#参考List\" class=\"headerlink\" title=\"参考List\"></a>参考List</h2><h3 id=\"HTML-全局属性\"><a href=\"#HTML-全局属性\" class=\"headerlink\" title=\"HTML 全局属性\"></a>HTML 全局属性</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>accesskey</code></td>\n<td align=\"left\">设置访问元素的键盘快捷键。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>class</code></td>\n<td align=\"left\">规定元素的类名（classname）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>contenteditable</code></td>\n<td align=\"left\">规定是否可编辑元素的内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>contextmenu</code></td>\n<td align=\"left\">指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单</td>\n</tr>\n<tr>\n<td align=\"left\"><code>data-*</code></td>\n<td align=\"left\">用于存储页面的自定义数据</td>\n</tr>\n<tr>\n<td align=\"left\"><code>dir</code></td>\n<td align=\"left\">设置元素中内容的文本方向。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>draggable</code></td>\n<td align=\"left\">指定某个元素是否可以拖动</td>\n</tr>\n<tr>\n<td align=\"left\"><code>dropzone</code></td>\n<td align=\"left\">指定是否将数据复制，移动，或链接，或删除</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hidden</code></td>\n<td align=\"left\">hidden 属性规定对元素进行隐藏。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>id</code></td>\n<td align=\"left\">规定元素的唯一 id</td>\n</tr>\n<tr>\n<td align=\"left\"><code>lang</code></td>\n<td align=\"left\">设置元素中内容的语言代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>spellcheck</code></td>\n<td align=\"left\">检测元素是否拼写错误</td>\n</tr>\n<tr>\n<td align=\"left\"><code>style</code></td>\n<td align=\"left\">规定元素的行内样式（inline style）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tabindex</code></td>\n<td align=\"left\">设置元素的 Tab 键控制次序。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">规定元素的额外信息（可在工具提示中显示）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>translate</code></td>\n<td align=\"left\">指定是否一个元素的值在页面载入时是否需要翻译</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTML-示例\"><a href=\"#HTML-示例\" class=\"headerlink\" title=\"HTML 示例\"></a>HTML 示例</h1><h2 id=\"文本格式化\"><a href=\"#文本格式化\" class=\"headerlink\" title=\"文本格式化\"></a>文本格式化</h2><p>HTML 使用标签 <code>&lt;b&gt;</code>(“bold”) 与 <code>&lt;i&gt;</code>(“italic”) 对输出的文本进行格式, 如：<b>粗体</b> or <i>斜体</i></p>\n<blockquote>\n<p>  通常标签 <code>&lt;strong&gt;</code> 替换加粗标签 <code>&lt;b&gt;</code> 来使用, <code>&lt;em&gt;</code> 替换 <code>&lt;i&gt;</code>标签使用。</p>\n<p>  然而，这些标签的含义是不同的：</p>\n<p>  <code>&lt;b&gt;</code> 与<code>&lt;i&gt;</code> 定义粗体或斜体文本。</p>\n<p>  <code>&lt;strong&gt;</code> 或者 <code>&lt;em&gt;</code>意味着你要呈现的文本是重要的，所以要突出显示。（重要文本的呈现方式有很多种，不仅仅只有加粗一种）</p>\n</blockquote>\n<h2 id=\"链接-a\"><a href=\"#链接-a\" class=\"headerlink\" title=\"链接 a\"></a>链接 a</h2><p>HTML使用标签 <code>&lt;a&gt;</code> 来设置超文本链接。</p>\n<p>超链接可以是<u>一个字，一个词，或者一组词，也可以是一幅图像</u>，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。（<strong>文本链接、图像链接、锚点链接、下载链接</strong>）</p>\n<p>在标签 <code>&lt;a&gt;</code> 中使用了 <strong>href</strong> 属性来描述链接的地址。</p>\n<p>以下是 HTML 中创建链接的基本语法和属性：</p>\n<ul>\n<li><p><code>&lt;a&gt;</code> 元素：创建链接的主要HTML元素是<code>&lt;a&gt;</code>（锚）元素。<code>&lt;a&gt;</code>元素具有以下属性：</p>\n<ul>\n<li><p><code>href</code>：指定链接目标的URL，这是链接的最重要属性。可以是另一个网页的URL、文件的URL或其他资源的URL。</p>\n</li>\n<li><p><code>target</code>（可选）：指定链接如何在浏览器中打开。</p>\n<ul>\n<li><code>_blank</code>（在新标签或窗口中打开链接）</li>\n<li><code>_self</code> 在单击的同一框架中打开链接文档（在当前标签或窗口中打开链接）。</li>\n<li><code>_top</code> 在整个窗口中打开链接文档</li>\n</ul>\n</li>\n<li><p><code>title</code>（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。</p>\n</li>\n<li><p><code>rel</code>（可选）：指定与链接目标的关系，如 nofollow、noopener 等。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>文本链接：</strong>最常见的链接类型是文本链接，它使用 <code>&lt;a&gt;</code> 元素将一段文本转化为可点击的链接，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://www.example.com&quot;</span>&gt;</span>访问示例网站<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>图像链接：</strong>您还可以使用图像作为链接。在这种情况下，<code>&lt;a&gt;</code> 元素包围着 <code>&lt;img&gt;</code> 元素。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://www.example.com&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;example.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;示例图片&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>锚点链接：</strong>除了链接到其他网页外，您还可以在同一页面内创建内部链接，这称为锚点链接。要创建锚点链接，需要在目标位置使用 <code>&lt;a&gt;</code> 元素定义一个标记，并使用<code>#</code>符号引用该标记。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#section2&quot;</span>&gt;</span>跳转到第二部分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 在页面中的某个位置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;section2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#C4&quot;</span>&gt;</span>查看章节 4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;C4&quot;</span>&gt;</span>章节 4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这边显示该章节的内容……<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>下载链接：</strong>如果您希望链接用于下载文件而不是导航到另一个网页，可以使用 download 属性。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;document.pdf&quot;</span> <span class=\"hljs-attr\">download</span>&gt;</span>下载文档<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>邮件链接</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;mailto:someone@example.com?cc=someoneelse@example.com&amp;bcc=andsomeoneelse@example.com&amp;subject=Summer%20Party&amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_top&quot;</span>&gt;</span>发送邮件!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>mailto: 收件人 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>cc= 抄送 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>bcc= 密送 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>subject= 标题 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>body= 正文 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b</span>&gt;</span>注意:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b</span>&gt;</span> 单词之间的空格使用 %20 代替，以确保浏览器可以正常显示文本。<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"头部-head\"><a href=\"#头部-head\" class=\"headerlink\" title=\"头部 head\"></a>头部 head</h2><p><code>&lt;head&gt;</code> 元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。</p>\n<p>可以添加在头部区域的元素标签为: <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;noscript&gt;</code> 和 <code>&lt;base&gt;</code>。</p>\n<h3 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"&lt;title&gt; 元素\"></a><code>&lt;title&gt;</code> 元素</h3><p><code>&lt;title&gt;</code> 标签定义了不同文档的标题。</p>\n<p><code>&lt;title&gt;</code> 在 HTML&#x2F;XHTML 文档中是必需的。</p>\n<p><code>&lt;title&gt;</code> 元素:</p>\n<ul>\n<li>定义了浏览器工具栏的标题</li>\n<li>当网页添加到收藏夹时，显示在收藏夹中的标题</li>\n<li>显示在搜索引擎结果页面的标题</li>\n</ul>\n<h3 id=\"元素-1\"><a href=\"#元素-1\" class=\"headerlink\" title=\"&lt;base&gt; 元素\"></a><code>&lt;base&gt;</code> 元素</h3><p><code>&lt;base&gt;</code> 标签描述了基本的链接地址&#x2F;链接目标，该标签作为HTML文档中所有的链接标签的默认链接:</p>\n<h3 id=\"元素-2\"><a href=\"#元素-2\" class=\"headerlink\" title=\"&lt;link&gt; 元素\"></a><code>&lt;link&gt;</code> 元素</h3><p><code>&lt;link&gt;</code> 标签定义了文档与外部资源之间的关系。</p>\n<p><code>&lt;link&gt;</code> 标签通常用于链接到样式表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 定义head处的图标 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;icon&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;logo.ico&quot;</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 使用外部样式表 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;mystyle.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素-3\"><a href=\"#元素-3\" class=\"headerlink\" title=\"&lt;style&gt; 元素\"></a><code>&lt;style&gt;</code> 元素</h3><p><code>&lt;style&gt;</code> 标签定义了HTML文档的样式文件引用地址.</p>\n<p>在<code>&lt;style&gt;</code> 元素中你也可以直接添加样式来渲染 HTML 文档:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 将背景设置成黄色，段落设置成蓝色 --&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">body</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>:yellow;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-tag\">p</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>:blue</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素-4\"><a href=\"#元素-4\" class=\"headerlink\" title=\"&lt;meta&gt; 元素\"></a><code>&lt;meta&gt;</code> 元素</h3><p>meta标签描述了一些基本的元数据。</p>\n<p><code>&lt;meta&gt;</code> 标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。</p>\n<p>META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。</p>\n<p>元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。</p>\n<p><code>&lt;meta&gt;</code> 一般放置于 <code>&lt;head&gt;</code> 区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;keywords&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;HTML, CSS, XML, XHTML, JavaScript&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;description&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;免费 Web &amp; 编程 教程&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Runoob&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;refresh&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素-5\"><a href=\"#元素-5\" class=\"headerlink\" title=\"&lt;script&gt; 元素\"></a><code>&lt;script&gt;</code> 元素</h3><p><code>&lt;script&gt;</code>标签用于加载脚本文件，如： JavaScript。</p>\n<h3 id=\"头部-head-元素\"><a href=\"#头部-head-元素\" class=\"headerlink\" title=\"头部 head 元素\"></a>头部 head 元素</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>head</code></td>\n<td align=\"left\">定义了文档的信息</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">定义了文档的标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>base</code></td>\n<td align=\"left\">定义了页面链接标签的默认链接地址</td>\n</tr>\n<tr>\n<td align=\"left\"><code>link</code></td>\n<td align=\"left\">定义了一个文档和外部资源之间的关系</td>\n</tr>\n<tr>\n<td align=\"left\"><code>meta</code></td>\n<td align=\"left\">定义了HTML文档中的元数据</td>\n</tr>\n<tr>\n<td align=\"left\"><code>script</code></td>\n<td align=\"left\">定义了客户端的脚本文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>style</code></td>\n<td align=\"left\">定义了HTML文档的样式文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>…</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">背景色<br>style=&quot;<span class=\"hljs-attribute\">background-color</span>:green;&quot;<br>字体 字体颜色 字体大小<br>style=&quot;<span class=\"hljs-attribute\">font-family</span>:arial;<span class=\"hljs-attribute\">color</span>:red;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;&quot;<br>居中对齐<br>style=&quot;<span class=\"hljs-attribute\">text-align</span>:center;&quot;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Header 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Header 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>row 1, cell 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>row 1, cell 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>row 2, cell 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>row 2, cell 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<table border=\"1\">\n    <tr>\n        <th>Header 1</th>\n        <th>Header 2</th>\n    </tr>\n    <tr>\n        <td>row 1, cell 1</td>\n        <td>row 1, cell 2</td>\n    </tr>\n    <tr>\n        <td>row 2, cell 1</td>\n        <td>row 2, cell 2</td>\n    </tr>\n</table>\n\n<h3 id=\"表格元素\"><a href=\"#表格元素\" class=\"headerlink\" title=\"表格元素\"></a>表格元素</h3><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;table&gt;</code></td>\n<td>定义表格</td>\n</tr>\n<tr>\n<td><code>&lt;th&gt;</code></td>\n<td>定义表格的表头</td>\n</tr>\n<tr>\n<td><code>&lt;tr&gt;</code></td>\n<td>定义表格的行</td>\n</tr>\n<tr>\n<td><code>&lt;td&gt;</code></td>\n<td>定义表格单元</td>\n</tr>\n<tr>\n<td><code>&lt;caption&gt;</code></td>\n<td>定义表格标题</td>\n</tr>\n<tr>\n<td><code>&lt;colgroup&gt;</code></td>\n<td>定义表格列的组</td>\n</tr>\n<tr>\n<td><code>&lt;col&gt;</code></td>\n<td>定义用于表格列的属性</td>\n</tr>\n<tr>\n<td><code>&lt;thead&gt;</code></td>\n<td>定义表格的页眉</td>\n</tr>\n<tr>\n<td><code>&lt;tbody&gt;</code></td>\n<td>定义表格的主体</td>\n</tr>\n<tr>\n<td><code>&lt;tfoot&gt;</code></td>\n<td>定义表格的页脚</td>\n</tr>\n</tbody></table>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><h3 id=\"元素-6\"><a href=\"#元素-6\" class=\"headerlink\" title=\"&lt;div&gt; 元素\"></a><code>&lt;div&gt;</code> 元素</h3><p>HTML <code>&lt;div&gt;</code> 元素是块级元素，它可用于组合其他 HTML 元素的容器。</p>\n<p><code>&lt;div&gt;</code> 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。</p>\n<p>如果与 CSS 一同使用，<code>&lt;div&gt;</code> 元素可用于对大的内容块设置样式属性。</p>\n<p><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <code>&lt;table&gt;</code> 元素进行文档布局不是表格的正确用法。<code>&lt;table&gt;</code> 元素的作用是显示表格化的数据。</p>\n<h3 id=\"元素-7\"><a href=\"#元素-7\" class=\"headerlink\" title=\"&lt;span&gt; 元素\"></a><code>&lt;span&gt;</code> 元素</h3><p>HTML <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器</p>\n<p><code>&lt;span&gt;</code> 元素也没有特定的含义。</p>\n<p>当与 CSS 一同使用时，<code>&lt;span&gt;</code> 元素可用于为部分文本设置样式属性。</p>\n<h3 id=\"div-与-span-对比\"><a href=\"#div-与-span-对比\" class=\"headerlink\" title=\"div 与 span 对比\"></a>div 与 span 对比</h3><p><strong>块级元素 vs. 行内元素：</strong></p>\n<ul>\n<li><code>&lt;div&gt;</code> 是块级元素，它独占一行，可以设置宽度、高度以及边距等样式属性。它适合用于创建页面的大块结构，例如页面的主体区域、容器、布局等。</li>\n<li><code>&lt;span&gt;</code> 是行内元素，它不会独占一行，宽度默认由其内容决定。它适合用于对文本或其他行内元素进行样式化、标记或包裹。</li>\n</ul>\n<p><strong>默认样式和布局：</strong></p>\n<ul>\n<li><code>&lt;div&gt;</code> 元素的默认样式为块级显示，会以块的形式占据可用空间。</li>\n<li><code>&lt;span&gt;</code> 元素的默认样式为行内显示，它不会独占一行，只占据其内容的宽度。</li>\n</ul>\n<p><strong>嵌套关系：</strong></p>\n<ul>\n<li><code>&lt;div&gt;</code> 可以容纳其他块级元素和行内元素，包括其他的 <code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 元素。</li>\n<li><code>&lt;span&gt;</code> 通常被用来包裹文本或其他行内元素，比如用来设置特定文本的样式。</li>\n</ul>\n<p>总之，<code>&lt;div&gt;</code> 用于创建页面结构和布局，而 <code>&lt;span&gt;</code> 用于对文本或行内元素进行样式化或包裹。它们在页面设计和样式设置中有不同的用途和作用。</p>\n<h3 id=\"区块标签\"><a href=\"#区块标签\" class=\"headerlink\" title=\"区块标签\"></a>区块标签</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>div</code></td>\n<td align=\"left\">定义了文档的区域，块级 (block-level)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>span</code></td>\n<td align=\"left\">用来组合文档中的行内元素， 内联元素(inline)</td>\n</tr>\n</tbody></table>\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><p>HTML 表单用于收集用户的<strong>输入信息</strong>。</p>\n<p>HTML 表单表示文档中的一个区域，此区域包含交互控件，将用户收集到的信息发送到 Web 服务器。</p>\n<p>HTML 表单通常包含各种<u>输入字段、复选框、单选按钮、下拉列表等元素</u>。</p>\n<ul>\n<li><code>&lt;form&gt;</code> 元素用于创建表单，<code>action</code> 属性定义了表单数据提交的目标 URL，<code>method</code> 属性定义了提交数据的 HTTP 方法（这里使用的是 “post”）。</li>\n<li><code>&lt;label&gt;</code> 元素用于为表单元素添加标签，提高可访问性。</li>\n<li><code>&lt;input&gt;</code> 元素是最常用的表单元素之一，它可以创建文本输入框、密码框、单选按钮、复选框等。<code>type</code> 属性定义了输入框的类型，<code>id</code> 属性用于关联 <code>&lt;label&gt;</code> 元素，<code>name</code> 属性用于标识表单字段。</li>\n<li><code>&lt;select&gt;</code> 元素用于创建下拉列表，而 <code>&lt;option&gt;</code> 元素用于定义下拉列表中的选项。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 文本输入框 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span>用户名:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">required</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!-- 密码输入框 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>密码:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">required</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!-- 单选按钮 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>性别:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;male&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;male&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;male&quot;</span>&gt;</span>男<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;female&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;female&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;female&quot;</span>&gt;</span>女<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!-- 复选框 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;subscribe&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;subscribe&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;subscribe&quot;</span>&gt;</span>订阅推送信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!-- 下拉列表 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;country&quot;</span>&gt;</span>国家:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;country&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;country&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;cn&quot;</span>&gt;</span>CN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;usa&quot;</span>&gt;</span>USA<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;uk&quot;</span>&gt;</span>UK<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!-- 提交按钮 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表单标签\"><a href=\"#表单标签\" class=\"headerlink\" title=\"表单标签\"></a>表单标签</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>form</code></td>\n<td align=\"left\">定义供用户输入的表单</td>\n</tr>\n<tr>\n<td align=\"left\"><code>input</code></td>\n<td align=\"left\">定义输入域</td>\n</tr>\n<tr>\n<td align=\"left\"><code>textarea</code></td>\n<td align=\"left\">定义文本域 (一个多行的输入控件)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>label</code></td>\n<td align=\"left\">定义了 <code>&lt;input&gt;</code> 元素的标签，一般为输入标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>fieldset</code></td>\n<td align=\"left\">定义了一组相关的表单元素，并使用外框包含起来</td>\n</tr>\n<tr>\n<td align=\"left\"><code>legend</code></td>\n<td align=\"left\">定义了 <code>&lt;fieldset&gt;</code> 元素的标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>select</code></td>\n<td align=\"left\">定义了下拉选项列表</td>\n</tr>\n<tr>\n<td align=\"left\"><code>optgroup</code></td>\n<td align=\"left\">定义选项组</td>\n</tr>\n<tr>\n<td align=\"left\"><code>option</code></td>\n<td align=\"left\">定义下拉列表中的选项</td>\n</tr>\n<tr>\n<td align=\"left\"><code>button</code></td>\n<td align=\"left\">定义一个点击按钮</td>\n</tr>\n<tr>\n<td align=\"left\"><code>datalist</code></td>\n<td align=\"left\">指定一个预先定义的输入控件选项列表</td>\n</tr>\n<tr>\n<td align=\"left\"><code>keygen</code></td>\n<td align=\"left\">定义了表单的密钥对生成器字段</td>\n</tr>\n<tr>\n<td align=\"left\"><code>output</code></td>\n<td align=\"left\">定义一个计算结果</td>\n</tr>\n</tbody></table>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>…</p>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><p>…</p>\n<h2 id=\"字符实体\"><a href=\"#字符实体\" class=\"headerlink\" title=\"字符实体\"></a>字符实体</h2><p>在 HTML 中，某些字符是预留的。</p>\n<p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p>\n<p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。 字符实体类似这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&amp;*entity_name*;<br><span class=\"hljs-comment\">&lt;!-- 或 --&gt;</span><br>&amp;#*entity_number*;<br></code></pre></td></tr></table></figure>\n\n<p>如需显示小于号，我们必须这样写：&lt; 或 &#60; 或 &#060;  (<code>&amp;lt;</code> 或 <code>&amp;#60;</code> 或 <code>&amp;#060;</code>)</p>\n",
            "tags": [
                "html"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/ddff0c71/",
            "url": "https://www.oikiou.top/2022/ddff0c71/",
            "title": "MS-DOS",
            "date_published": "2022-06-21T14:57:15.000Z",
            "content_html": "<h1 id=\"MS-DOS\"><a href=\"#MS-DOS\" class=\"headerlink\" title=\"MS-DOS\"></a>MS-DOS</h1><p><strong>CMD(windows-commands)</strong></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands\">Windows Commands</a></p>\n<p>在cmd内<code>/?</code>即可获得帮助信息</p>\n<h2 id=\"FOR\"><a href=\"#FOR\" class=\"headerlink\" title=\"FOR\"></a>FOR</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">对一组文件中的每一个文件执行某个特定命令。<br><br>FOR <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>  <span class=\"hljs-comment\">%variable  指定一个单一字母可替换的参数。</span><br>  (set)      指定一个或一组文件。可以使用通配符。<br>  command    指定对每个文件执行的命令。<br>  command-parameters <br>             为特定命令指定参数或命令行开关。<br><br>在批处理程序中使用 FOR 命令时，指定变量请使用 <span class=\"hljs-comment\">%%variable</span><br>而不要用 <span class=\"hljs-comment\">%variable。变量名称是区分大小写的，所以 %i 不同于 %I.</span><br><br>如果启用命令扩展，则会支持下列 FOR 命令的其他格式:<br><br>FOR /D <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>    如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。<br><br>FOR /R [[drive:]path] <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>    检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。<br>    如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，<br>    则枚举该目录树。<br><br>FOR /L <span class=\"hljs-comment\">%variable IN (start,step,end) DO command [command-parameters]</span><br><br>    该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列<br>    1 2 3 4 5，(5,-1,1)将产生序列(5 4 3 2 1)<br><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (file-set) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&quot;string&quot;) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&#x27;command&#x27;) DO command [command-parameters]</span><br><br>    或者，如果有 usebackq 选项:<br><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (file-set) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&quot;string&quot;) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&#x27;command&#x27;) DO command [command-parameters]</span><br><br>    fileset 为一个或多个文件名。继续到 fileset 中的下一个文件之前，<br>    每份文件都被打开、读取并经过处理。处理包括读取文件，将其分成一行行的文字，<br>    然后将每行解析成零或更多的符号。然后用已找到的符号字符串变量值调用 For 循环。<br>    以默认方式，/F 通过每个文件的每一行中分开的第一个空白符号。跳过空白行。<br>    你可通过指定可选 &quot;options&quot; 参数替代默认解析操作。这个带引号的字符串包括一个<br>    或多个指定不同解析选项的关键字。这些关键字为:<br><br>        eol=c           - 指一个行注释字符的结尾(就一个)<br>        skip=n          - 指在文件开始时忽略的行数。<br>        delims=xxx      - 指分隔符集。这个替换了空格和制表符的<br>                          默认分隔符集。<br>        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代<br>                          的 for 本身。这会导致额外变量名称的分配。m-n<br>                          格式为一个范围。通过 nth 符号指定 mth。如果<br>                          符号字符串中的最后一个字符星号，<br>                          那么额外的变量将在最后一个符号解析之后<br>                          分配并接受行的保留文本。<br>        usebackq        - 指定新语法已在下类情况中使用:<br>                          在作为命令执行一个后引号的字符串并且一个单<br>                          引号字符为文字字符串命令并允许在 file-set<br>                          中使用双引号扩起文件名称。<br><br>    某些范例可能有助:<br><br>FOR /F &quot;eol=; tokens=2,3* delims=, &quot; <span class=\"hljs-comment\">%i in (myfile.txt) do @echo %i %j %k</span><br><br>    会分析 myfile.txt 中的每一行，忽略以分号打头的那些行，将<br>    每行中的第二个和第三个符号传递给 for 函数体，用逗号和/或<br>    空格分隔符号。请注意，此 for 函数体的语句引用 <span class=\"hljs-comment\">%i 来</span><br>    获得第二个符号，引用 <span class=\"hljs-comment\">%j 来获得第三个符号，引用 %k</span><br>    来获得第三个符号后的所有剩余符号。对于带有空格的文件<br>    名，你需要用双引号将文件名括起来。为了用这种方式来使<br>    用双引号，还需要使用 usebackq 选项，否则，双引号会<br>    被理解成是用作定义某个要分析的字符串的。<br><br>    <span class=\"hljs-comment\">%i 在 for 语句中显式声明，%j 和 %k 是通过</span><br>    tokens= 选项隐式声明的。可以通过 tokens= 一行<br>    指定最多 26 个符号，只要不试图声明一个高于字母 &quot;z&quot; 或<br>    &quot;Z&quot; 的变量。请记住，FOR 变量是单一字母、分大小写和全局的变量；<br>    而且，不能同时使用超过 52 个。<br><br>    还可以在相邻字符串上使用 FOR /F 分析逻辑，方法是，<br>    用单引号将括号之间的 file-set 括起来。这样，该字符<br>    串会被当作一个文件中的一个单一输入行进行解析。<br><br>    最后，可以用 FOR /F 命令来分析命令的输出。方法是，将<br>    括号之间的 file-set 变成一个反括字符串。该字符串会<br>    被当作命令行，传递到一个子 CMD.EXE，其输出会被捕获到<br>    内存中，并被当作文件分析。如以下例子所示:<br><br>      FOR /F &quot;usebackq delims==&quot; <span class=\"hljs-comment\">%i IN (`set`) DO @echo %i</span><br><br>    会枚举当前环境中的环境变量名称。<br><br>另外，FOR 变量参照的替换已被增强。你现在可以使用下列<br>选项语法:<br><br>     <span class=\"hljs-comment\">%~I          - 删除任何引号(&quot;)，扩展 %I</span><br>     <span class=\"hljs-comment\">%~fI        - 将 %I 扩展到一个完全合格的路径名</span><br>     <span class=\"hljs-comment\">%~dI        - 仅将 %I 扩展到一个驱动器号</span><br>     <span class=\"hljs-comment\">%~pI        - 仅将 %I 扩展到一个路径</span><br>     <span class=\"hljs-comment\">%~nI        - 仅将 %I 扩展到一个文件名</span><br>     <span class=\"hljs-comment\">%~xI        - 仅将 %I 扩展到一个文件扩展名</span><br>     <span class=\"hljs-comment\">%~sI        - 扩展的路径只含有短名</span><br>     <span class=\"hljs-comment\">%~aI        - 将 %I 扩展到文件的文件属性</span><br>     <span class=\"hljs-comment\">%~tI        - 将 %I 扩展到文件的日期/时间</span><br>     <span class=\"hljs-comment\">%~zI        - 将 %I 扩展到文件的大小</span><br>     <span class=\"hljs-comment\">%~$PATH:I   - 查找列在路径环境变量的目录，并将 %I 扩展</span><br>                   到找到的第一个完全合格的名称。如果环境变量名<br>                   未被定义，或者没有找到文件，此组合键会扩展到<br>                   空字符串<br><br>可以组合修饰符来得到多重结果:<br><br>     <span class=\"hljs-comment\">%~dpI       - 仅将 %I 扩展到一个驱动器号和路径</span><br>     <span class=\"hljs-comment\">%~nxI       - 仅将 %I 扩展到一个文件名和扩展名</span><br>     <span class=\"hljs-comment\">%~fsI       - 仅将 %I 扩展到一个带有短名的完整路径名</span><br>     <span class=\"hljs-comment\">%~dp$PATH:I - 搜索列在路径环境变量的目录，并将 %I 扩展</span><br>                   到找到的第一个驱动器号和路径。<br>     <span class=\"hljs-comment\">%~ftzaI     - 将 %I 扩展到类似输出线路的 DIR</span><br><br>在以上例子中，<span class=\"hljs-comment\">%I 和 PATH 可用其他有效数值代替。%~ 语法</span><br>用一个有效的 FOR 变量名终止。选取类似 <span class=\"hljs-comment\">%I 的大写变量名</span><br>比较易读，而且避免与不分大小写的组合键混淆。<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h2><p>列出文件</p>\n<h2 id=\"cls\"><a href=\"#cls\" class=\"headerlink\" title=\"cls\"></a>cls</h2><p>清屏</p>\n<h2 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h2><blockquote>\n<p>  keyword: cmd timeout 无效</p>\n<p>  做一个延时执行的批处理命令，选用timeout命令来实现，但是碰到一个情况是写完后直接双击运行时，timeout 命令运行不了。</p>\n<p>  <strong>选择管理员权限运行就可以了。</strong></p>\n<p>  bat命令需要查看权限，注意使用win+R进入cmd是具有管理员权限的，但是直接双击打开的bat文件是没有管理员权限的，没有对应的权限，有些对系统级别的控制，会出现奇怪的现象。</p>\n</blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><h2 id=\"mklinkC盘程序搬家\"><a href=\"#mklinkC盘程序搬家\" class=\"headerlink\" title=\"mklinkC盘程序搬家\"></a>mklinkC盘程序搬家</h2><p>命令参数</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">mklink<span class=\"hljs-string\">[[/d]|[/h]|[/j]]</span>&lt;Link&gt;&lt;Target&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;d</td>\n<td>创建目录符号链接。默认情况下，mklink会创建文件符号链接。</td>\n</tr>\n<tr>\n<td>&#x2F;H</td>\n<td>创建硬链接而不是符号链接。</td>\n</tr>\n<tr>\n<td>&#x2F;J</td>\n<td>创建目录连接。</td>\n</tr>\n<tr>\n<td>&lt;链接&gt;</td>\n<td>指定正在创建的符号链接的名称。</td>\n</tr>\n<tr>\n<td>&lt;目标&gt;</td>\n<td>指定新符号链接引用的路径（相对或绝对）。</td>\n</tr>\n<tr>\n<td>&#x2F;？</td>\n<td>在命令提示符下显示帮助。</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "windows",
                "ms-dos",
                "cmd"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/5751eea2/",
            "url": "https://www.oikiou.top/2022/5751eea2/",
            "title": "C++",
            "date_published": "2022-05-06T13:13:15.000Z",
            "content_html": "<h1 id=\"C-Bref\"><a href=\"#C-Bref\" class=\"headerlink\" title=\"C++ Bref\"></a>C++ Bref</h1><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p>\n<p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p>\n<p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p>\n<p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p>\n<p><strong>注意：</strong>使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。</p>\n<h2 id=\"类-Class\"><a href=\"#类-Class\" class=\"headerlink\" title=\"类 Class\"></a>类 Class</h2><p>类是虚拟的, 统称, 对象是类的实体</p>\n<h2 id=\"对象-Objects\"><a href=\"#对象-Objects\" class=\"headerlink\" title=\"对象 Objects\"></a>对象 Objects</h2><p>objects &#x3D; attributes + services &#x3D; data + operations</p>\n<p>对象 &#x3D; 属性 + 服务 &#x3D; 数据 + 操作</p>\n<p><img src=\"/2022/5751eea2/image-20220506211131674.png\" alt=\"image-20220506211131674\"></p>\n<ul>\n<li>Data 要避免去直接操作, 应该通过Operations去交互</li>\n</ul>\n<p> 三个特性</p>\n<ul>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ul>\n<h2 id=\"Objects-Class\"><a href=\"#Objects-Class\" class=\"headerlink\" title=\"Objects &amp; Class\"></a>Objects &amp; Class</h2><p>类是虚拟的, 统称, 对象是类的实体</p>\n<p>猫 -&gt; 种类 -&gt; Class</p>\n<p>这只猫 -&gt; 实体 -&gt; Objects</p>\n<p><img src=\"/2022/5751eea2/image-20220506210930554.png\" alt=\"image-20220506210930554\"></p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p>\n<ul>\n<li>封装</li>\n<li>抽象</li>\n<li>继承</li>\n<li>多态</li>\n</ul>\n<p>C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。</p>\n<h2 id=\"标准库\"><a href=\"#标准库\" class=\"headerlink\" title=\"标准库\"></a>标准库</h2><p>标准的 C++ 由三个重要部分组成：</p>\n<ul>\n<li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li>\n<li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li>\n<li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li>\n</ul>\n<h1 id=\"hello-word\"><a href=\"#hello-word\" class=\"headerlink\" title=\"hello word\"></a>hello word</h1><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>\t\t\t<span class=\"hljs-comment\">// include io stream 后缀是不必要的是Windows的错觉</span></span><br><span class=\"hljs-comment\">// 如果这里包含的是 iostream.h 则不再需要 using namespace std; 标准库也会有所不同</span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\t\t<span class=\"hljs-comment\">// Standard 标准命名空间</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;Hello world!&quot;</span> &lt;&lt; endl;\t\t<span class=\"hljs-comment\">// c out   end line</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -v<br><span class=\"hljs-comment\"># 使用gcc编译</span><br>gcc main.cpp -lstdc++ -o main<br><span class=\"hljs-comment\"># g++ 程序 g++ 是将 gcc 默认语言设为 C++ 的一个特殊的版本</span><br>g++ main.cpp -o main<br><span class=\"hljs-comment\"># 运行它</span><br>./main<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"g-编译器\"><a href=\"#g-编译器\" class=\"headerlink\" title=\"g++编译器\"></a>g++编译器</h3><p>g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -g -Wall -std=c++11 main.cpp<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"g-常用命令选项\"><a href=\"#g-常用命令选项\" class=\"headerlink\" title=\"g++ 常用命令选项\"></a>g++ 常用命令选项</h4><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-ansi</td>\n<td align=\"left\">只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。</td>\n</tr>\n<tr>\n<td align=\"left\">-c</td>\n<td align=\"left\">只编译并生成目标文件。</td>\n</tr>\n<tr>\n<td align=\"left\">-DMACRO</td>\n<td align=\"left\">以字符串”1”定义 MACRO 宏。</td>\n</tr>\n<tr>\n<td align=\"left\">-DMACRO&#x3D;DEFN</td>\n<td align=\"left\">以字符串”DEFN”定义 MACRO 宏。</td>\n</tr>\n<tr>\n<td align=\"left\">-E</td>\n<td align=\"left\">只运行 C 预编译器。</td>\n</tr>\n<tr>\n<td align=\"left\">-g</td>\n<td align=\"left\">生成调试信息。GNU 调试器可利用该信息。</td>\n</tr>\n<tr>\n<td align=\"left\">-IDIRECTORY</td>\n<td align=\"left\">指定额外的头文件搜索路径DIRECTORY。</td>\n</tr>\n<tr>\n<td align=\"left\">-LDIRECTORY</td>\n<td align=\"left\">指定额外的函数库搜索路径DIRECTORY。</td>\n</tr>\n<tr>\n<td align=\"left\">-lLIBRARY</td>\n<td align=\"left\">连接时搜索指定的函数库LIBRARY。</td>\n</tr>\n<tr>\n<td align=\"left\">-m486</td>\n<td align=\"left\">针对 486 进行代码优化。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">FILE 生成指定的输出文件。用在生成可执行文件时。</td>\n</tr>\n<tr>\n<td align=\"left\">-O0</td>\n<td align=\"left\">不进行优化处理。</td>\n</tr>\n<tr>\n<td align=\"left\">-O</td>\n<td align=\"left\">或 -O1 优化生成代码。</td>\n</tr>\n<tr>\n<td align=\"left\">-O2</td>\n<td align=\"left\">进一步优化。</td>\n</tr>\n<tr>\n<td align=\"left\">-O3</td>\n<td align=\"left\">比 -O2 更进一步优化，包括 inline 函数。</td>\n</tr>\n<tr>\n<td align=\"left\">-shared</td>\n<td align=\"left\">生成共享目标文件。通常用在建立共享库时。</td>\n</tr>\n<tr>\n<td align=\"left\">-static</td>\n<td align=\"left\">禁止使用共享连接。</td>\n</tr>\n<tr>\n<td align=\"left\">-UMACRO</td>\n<td align=\"left\">取消对 MACRO 宏的定义。</td>\n</tr>\n<tr>\n<td align=\"left\">-w</td>\n<td align=\"left\">不生成任何警告信息。</td>\n</tr>\n<tr>\n<td align=\"left\">-Wall</td>\n<td align=\"left\">生成所有警告信息。</td>\n</tr>\n</tbody></table>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><h2 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>基本语法和c非常类似,   ;   结尾等等</p>\n<h2 id=\"三字符组-etc\"><a href=\"#三字符组-etc\" class=\"headerlink\" title=\"三字符组(??&#x3D; etc.)\"></a>三字符组(??&#x3D; etc.)</h2><p><strong>一种古老的语法</strong></p>\n<p>三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">三字符组</th>\n<th align=\"left\">替换</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">??&#x3D;</td>\n<td align=\"left\">#</td>\n</tr>\n<tr>\n<td align=\"left\">…..</td>\n<td align=\"left\">….</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据类型-bool-etc\"><a href=\"#数据类型-bool-etc\" class=\"headerlink\" title=\"数据类型(bool etc.)\"></a>数据类型(bool etc.)</h2><p>C++ 就是在以前的c拓展了一个 bool</p>\n<p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">布尔型</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">字符型</td>\n<td align=\"left\">char</td>\n</tr>\n<tr>\n<td align=\"left\">整型</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">浮点型</td>\n<td align=\"left\">float</td>\n</tr>\n<tr>\n<td align=\"left\">双浮点型</td>\n<td align=\"left\">double</td>\n</tr>\n<tr>\n<td align=\"left\">无类型</td>\n<td align=\"left\">void</td>\n</tr>\n<tr>\n<td align=\"left\">宽字符型</td>\n<td align=\"left\">wchar_t</td>\n</tr>\n</tbody></table>\n<p>其实 wchar_t 是这样来的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-type\">wchar_t</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"存储类-auto-register-etc\"><a href=\"#存储类-auto-register-etc\" class=\"headerlink\" title=\"存储类(auto register etc.)\"></a>存储类(auto register etc.)</h2><p>存储类定义 C++ 程序中变量&#x2F;函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p>\n<ul>\n<li>auto</li>\n<li>register</li>\n<li>static</li>\n<li>extern</li>\n<li>mutable</li>\n<li>thread_local (C++11)</li>\n</ul>\n<p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p>\n<h3 id=\"auto-存储类\"><a href=\"#auto-存储类\" class=\"headerlink\" title=\"auto 存储类\"></a>auto 存储类</h3><p>自 C++ 11 以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p>\n<p>C++98标准中auto关键字用于自动变量的声明，但由于使用极少且多余，在 C++17 中已删除这一用法。</p>\n<p>根据初始化表达式自动推断被声明的变量的类型，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">auto</span> f=<span class=\"hljs-number\">3.14</span>;      <span class=\"hljs-comment\">//double </span><br><span class=\"hljs-keyword\">auto</span> <span class=\"hljs-title function_\">s</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;hello&quot;</span>)</span>;  <span class=\"hljs-comment\">//const char* </span><br><span class=\"hljs-keyword\">auto</span> z = new <span class=\"hljs-keyword\">auto</span>(<span class=\"hljs-number\">9</span>); <span class=\"hljs-comment\">// int* </span><br><span class=\"hljs-keyword\">auto</span> x1 = <span class=\"hljs-number\">5</span>, x2 = <span class=\"hljs-number\">5.0</span>, x3=<span class=\"hljs-string\">&#x27;r&#x27;</span>;<span class=\"hljs-comment\">//错误，必须是初始化为同一类型</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"register-存储类\"><a href=\"#register-存储类\" class=\"headerlink\" title=\"register 存储类\"></a>register 存储类</h3><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">&#123;   <br>\t<span class=\"hljs-keyword\">register</span> <span class=\"hljs-type\">int</span>  miles; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>\n<h3 id=\"mutable-存储类\"><a href=\"#mutable-存储类\" class=\"headerlink\" title=\"mutable 存储类\"></a>mutable 存储类</h3><p><strong>mutable</strong> 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p>\n<h3 id=\"thread-local-存储类\"><a href=\"#thread-local-存储类\" class=\"headerlink\" title=\"thread_local 存储类\"></a>thread_local 存储类</h3><p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p>\n<p>thread_local 说明符可以与 static 或 extern 合并。</p>\n<p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p>\n<p>以下演示了可以被声明为 thread_local 的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">thread_local</span> <span class=\"hljs-type\">int</span> x;  <span class=\"hljs-comment\">// 命名空间下的全局变量 </span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">X</span> &#123;</span>    <br>    <span class=\"hljs-type\">static</span> <span class=\"hljs-keyword\">thread_local</span> <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> s; <span class=\"hljs-comment\">// 类的static成员变量 </span><br>&#125;; <br><span class=\"hljs-type\">static</span> <span class=\"hljs-keyword\">thread_local</span> <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> X::s;  <span class=\"hljs-comment\">// X::s 是需要定义的  </span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">()</span> &#123;    <br>    <span class=\"hljs-keyword\">thread_local</span> <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; v;  <span class=\"hljs-comment\">// 本地变量 </span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数学运算-cos-sin-etc\"><a href=\"#数学运算-cos-sin-etc\" class=\"headerlink\" title=\"数学运算(cos sin etc.)\"></a>数学运算(cos sin etc.)</h2><p>C++ 内置了丰富的数学函数，可对各种数字进行运算。下表列出了 C++ 中一些有用的内置的数学函数。</p>\n<p>为了利用这些函数，您需要引用数学头文件 **<cmath>**。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">函数 &amp; 描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><strong>double cos(double);</strong> 该函数返回弧度角（double 型）的余弦。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><strong>double sin(double);</strong> 该函数返回弧度角（double 型）的正弦。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><strong>double tan(double);</strong> 该函数返回弧度角（double 型）的正切。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><strong>double log(double);</strong> 该函数返回参数的自然对数。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><strong>double pow(double, double);</strong> 假设第一个参数为 x，第二个参数为 y，则该函数返回 x 的 y 次方。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><strong>double hypot(double, double);</strong> 该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><strong>double sqrt(double);</strong> 该函数返回参数的平方根。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><strong>int abs(int);</strong> 该函数返回整数的绝对值。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><strong>double fabs(double);</strong> 该函数返回任意一个浮点数的绝对值。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><strong>double floor(double);</strong> 该函数返回一个小于或等于传入参数的最大整数。</td>\n</tr>\n</tbody></table>\n<h2 id=\"随机数-rand-etc\"><a href=\"#随机数-rand-etc\" class=\"headerlink\" title=\"随机数(rand etc.)\"></a>随机数(rand etc.)</h2><p>在许多情况下，需要生成随机数。关于随机数生成器，有两个相关的函数。一个是 **rand()**，该函数只返回一个伪随机数。生成随机数之前必须先调用 <strong>srand()</strong> 函数。</p>\n<p>下面是一个关于生成随机数的简单实例。实例中使用了 <strong>time()</strong> 函数来获取系统时间的秒数，通过调用 rand() 函数来生成随机数</p>\n<h2 id=\"字符串-string-etc\"><a href=\"#字符串-string-etc\" class=\"headerlink\" title=\"字符串(string etc.)\"></a>字符串(string etc.)</h2><p>C++ 提供了以下两种类型的字符串表示形式：</p>\n<ul>\n<li>C 风格字符串</li>\n<li><strong>C++ 引入的 string 类类型</strong></li>\n</ul>\n<p>C++ 标准库提供了 <strong>string</strong> 类类型，支持上述所有的操作，另外还增加了其他更多的功能。我们将学习 C++ 标准库中的这个类，现在让我们先来看看下面这个实例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str1 = <span class=\"hljs-string\">&quot;str1&quot;</span>;<br>    string str2 = <span class=\"hljs-string\">&quot;str2&quot;</span>;<br>    string str3 = <span class=\"hljs-string\">&quot;str3&quot;</span>;<br>    <span class=\"hljs-comment\">// 无法实现 string str3 = &quot;str3&quot; + &quot;str3949499&quot;;  两个静态的string无法相加</span><br><br>    <span class=\"hljs-comment\">// 字符串可以 直接相加</span><br>    str3 = str1 + str2;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>    <span class=\"hljs-comment\">// 字符串可以 追加</span><br>    str3 += str1;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>    <span class=\"hljs-comment\">// 从cin中直接获取</span><br>    cin &gt;&gt; str3;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>    <span class=\"hljs-comment\">// 直接get到size</span><br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;str3.size() : &quot;</span> &lt;&lt; str<span class=\"hljs-number\">3.</span><span class=\"hljs-built_in\">size</span>() &lt;&lt; endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"基本输入输出-cin-cout-cerr-clog\"><a href=\"#基本输入输出-cin-cout-cerr-clog\" class=\"headerlink\" title=\"基本输入输出(cin cout cerr clog)\"></a>基本输入输出(cin cout cerr clog)</h2><h3 id=\"I-O-库头文件\"><a href=\"#I-O-库头文件\" class=\"headerlink\" title=\"I&#x2F;O 库头文件\"></a>I&#x2F;O 库头文件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">头文件</th>\n<th align=\"left\">函数和描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><iostream></td>\n<td align=\"left\">该文件定义了 <strong>cin、cout、cerr</strong> 和 <strong>clog</strong> 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td>\n</tr>\n<tr>\n<td align=\"left\"><iomanip></td>\n<td align=\"left\">该文件通过所谓的参数化的流操纵器（比如 <strong>setw</strong> 和 <strong>setprecision</strong>），来声明对执行标准化 I&#x2F;O 有用的服务。</td>\n</tr>\n<tr>\n<td align=\"left\"><fstream></td>\n<td align=\"left\">该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td>\n</tr>\n</tbody></table>\n<h3 id=\"标准输出流（cout）\"><a href=\"#标准输出流（cout）\" class=\"headerlink\" title=\"标准输出流（cout）\"></a>标准输出流（cout）</h3><p>预定义的对象 <strong>cout</strong> 是 <strong>iostream</strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong>cout</strong> 是与流插入运算符 &lt;&lt; 结合使用的，C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。&lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。</p>\n<p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<strong>endl</strong> 用于在行末添加一个换行符。</p>\n<p><code>cout &lt;&lt; str_cin &lt;&lt; endl;</code></p>\n<h4 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h4><h5 id=\"ostream-类的成员方法\"><a href=\"#ostream-类的成员方法\" class=\"headerlink\" title=\"ostream 类的成员方法\"></a>ostream 类的成员方法</h5><table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flags(fmtfl)</td>\n<td>当前格式状态全部替换为 fmtfl。注意，fmtfl 可以表示一种格式，也可以表示多种格式。</td>\n</tr>\n<tr>\n<td>precision(n)</td>\n<td>设置输出浮点数的精度为 n。</td>\n</tr>\n<tr>\n<td>width(w)</td>\n<td>指定输出宽度为 w 个字符。</td>\n</tr>\n<tr>\n<td>fill(c)</td>\n<td>在指定输出宽度的情况下，输出的宽度不足时用字符 c 填充（默认情况是用空格填充）。</td>\n</tr>\n<tr>\n<td>setf(fmtfl, mask)</td>\n<td>在当前格式的基础上，追加 fmtfl 格式，并删除 mask 格式。其中，mask 参数可以省略。</td>\n</tr>\n<tr>\n<td>unsetf(mask)</td>\n<td>在当前格式的基础上，删除 mask 格式。</td>\n</tr>\n</tbody></table>\n<h5 id=\"fmtfl-和-mask-参数可选值\"><a href=\"#fmtfl-和-mask-参数可选值\" class=\"headerlink\" title=\"fmtfl 和 mask 参数可选值\"></a>fmtfl 和 mask 参数可选值</h5><table>\n<thead>\n<tr>\n<th>标 志</th>\n<th>作 用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::boolapha</td>\n<td>把 true 和 false 输出为字符串</td>\n</tr>\n<tr>\n<td>ios::left</td>\n<td>输出数据在本域宽范围内向左对齐</td>\n</tr>\n<tr>\n<td>ios::right</td>\n<td>输出数据在本域宽范围内向右对齐</td>\n</tr>\n<tr>\n<td>ios::internal</td>\n<td>数值的符号位在域宽内左对齐，数值右对齐，中间由填充字符填充</td>\n</tr>\n<tr>\n<td>ios::dec</td>\n<td>设置整数的基数为 10</td>\n</tr>\n<tr>\n<td>ios::oct</td>\n<td>设置整数的基数为 8</td>\n</tr>\n<tr>\n<td>ios::hex</td>\n<td>设置整数的基数为 16</td>\n</tr>\n<tr>\n<td>ios::showbase</td>\n<td>强制输出整数的基数（八进制数以 0 开头，十六进制数以 0x 打头）</td>\n</tr>\n<tr>\n<td>ios::showpoint</td>\n<td>强制输出浮点数的小点和尾数 0</td>\n</tr>\n<tr>\n<td>ios::uppercase</td>\n<td>在以科学记数法格式 E 和以十六进制输出字母时以大写表示</td>\n</tr>\n<tr>\n<td>ios::showpos</td>\n<td>对正数显示“+”号</td>\n</tr>\n<tr>\n<td>ios::scientific</td>\n<td>浮点数以科学记数法格式输出</td>\n</tr>\n<tr>\n<td>ios::fixed</td>\n<td>浮点数以定点格式（小数形式）输出</td>\n</tr>\n<tr>\n<td>ios::unitbuf</td>\n<td>每次输出之后刷新所有的流</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br>using namespace <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">1.23</span>;<br>    <span class=\"hljs-comment\">//设定后续输出的浮点数的精度为 4</span><br>    <span class=\"hljs-built_in\">cout</span>.precision(<span class=\"hljs-number\">4</span>);<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt;<span class=\"hljs-string\">&quot;precision: &quot;</span>&lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-comment\">//设定后续以科学计数法的方式输出浮点数</span><br>    <span class=\"hljs-built_in\">cout</span>.setf(ios::scientific);<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt;<span class=\"hljs-string\">&quot;scientific：&quot;</span>&lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"iomanip-格式化输出\"><a href=\"#iomanip-格式化输出\" class=\"headerlink\" title=\"iomanip 格式化输出\"></a>iomanip 格式化输出</h4><table>\n<thead>\n<tr>\n<th>流操纵算子</th>\n<th>作  用</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*dec</td>\n<td>以十进制形式输出整数</td>\n<td></td>\n</tr>\n<tr>\n<td>hex</td>\n<td>以十六进制形式输出整数</td>\n<td></td>\n</tr>\n<tr>\n<td>oct</td>\n<td>以八进制形式输出整数</td>\n<td></td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>以普通小数形式输出浮点数</td>\n<td></td>\n</tr>\n<tr>\n<td>scientific</td>\n<td>以科学计数法形式输出浮点数</td>\n<td></td>\n</tr>\n<tr>\n<td>left</td>\n<td>左对齐，即在宽度不足时将填充字符添加到右边</td>\n<td></td>\n</tr>\n<tr>\n<td>*right</td>\n<td>右对齐，即在宽度不足时将填充字符添加到左边</td>\n<td></td>\n</tr>\n<tr>\n<td>setbase(b)</td>\n<td>设置输出整数时的进制，b&#x3D;8、10 或 16</td>\n<td></td>\n</tr>\n<tr>\n<td>setw(w)</td>\n<td>指定输出宽度为 w 个字符，或输入字符串时读入 w 个字符。注意，该函数所起的作用是一次性的，即只影响下一次 cout 输出。</td>\n<td></td>\n</tr>\n<tr>\n<td>setfill(c)</td>\n<td>在指定输出宽度的情况下，输出的宽度不足时用字符 c 填充（默认情况是用空格填充）</td>\n<td></td>\n</tr>\n<tr>\n<td>setprecision(n)</td>\n<td>设置输出浮点数的精度为 n。  在使用非 fixed 且非 scientific 方式输出的情况下，n 即为有效数字最多的位数，如果有效数字位数超过 n，则小数部分四舍五人，或自动变为科学计 数法输出并保留一共 n 位有效数字。  在使用 fixed 方式和 scientific 方式输出的情况下，n 是小数点后面应保留的位数。</td>\n<td></td>\n</tr>\n<tr>\n<td>setiosflags(mask)</td>\n<td>在当前格式状态下，追加 mask 格式，mask 参数可选择表 2 中的所有值。</td>\n<td></td>\n</tr>\n<tr>\n<td>resetiosflags(mask)</td>\n<td>在当前格式状态下，删除 mask 格式，mask 参数可选择表 2 中的所有值。</td>\n<td></td>\n</tr>\n<tr>\n<td>boolapha</td>\n<td>把 true 和 false 输出为字符串</td>\n<td></td>\n</tr>\n<tr>\n<td>*noboolalpha</td>\n<td>把 true 和 false 输出为 0、1</td>\n<td></td>\n</tr>\n<tr>\n<td>showbase</td>\n<td>输出表示数值的进制的前缀</td>\n<td></td>\n</tr>\n<tr>\n<td>*noshowbase</td>\n<td>不输出表示数值的进制.的前缀</td>\n<td></td>\n</tr>\n<tr>\n<td>showpoint</td>\n<td>总是输出小数点</td>\n<td></td>\n</tr>\n<tr>\n<td>*noshowpoint</td>\n<td>只有当小数部分存在时才显示小数点</td>\n<td></td>\n</tr>\n<tr>\n<td>showpos</td>\n<td>在非负数值中显示 +</td>\n<td></td>\n</tr>\n<tr>\n<td>*noshowpos</td>\n<td>在非负数值中不显示 +</td>\n<td></td>\n</tr>\n<tr>\n<td>uppercase</td>\n<td>十六进制数中使用 A~E。若输出前缀，则前缀输出 0X，科学计数法中输出 E</td>\n<td></td>\n</tr>\n<tr>\n<td>*nouppercase</td>\n<td>十六进制数中使用 a~e。若输出前缀，则前缀输出 0x，科学计数法中输出 e。</td>\n<td></td>\n</tr>\n<tr>\n<td>internal</td>\n<td>数值的符号（正负号）在指定宽度内左对齐，数值右对 齐，中间由填充字符填充。</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span></span><br>using namespace <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//以十六进制输出整数</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; hex &lt;&lt; <span class=\"hljs-number\">16</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-comment\">//删除之前设定的进制格式，以默认的 10 进制输出整数</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; resetiosflags(ios::basefield)&lt;&lt; <span class=\"hljs-number\">16</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">123</span>;<br>    <span class=\"hljs-comment\">//以科学计数法的方式输出浮点数</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; scientific &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-comment\">//删除之前设定的科学计数法的方法</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; resetiosflags(ios::scientific) &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"标准输入流（cin）\"><a href=\"#标准输入流（cin）\" class=\"headerlink\" title=\"标准输入流（cin）\"></a>标准输入流（cin）</h3><p>预定义的对象 <strong>cin</strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong>cin</strong> 是与流提取运算符 &gt;&gt; 结合使用的，</p>\n<p><code>cin &gt;&gt; str_cin;</code></p>\n<h3 id=\"标准错误流（cerr）\"><a href=\"#标准错误流（cerr）\" class=\"headerlink\" title=\"标准错误流（cerr）\"></a>标准错误流（cerr）</h3><p>预定义的对象 <strong>cerr</strong> 是 <strong>iostream</strong> 类的一个实例。cerr 对象附属到标准输出设备，通常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p>\n<h3 id=\"标准日志流（clog）\"><a href=\"#标准日志流（clog）\" class=\"headerlink\" title=\"标准日志流（clog）\"></a>标准日志流（clog）</h3><p>预定义的对象 <strong>clog</strong> 是 <strong>iostream</strong> 类的一个实例。clog 对象附属到标准输出设备，通常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区，直到缓冲填满或者缓冲区刷新时才会输出。</p>\n<h2 id=\"引用-注意区别于指针\"><a href=\"#引用-注意区别于指针\" class=\"headerlink\" title=\"引用&amp; (注意区别于指针)\"></a>引用&amp; (注意区别于指针)</h2><h4 id=\"C-引用-vs-指针\"><a href=\"#C-引用-vs-指针\" class=\"headerlink\" title=\"C++ 引用 vs 指针\"></a>C++ 引用 vs 指针</h4><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p>\n<ul>\n<li>不存在空引用。引用必须连接到一块合法的内存。</li>\n<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>\n<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li>\n</ul>\n<p><strong>引用符号:&amp;</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-type\">int</span>&amp; j=i;\t\t\t\t\t<span class=\"hljs-comment\">//引用</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>&amp; a, <span class=\"hljs-type\">int</span>&amp; b)</span></span>;\t<span class=\"hljs-comment\">//引用传参</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"new-delete-动态内存分配\"><a href=\"#new-delete-动态内存分配\" class=\"headerlink\" title=\"new delete 动态内存分配\"></a>new delete 动态内存分配</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> * pi = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">225</span>); \t<span class=\"hljs-comment\">//分配的同时 初始化值</span><br><br><span class=\"hljs-type\">int</span> * pia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">10</span>]; \t<span class=\"hljs-comment\">//数据的new和delete</span><br><span class=\"hljs-keyword\">delete</span> []pia;\t\t\t\t<span class=\"hljs-comment\">// 带方括号释放</span><br></code></pre></td></tr></table></figure>\n\n<p>具体差别可以参考</p>\n<p>[new delete malloc free]: ..\\embedded!Main\\嵌入式编程学习笔记.md#C类##newdeletemallocfree\t“new delete malloc free”</p>\n<p>[new delete malloc free](..\\embedded!Main\\嵌入式编程学习笔记.md##new delete malloc free)</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h3><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p>\n<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>\n<p>当调用函数时，有三种向函数传递参数的方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">调用类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-value.html\">传值调用</a></td>\n<td align=\"left\">该方法把参数的实际值赋值给函数的形式参数。<br>在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html\">指针调用</a></td>\n<td align=\"left\">该方法把参数的地址赋值给形式参数。<br/>在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html\">引用调用</a></td>\n<td align=\"left\">该方法把参数的引用赋值给形式参数。<br/>在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n</tbody></table>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。</p>\n<p>这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">1</span>, <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">2</span>)</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//do thing</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda函数-匿名函数\"><a href=\"#Lambda函数-匿名函数\" class=\"headerlink\" title=\"Lambda函数 匿名函数\"></a>Lambda函数 匿名函数</h3><p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p>\n<p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p>\n<p>Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 有返回值</span><br>[capture](parameters)-&gt;<span class=\"hljs-keyword\">return</span>-type&#123;body&#125;<br><span class=\"hljs-comment\">// 无返回值</span><br>[capture](parameters)&#123;body&#125;<br><br><span class=\"hljs-comment\">// 例子</span><br>[](<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)&#123; <span class=\"hljs-keyword\">return</span> x &lt; y ; &#125;<br><span class=\"hljs-comment\">// 如果没有参数,空的圆括号()可以省略。</span><br>[]&#123; ++global_x; &#125; <br><span class=\"hljs-comment\">// 在一个更为复杂的例子中，返回类型可以被明确的指定</span><br>[](<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y) -&gt; <span class=\"hljs-type\">int</span> &#123; <span class=\"hljs-type\">int</span> z = x + y; <span class=\"hljs-keyword\">return</span> z + x; &#125;<br></code></pre></td></tr></table></figure>\n\n<p>关于capture里面的值如何获取：</p>\n<blockquote>\n<p>  []      &#x2F;&#x2F; 沒有定义任何变量。使用未定义变量会引发错误。<br>  [x, &amp;y] &#x2F;&#x2F; x以传值方式传入（默认），y以引用方式传入。<br>  [&amp;]     &#x2F;&#x2F; 任何被使用到的外部变量都隐式地以引用方式加以引用。<br>  [&#x3D;]     &#x2F;&#x2F; 任何被使用到的外部变量都隐式地以传值方式加以引用。<br>  [&amp;, x]  &#x2F;&#x2F; x显式地以传值方式加以引用。其余变量以引用方式加以引用。<br>  [&#x3D;, &amp;z] &#x2F;&#x2F; z显式地以引用方式加以引用。其余变量以传值方式加以引用。</p>\n</blockquote>\n<ul>\n<li><p>值捕获 与函数中的值传递类似。lambda表达式捕获的是变量的一个拷贝，因此我们如果在lambda表达式后面改变该变量值的话，不会影响捕获前的该变量值，这就是所谓的值捕获</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\"><span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;<br>[a]()&#123;<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">%d</span>\\n&quot;</span>, a;);&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>引用捕获 引用捕获和值捕获形式完全一样，只是在捕获列表中传的是变量的引用，类似于函数中的引用传递，变成下面这个样子</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\"><span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;<br>[&amp;a]()&#123;<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">%d</span>\\n&quot;</span>, a;);&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>隐式捕获的方式，就是捕获的列表可以用<code>=</code>和<code>&amp;</code>代替，让编译器隐式的推断你使用的是哪个变量，然后这两个字符表示捕获的类型<code>=</code>表示值捕获，<code>&amp;</code>是引用捕获；写出来之后就变成了如下的形式：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\"><span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;<br>[=]()&#123;<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">%d</span>\\n&quot;</span>, a);&#125;;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 捕获</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str1 = <span class=\"hljs-string\">&quot;str1&quot;</span>;<br>    string str2 = <span class=\"hljs-string\">&quot;str2&quot;</span>;<br>    string str3 = <span class=\"hljs-string\">&quot;str3&quot;</span>;<br>    <br>    <span class=\"hljs-comment\">// 这是传值捕获</span><br>    <span class=\"hljs-keyword\">auto</span> fun = [str1, str2]() &#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;5 str1 : &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;5 str2 : &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>    &#125;;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 str1 : &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 str2 : &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>    str1 += str2;<br>    str2 += str1;<br>    <span class=\"hljs-built_in\">fun</span>();<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;2 str1 : &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;2 str2 : &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>    <br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-comment\">// 输出</span><br><span class=\"hljs-number\">1</span> str1 : str1<br><span class=\"hljs-number\">1</span> str2 : str2<br><span class=\"hljs-number\">5</span> str1 : str1<br><span class=\"hljs-number\">5</span> str2 : str2<br><span class=\"hljs-number\">2</span> str1 : str1str2<br><span class=\"hljs-number\">2</span> str2 : str2str1str2<br><br><span class=\"hljs-comment\">// 被当成普通函数使用了</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str1 = <span class=\"hljs-string\">&quot;str1&quot;</span>;<br>    string str2 = <span class=\"hljs-string\">&quot;str2&quot;</span>;<br>    string str3 = <span class=\"hljs-string\">&quot;str3&quot;</span>;<br>    <br>    <span class=\"hljs-keyword\">auto</span> stradd = [&amp;](string&amp; stra,string&amp; strb) &#123;<br>        cout &lt;&lt; stra &lt;&lt; endl;<br>        cout &lt;&lt; strb &lt;&lt; endl;<br>        stra += strb;<br>        strb += stra;<br>    &#125;;<br>    <br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 str1 : &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 str2 : &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>    <span class=\"hljs-built_in\">stradd</span>(str1, str2);<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;2 str1 : &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;2 str2 : &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-comment\">//输出</span><br><span class=\"hljs-number\">1</span> str1 : str1<br><span class=\"hljs-number\">1</span> str2 : str2<br>str1<br>str2<br><span class=\"hljs-number\">2</span> str1 : str1str2<br><span class=\"hljs-number\">2</span> str2 : str2str1str2<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>这个知识点没看懂是匿了什么名, 不知所云, 难道和匿名没关系?只是捕获的功能?</li>\n</ul>\n<h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><ul>\n<li>确保函数名一致，在调用时根据参数来判断调用那个函数。</li>\n<li>其参数个数或类型有所不同。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b)</span></span>;<br><br><br><span class=\"hljs-built_in\">Max</span>(<span class=\"hljs-number\">112</span>, <span class=\"hljs-number\">223</span>)<br><span class=\"hljs-built_in\">Max</span>(<span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">2.3</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><ul>\n<li>对象是类的实例</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>;\t\t<span class=\"hljs-comment\">//类的声明，在被引用前声明，被其他类引用相互引用</span><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> a;\t\t\t<span class=\"hljs-comment\">//默认私有属性，数据成员不能初始化 //int a(20);错误</span><br><span class=\"hljs-keyword\">public</span>:\t\t\t\t<span class=\"hljs-comment\">//公有成员</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>;\t<span class=\"hljs-comment\">//这里放声明，或者直接定义在类里面(直接定义在类里面默认内联)</span><br><span class=\"hljs-keyword\">private</span>:\t\t\t<span class=\"hljs-comment\">//私有成员</span><br><span class=\"hljs-keyword\">protected</span>:\t\t\t<span class=\"hljs-comment\">//保护成员</span><br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MyClass::Fun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\t<span class=\"hljs-comment\">//可以定义在类里面，也可以定义在外面</span></span><br><span class=\"hljs-function\"></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构造函数和析构函数\"><a href=\"#构造函数和析构函数\" class=\"headerlink\" title=\"构造函数和析构函数\"></a>构造函数和析构函数</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><ul>\n<li><strong>与类同名</strong></li>\n<li>(有但不指定)返回值</li>\n<li><strong>可重载</strong></li>\n<li>可以有传入参数</li>\n<li>创建对象时自动调用</li>\n<li>初始化由类中声明顺序决定，与初始化列表顺序无关</li>\n<li>初始化列表优先于构造函数内的赋值</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Line</span><br>&#123;<br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setLength</span><span class=\"hljs-params\">( <span class=\"hljs-type\">double</span> len )</span></span>;<br>      <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">getLength</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span></span>;<br>      <span class=\"hljs-built_in\">Line</span>(<span class=\"hljs-type\">double</span> len);  <span class=\"hljs-comment\">// 这是构造函数</span><br> <br>   <span class=\"hljs-keyword\">private</span>:<br>      <span class=\"hljs-type\">double</span> length;<br>&#125;;<br><span class=\"hljs-comment\">// 成员函数定义，包括构造函数</span><br>Line::<span class=\"hljs-built_in\">Line</span>( <span class=\"hljs-type\">double</span> len)<br>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;Object is being created, length = &quot;</span> &lt;&lt; len &lt;&lt; endl;<br>    length = len;<br>&#125;<br> <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h4><p>使用初始化列表来初始化字段：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Line::<span class=\"hljs-built_in\">Line</span>( <span class=\"hljs-type\">double</span> len): <span class=\"hljs-built_in\">length</span>(len)<br>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;Object is being created, length = &quot;</span> &lt;&lt; len &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的语法等同于如下语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Line::<span class=\"hljs-built_in\">Line</span>( <span class=\"hljs-type\">double</span> len)<br>&#123;<br>    length = len;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;Object is being created, length = &quot;</span> &lt;&lt; len &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>假设有一个类 C，具有多个字段 X、Y、Z 等需要进行初始化，同理地，您可以使用上面的语法，只需要在不同的字段使用逗号进行分隔，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">C::<span class=\"hljs-built_in\">C</span>( <span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b, <span class=\"hljs-type\">double</span> c): <span class=\"hljs-built_in\">X</span>(a), <span class=\"hljs-built_in\">Y</span>(b), <span class=\"hljs-built_in\">Z</span>(c)<br>&#123;<br>  ....<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h3><ul>\n<li>类名前加 ~</li>\n<li>不能有返回值</li>\n<li>无参数，不重载</li>\n<li>销毁系统自动调用</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">~<span class=\"hljs-built_in\">MyClass</span>()<br>&#123;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Delete MyClass:&quot;</span> &lt;&lt; name &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"复制构造函数\"><a href=\"#复制构造函数\" class=\"headerlink\" title=\"复制构造函数\"></a>复制构造函数</h3><ul>\n<li>与类同名</li>\n<li>只有一个参数即对同类引用</li>\n</ul>\n<p><strong>被调用的情况</strong></p>\n<ul>\n<li>用类的已知对象初始化另一个正在创建的对象</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">MyClass</span>( <span class=\"hljs-type\">const</span> MyClass&amp; cIn )<br>&#123;<br>    x = cIn.x;<br>    y = cIn.y;<br>    name = cIn.name;<br>    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Copy MyClass&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"this-指针\"><a href=\"#this-指针\" class=\"headerlink\" title=\"this 指针\"></a>this 指针</h2><p>this指针指向类对象的地址</p>\n<p><strong>以下两函数等价</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MyClass::Fun</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> in )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tx = in;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MyClass::Fun</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> in )</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">this</span>-&gt;x = in;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态成员-static\"><a href=\"#静态成员-static\" class=\"headerlink\" title=\"静态成员 static\"></a>静态成员 static</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>所有类的对象有一个相同唯一的  数据成员 (共同点)</p>\n<ul>\n<li><p>static 声明的 数据成员(初始化不加static)</p>\n</li>\n<li><p>作用域是类范围类</p>\n</li>\n<li><p>必须要进行初始化，文件作用域进行初始化</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:\t\t\t\t\t<span class=\"hljs-comment\">//公有成员</span><br>    <span class=\"hljs-built_in\">MyClass</span>( xxx ):xxx \t<span class=\"hljs-comment\">//构造函数</span><br>\t&#123;<br>\t\tcont++;\t\t\t<span class=\"hljs-comment\">//静态与非静态 数据成员访问方式一致，每构造一个类就会++</span><br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:\t\t\t\t<span class=\"hljs-comment\">//私有成员</span><br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> cont;<br>&#125;<br><br><span class=\"hljs-type\">int</span> MyClass::cont = <span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//文件作用范围 初始化</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>所有类的对象有一个相同唯一的   函数 (操作)，该函数不能直接访问非静态成员(static 变量)。</p>\n<ul>\n<li>static 声明的函数(类外定义不能加static)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:\t\t\t\t<span class=\"hljs-comment\">//公有成员</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Print</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span></span>;<br><span class=\"hljs-keyword\">private</span>:\t\t\t<span class=\"hljs-comment\">//私有成员</span><br>\t<span class=\"hljs-type\">int</span> x, y;<br>    <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> cont;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MyClass::Print</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span>\t\t\t<span class=\"hljs-comment\">//不加static</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Print1&quot;</span> &lt;&lt; cont &lt;&lt; endl;\t<span class=\"hljs-comment\">//不能使用 this ，不能引用 x、y</span><br>&#125;<br><br><br>MyClass A,B;<br><br>MyClass.<span class=\"hljs-built_in\">Print</span>();\t\t\t\t\t<span class=\"hljs-comment\">//建议访问方式 (表明该成员属于类，而不是对象)</span><br>A.<span class=\"hljs-built_in\">Print</span>();\t\t\t\t\t\t\t<span class=\"hljs-comment\">//效果一致不建议使用</span><br>B.<span class=\"hljs-built_in\">Print</span>();\t\t\t\t\t\t\t<span class=\"hljs-comment\">//效果一致不建议使用</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常成员-const\"><a href=\"#常成员-const\" class=\"headerlink\" title=\"常成员 const\"></a>常成员 const</h2><h3 id=\"常对象\"><a href=\"#常对象\" class=\"headerlink\" title=\"常对象\"></a>常对象</h3><ul>\n<li>不可更改</li>\n<li>定义时必须初始化</li>\n<li>只能调用 常成员函数(有const)，不能调用一般的成员函数(没有const的一般函数)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">&lt;类名&gt; <span class=\"hljs-type\">const</span> &lt;对象名&gt;<br><span class=\"hljs-type\">const</span> &lt;类名&gt; &lt;对象名&gt;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">const</span> MyClass <span class=\"hljs-title\">A</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常数据成员\"><a href=\"#常数据成员\" class=\"headerlink\" title=\"常数据成员\"></a>常数据成员</h3><ul>\n<li>只能通过构造函数成员初始化列表显式初始化</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:\t\t\t\t\t<span class=\"hljs-comment\">//公有成员</span><br>    <span class=\"hljs-built_in\">MyClass</span>(<span class=\"hljs-type\">int</span> i):<span class=\"hljs-built_in\">a</span>(i) &#123;&#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">GetCont</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span> <span class=\"hljs-type\">const</span></span>;<br><span class=\"hljs-keyword\">private</span>:\t\t\t\t<span class=\"hljs-comment\">//私有成员</span><br>\t<span class=\"hljs-type\">int</span> x, y;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a;<br>&#125;;<br><br><span class=\"hljs-type\">int</span> MyClass::a = <span class=\"hljs-number\">9</span>;\t\t<span class=\"hljs-comment\">//初始化</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常成员函数\"><a href=\"#常成员函数\" class=\"headerlink\" title=\"常成员函数\"></a>常成员函数</h3><ul>\n<li>声明 定义都需要const</li>\n<li>常成员函数 不能更改对象的数据成员</li>\n<li>可重载</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">&lt;返回类型&gt; &lt;成员函数名&gt; (&lt;参数表&gt;) <span class=\"hljs-type\">const</span>;<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:\t\t\t\t\t<span class=\"hljs-comment\">//公有成员</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">GetCont</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span> <span class=\"hljs-type\">const</span></span>;<br><span class=\"hljs-keyword\">private</span>:\t\t\t\t<span class=\"hljs-comment\">//私有成员</span><br>\t<span class=\"hljs-type\">int</span> x, y;<br>    <span class=\"hljs-type\">int</span> cont;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MyClass::GetCont</span><span class=\"hljs-params\">( <span class=\"hljs-type\">void</span> )</span> <span class=\"hljs-type\">const</span>\t<span class=\"hljs-comment\">//需要加const</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//return cont++;\t//不允许更改 数据成员</span><br>    <span class=\"hljs-keyword\">return</span> cont;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h1 id=\"Lib\"><a href=\"#Lib\" class=\"headerlink\" title=\"Lib\"></a>Lib</h1><h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><ul>\n<li>每个头文件只声明一个类</li>\n<li>#ifndef 防止重复包含</li>\n<li>cpp 和 h 文件应该同名</li>\n</ul>\n<h2 id=\"读取文件发现数据长度不对\"><a href=\"#读取文件发现数据长度不对\" class=\"headerlink\" title=\"读取文件发现数据长度不对\"></a>读取文件发现数据长度不对</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 方法一</span><br>InLogFile.<span class=\"hljs-built_in\">seekg</span>(<span class=\"hljs-number\">0</span>, ios::end);<br>streampos pos = InLogFile.<span class=\"hljs-built_in\">tellg</span>();<br><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> length = pos;<br><br>InLogFile.<span class=\"hljs-built_in\">seekg</span>(<span class=\"hljs-number\">0</span>, ios::beg);<br><span class=\"hljs-type\">char</span> * pBuffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">char</span>[length];<br><span class=\"hljs-built_in\">memset</span>(pBuffer, <span class=\"hljs-number\">0</span>, length);<br>InLogFile.<span class=\"hljs-built_in\">read</span>(pBuffer, length);<br><br><br><span class=\"hljs-comment\">// 方法二</span><br>std::string strr;<br>&#123; <span class=\"hljs-comment\">// 读出全部文件</span><br>    <span class=\"hljs-function\">std::ifstream <span class=\"hljs-title\">in</span><span class=\"hljs-params\">(InFilePath)</span></span>;<br>    std::ostringstream tmp;<br>    tmp &lt;&lt; in.<span class=\"hljs-built_in\">rdbuf</span>();<br>    strr = tmp.<span class=\"hljs-built_in\">str</span>();<br>&#125;<br><br>cout &lt;&lt; <span class=\"hljs-string\">&quot;length&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; length &lt;&lt; endl;<br>cout &lt;&lt; strr.<span class=\"hljs-built_in\">length</span>() &lt;&lt; endl;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">12552<br>12352<br></code></pre></td></tr></table></figure>\n\n<p>他们的输出结果似乎不太一样, 好像是对 <code>0D 0A</code> 的数量计算方法不太一致导致的.</p>\n<h2 id=\"读取文件全部内容\"><a href=\"#读取文件全部内容\" class=\"headerlink\" title=\"读取文件全部内容\"></a>读取文件全部内容</h2><p>iostream著名专家Dietmar Kuehl给出了两个读取方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">std::ifstream <span class=\"hljs-title\">in</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;some.file&quot;</span>)</span></span>;<br><span class=\"hljs-function\">std::isreambuf_iterator&lt;<span class=\"hljs-type\">char</span>&gt; <span class=\"hljs-title\">begin</span><span class=\"hljs-params\">(in)</span></span>;<br>std::isreambuf_iterator&lt;<span class=\"hljs-type\">char</span>&gt; end;<br><span class=\"hljs-function\">std::string <span class=\"hljs-title\">some_str</span><span class=\"hljs-params\">(begin, end)</span></span>;<span class=\"hljs-number\">1234</span><br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">std::ifstream <span class=\"hljs-title\">in</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;some.file&quot;</span>)</span></span>;<br>std::ostringstream tmp;<br>tmp &lt;&lt; in.<span class=\"hljs-built_in\">rdbuf</span>();<br>std::string str = tmp.<span class=\"hljs-built_in\">str</span>();<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"C-C-调用exe文件\"><a href=\"#C-C-调用exe文件\" class=\"headerlink\" title=\"C&#x2F;C++调用exe文件\"></a>C&#x2F;C++调用exe文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// C 此为命令行控制台方法</span><br><span class=\"hljs-type\">char</span>* a1 = (<span class=\"hljs-type\">char</span>*)<span class=\"hljs-string\">&quot;hello&quot;</span>;<br><span class=\"hljs-type\">char</span>* a2 = (<span class=\"hljs-type\">char</span>*)<span class=\"hljs-string\">&quot;world&quot;</span>;<br><span class=\"hljs-type\">char</span>* a3 = (<span class=\"hljs-type\">char</span>*)<span class=\"hljs-string\">&quot;!&quot;</span>;<br><span class=\"hljs-type\">char</span> s[<span class=\"hljs-number\">100</span>];<br>sprintf_s(s,<span class=\"hljs-string\">&quot;%s %s %s %s &quot;</span>,<span class=\"hljs-string\">&quot;./ceshi.exe&quot;</span>,a1,a2,a3);<br>system(s);<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "c/c++",
                "c++"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/2f57a694/",
            "url": "https://www.oikiou.top/2022/2f57a694/",
            "title": "正则表达式",
            "date_published": "2022-01-21T14:57:15.000Z",
            "content_html": "<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h1 id=\"正则表达式-语法\"><a href=\"#正则表达式-语法\" class=\"headerlink\" title=\"正则表达式 - 语法\"></a>正则表达式 - 语法</h1><h2 id=\"可打印普通字符匹配\"><a href=\"#可打印普通字符匹配\" class=\"headerlink\" title=\"可打印普通字符匹配\"></a>可打印普通字符匹配</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 <code>[^\\n\\r]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\w</code></td>\n<td align=\"left\">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<br><code>\\W 匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>[\\s\\S]</code></td>\n<td align=\"left\">匹配所有。<code>\\s</code> 是匹配所有空白符，包括换行，<code>\\S</code> 非空白符，不包括换行。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[ABC]</code></td>\n<td align=\"left\">匹配 <code>[...]</code> 中的所有字符，<br/>例如 <code>[aeiou]</code> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[^ABC]</code></td>\n<td align=\"left\">匹配除了 <code>[...]</code> 中字符的所有字符，<br/>例如 <code>[^aeiou]</code> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[A-Z]</code></td>\n<td align=\"left\"><code>[A-Z]</code> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\d</code></td>\n<td align=\"left\">匹配一个数字字符。等价于<code>[0-9]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\D</code></td>\n<td align=\"left\">匹配一个非数字字符。等价于<code>[^0-9]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\xnn</code></td>\n<td align=\"left\">十六进制转义字符序列。匹配两个十六进制数字<em>nn</em>表示的字符。<br/>例如，“<code>\\x41</code>”匹配“<code>A</code>”。“<code>\\x041</code>”则等价于“<code>\\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\num</code></td>\n<td align=\"left\">向后引用（back-reference）一个子字符串（substring），该子字符串与正则表达式的第<em>num</em>个用括号围起来的捕捉群（capture group）子表达式（subexpression）匹配。<br/>其中<code>num</code>是从1开始的十进制正整数，其上限可能是9[<a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#cite_note-3\">注 2]</a>、31[<a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#cite_note-4\">注 3]</a>、99甚至无限[<a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#cite_note-5\">注 4]</a>。<br/>例如：“<code>(.)\\1</code>”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\">标识一个八进制转义值或一个向后引用。<br/>如果<code>\\n</code>之前至少<code>n</code>个获取的子表达式，则<code>n</code>为向后引用。<br/>否则，如果<code>n</code>为八进制数字（0-7），则<code>n</code>为一个八进制转义值。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\nm</code></td>\n<td align=\"left\">3位八进制数字，标识一个八进制转义值或一个向后引用。<br/>如果<code>\\nm</code>之前至少有<code>nm</code>个获得子表达式，则<em>nm</em>为向后引用。<br/>如果<code>\\nm</code>之前至少有<code>n</code>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。<br/>如果前面的条件都不满足，若<code>n</code>和<code>m</code>均为八进制数字（0-7），则<code>\\nm</code>将匹配八进制转义值<em>nm</em>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\nml</code></td>\n<td align=\"left\">如果<code>n</code>为八进制数字（0-3），且<code>m</code>和<code>l</code>均为八进制数字（0-7），则匹配八进制转义值<code>nml</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\un</code></td>\n<td align=\"left\">Unicode转义字符序列。其中<code>n</code>是一个用四个十六进制数字表示的Unicode字符。<br/>例如，<code>\\u00A9</code>匹配著作权符号（©）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"非打印字符匹配\"><a href=\"#非打印字符匹配\" class=\"headerlink\" title=\"非打印字符匹配\"></a>非打印字符匹配</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\cx</code></td>\n<td align=\"left\">匹配由x指明的控制字符。<br/>例如， <code>\\cM</code> 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\f</code></td>\n<td align=\"left\">匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\">匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\r</code></td>\n<td align=\"left\">匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\s</code></td>\n<td align=\"left\">匹配任何空白字符，包括空格、制表符、换页符等等。<br/>等价于<code> [\\f\\n\\r\\t\\v]</code>。注意 Unicode 正则表达式会匹配全角空格符。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\S</code></td>\n<td align=\"left\">匹配任何非空白字符。等价于 <code>[^ \\f\\n\\r\\t\\v]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\t</code></td>\n<td align=\"left\">匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\v</code></td>\n<td align=\"left\">匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\W</code></td>\n<td align=\"left\">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>\n</tr>\n</tbody></table>\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><table>\n<thead>\n<tr>\n<th align=\"left\">特别字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\</code></td>\n<td align=\"left\">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。<br>例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 <code>&#39;\\\\&#39;</code> 匹配 <code>&quot;\\&quot;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">匹配输入字符串的开始位置，<br>当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。<br>要匹配 ^ 字符本身，请使用 <code>\\^</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">匹配输入字符串的结尾位置。<br>如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用<code> \\$</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>( )</code></td>\n<td align=\"left\">标记一个子表达式的开始和结束位置。<br>子表达式可以获取供以后使用。要匹配这些字符，请使用<code>\\(</code>和<code> \\)</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">匹配前面的子表达式零次或多次。要匹配 <code>* </code>字符，请使用<code> \\*</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">匹配前面的子表达式一次或多次。要匹配 <code>+</code> 字符，请使用 <code>\\+</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>?</code></td>\n<td align=\"left\">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">匹配除换行符 <code>\\n</code> 之外的任何单字符。要匹配<code> .</code> ，请使用 <code>\\.</code> 。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[</code></td>\n<td align=\"left\">标记一个中括号表达式的开始。要匹配 <code>[</code>，请使用 <code>\\[</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;</code></td>\n<td align=\"left\">标记限定符表达式的开始。要匹配<code> &#123;</code>，请使用<code> \\&#123;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;</td>\n<td align=\"left\">&#96;</td>\n</tr>\n</tbody></table>\n<h2 id=\"限定符-表达式匹配次数\"><a href=\"#限定符-表达式匹配次数\" class=\"headerlink\" title=\"限定符(表达式匹配次数)\"></a>限定符(表达式匹配次数)</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。</p>\n<p>请注意，限定符出现在范围表达式之后。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">匹配前面的子表达式零次或多次。<br/>例如，<strong>zo*</strong> 能匹配 <strong>“z”</strong> 以及 <strong>“zoo”<strong>。</strong></strong>* 等价于 **{0,}**。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">匹配前面的子表达式一次或多次。<br/>例如，<strong>zo+</strong> 能匹配 <strong>“zo”</strong> 以及 “**zoo”**，但不能匹配 <strong>“z”<strong>。</strong>+</strong> 等价于 **{1,}**。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>? </code></td>\n<td align=\"left\">匹配前面的子表达式零次或一次。<br>例如，<strong>do(es)?</strong> 可以匹配 <strong>“do”</strong> 、 <strong>“does”<strong>、 <strong>“doxy”</strong> 中的 <strong>“do”</strong> 。</strong>?</strong> 等价于 **{0,1}**。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;n&#125;</code></td>\n<td align=\"left\">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。<br/>例如，<strong>o{2}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但是能匹配 <strong>“food”</strong> 中的两个 <strong>o</strong>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;n,&#125; </code></td>\n<td align=\"left\">n 是一个非负整数。至少匹配n 次。<br/>例如，<strong>o{2,}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但能匹配 <strong>“foooood”</strong> 中的所有 <strong>o</strong>。<strong>o{1,}</strong> 等价于 <strong>o+<strong>。</strong>o{0,}</strong> 则等价于 **o***。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;n,m&#125;</code></td>\n<td align=\"left\">m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。<br/>例如，<strong>o{1,3}</strong> 将匹配 <strong>“fooooood”</strong> 中的前三个 <strong>o</strong>。<strong>o{0,1}</strong> 等价于 **o?**。<br/>请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n</tbody></table>\n<h2 id=\"定位符-确定-固定位置\"><a href=\"#定位符-确定-固定位置\" class=\"headerlink\" title=\"定位符(确定 固定位置)\"></a>定位符(确定 固定位置)</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">匹配输入字符串<strong>开始</strong>的位置。<br>如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">匹配输入字符串<strong>结尾</strong>的位置。<br/>如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\b</code></td>\n<td align=\"left\">匹配一个<strong>单词边界</strong>，即字与空格间的位置。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\B</code></td>\n<td align=\"left\">非单词边界匹配。</td>\n</tr>\n</tbody></table>\n<h2 id=\"选择-捕获-保存\"><a href=\"#选择-捕获-保存\" class=\"headerlink\" title=\"选择(捕获 保存)\"></a>选择(捕获 保存)</h2><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(pattern)</code></td>\n<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>\n</li>\n<li><p>缓冲区编号从 1 开始。</p>\n</li>\n<li><p>每个缓冲区都可以使用 <strong><code>$n</code></strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。例如 <code>$1</code>,<code>$2</code> 等等</p>\n<ul>\n<li>需要注意的是菜鸟教程里面写这里是用<code>/n</code>匹配, 在notepad++里面这个没问题, 但是VSCode并不能识别这个</li>\n</ul>\n</li>\n<li><p>可以使用非捕获元字符 <code> ?:</code> 、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 原始串</span><br>https://en.wikipedia.org/wiki/Regular_expression<br>$ (\\w+)://(.+?)/(.+)<br>$  <span class=\"hljs-variable\">$1</span> \\n <span class=\"hljs-variable\">$2</span> \\n <span class=\"hljs-variable\">$3</span><br><span class=\"hljs-comment\"># 替换后</span><br> https <br> en.wikipedia.org <br> wiki/Regular_expression<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"非捕获元\"><a href=\"#非捕获元\" class=\"headerlink\" title=\"非捕获元 ?: ?= ?&lt;= ?! ?&lt;!\"></a>非捕获元 <code>?: ?= ?&lt;= ?! ?&lt;!</code></h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(pattern)</code></td>\n<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>(?:pattern)</code></td>\n<td>匹配pattern<strong>但不获取</strong>匹配的子字符串(shy groups)<br>也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用。<br>这在使用或字符“&#96;(</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>(?=pattern)</code></td>\n<td><strong>正向肯定预查</strong>（look ahead positive assert），在任何<strong>匹配</strong>pattern的字符串开始处匹配查找字符串。<br>这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。<br/>例如，“&#96;Windows(?&#x3D;95</td>\n</tr>\n<tr>\n<td><code>(?!pattern)</code></td>\n<td><strong>正向否定预查</strong>（negative assert），在任何<strong>不匹配</strong>pattern的字符串开始处匹配查找字符串。<br/>这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。<br/>例如“&#96;Windows(?!95</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>(?&lt;=pattern)</code></td>\n<td><strong>反向肯定预查</strong>（look behind positive assert），与正向肯定预查类似，只是方向相反。<br/>例如，“&#96;(?&lt;&#x3D;95</td>\n</tr>\n<tr>\n<td><code>(?&lt;!pattern)</code></td>\n<td><strong>反向否定预查</strong>，与正向否定预查类似，只是方向相反。<br/>例如“&#96;(?&lt;!95</td>\n</tr>\n</tbody></table>\n<h1 id=\"正则表达式-修饰符\"><a href=\"#正则表达式-修饰符\" class=\"headerlink\" title=\"正则表达式 - 修饰符\"></a>正则表达式 - 修饰符</h1><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p>\n<p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/pattern/</span>flags<br></code></pre></td></tr></table></figure>\n\n<p>下表列出了正则表达式常用的修饰符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">修饰符</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>i</code></td>\n<td align=\"left\">ignore - 不区分大小写</td>\n<td align=\"left\">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>g</code></td>\n<td align=\"left\">global - 全局匹配</td>\n<td align=\"left\">查找所有的匹配项。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>m</code></td>\n<td align=\"left\">multi line - 多行匹配</td>\n<td align=\"left\">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\\n</strong></td>\n<td align=\"left\">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \\n。</td>\n</tr>\n</tbody></table>\n<h1 id=\"正则表达式-优先级\"><a href=\"#正则表达式-优先级\" class=\"headerlink\" title=\"正则表达式 - 优先级\"></a>正则表达式 - 优先级</h1><table>\n<thead>\n<tr>\n<th align=\"center\">优先权</th>\n<th align=\"center\">符号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">最高</td>\n<td align=\"center\"><code>\\</code></td>\n</tr>\n<tr>\n<td align=\"center\">高</td>\n<td align=\"center\"><code>()</code>、<code>(?:)</code>、<code>(?=)</code>、<code>[]</code></td>\n</tr>\n<tr>\n<td align=\"center\">中</td>\n<td align=\"center\"><code>*</code>、<code>+</code>、<code>?</code>、<code>&#123;n&#125;</code>、<code>&#123;n,&#125;</code>、<code>&#123;n,m&#125;</code></td>\n</tr>\n<tr>\n<td align=\"center\">低</td>\n<td align=\"center\"><code>^</code>、<code>$</code>、中介字符</td>\n</tr>\n<tr>\n<td align=\"center\">次最低</td>\n<td align=\"center\">串接，即相邻字符连接在一起</td>\n</tr>\n<tr>\n<td align=\"center\">最低</td>\n<td align=\"center\">&#96;</td>\n</tr>\n</tbody></table>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"贪婪匹配-非贪婪匹配\"><a href=\"#贪婪匹配-非贪婪匹配\" class=\"headerlink\" title=\"贪婪匹配( ) 非贪婪匹配(?)\"></a>贪婪匹配( ) 非贪婪匹配(?)</h2><p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 原字符串</span><br>&lt;h1&gt;贪婪匹配 非贪婪匹配&lt;/h1&gt;<br><span class=\"hljs-comment\"># 贪婪匹配</span><br>$ &lt;.*&gt;<br><span class=\"hljs-comment\"># 匹配到的字符串</span><br>&lt;h1&gt;贪婪匹配 非贪婪匹配&lt;/h1&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 <code>h1 </code>标签，下面的非贪婪表达式只匹配<code> &lt;h1&gt;</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 原字符串</span><br>&lt;h1&gt;贪婪匹配 非贪婪匹配&lt;/h1&gt;<br><span class=\"hljs-comment\"># 非贪婪匹配</span><br>$ &lt;.*?&gt;<br><span class=\"hljs-comment\"># 匹配到的字符串</span><br>&lt;h1&gt;<br></code></pre></td></tr></table></figure>\n\n<p>通过在 *<strong><strong>、</strong>+</strong> 或 <strong>?</strong> 限定符之后放置 **?**，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">正则表达式 Wiki</a></p>\n<p><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式 菜鸟教程</a></p>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><h2 id=\"常用正则表达式匹配\"><a href=\"#常用正则表达式匹配\" class=\"headerlink\" title=\"常用正则表达式匹配\"></a>常用正则表达式匹配</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#用户名\t</span><br>/^[a-z0-9_-]&#123;3,16&#125;$/<br><span class=\"hljs-comment\">#密码\t</span><br>/^[a-z0-9_-]&#123;6,18&#125;$/<br><span class=\"hljs-comment\">#十六进制值\t颜色 #ff02ff etc.</span><br>/^#?([a-f0-9]&#123;6&#125;|[a-f0-9]&#123;3&#125;)$/<br><span class=\"hljs-comment\">#电子邮箱\t</span><br>/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$/<br>/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/<br><span class=\"hljs-comment\">#URL\t</span><br>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)([\\/\\w \\.-]*)*\\/?$/<br><span class=\"hljs-comment\">#IP 地址\t</span><br>/((<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">4</span>]\\d|<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">5</span>]|[<span class=\"hljs-number\">01</span>]?\\d\\d?)\\.)&#123;<span class=\"hljs-number\">3</span>&#125;(<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">4</span>]\\d|<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">5</span>]|[<span class=\"hljs-number\">01</span>]?\\d\\d?)/<br>/^(?:(?:<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">5</span>]|<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]|[<span class=\"hljs-number\">01</span>]?[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>][<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]?)\\.)&#123;<span class=\"hljs-number\">3</span>&#125;(?:<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">5</span>]|<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]|[<span class=\"hljs-number\">01</span>]?[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>][<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]?)$/<br>#HTML 标签\t<br>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\\/\\<span class=\"hljs-number\">1</span>&gt;|\\s+\\/&gt;)$/<br>#删除代码\\\\注释\t<br>(?&lt;!http:|\\S)//.*$<br>#Unicode编码中的汉字范围\t<br>/^[\\u2E80-\\u9FFF]+$/<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式替换\"><a href=\"#正则表达式替换\" class=\"headerlink\" title=\"正则表达式替换\"></a>正则表达式替换</h2><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">原始串 <br>str<span class=\"hljs-comment\">[1]</span>abc<span class=\"hljs-comment\">[991]</span>; <br>str<span class=\"hljs-comment\">[2]</span>abc<span class=\"hljs-comment\">[992]</span>; <br>str<span class=\"hljs-comment\">[11]</span>abc<span class=\"hljs-comment\">[993]</span>; <br>str<span class=\"hljs-comment\">[22]</span>abc<span class=\"hljs-comment\">[994]</span>; <br>str<span class=\"hljs-comment\">[111]</span>abc<span class=\"hljs-comment\">[995]</span>; <br>str<span class=\"hljs-comment\">[222]</span>abc<span class=\"hljs-comment\">[996]</span>; <br>str<span class=\"hljs-comment\">[1111]</span>abc<span class=\"hljs-comment\">[997]</span>; <br>str<span class=\"hljs-comment\">[2222]</span>abc<span class=\"hljs-comment\">[999]</span>; <br><br>目标串： <br>abc<span class=\"hljs-comment\">[1]</span>; <br>abc<span class=\"hljs-comment\">[2]</span>; <br>abc<span class=\"hljs-comment\">[11]</span>; <br>abc<span class=\"hljs-comment\">[22]</span>; <br>abc<span class=\"hljs-comment\">[111]</span>; <br>abc<span class=\"hljs-comment\">[222]</span>; <br>abc<span class=\"hljs-comment\">[1111]</span>; <br>abc<span class=\"hljs-comment\">[2222]</span>; <br><br>处理： <br>查找串：str/<span class=\"hljs-comment\">[(<span class=\"hljs-comment\">[0-9]</span>+)/]</span>abc/<span class=\"hljs-comment\">[<span class=\"hljs-comment\">[0-9]</span>+/]</span> <br>替换串：abc<span class=\"hljs-comment\">[/1]</span> <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式示例\"><a href=\"#正则表达式示例\" class=\"headerlink\" title=\"正则表达式示例\"></a>正则表达式示例</h2><p>下面列出一些正则表达式示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><br><span class=\"hljs-comment\"># 一个单词连续出现的位置。</span><br>/\\b([a-z]+) \\1\\b/gi\t<br><span class=\"hljs-comment\"># 匹配一个 URL 解析为协议、域、端口及相对路径。</span><br>/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/\t<br><span class=\"hljs-comment\"># 定位章节的位置。</span><br>/^(?:Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/\t<br><span class=\"hljs-comment\"># a 至 z 共 26个 字母再加一个 - 号。</span><br>/[-a-z]/\t<br><span class=\"hljs-comment\"># 可匹配 chapter，而不能匹配 terminal。</span><br>/ter\\b/\t<br><span class=\"hljs-comment\"># 可匹配 chapter，而不能匹配 aptitude。</span><br>/\\Bapt/\t<br><span class=\"hljs-comment\"># 可匹配 Windows95 或 Windows98 或 WindowsNT，当找到一个匹配后，从 Windows 后面开始进行下一次的检索匹配。</span><br>/Windows(?=95 |98 |NT )/\t<br><span class=\"hljs-comment\"># 匹配空行。</span><br>/^\\s*$/\t<br><span class=\"hljs-comment\"># 验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</span><br>/\\d&#123;2&#125;-\\d&#123;5&#125;/\t<br><span class=\"hljs-comment\"># 匹配 HTML 标签</span><br>&lt;[a-zA-Z]+.*?&gt;([\\s\\S]*?)&lt;/[a-zA-Z]*?&gt;\t<br><br><span class=\"hljs-comment\"># 匹配 &#123;hello&#125;</span><br>hello\t<br><span class=\"hljs-comment\"># 匹配 &#123;gray, grey&#125;</span><br>gray|grey\t<br><span class=\"hljs-comment\"># 匹配 &#123;gray, grey&#125;</span><br>gr(a|e)y\t<br><span class=\"hljs-comment\">#  匹配 &#123;gray, grey&#125;</span><br>gr[ae]y\t<br><span class=\"hljs-comment\">#  匹配 &#123;babble, bebble, bibble, bobble, bubble&#125;</span><br>b[aeiou]bble\t<br><span class=\"hljs-comment\">#  匹配 &#123;bat, cat, hat, mat, nat, oat, pat, Pat, ot&#125;</span><br>[b-chm-pP]at|ot\t<br><span class=\"hljs-comment\">#  匹配 &#123;color, colour&#125;</span><br>colou?r\t<br><span class=\"hljs-comment\">#  匹配 &#123;regex, regexes, regexp, regexps&#125;</span><br>rege(x(es)?|xps?)\t<br><span class=\"hljs-comment\">#  匹配 &#123;ggle, gogle, google, gooogle, goooogle, ...&#125;</span><br>go*gle\t<br><span class=\"hljs-comment\">#  匹配 &#123;gogle, google, gooogle, goooogle, ...&#125;</span><br>go+gle\t<br><span class=\"hljs-comment\">#  匹配 &#123;google, googoogle, googoogoogle, googoogoogoogle, ...&#125;</span><br>g(oog)+le\t<br><span class=\"hljs-comment\">#  匹配 &#123;zzz&#125;</span><br>z&#123;3&#125;\t<br><span class=\"hljs-comment\">#  匹配 &#123;zzz, zzzz, zzzzz, zzzzzz&#125;</span><br>z&#123;3,6&#125;\t<br><span class=\"hljs-comment\">#  匹配 &#123;zzz, zzzz, zzzzz, ...&#125;</span><br>z&#123;3,&#125;\t<br><span class=\"hljs-comment\">#  匹配 &#123;Brainf**k, brainf**k&#125;</span><br>[Bb]rainf\\*\\*k\t<br><span class=\"hljs-comment\">#  匹配 &#123;0,1,2,3,4,5,6,7,8,9&#125;</span><br>\\d\t<br><span class=\"hljs-comment\">#  匹配 11 个数字，以 1 开头</span><br>1\\d&#123;10&#125;\t<br><span class=\"hljs-comment\">#  匹配 2 到 36 范围内的整数</span><br>[2-9]|[12]\\d|3[0-6]\t<br><span class=\"hljs-comment\">#  匹配 Hello 后跟换行符，后跟 world</span><br>Hello\\nworld\t<br><span class=\"hljs-comment\"># 包含一个正整数或包含两位小数位的浮点数。</span><br>\\d+(\\.\\d\\d)?\t<br><span class=\"hljs-comment\"># 排除 *、@ 、# 三个特色符号</span><br>[^*@#]\t<br><span class=\"hljs-comment\">#  匹配 // 开头的注释</span><br>//[^\\r\\n]*[\\r\\n]\t<br><span class=\"hljs-comment\">#  匹配以 &quot;dog&quot; 开始</span><br>^dog\t<br><span class=\"hljs-comment\">#  匹配以 &quot;dog&quot; 结尾</span><br>dog$\t<br><span class=\"hljs-comment\"># is exactly &quot;dog&quot;</span><br>^dog$\t<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "正则表达式"
            ]
        },
        {
            "id": "https://www.oikiou.top/2020/3dd7ffa7/",
            "url": "https://www.oikiou.top/2020/3dd7ffa7/",
            "title": "C",
            "date_published": "2020-08-08T00:08:08.000Z",
            "content_html": "<h1 id=\"标准库函数\"><a href=\"#标准库函数\" class=\"headerlink\" title=\"标准库函数\"></a>标准库函数</h1><h2 id=\"fprintf-输出到流中\"><a href=\"#fprintf-输出到流中\" class=\"headerlink\" title=\"fprintf 输出到流中\"></a>fprintf 输出到流中</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>C 库函数 <strong>int fprintf(FILE *stream, const char *format, …)</strong> 发送格式化输出到流 stream 中。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>下面是 fprintf() 函数的声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fprintf</span><span class=\"hljs-params\">(FILE *stream, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</li>\n<li><strong>format</strong> – 这是 C 字符串，包含了要被写入到流 stream 中的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。format 标签属性是 <strong>%[flags][width][.precision][length]specifier</strong>，具体讲解如下：</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>如果成功，则返回写入的字符总数，否则返回一个负数。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>下面的实例演示了 fprintf() 函数的用法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>   FILE * fp;<br><br>   fp = fopen (<span class=\"hljs-string\">&quot;file.txt&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>);<br>   <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%s %s %s %d&quot;</span>, <span class=\"hljs-string\">&quot;We&quot;</span>, <span class=\"hljs-string\">&quot;are&quot;</span>, <span class=\"hljs-string\">&quot;in&quot;</span>, <span class=\"hljs-number\">2014</span>);<br>   <br>   fclose(fp);<br>   <br>   <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>让我们编译并运行上面的程序，这将创建文件 <strong>file.txt</strong>，它的内容如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">We</span> are in <span class=\"hljs-number\">2014</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"atoi-字符串转换成整数\"><a href=\"#atoi-字符串转换成整数\" class=\"headerlink\" title=\"atoi 字符串转换成整数\"></a>atoi 字符串转换成整数</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>C 库函数 <strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）。</p>\n<h3 id=\"声明-1\"><a href=\"#声明-1\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>下面是 atoi() 函数的声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">atoi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><strong>str</strong> – 要转换为整数的字符串。</li>\n</ul>\n<h3 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>该函数返回转换后的长整数，如果没有执行有效的转换，则返回零。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>下面的实例演示了 atoi() 函数的用法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>   <span class=\"hljs-type\">int</span> val;<br>   <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">20</span>];<br>   <br>   <span class=\"hljs-built_in\">strcpy</span>(str, <span class=\"hljs-string\">&quot;98993489&quot;</span>);<br>   val = atoi(str);<br>   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;字符串值 = %s, 整型值 = %d\\n&quot;</span>, str, val);<br><br>   <span class=\"hljs-built_in\">strcpy</span>(str, <span class=\"hljs-string\">&quot;runoob.com&quot;</span>);<br>   val = atoi(str);<br>   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;字符串值 = %s, 整型值 = %d\\n&quot;</span>, str, val);<br><br>   <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>让我们编译并运行上面的程序，这将产生以下结果：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">字符串值 = <span class=\"hljs-number\">98993489</span>, 整型值 = <span class=\"hljs-number\">98993489</span><br>字符串值 = runoob.com, 整型值 = <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">printf</span> <span class=\"hljs-params\">( <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> * format, ... )</span>;<br></code></pre></td></tr></table></figure>\n<p>将format 指向的 C 字符串写入标准输出 ( stdout )。如果format包含格式说明符（以%开头的子序列），则format后面的附加参数将被格式化并插入到结果字符串中，替换它们各自的说明符。</p>\n<h3 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">%[flags][width][.precision][length]specifier<br></code></pre></td></tr></table></figure>\n<h4 id=\"specifier\"><a href=\"#specifier\" class=\"headerlink\" title=\"specifier\"></a>specifier</h4><table>\n<thead>\n<tr>\n<th align=\"left\"><em>specifier</em></th>\n<th align=\"left\">Output</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>d</code> <em>or</em> <code>i</code></td>\n<td align=\"left\">Signed decimal integer(有符号十进制整数)</td>\n<td align=\"left\"><code>392</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>u</code></td>\n<td align=\"left\">Unsigned decimal integer</td>\n<td align=\"left\"><code>7235</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>o</code></td>\n<td align=\"left\">Unsigned octal (无符号八进制)</td>\n<td align=\"left\"><code>610</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>x</code></td>\n<td align=\"left\">Unsigned hexadecimal integer (无符号十六进制整数)</td>\n<td align=\"left\"><code>7fa</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>X</code></td>\n<td align=\"left\">Unsigned hexadecimal integer (uppercase)</td>\n<td align=\"left\"><code>7FA</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>f</code></td>\n<td align=\"left\">Decimal floating point, lowercase (十进制浮点数，小写)</td>\n<td align=\"left\"><code>392.65</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>F</code></td>\n<td align=\"left\">Decimal floating point, uppercase</td>\n<td align=\"left\"><code>392.65</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>e</code></td>\n<td align=\"left\">Scientific notation (mantissa&#x2F;exponent), lowercase (科学记数法（尾数&#x2F;指数），小写)</td>\n<td align=\"left\"><code>3.9265e+2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>E</code></td>\n<td align=\"left\">Scientific notation (mantissa&#x2F;exponent), uppercase</td>\n<td align=\"left\"><code>3.9265E+2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>g</code></td>\n<td align=\"left\">Use the shortest representation: <code>%e</code> or <code>%f</code> (使用最短的表示：<code>%e</code>或<code>%f</code>)</td>\n<td align=\"left\"><code>392.65</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>G</code></td>\n<td align=\"left\">Use the shortest representation: <code>%E</code> or <code>%F</code></td>\n<td align=\"left\"><code>392.65</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a</code></td>\n<td align=\"left\">Hexadecimal floating point, lowercase (十六进制浮点数，小写)</td>\n<td align=\"left\"><code>-0xc.90fep-2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>A</code></td>\n<td align=\"left\">Hexadecimal floating point, uppercase</td>\n<td align=\"left\"><code>-0XC.90FEP-2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>c</code></td>\n<td align=\"left\">Character</td>\n<td align=\"left\"><code>a</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\">String of characters</td>\n<td align=\"left\"><code>sample</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>p</code></td>\n<td align=\"left\">Pointer address</td>\n<td align=\"left\"><code>b8000000</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>n</code></td>\n<td align=\"left\">Nothing printed. <br/>The corresponding argument must be a pointer to a <code>signed int</code>.<br>The number of characters written so far is stored in the pointed location.</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>%</code></td>\n<td align=\"left\">A <code>%</code> followed by another <code>%</code> character will write a single <code>%</code> to the stream.</td>\n<td align=\"left\"><code>%</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"flags\"><a href=\"#flags\" class=\"headerlink\" title=\"flags\"></a>flags</h4><p>格式说明符 还可以按顺序包含子说明符：<code>flags</code>、<code>width</code>、<code>.precision</code>和<code>modifiers </code>（这个是什么?），它们是可选的并遵循以下规范：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><em>flags</em></th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">Left-justify within the given field width; Right justification is the default (see <em>width</em> sub-specifier).<br/>(在给定的字段宽度内左对齐；右对齐是默认设置（请参阅<em>宽度</em>子说明符）。)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">Forces to preceed the result with a plus or minus sign (<code>+</code> or <code>-</code>) even for positive numbers. By default, only negative numbers are preceded with a <code>-</code> sign.<br/>(即使对于正数，也强制在结果前面加上加号或减号（<code>+</code>或<code>-</code>)。默认情况下，只有负数前面带有<code>-</code>号。)</td>\n</tr>\n<tr>\n<td align=\"left\"><em>(space)</em></td>\n<td align=\"left\">If no sign is going to be written, a blank space is inserted before the value.<br/>(如果不写入符号，则在值之前插入一个空格。)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>#</code></td>\n<td align=\"left\">Used with <code>o</code>, <code>x</code> or <code>X</code> specifiers the value is preceeded with <code>0</code>, <code>0x</code> or <code>0X</code> respectively for values different than zero. <br/>Used with <code>a</code>, <code>A</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code> or <code>G</code> it forces the written output to contain a decimal point even if no more digits follow. By default, if no digits follow, no decimal point is written.<br/>(与<code>o</code>、<code>x</code>或<code>X</code>说明符一起使用时，该值前面分别带有<code>0</code>、<code>0x</code>或<code>0X</code>，用于表示不同于零的值。<br/>与<code>a</code>、<code>A</code>、<code>e</code>、<code>E</code>、<code>f</code>、<code>F</code>、<code>g</code>或<code>G</code>一起使用，即使后面没有数字，它也会强制书面输出包含小数点。默认情况下，如果后面没有数字，则不写入小数点。)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>0</code></td>\n<td align=\"left\">Left-pads the number with zeroes (<code>0</code>) instead of spaces when padding is specified (see <em>width</em> sub-specifier).<br/>指定填充时，用零（<code>0</code>）而不是空格填充数字（请参阅<em>宽度</em>子说明符）。</td>\n</tr>\n</tbody></table>\n<h4 id=\"width\"><a href=\"#width\" class=\"headerlink\" title=\"width\"></a>width</h4><table>\n<thead>\n<tr>\n<th align=\"left\"><em>width</em></th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>(number)</em></td>\n<td align=\"left\">Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.<br/>(要打印的最小字符数。如果要打印的值比这个数字短，结果用空格填充。即使结果较大，该值也不会被截断。)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">The <em>width</em> is not specified in the <em>format</em> string, but as an additional integer value argument preceding the argument that has to be formatted.<br/>(宽度未在格式字符串中指定，而是作为必须格式化的参数之前的附加整数值参数。)</td>\n</tr>\n</tbody></table>\n<h4 id=\"precision\"><a href=\"#precision\" class=\"headerlink\" title=\".precision\"></a>.precision</h4><table>\n<thead>\n<tr>\n<th align=\"left\"><em>.precision</em></th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>.</code><em>number</em></td>\n<td align=\"left\">For integer specifiers (<code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>x</code>, <code>X</code>): <em>precision</em> specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A <em>precision</em> of <code>0</code> means that no character is written for the value <code>0</code>. For <code>a</code>, <code>A</code>, <code>e</code>, <code>E</code>, <code>f</code> and <code>F</code> specifiers: this is the number of digits to be printed <strong>after</strong> the decimal point (by default, this is 6). For <code>g</code> and <code>G</code> specifiers: This is the maximum number of significant digits to be printed. For <code>s</code>: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered. If the period is specified without an explicit value for <em>precision</em>, <code>0</code> is assumed.<br/>对于整数说明符（<code>d</code>、<code>i</code>、<code>o</code>、<code>u</code>、<code>x</code>、<code>X</code>）：<em>精度</em>指定要写入的最小位数。如果要写入的值小于此数字，则结果用前导零填充。即使结果更长，该值也不会被截断。<em>精度</em>为<code>0</code>意味着不为值<code>0</code>写入任何字符。<br/>对于<code>a</code>、<code>A</code>、<code>e</code>、<code>E</code>、<code>f</code>和<code>F</code>说明符：这是要打印的位数小数点<strong>后（默认为 6）。</strong><br/>对于<code>g</code>和<code>G</code>说明符：这是要打印的最大有效位数。<br/>对于<code>s</code>：这是要打印的最大字符数。默认情况下，所有字符都会打印，直到遇到结束的空字符。<br/>如果指定了周期而没有明确的<em>精度</em>值，则假定为<code>0 。</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>.*</code></td>\n<td align=\"left\">The <em>precision</em> is not specified in the <em>format</em> string, but as an additional integer value argument preceding the argument that has to be formatted.<br/><em>精度</em>未在格式字符串中指定，<em>而是</em>作为必须格式化的参数之前的附加整数值参数。</td>\n</tr>\n</tbody></table>\n<p><em>长度</em>子说明符修改数据类型的长度 。这是一个图表，显示了用于解释有和没有<em>长度</em>说明符的相应参数的类型（如果使用不同的类型，则执行适当的类型提升或转换，如果允许）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">specifiers</th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>length</em></td>\n<td align=\"left\"><code>d i</code></td>\n<td align=\"left\"><code>u o x X</code></td>\n<td align=\"left\"><code>f F e E g G a A</code></td>\n<td align=\"left\"><code>c</code></td>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\"><code>p</code></td>\n<td align=\"left\"><code>n</code></td>\n</tr>\n<tr>\n<td align=\"left\"><em>(none)</em></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"><code>unsigned int</code></td>\n<td align=\"left\"><code>double</code></td>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\"><code>char*</code></td>\n<td align=\"left\"><code>void*</code></td>\n<td align=\"left\"><code>int*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>h</code></td>\n<td align=\"left\"><code>short int</code></td>\n<td align=\"left\"><code>unsigned short int</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>short int*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>l</code></td>\n<td align=\"left\"><code>long int</code></td>\n<td align=\"left\"><code>unsigned long int</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>wint_t</code></td>\n<td align=\"left\"><code>wchar_t*</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>long int*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>L</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>long double</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n<td align=\"left\">↓C99↓</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hh</code></td>\n<td align=\"left\"><code>signed char</code></td>\n<td align=\"left\"><code>unsigned char</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>signed char*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ll</code></td>\n<td align=\"left\"><code>long long int</code></td>\n<td align=\"left\"><code>unsigned long long int</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>long long int*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>j</code></td>\n<td align=\"left\"><code>intmax_t</code></td>\n<td align=\"left\"><code>uintmax_t</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>intmax_t*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>z</code></td>\n<td align=\"left\"><code>size_t</code></td>\n<td align=\"left\"><code>size_t</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>size_t*</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>t</code></td>\n<td align=\"left\"><code>ptrdiff_t</code></td>\n<td align=\"left\"><code>ptrdiff_t</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>ptrdiff_t*</code></td>\n</tr>\n</tbody></table>\n<h1 id=\"杂乱\"><a href=\"#杂乱\" class=\"headerlink\" title=\"杂乱\"></a>杂乱</h1><h2 id=\"stderr-stdout\"><a href=\"#stderr-stdout\" class=\"headerlink\" title=\"stderr stdout\"></a>stderr stdout</h2><ul>\n<li><p>stdout – 标准输出设备 stdout。 </p>\n</li>\n<li><p>stderr – 标准错误输出设备</p>\n</li>\n</ul>\n<p>两者默认向屏幕输出。 但如果用转向标准输出到磁盘文件，则可看出两者区别。stdout输出到磁盘文件，stderr在屏幕。 </p>\n<blockquote>\n<p>转向标准输出到磁盘文件tmp.txt<br>my.exe &gt; tmp.txt</p>\n</blockquote>\n<p>在默认情况下，stdout是行缓冲的，他的输出会放在一个buffer里面，只有到换行的时候，才会输出到屏幕。而stderr是无缓冲的，会直接输出。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stdout</span>,<span class=\"hljs-string\">&quot;Group&quot;</span>);<br>    <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>,<span class=\"hljs-string\">&quot;XiyouLinux&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">linux下，第一次会输出XiYouLinuxGroup,是因为stdout将输出的Group放到了缓冲区当中直到程序结束在将缓冲区中的数据刷新出来。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Show-me-you-code\"><a href=\"#Show-me-you-code\" class=\"headerlink\" title=\"Show me you code\"></a>Show me you code</h1><h2 id=\"全局变量会默认被设置成0\"><a href=\"#全局变量会默认被设置成0\" class=\"headerlink\" title=\"全局变量会默认被设置成0\"></a>全局变量会默认被设置成0</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdlib.h&gt;</span><br><br>int ga=0;<br>int gb;<br><br>void testFun(void) &#123;<br>    int a=0;<br>    int b;<br><br>    printf(&quot;%d %d %d %d \\r\\n&quot;, a, b, ga, gb);<br>&#125;<br><br>int main()<br>&#123;<br>    printf(&quot;Hello world!\\n&quot;);<br>    <br>    for (int i = 0; i &lt; 10; i++)<br>    &#123;<br>        testFun();<br>    &#125;<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Hello world!<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br>0 16 0 0<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "c/c++",
                "c"
            ]
        },
        {
            "id": "https://www.oikiou.top/2020/bf76c113/",
            "url": "https://www.oikiou.top/2020/bf76c113/",
            "title": "MicroPython",
            "date_published": "2020-08-08T00:08:08.000Z",
            "content_html": "<h1 id=\"MicroPython\"><a href=\"#MicroPython\" class=\"headerlink\" title=\"MicroPython\"></a>MicroPython</h1><p><a href=\"https://www.cirmall.com/articles/301308/p1\">简单、方便、快速开发嵌入式实时系统——MicroPytho</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pyb <span class=\"hljs-keyword\">import</span> uart<br><br><span class=\"hljs-keyword\">from</span> pyb <span class=\"hljs-keyword\">import</span> I2C <span class=\"hljs-comment\">#工程师将从pyb库导入I2C</span><br><span class=\"hljs-comment\">#这里的PYB库提供了接入到微控制器外围功能，如SPI，I2C以及UART</span><br><span class=\"hljs-comment\">#在使用任何外设之前，工程师必须实例化外设类以创建可用于控制外设的对象。一旦外设类被初始化，工程师可以执行任何其他操作，例如在进入主应用程序循环之前验证设备是否存在，主要应用程序代码将会每秒采样一次传感器。</span><br><br>GlobalTemp = <span class=\"hljs-number\">0.0</span><br><br>GlobalBarometer = <span class=\"hljs-number\">0.0</span><br><br>＃初始化和实例化I2C外设<span class=\"hljs-number\">2</span><br><br>I2C2 = I2C（<span class=\"hljs-number\">2</span>，I2C.MASTER，波特率= <span class=\"hljs-number\">100000</span>）<br><br>＃配置Uart1进行通信<br><br>Uart1 = pyb.UART（<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">115200</span>）<br><br>Uart1.init（<span class=\"hljs-number\">115200</span>，bits = <span class=\"hljs-number\">8</span>，parity = <span class=\"hljs-literal\">None</span>，stop = <span class=\"hljs-number\">1</span>）<br><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br><br>SampleSensor（）<br><br>pyb.delay（<span class=\"hljs-number\">1000</span>）<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">SensorSample</span>（）：<br><br>＃读取温度数据<br><br>TempSample = I2C2.readfrom_mem（<span class=\"hljs-number\">119</span>，<span class=\"hljs-number\">0xFA</span>，<span class=\"hljs-number\">3</span>）<br><br>＃读取压力数据<br><br>PressureSample = I2C2.readfrom_mem（<span class=\"hljs-number\">119</span>，<span class=\"hljs-number\">0xF7</span>,<span class=\"hljs-number\">3</span>）<br><br>将样本数据转换为字符串<br><br>data =“＃，temperature =”<span class=\"hljs-built_in\">str</span>（TempSample）+“，pressure”+ <span class=\"hljs-built_in\">str</span>（PressureSample）+“，＃，\\ n \\ r”<br><br>＃将数据写入蓝牙<br><br>Uart1.write（data）<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "embedded",
                "micropython",
                "python"
            ]
        },
        {
            "id": "https://www.oikiou.top/2020/7ecf7a99/",
            "url": "https://www.oikiou.top/2020/7ecf7a99/",
            "title": "PyQT",
            "date_published": "2020-08-08T00:08:08.000Z",
            "content_html": "<h1 id=\"PyQt\"><a href=\"#PyQt\" class=\"headerlink\" title=\"PyQt\"></a>PyQt</h1><h2 id=\"添加图标\"><a href=\"#添加图标\" class=\"headerlink\" title=\"添加图标\"></a>添加图标</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowGUI</span>(QMainWindow, Ui_MainWindow):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>(WindowGUI, <span class=\"hljs-variable language_\">self</span>).__init__()<br>        <span class=\"hljs-variable language_\">self</span>.setupUi(<span class=\"hljs-variable language_\">self</span>)<br>        <span class=\"hljs-comment\">#这里添加了一个图标</span><br>        <span class=\"hljs-variable language_\">self</span>.setWindowIcon(QIcon(<span class=\"hljs-string\">&#x27;./Data/SerialBlack.ico&#x27;</span>))<br>        <span class=\"hljs-variable language_\">self</span>.pushButton.clicked.connect(<span class=\"hljs-variable language_\">self</span>.Butt)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># 每一pyqt5应用程序必须创建一个应用程序对象。sys.argv参数是一个列表，从命令行输入参数。</span><br>    app = QApplication(sys.argv)<br>    window = WindowGUI()<br>    window.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"退出确认\"><a href=\"#退出确认\" class=\"headerlink\" title=\"退出确认\"></a>退出确认</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowGUI</span>(QMainWindow, Ui_MainWindow):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>(WindowGUI, <span class=\"hljs-variable language_\">self</span>).__init__()<br>        <span class=\"hljs-variable language_\">self</span>.setupUi(<span class=\"hljs-variable language_\">self</span>)<br>    <span class=\"hljs-comment\">#关闭窗口产生 QCloseEvent</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">closeEvent</span>(<span class=\"hljs-params\">self, event</span>):<br>        reply = QMessageBox.question(<span class=\"hljs-variable language_\">self</span>, <span class=\"hljs-string\">&#x27;Message&#x27;</span>,<br>                                     <span class=\"hljs-string\">&quot;Are you sure to quit?&quot;</span>, QMessageBox.Yes |<br>                                     QMessageBox.No, QMessageBox.No)<br>        <span class=\"hljs-keyword\">if</span> reply == QMessageBox.Yes:<br>            event.accept()<br>        <span class=\"hljs-keyword\">else</span>:<br>            event.ignore()<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># 每一pyqt5应用程序必须创建一个应用程序对象。sys.argv参数是一个列表，从命令行输入参数。</span><br>    app = QApplication(sys.argv)<br>    window = WindowGUI()<br>    window.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "python",
                "qt",
                "pyqt"
            ]
        },
        {
            "id": "https://www.oikiou.top/2020/297a89d9/",
            "url": "https://www.oikiou.top/2020/297a89d9/",
            "title": "Python学习笔记",
            "date_published": "2020-08-08T00:08:08.000Z",
            "content_html": "<h1 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h1><p>Python学习笔记</p>\n<h1 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;第一行\\n第二行&#x27;</span>)<br><br><br><span class=\"hljs-built_in\">print</span>(a + <span class=\"hljs-string\">&#x27; &#x27;</span> + b + <span class=\"hljs-string\">&#x27; %d %d&#x27;</span>%(c,d))\t\t\t//连字符<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><h3 id=\"基本格式化\"><a href=\"#基本格式化\" class=\"headerlink\" title=\"基本格式化\"></a>基本格式化</h3><p>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下</p>\n<ul>\n<li>单个</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">&#x27;Hello, %s&#x27;</span> % <span class=\"hljs-string\">&#x27;world&#x27;</span><br><span class=\"hljs-string\">&#x27;Hello, world&#x27;</span><br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>k=<span class=\"hljs-number\">2</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;big&#x27;</span>, k)<br><span class=\"hljs-string\">&#x27;big 2&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>多个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">&#x27;Hi, %s, you have $%d.&#x27;</span> % (<span class=\"hljs-string\">&#x27;Michael&#x27;</span>, <span class=\"hljs-number\">1000000</span>)<br><span class=\"hljs-string\">&#x27;Hi, Michael, you have $1000000.&#x27;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">&#x27;Age: %s. Gender: %s&#x27;</span> % (<span class=\"hljs-number\">25</span>, <span class=\"hljs-literal\">True</span>)<br><span class=\"hljs-string\">&#x27;Age: 25. Gender: True&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"format-格式化\"><a href=\"#format-格式化\" class=\"headerlink\" title=\"format 格式化\"></a>format 格式化</h3><p>format()它会用传入的参数依次替换字符串内的占位符{0}、{1}……</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.<span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">&#x27;小明&#x27;</span>, <span class=\"hljs-number\">17.125</span>)<br><span class=\"hljs-string\">&#x27;Hello, 小明, 成绩提升了 17.1%&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符转义\"><a href=\"#字符转义\" class=\"headerlink\" title=\"字符转义\"></a>字符转义</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用``r&#x27;&#x27;表示&#x27;&#x27;``内部的字符串默认不转义</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\\\\\t\\\\&#x27;</span>)<br>\\       \\<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">r&#x27;\\\\\\t\\\\&#x27;</span>)<br>\\\\\\t\\\\<br><br><br><span class=\"hljs-comment\">#如果字符串内部有很多换行，用\\n写在一行里不好阅读，为了简化，Python允许用&#x27;&#x27;&#x27;...&#x27;&#x27;&#x27;的格式表示多行内容，可以自己试试：</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;&#x27;&#x27;line1</span><br><span class=\"hljs-string\"><span class=\"hljs-meta\">... </span>line2</span><br><span class=\"hljs-string\"><span class=\"hljs-meta\">... </span>line3&#x27;&#x27;&#x27;</span>)<br>line1<br>line2<br>line3<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"显示字符串的前部分长度\"><a href=\"#显示字符串的前部分长度\" class=\"headerlink\" title=\"显示字符串的前部分长度\"></a>显示字符串的前部分长度</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(pi_string[:<span class=\"hljs-number\">52</span>] + <span class=\"hljs-string\">&quot;...&quot;</span>)<br><span class=\"hljs-comment\"># 3.14159265358979323846264338327950288419716939937510...</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h1 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h1><p>幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">name = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&#x27;please enter your name: &#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;hello,&#x27;</span>, name)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 这是一段 行注释</span><br><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">这是一段 段注释</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"数据类型-和-算数运算符\"><a href=\"#数据类型-和-算数运算符\" class=\"headerlink\" title=\"数据类型 和 算数运算符\"></a>数据类型 和 算数运算符</h1><p>整数、浮点数、字符串、布尔型（True、False（注意大小写））、空值</p>\n<p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示，但是不能保证其不被改变</p>\n<p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加 - 两个对象相加</td>\n<td align=\"left\">a + b 输出结果 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减 - 得到负数或是一个数减去另一个数</td>\n<td align=\"left\">a - b 输出结果 -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td align=\"left\">a * b 输出结果 200</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">除 - x除以y</td>\n<td align=\"left\">b &#x2F; a 输出结果 2</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取模 - 返回除法的余数</td>\n<td align=\"left\">b % a 输出结果 0</td>\n</tr>\n<tr>\n<td align=\"left\">**</td>\n<td align=\"left\">幂 - 返回x的y次幂</td>\n<td align=\"left\">a**b 为10的20次方， 输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;&#x2F;</td>\n<td align=\"left\">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>\n<td align=\"left\"><code>&gt;&gt;&gt; 9//2 = 4 &gt;&gt;&gt; -9//2 = -5</code></td>\n</tr>\n</tbody></table>\n<p>&#x2F;除法计算结果是浮点数</p>\n<p>&#x2F;&#x2F;称为地板除，两个整数的除法仍然是整数（c整数除法）</p>\n<h1 id=\"编码（数据转换）\"><a href=\"#编码（数据转换）\" class=\"headerlink\" title=\"编码（数据转换）\"></a>编码（数据转换）</h1><p>ord()函数获取字符的整数表示</p>\n<p>&gt;&gt;&gt; ord(‘中’)</p>\n<p>20013</p>\n<p>chr()函数把编码转换为对应的字符</p>\n<p>&gt;&gt;&gt; chr(25991)</p>\n<p>‘文’</p>\n<p>str通过encode()可以编码为bytes</p>\n<p>&gt;&gt;&gt; ‘ABC’.encode(‘ascii’)</p>\n<p>b’ABC’</p>\n<p>&gt;&gt;&gt; ‘中文’.encode(‘utf-8’)</p>\n<p>b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’</p>\n<p>要把bytes变为str，就需要用decode()</p>\n<p>&gt;&gt;&gt; b’ABC’.decode(‘ascii’)</p>\n<p>‘ABC’</p>\n<p>要计算str包含多少个字符，可以用len()函数</p>\n<p>&gt;&gt;&gt; len(‘ABC’)</p>\n<p>3</p>\n<p>&gt;&gt;&gt; len(‘中文’)</p>\n<p>2</p>\n<p>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p>\n<p>&gt;&gt;&gt; len(b’ABC’)</p>\n<p>3</p>\n<p>&gt;&gt;&gt; len(b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’)</p>\n<p>6</p>\n<p>&gt;&gt;&gt; len(‘中文’.encode(‘utf-8’))</p>\n<p>6</p>\n<hr>\n<p>‘ABC’和b’ABC’，</p>\n<p>前者是str，在内存中以Unicode表示，一个字符对应若干个字节</p>\n<p>后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节</p>\n<h1 id=\"List列表（类似数组）\"><a href=\"#List列表（类似数组）\" class=\"headerlink\" title=\"List列表（类似数组）\"></a>List列表（类似数组）</h1><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">s = [<span class=\"hljs-number\">0</span>]*<span class=\"hljs-number\">10</span>\t\t\t\t\t<span class=\"hljs-comment\">#10个0</span><br>[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]<br><br>s = [<span class=\"hljs-string\">&#x27;hello&#x27;</span>]*<span class=\"hljs-number\">3</span>\t\t\t    <span class=\"hljs-comment\">#10个&#x27;hello&#x27;</span><br>[<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>]<br><br>s = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>))\t\t\t<span class=\"hljs-comment\">#10个 从0到10</span><br>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<hr>\n<p>Python内置的一种数据类型是list。list是一种有序的集合，可以随时添加和删除其中的元素。</p>\n<p>&gt;&gt;&gt; classmates &#x3D; [‘Jack’, 180, 1.69]</p>\n<p>&gt;&gt;&gt; classmates</p>\n<p>[‘Jack’, 180, 1.69]</p>\n<hr>\n<p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：</p>\n<p>&gt;&gt;&gt; classmates[-1]</p>\n<p>‘Tracy’</p>\n<hr>\n<p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：</p>\n<p>&gt;&gt;&gt; classmates.append(‘Adam’)</p>\n<p>&gt;&gt;&gt; classmates</p>\n<p>[‘Michael’, ‘Bob’, ‘Tracy’, ‘Adam’]</p>\n<p>也可以把元素插入到指定的位置，比如索引号为1的位置：</p>\n<p>&gt;&gt;&gt; classmates.insert(1, ‘Jack’)</p>\n<p>&gt;&gt;&gt; classmates</p>\n<p>[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’, ‘Adam’]</p>\n<p>要删除list末尾的元素，用pop()方法：</p>\n<p>&gt;&gt;&gt; classmates.pop()</p>\n<p>‘Adam’</p>\n<p>&gt;&gt;&gt; classmates</p>\n<p>[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’]</p>\n<p>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：</p>\n<p>&gt;&gt;&gt; classmates.pop(1)</p>\n<p>‘Jack’</p>\n<p>&gt;&gt;&gt; classmates</p>\n<p>[‘Michael’, ‘Bob’, ‘Tracy’]</p>\n<hr>\n<p>-———————————————————————————————————————</p>\n<p>list元素也可以是另一个list，比如：</p>\n<p>&gt;&gt;&gt; s &#x3D; [‘python’, ‘java’, [‘asp’, ‘php’], ‘scheme’]</p>\n<p>&gt;&gt;&gt; len(s)</p>\n<p>4</p>\n<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了</p>\n<p>&gt;&gt;&gt; p &#x3D; [‘asp’, ‘php’]</p>\n<p>&gt;&gt;&gt; s &#x3D; [‘python’, ‘java’, p, ‘scheme’]</p>\n<p>要访问’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组</p>\n<h1 id=\"Tuple元组（静态数组）\"><a href=\"#Tuple元组（静态数组）\" class=\"headerlink\" title=\"Tuple元组（静态数组）\"></a>Tuple元组（静态数组）</h1><p>另一种有序列表叫元组：tuple</p>\n<p>。tuple和list非常类似，但是tuple一旦初始化就不能修改</p>\n<p>&gt;&gt;&gt; classmates &#x3D; (‘Michael’, ‘Bob’, ‘Tracy’)</p>\n<p>要定义一个只有1个元素的tuple，如果你这么定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t = (<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t<br><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>定义的不是tuple，是<code>1</code>这个数！这是因为括号<code>()</code>既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是<code>1</code>。</p>\n<p>所以，只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t = (<span class=\"hljs-number\">1</span>,)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t<br>(<span class=\"hljs-number\">1</span>,)<br></code></pre></td></tr></table></figure>\n\n<p>Python在显示只有1个元素的tuple时，也会加一个逗号<code>,</code>，以免你误解成数学计算意义上的括号。</p>\n<p>最后来看一个“可变的”tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t = (<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>])<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;X&#x27;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&#x27;Y&#x27;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>t<br>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, [<span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;Y&#x27;</span>])<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"str-replace-替换\"><a href=\"#str-replace-替换\" class=\"headerlink\" title=\"str.replace 替换\"></a>str.replace 替换</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>message = <span class=\"hljs-string\">&quot;I really like dogs.&quot;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>message.replace(<span class=\"hljs-string\">&#x27;dog&#x27;</span>, <span class=\"hljs-string\">&#x27;cat&#x27;</span>)<br><span class=\"hljs-string\">&#x27;I really like cats.&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"if-、-for-、-while-、-range\"><a href=\"#if-、-for-、-while-、-range\" class=\"headerlink\" title=\"if 、 for 、 while 、 range\"></a>if 、 for 、 while 、 range</h1><h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><p><strong>变体</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ii = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> ss == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span><br><br><span class=\"hljs-comment\">#当ss == 2时 ii=1 否则 ii=0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>if age &gt;&#x3D; 18:</p>\n<p>​    print(‘adult’)</p>\n<p>else:</p>\n<p>​    print(‘teenager’)</p>\n<p>age &#x3D; 3</p>\n<p>if age &gt;&#x3D; 18:</p>\n<p>​    print(‘adult’)</p>\n<p>elif age &gt;&#x3D; 6:</p>\n<p>​    print(‘teenager’)</p>\n<p>else:</p>\n<p>​    print(‘kid’)</p>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>所以for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。</p>\n<p>再比如我们想计算1-10的整数之和，可以用一个sum变量做累加：</p>\n<p>sum &#x3D; 0</p>\n<p>for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</p>\n<p>​    sum &#x3D; sum + x</p>\n<p>print(sum)</p>\n<hr>\n<p>sum &#x3D; 0</p>\n<p>for x in  range(101):</p>\n<p>​    sum &#x3D; sum + x</p>\n<p>print(sum)</p>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><p>while循环</p>\n<p>sum &#x3D; 0</p>\n<p>n &#x3D; 99</p>\n<p>while n &gt; 0:</p>\n<p>​    sum &#x3D; sum + n</p>\n<p>​    n &#x3D; n - 2</p>\n<p>print(sum)</p>\n<h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h2><p>range(start, stop[, step])    可以生成一个整数序列，</p>\n<p>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</p>\n<p>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</p>\n<p>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</p>\n<p>&gt;&gt;&gt; list(range(5))</p>\n<p>[0, 1, 2, 3, 4]</p>\n<p>&gt;&gt;&gt;range(10)        # 从 0 开始到 10</p>\n<p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>\n<p>&gt;&gt;&gt; range(1, 11)     # 从 1 开始到 11</p>\n<p>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n<p>&gt;&gt;&gt; range(0, 30, 5)  # 步长为 5</p>\n<p>[0, 5, 10, 15, 20, 25]</p>\n<p>&gt;&gt;&gt; range(0, 10, 3)  # 步长为 3</p>\n<p>[0, 3, 6, 9]</p>\n<p>&gt;&gt;&gt; range(0, -10, -1) # 负数</p>\n<p>[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</p>\n<p>&gt;&gt;&gt; range(0)</p>\n<p>[]</p>\n<p>&gt;&gt;&gt; range(1, 0)</p>\n<p>[]</p>\n<h1 id=\"Dict（字典）\"><a href=\"#Dict（字典）\" class=\"headerlink\" title=\"Dict（字典）\"></a>Dict（字典）</h1><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>\n<p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p>\n<p>&gt;&gt;&gt; d &#x3D; {‘Michael’: 95, ‘Bob’: 75, ‘Tracy’: 85}</p>\n<p>&gt;&gt;&gt; d[‘Michael’]</p>\n<p>95 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Kw = &#123;<span class=\"hljs-string\">&#x27;city&#x27;</span>: <span class=\"hljs-number\">22</span>, <span class=\"hljs-string\">&#x27;job&#x27;</span>: <span class=\"hljs-number\">33</span>&#125;: <br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;city&#x27;</span> <span class=\"hljs-keyword\">in</span> kw:<br>\t<span class=\"hljs-comment\"># 有city参数</span><br>    <span class=\"hljs-keyword\">pass</span><br><br><br>&gt;&gt;&gt;kw.get(<span class=\"hljs-string\">&#x27;city&#x27;</span>)<br><span class=\"hljs-number\">22</span><br>&gt;&gt;&gt;kw.[<span class=\"hljs-string\">&#x27;city&#x27;</span>]<br><span class=\"hljs-number\">22</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字典内置函数-方法\"><a href=\"#字典内置函数-方法\" class=\"headerlink\" title=\"字典内置函数&amp;方法\"></a>字典内置函数&amp;方法</h2><p>Python字典包含了以下内置函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">函数及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-cmp.html\">cmp(dict1, dict2)</a> 比较两个字典元素。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-len.html\">len(dict)</a> 计算字典元素个数，即键的总数。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-str.html\">str(dict)</a> 输出字典可打印的字符串表示。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-type.html\">type(variable)</a> 返回输入的变量类型，如果变量是字典就返回字典类型。</td>\n</tr>\n</tbody></table>\n<p>Python字典包含了以下内置方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">函数及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-clear.html\">dict.clear()</a> 删除字典内所有元素</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-copy.html\">dict.copy()</a> 返回一个字典的浅复制</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">[dict.fromkeys(seq<a href=\"https://www.runoob.com/python/att-dictionary-fromkeys.html\">, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-get.html\">dict.get(key, default&#x3D;None)</a> 返回指定键的值，如果值不在字典中返回default值</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-has_key.html\">dict.has_key(key)</a> 如果键在字典dict里返回true，否则返回false</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-items.html\">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-keys.html\">dict.keys()</a> 以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-setdefault.html\">dict.setdefault(key, default&#x3D;None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-update.html\">dict.update(dict2)</a> 把字典dict2的键&#x2F;值对更新到dict里</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/att-dictionary-values.html\">dict.values()</a> 以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">[pop(key<a href=\"https://www.runoob.com/python/python-att-dictionary-pop.html\">,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/python/python-att-dictionary-popitem.html\">popitem()</a> 返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody></table>\n<h1 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h1><h2 id=\"基本打开输出文件\"><a href=\"#基本打开输出文件\" class=\"headerlink\" title=\"基本打开输出文件\"></a>基本打开输出文件</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;pi_digits.txt&#x27;</span>) <span class=\"hljs-keyword\">as</span> file_object:<br>    contents = file_object.read()<br>    <span class=\"hljs-built_in\">print</span>(contents)<br></code></pre></td></tr></table></figure>\n\n<p>在这个程序中，第1行代码做了大量的工作。我们先来看看函数open() 。要以任何方式使用文件——哪怕仅仅是打印其内容，都得先打开 文件，这样才能访问它。函数open()接受一个参数：要打开的文件的名称。Python在当前执行的文件所在的目录中查找指定的文件。在这个示例中，当前运行的是file_reader.py，因此Python在file_reader.py所在的目录中查找pi_digits.txt。函数open() 返回一个表示文件的对象。在这里，open(‘pi_digits.txt’) 返回一个表示文件pi_digits.txt 的对象；Python将这个对象存储在我们将在后面使用的变量中。</p>\n<p>关键字with 在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了open() ，但没有调用close() ；你也可以调用open() 和close() 来打开和关闭文件，但这样做时，如果程序存在bug，导致close() 语句未执行，文件将不会关闭。这看似微不足道，但未妥善地关闭文件可能会导致数据丢失或受损。如果在程序中过早地调用close() ，你会发现需要使用文件时它已关闭 （无法访问），这会导致更多的错误。并非在任何情况下都能轻松确定关闭文件的恰当时机，但通过使用前面所示的结构，可让Python去确定：你只管打开文件，并在需要时使用它，Python自会在合适的时候自动将其关闭。</p>\n<h2 id=\"删除字符串末尾的空白-rstrip\"><a href=\"#删除字符串末尾的空白-rstrip\" class=\"headerlink\" title=\"删除字符串末尾的空白 rstrip\"></a>删除字符串末尾的空白 rstrip</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;pi_digits.txt&#x27;</span>) <span class=\"hljs-keyword\">as</span> file_object:<br>    contents = file_object.read()<br>    <span class=\"hljs-built_in\">print</span>(contents.rstrip())<br></code></pre></td></tr></table></figure>\n<p>相比于原始文件，该输出唯一不同的地方是末尾多了一个空行。为何会多出这个空行呢？因为read() 到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在print 语句中使用rstrip() ：</p>\n<p>每行左边的空格，为删除这些空格，可使用strip() </p>\n<h2 id=\"逐行读取文件\"><a href=\"#逐行读取文件\" class=\"headerlink\" title=\"逐行读取文件\"></a>逐行读取文件</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">filename = <span class=\"hljs-string\">&#x27;pi_digits.txt&#x27;</span><br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(filename) <span class=\"hljs-keyword\">as</span> file_object:<br>    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> file_object:<br>    \t<span class=\"hljs-built_in\">print</span>(line.rstrip())<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"文件打开模式\"><a href=\"#文件打开模式\" class=\"headerlink\" title=\"文件打开模式\"></a>文件打开模式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">filename = <span class=\"hljs-string\">&#x27;programming.txt&#x27;</span><br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(filename, <span class=\"hljs-string\">&#x27;w&#x27;</span>) <span class=\"hljs-keyword\">as</span> file_object:<br>    file_object.write(<span class=\"hljs-string\">&quot;I love programming.&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>在这个示例中，调用open() 时提供了两个实参（见❶）。第一个实参也是要打开的文件的名称；第二个实参（’w’ ）告诉Python，我们要以写入模式 打开这个文件。打开文件时，<strong>可指定读取模式 （’r’ ）、写入模式 （’w’ ）、附加模式 （’a’ ）附加到文件末尾、让你能够读取和写入文件的模式（’r+’ ）</strong>。如果你省略了模式实参，Python将以默认的只读模式打开文件。</p>\n<h2 id=\"异常处理-try-except\"><a href=\"#异常处理-try-except\" class=\"headerlink\" title=\"异常处理 try-except\"></a>异常处理 try-except</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">filename = <span class=\"hljs-string\">&#x27;alice.txt&#x27;</span><br><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(filename) <span class=\"hljs-keyword\">as</span> f_obj:<br>    \tcontents = f_obj.read()<br><span class=\"hljs-keyword\">except</span> FileNotFoundError:<br>    msg = <span class=\"hljs-string\">&quot;Sorry, the file &quot;</span> + filename + <span class=\"hljs-string\">&quot; does not exist.&quot;</span><br>\t<span class=\"hljs-built_in\">print</span>(msg)<br></code></pre></td></tr></table></figure>\n\n<p>在这个示例中，try 代码块引发FileNotFoundError 异常，因此Python找出与该错误匹配的except 代码块，并运行其中的代码。最终的结果是显示一条友好的错误消息，而不是traceback：</p>\n<h1 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h1><h2 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\".count()\"></a>.count()</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>count()方法语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">str</span>.count(sub, start= <span class=\"hljs-number\">0</span>,end=<span class=\"hljs-built_in\">len</span>(string))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>sub – 搜索的子字符串</li>\n<li>start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li>\n<li>end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li>\n</ul>\n<h2 id=\"to-bytes\"><a href=\"#to-bytes\" class=\"headerlink\" title=\".to_bytes()\"></a>.to_bytes()</h2><p>(0x12).to_bytes(10, byteorder&#x3D; ‘big’, signed &#x3D; ‘true’)</p>\n<ul>\n<li><p>10：表示转换后的数据占10个字节</p>\n</li>\n<li><p>byteorder：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&gt;&gt;&gt;(<span class=\"hljs-number\">0x12</span>).to_bytes(<span class=\"hljs-number\">10</span>, byteorder = <span class=\"hljs-string\">&#x27;big&#x27;</span>)<br><br><span class=\"hljs-comment\">#b&#x27;\\xf8\\x12\\x00\\x00&#x27;</span><br><br>&gt;&gt;&gt;(<span class=\"hljs-number\">0x12</span>).to_bytes(<span class=\"hljs-number\">10</span>, byteorder = <span class=\"hljs-string\">&#x27;little&#x27;</span>)<br><br><span class=\"hljs-comment\">#b&#x27;\\x00\\x00\\x12\\xf8&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>signed： 表示有符号和无符号</li>\n</ul>\n<h2 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h2><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：(类似于指针？？？？准确描述应该是类似 tpyedef )</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-built_in\">abs</span> <span class=\"hljs-comment\"># 变量a指向abs函数</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a(-<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\"># 所以也可以通过a调用abs函数1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"abs-绝对值\"><a href=\"#abs-绝对值\" class=\"headerlink\" title=\"abs 绝对值\"></a>abs 绝对值</h2><p>abs( x )函数 取绝对值</p>\n<p>x – 数值表达式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">abs</span>(<span class=\"hljs-number\">100</span>)<span class=\"hljs-number\">100</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">abs</span>(-<span class=\"hljs-number\">20</span>)<span class=\"hljs-number\">20</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">abs</span>(<span class=\"hljs-number\">12.34</span>)<span class=\"hljs-number\">12.34</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"max-找平均值\"><a href=\"#max-找平均值\" class=\"headerlink\" title=\"max 找平均值\"></a>max 找平均值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><br>list1 = [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">568</span>, <span class=\"hljs-number\">423</span>, <span class=\"hljs-number\">365</span>]<br><br><span class=\"hljs-built_in\">print</span>( np.mean(list1) )<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"max-找最大-小值\"><a href=\"#max-找最大-小值\" class=\"headerlink\" title=\"max 找最大&#x2F;小值\"></a>max 找最大&#x2F;小值</h2><p>max( x, y, z, …. )  可以接收任意多个参数，并返回最大的那个（可以传入list）：</p>\n<p>x – 数值表达式。y – 数值表达式。z – 数值表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br><span class=\"hljs-number\">2</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">5</span>)<br><span class=\"hljs-number\">3</span><br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>list1 = [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">568</span>, <span class=\"hljs-number\">423</span>, <span class=\"hljs-number\">365</span>]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max value element : &quot;</span>, <span class=\"hljs-built_in\">max</span>(list1))<br>Max value element :  <span class=\"hljs-number\">568</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"exal-执行字符串类型的表达式\"><a href=\"#exal-执行字符串类型的表达式\" class=\"headerlink\" title=\"exal 执行字符串类型的表达式\"></a>exal 执行字符串类型的表达式</h2><p>eval(expression[, globals[, locals]])函数   函数用来执行一个字符串表达式，并返回表达式的值。</p>\n<p>expression – 表达式。</p>\n<p>globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p>\n<p>locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p>\n<p>&gt;&gt;&gt;x &#x3D; 7</p>\n<p>&gt;&gt;&gt; eval( ‘3 * x’ )</p>\n<p>21</p>\n<p>&gt;&gt;&gt; eval(‘pow(2,2)’)</p>\n<p>4</p>\n<p>a&#x3D;eval(input(“请输入一个整数”))           #（自动类型转换）</p>\n<h2 id=\"int-强制转换\"><a href=\"#int-强制转换\" class=\"headerlink\" title=\"int 强制转换\"></a>int 强制转换</h2><p>class int(x, base&#x3D;10)    强制转换返回整型数据。</p>\n<p>x – 字符串或数字。base – 进制数，默认十进制。</p>\n<p>&gt;&gt;&gt; int(‘0xa’,16)  </p>\n<p>10  </p>\n<p>&gt;&gt;&gt; int(‘10’,8)  </p>\n<p>8</p>\n<p>a&#x3D;int(input(“请输入一个整数”))             #（强制类型转换）</p>\n<h2 id=\"type-判断对象类型\"><a href=\"#type-判断对象类型\" class=\"headerlink\" title=\"type 判断对象类型\"></a>type 判断对象类型</h2><p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p>\n<p>基本类型都可以用<code>type()</code>判断：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\">&gt;&gt;&gt; <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>(123)</span><br>&lt;<span class=\"hljs-keyword\">class</span> &#x27;int&#x27;&gt;<br>&gt;&gt;&gt; <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>(&#x27;<span class=\"hljs-title\">str&#x27;</span>)</span><br>&lt;<span class=\"hljs-keyword\">class</span> &#x27;str&#x27;&gt;<br>&gt;&gt;&gt; <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>(<span class=\"hljs-type\">None</span>)</span><br>&lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>(<span class=\"hljs-type\">None</span>) &#x27;<span class=\"hljs-type\">NoneType&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-built_in\">abs</span>)<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">&#x27;builtin_function_or_method&#x27;</span>&gt;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">type</span>(a)<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">&#x27;__main__.Animal&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的Class类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的type类型是否相同：</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python-repl\"><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-number\">123</span>)==<span class=\"hljs-built_in\">type</span>(<span class=\"hljs-number\">456</span>)</span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-number\">123</span>)==<span class=\"hljs-built_in\">int</span></span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>)==<span class=\"hljs-built_in\">type</span>(<span class=\"hljs-string\">&#x27;123&#x27;</span>)</span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>)==<span class=\"hljs-built_in\">str</span></span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>)==<span class=\"hljs-built_in\">type</span>(<span class=\"hljs-number\">123</span>)</span><br>False<br></code></pre></td></tr></table></figure>\n\n<p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p>\n<figure class=\"highlight python-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python-repl\"><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-keyword\">import</span> types</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fn</span>():</span><br><span class=\"hljs-meta prompt_\">...</span> <span class=\"language-python\">    <span class=\"hljs-keyword\">pass</span></span><br><span class=\"hljs-meta prompt_\">...</span><br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(fn)==types.FunctionType</span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-built_in\">abs</span>)==types.BuiltinFunctionType</span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>(<span class=\"hljs-keyword\">lambda</span> x: x)==types.LambdaType</span><br>True<br><span class=\"hljs-meta prompt_\">&gt;&gt;&gt;</span> <span class=\"language-python\"><span class=\"hljs-built_in\">type</span>((x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>)))==types.GeneratorType</span><br>True<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"isinstance-判断类型是否相同\"><a href=\"#isinstance-判断类型是否相同\" class=\"headerlink\" title=\"isinstance 判断类型是否相同\"></a>isinstance 判断类型是否相同</h2><p>isinstance(object, classinfo)     如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False</p>\n<p>object – 实例对象。</p>\n<p>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</p>\n<p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-built_in\">str</span>)<br><span class=\"hljs-literal\">True</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-built_in\">int</span>)<br><span class=\"hljs-literal\">True</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(<span class=\"hljs-string\">b&#x27;a&#x27;</span>, <span class=\"hljs-built_in\">bytes</span>)<br><span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], (<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">tuple</span>))<br><span class=\"hljs-literal\">True</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">tuple</span>))<br><span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#判断传入的参数是否正确</span><br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(x, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):<br>        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&#x27;bad operand type&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>isinstance() 与 type() 区别：</p>\n<p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p>\n<p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p>\n<p>如果要判断两个类型是否相同推荐使用 isinstance()。</p>\n<h2 id=\"dir-获得对象的所有属性和方法\"><a href=\"#dir-获得对象的所有属性和方法\" class=\"headerlink\" title=\"dir 获得对象的所有属性和方法\"></a>dir 获得对象的所有属性和方法</h2><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>)<br>[<span class=\"hljs-string\">&#x27;__add__&#x27;</span>, <span class=\"hljs-string\">&#x27;__class__&#x27;</span>,..., <span class=\"hljs-string\">&#x27;__subclasshook__&#x27;</span>, <span class=\"hljs-string\">&#x27;capitalize&#x27;</span>, <span class=\"hljs-string\">&#x27;casefold&#x27;</span>,..., <span class=\"hljs-string\">&#x27;zfill&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n<p>类似<code>__xxx__</code>的属性和方法在Python中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在Python中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">len</span>(<span class=\"hljs-string\">&#x27;ABC&#x27;</span>)<br><span class=\"hljs-number\">3</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">&#x27;ABC&#x27;</span>.__len__()<br><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二次三次方根\"><a href=\"#二次三次方根\" class=\"headerlink\" title=\"二次三次方根\"></a>二次三次方根</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">9</span><br>== <span class=\"hljs-number\">9</span>**<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">9</span><br>== <span class=\"hljs-number\">9</span>**<span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"math模块的一些方法\"><a href=\"#math模块的一些方法\" class=\"headerlink\" title=\"math模块的一些方法\"></a>math模块的一些方法</h1><h2 id=\"math-modf-分离小数和整数部分\"><a href=\"#math-modf-分离小数和整数部分\" class=\"headerlink\" title=\"math.modf(分离小数和整数部分)\"></a>math.modf(分离小数和整数部分)</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>modf() 方法返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>以下展示了使用 modf() 方法的实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math   <span class=\"hljs-comment\"># This will import math module</span><br><br><span class=\"hljs-built_in\">print</span>( math.modf(-<span class=\"hljs-number\">100.12</span>) )<br><span class=\"hljs-built_in\">print</span>( math.modf(-<span class=\"hljs-number\">100.12</span>)[<span class=\"hljs-number\">0</span>] )<br></code></pre></td></tr></table></figure>\n\n<p>以上实例运行后输出结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">(-<span class=\"hljs-number\">0.12000000000000455</span>, -<span class=\"hljs-number\">100.0</span>)<br>-<span class=\"hljs-number\">0.12000000000000455</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"用户自定义函数\"><a href=\"#用户自定义函数\" class=\"headerlink\" title=\"用户自定义函数\"></a>用户自定义函数</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_abs</span>(<span class=\"hljs-params\">x</span>):<br><br>   <span class=\"hljs-keyword\">if</span> x &gt;= <span class=\"hljs-number\">0</span>:<br><br>      <span class=\"hljs-keyword\">return</span> x<br><br>   <span class=\"hljs-keyword\">else</span>:<br><br>       <span class=\"hljs-keyword\">return</span> -x<br></code></pre></td></tr></table></figure>\n\n<p>（导入其他文件内的函数的方法）如果你已经把<code>my_abs()</code>的函数定义保存为<code>abs.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abs import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abs</code>是文件名（不含<code>.py</code>扩展名）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> <span class=\"hljs-built_in\">abs</span> <span class=\"hljs-keyword\">import</span> my_abs<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>my_abs(-<span class=\"hljs-number\">9</span>) <br><span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#pass语句，实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。但是缺少了pass，代码运行就会有语法错误。</span><br><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:<br><span class=\"hljs-keyword\">pass</span><br> <br>函数返回多个值<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_two</span>(<span class=\"hljs-params\">x, y</span>):<br>    x = x + <span class=\"hljs-number\">1</span><br>    y = y + <span class=\"hljs-number\">2</span><br><span class=\"hljs-keyword\">return</span> x, y<br> <br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = y = <span class=\"hljs-number\">1</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x, y = add_two(x,y)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(x, y)<br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>r = add_two(x,y)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(r)<br>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<p>其实返回值是一个tuple(静态数组)！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p>\n<p>函数的传入参数<br>函数传入list要特别小心，函数内的修改会影响其本身，类似C中的指针对list产生了修改。<br>关键字传值(带**的传值)传入的是值，不会影响原来的内容。</p>\n<h2 id=\"函数的输入\"><a href=\"#函数的输入\" class=\"headerlink\" title=\"函数的输入\"></a>函数的输入</h2><h3 id=\"函数的默认参数\"><a href=\"#函数的默认参数\" class=\"headerlink\" title=\"函数的默认参数\"></a>函数的默认参数</h3><p>默认参数。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">power</span>(<span class=\"hljs-params\">x, n=<span class=\"hljs-number\">2</span></span>):<br>    s = <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:<br>        n = n - <span class=\"hljs-number\">1</span><br>        s = s * x<br>    <span class=\"hljs-keyword\">return</span> s<br></code></pre></td></tr></table></figure>\n\n<p>调用时可以 power(5) 直接计算5的2次方，也可以power(5,3)计算5的3次方。即默认参数可以传入也可以不传入。<br>定义默认参数要牢记一点：默认参数必须指向不变对象！</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000\">具体可以点击此处参考</a></p>\n<h3 id=\"输入可变长变量\"><a href=\"#输入可变长变量\" class=\"headerlink\" title=\"输入可变长变量\"></a>输入可变长变量</h3><p>可变长度的传入变量，加了星号（*）的变量名会存放所有未命名的变量参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printinfo</span>(<span class=\"hljs-params\"> *vartuple </span>):<br>   <span class=\"hljs-string\">&quot;打印任何传入的参数&quot;</span><br>   <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;输出: &quot;</span><br>   <span class=\"hljs-keyword\">for</span> var <span class=\"hljs-keyword\">in</span> vartuple:<br>      <span class=\"hljs-built_in\">print</span> var<br>   <span class=\"hljs-keyword\">return</span>;<br><br> <br><span class=\"hljs-comment\"># 调用printinfo 函数</span><br>printinfo( <span class=\"hljs-number\">10</span> );<br>printinfo( <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">50</span> );<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"关键字参数（字典-dict-参数）\"><a href=\"#关键字参数（字典-dict-参数）\" class=\"headerlink\" title=\"关键字参数（字典(dict)参数）\"></a>关键字参数（字典(dict)参数）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">person</span>(<span class=\"hljs-params\">name, age, **kw</span>):<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;name:&#x27;</span>, name, <span class=\"hljs-string\">&#x27;age:&#x27;</span>, age, <span class=\"hljs-string\">&#x27;other:&#x27;</span>, kw)<br> <br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>person(<span class=\"hljs-string\">&#x27;Michael&#x27;</span>, <span class=\"hljs-number\">30</span>)<br>name: Michael age: <span class=\"hljs-number\">30</span> other: &#123;&#125;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>person(<span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-number\">35</span>, city=<span class=\"hljs-string\">&#x27;Beijing&#x27;</span>)<br>name: Bob age: <span class=\"hljs-number\">35</span> other: &#123;<span class=\"hljs-string\">&#x27;city&#x27;</span>: <span class=\"hljs-string\">&#x27;Beijing&#x27;</span>&#125;<br><span class=\"hljs-comment\">#如果函数内使用了某个关键字参数，但调用时没有传入，代码会有异常</span><br><span class=\"hljs-comment\">#如果要限制只能传指定名字的参数，则可以使用命名关键字参数</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"命名关键词参数\"><a href=\"#命名关键词参数\" class=\"headerlink\" title=\"命名关键词参数\"></a>命名关键词参数</h3> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#命名关键字参数，是对关键字参数方式的进一步约束，更安全了</span><br><span class=\"hljs-comment\">#定义需要一个*号作为分隔符，*后面的参数表示只能传递该名字的参数</span><br><span class=\"hljs-comment\">#如下表示两个位置参数，还有两个名为city和job的关键字参数，调用时传其它名字会报错</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">person</span>(<span class=\"hljs-params\">name, age, *, city, job</span>):<br>    <span class=\"hljs-built_in\">print</span>(name, age, city, job)<br></code></pre></td></tr></table></figure>\n\n\n<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>\n<p>调用方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>person(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>, <span class=\"hljs-number\">24</span>, city=<span class=\"hljs-string\">&#x27;Beijing&#x27;</span>, job=<span class=\"hljs-string\">&#x27;Engineer&#x27;</span>)<br>Jack <span class=\"hljs-number\">24</span> Beijing Engineer<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加缺省值，从而简化调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">person</span>(<span class=\"hljs-params\">name, age, *, city=<span class=\"hljs-string\">&#x27;Beijing&#x27;</span>, job</span>):<br>    <span class=\"hljs-built_in\">print</span>(name, age, city, job)<br></code></pre></td></tr></table></figure>\n\n<p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>person(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>, <span class=\"hljs-number\">24</span>, job=<span class=\"hljs-string\">&#x27;Engineer&#x27;</span>)<br>Jack <span class=\"hljs-number\">24</span> Beijing Engineer<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"匿名函数lambda\"><a href=\"#匿名函数lambda\" class=\"headerlink\" title=\"匿名函数lambda\"></a>匿名函数lambda</h1><p>python 使用 lambda 来创建匿名函数。</p>\n<ul>\n<li>lambda只是一个表达式，函数体比def简单很多。</li>\n<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li>\n<li>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li>\n<li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>\n</ul>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>lambda函数的语法只包含一个语句，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">lambda</span> [arg1 [,arg2,.....argn]]:expression<br></code></pre></td></tr></table></figure>\n\n<p>如下实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 可写函数说明</span><br><span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-keyword\">lambda</span> arg1, arg2: arg1 + arg2;<br> <br><span class=\"hljs-comment\"># 调用sum函数</span><br><span class=\"hljs-built_in\">print</span>( <span class=\"hljs-string\">&quot;相加后的值为 : &quot;</span>, <span class=\"hljs-built_in\">sum</span>( <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span> ))<br><span class=\"hljs-built_in\">print</span>( <span class=\"hljs-string\">&quot;相加后的值为 : &quot;</span>, <span class=\"hljs-built_in\">sum</span>( <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span> ))<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h2 id=\"面向过程-和-面向对象的对比\"><a href=\"#面向过程-和-面向对象的对比\" class=\"headerlink\" title=\"面向过程 和 面向对象的对比\"></a>面向过程 和 面向对象的对比</h2><p>Q：存储学生的信息并打印出来</p>\n<p><strong>面向过程</strong></p>\n<p> 假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个dict表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">std1 = &#123; <span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Michael&#x27;</span>, <span class=\"hljs-string\">&#x27;score&#x27;</span>: <span class=\"hljs-number\">98</span> &#125;<br>std2 = &#123; <span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;score&#x27;</span>: <span class=\"hljs-number\">81</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">std</span>):<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (std[<span class=\"hljs-string\">&#x27;name&#x27;</span>], std[<span class=\"hljs-string\">&#x27;score&#x27;</span>]))<br></code></pre></td></tr></table></figure>\n\n<p><strong>面向对象</strong></p>\n<p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是<code>Student</code>这种数据类型应该被视为一个对象，这个对象拥有<code>name</code>和<code>score</code>这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):<br>        <span class=\"hljs-variable language_\">self</span>.name = name<br>        <span class=\"hljs-variable language_\">self</span>.score = score<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (<span class=\"hljs-variable language_\">self</span>.name, <span class=\"hljs-variable language_\">self</span>.score))<br></code></pre></td></tr></table></figure>\n\n<p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">bart = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br>lisa = Student(<span class=\"hljs-string\">&#x27;Lisa Simpson&#x27;</span>, <span class=\"hljs-number\">87</span>)<br>bart.print_score()<br>lisa.print_score()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"类、实例、方法和属性\"><a href=\"#类、实例、方法和属性\" class=\"headerlink\" title=\"类、实例、方法和属性\"></a>类、实例、方法和属性</h2><ul>\n<li>类 Student</li>\n<li>实例 jack</li>\n<li>方法 print_score</li>\n<li>属性 obj_name</li>\n<li>增加属性 gender</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t \t\t\t\t<span class=\"hljs-comment\">#Student是类</span><br>    obj_name = <span class=\"hljs-string\">&#x27;this is obj name str！&#x27;</span>\t<span class=\"hljs-comment\">#这个类有一个属性（类属性）</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):  \t<span class=\"hljs-comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span><br>        <span class=\"hljs-variable language_\">self</span>.name = name<br>        <span class=\"hljs-variable language_\">self</span>.score = score<br>        <br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">self</span>):\t\t\t\t<span class=\"hljs-comment\">#print_score 这个函数就是方法</span><br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (<span class=\"hljs-variable language_\">self</span>.name, <span class=\"hljs-variable language_\">self</span>.score))<br>        <br>jack = Student(<span class=\"hljs-string\">&quot;Jack&quot;</span>, <span class=\"hljs-number\">95</span>)  \t\t\t\t\t\t<span class=\"hljs-comment\">#jack是实例</span><br>jack.gender = <span class=\"hljs-string\">&#x27;man&#x27;</span>\t\t\t\t\t \t\t\t\t<span class=\"hljs-comment\">#此处加了一个属性（实例属性）</span><br><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&#x27;%s is a %s&#x27;</span> % (jack.name, jack.gender))\t\t<span class=\"hljs-comment\">#输出 增加的实例属性</span><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&#x27;%s&#x27;</span> % (jack.obj_name))\t\t\t\t\t\t<span class=\"hljs-comment\">#输出类属性</span><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&#x27;Hi,%s your score is %s&#x27;</span> % (jack.name, jack.score))\t<span class=\"hljs-comment\">#输出实例的属性</span><br><span class=\"hljs-comment\">#运行结果</span><br>Jack <span class=\"hljs-keyword\">is</span> a man<br>this <span class=\"hljs-keyword\">is</span> obj name <span class=\"hljs-built_in\">str</span>！<br>Hi，Jack yours score <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">95</span><br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"类-实例\"><a href=\"#类-实例\" class=\"headerlink\" title=\"类 实例\"></a>类 实例</h3><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>\n<hr>\n<p>面向对象最重要的概念就是<strong>类（Class）</strong>和<strong>实例（Instance）</strong>，必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的<strong>方法</strong>，但各自的数据可能不同。</p>\n<p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t \t\t\t\t<span class=\"hljs-comment\">#Student是类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):  \t<span class=\"hljs-comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span><br>        <span class=\"hljs-variable language_\">self</span>.name = name<br>        <span class=\"hljs-variable language_\">self</span>.score = score<br>        <br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">self</span>):\t\t\t\t<span class=\"hljs-comment\">#这就是方法</span><br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (<span class=\"hljs-variable language_\">self</span>.name, <span class=\"hljs-variable language_\">self</span>.score))<br></code></pre></td></tr></table></figure>\n\n<p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">jack = Student(<span class=\"hljs-string\">&quot;Jack&quot;</span>, <span class=\"hljs-number\">95</span>)  \t\t   <span class=\"hljs-comment\">#jack是实例</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p><strong>方法</strong>就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>\n<hr>\n<p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">std</span>):<br><span class=\"hljs-meta\">... </span>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (std.name, std.score))<br>...<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>print_score(bart)<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></td></tr></table></figure>\n\n<p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):<br>        <span class=\"hljs-variable language_\">self</span>.name = name<br>        <span class=\"hljs-variable language_\">self</span>.score = score<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">self</span>):\t\t<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (<span class=\"hljs-variable language_\">self</span>.name, <span class=\"hljs-variable language_\">self</span>.score))<br></code></pre></td></tr></table></figure>\n\n<p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart.print_score()<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note:\"></a>Note:</h3><ul>\n<li>实例增加属性</li>\n</ul>\n<p>类相当于一个模板，用模板（类）定义实例后，实例还可以再加其他属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t <span class=\"hljs-comment\">#Student是类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):  <span class=\"hljs-comment\">#特殊方法“__init__”前后分别有两个下划线！！！</span><br>        <span class=\"hljs-variable language_\">self</span>.name = name<br>        <span class=\"hljs-variable language_\">self</span>.score = score<br><br>jack = Student(<span class=\"hljs-string\">&quot;Jack&quot;</span>, <span class=\"hljs-number\">95</span>)<br>jack.gender = <span class=\"hljs-string\">&#x27;man&#x27;</span> <span class=\"hljs-comment\">#此处加了一个属性</span><br><br><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;%s is a %s&quot;</span> % (jack.name, jack.gender))<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问限制-private\"><a href=\"#访问限制-private\" class=\"headerlink\" title=\"访问限制 private\"></a>访问限制 private</h2><p>外部无法访问，只能通过方法访问（私有变量）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-title class_ inherited__\">object</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):<br>        <span class=\"hljs-variable language_\">self</span>.__name = name\t\t\t\t<span class=\"hljs-comment\">#变成私有变量（private）了</span><br>        <span class=\"hljs-variable language_\">self</span>.__score = score<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_score</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (<span class=\"hljs-variable language_\">self</span>.__name, <span class=\"hljs-variable language_\">self</span>.__score))<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>\n<p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p>\n<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart._Student__name<br><span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>\n<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>\n<p>最后注意下面的这种<strong>错误写法</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart.get_name()<br><span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart.__name = <span class=\"hljs-string\">&#x27;New Name&#x27;</span> <span class=\"hljs-comment\"># 设置__name变量！</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart.__name<br><span class=\"hljs-string\">&#x27;New Name&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>bart.get_name() <span class=\"hljs-comment\"># get_name()内部返回self.__name</span><br><span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h2><p><strong>用组合的方式建立了类与组合的类之间的关系，它是一种‘有’的关系,比如教授有生日，教授教python课程</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BirthDate</span>:    <br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,year,month,day</span>):<br>        <span class=\"hljs-variable language_\">self</span>.year=year<br>        <span class=\"hljs-variable language_\">self</span>.month=month<br>        <span class=\"hljs-variable language_\">self</span>.day=day<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Couse</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,name,price,period</span>):<br>        <span class=\"hljs-variable language_\">self</span>.name=name<br>        <span class=\"hljs-variable language_\">self</span>.price=price<br>        <span class=\"hljs-variable language_\">self</span>.period=period<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,name,gender,birth,course</span>):<br>        <span class=\"hljs-variable language_\">self</span>.name=name <br>        <span class=\"hljs-variable language_\">self</span>.gender=gender<br>        <span class=\"hljs-variable language_\">self</span>.birth=birth<br>        <span class=\"hljs-variable language_\">self</span>.course=course<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">teach</span>(<span class=\"hljs-params\">self</span>): <br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;teaching&#x27;</span>)<br>p1=Teacher(<span class=\"hljs-string\">&#x27;egon&#x27;</span>,<span class=\"hljs-string\">&#x27;male&#x27;</span>, <br>            BirthDate(<span class=\"hljs-string\">&#x27;1995&#x27;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>,<span class=\"hljs-string\">&#x27;27&#x27;</span>), <br>            Couse(<span class=\"hljs-string\">&#x27;python&#x27;</span>,<span class=\"hljs-string\">&#x27;28000&#x27;</span>,<span class=\"hljs-string\">&#x27;4 months&#x27;</span>)<br>           ) <br><br><span class=\"hljs-built_in\">print</span>(p1.birth.year,p1.birth.month,p1.birth.day) <br><br><span class=\"hljs-built_in\">print</span>(p1.course.name,p1.course.price,p1.course.period)<br><span class=\"hljs-string\">&#x27;&#x27;&#x27; </span><br><span class=\"hljs-string\">运行结果: </span><br><span class=\"hljs-string\">1 27 </span><br><span class=\"hljs-string\">python 28000 4 months </span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>当类之间有显著不同，并且较小的类是较大的类所需要的组件时，用组合比较好</strong></p>\n<h2 id=\"继承-多态\"><a href=\"#继承-多态\" class=\"headerlink\" title=\"继承 多态\"></a>继承 多态</h2><ul>\n<li>抽象：抽象即抽取类似或者说比较像的部分。是一个从具题到抽象的过程。</li>\n<li>继承：子类继承了父类的方法和属性</li>\n<li>派生：子类在父类方法和属性的基础上产生了新的方法和属性</li>\n</ul>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><ul>\n<li>建立一个新类（子类 Subclass）可以copy一份原来类（父类 基类或超类 Base class、Super class）的全部功能（方法、变量 等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t\t<span class=\"hljs-comment\">#父类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Animal is running...&#x27;</span>)<br>        <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\t\t\t<span class=\"hljs-comment\">#子类</span><br>    <span class=\"hljs-keyword\">pass</span><br><br><span class=\"hljs-comment\">#运行结果</span><br>Animal <span class=\"hljs-keyword\">is</span> running...\t\t<span class=\"hljs-comment\">#子类有了父类的方法</span><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t\t<span class=\"hljs-comment\">#父类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Animal is running...&#x27;</span>)<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\t\t\t<span class=\"hljs-comment\">#子类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Dog is running...&#x27;</span>)<br><br><span class=\"hljs-comment\">#运行结果</span><br>Dog <span class=\"hljs-keyword\">is</span> running...\t\t\t<span class=\"hljs-comment\">#子类覆盖了父类的方法</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p><strong>就是一个集合的概念，子类包含了父类，子类比父类范围更大，这种好处是通用性更强</strong></p>\n<ul>\n<li>子类继承了父类的类型，子类既是  <strong>子类类型</strong>  也是  <strong>父类类型</strong>  </li>\n<li>传入类型设置为  父类   可以有很好的通用性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\t\t<span class=\"hljs-comment\">#父类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Animal is running...&#x27;</span>)<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\t\t\t<span class=\"hljs-comment\">#子类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Dog is running...&#x27;</span>)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_twice</span>(<span class=\"hljs-params\">animal</span>):\t\t<span class=\"hljs-comment\">#因为传入的是 父类 所以子类父类都可以用    有很好通用性</span><br>    animal.run()<br>    animal.run()<br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Animal())<br>Animal <span class=\"hljs-keyword\">is</span> running...<br>Animal <span class=\"hljs-keyword\">is</span> running...<br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Dog())<br>Dog <span class=\"hljs-keyword\">is</span> running...<br>Dog <span class=\"hljs-keyword\">is</span> running...<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">a = <span class=\"hljs-built_in\">list</span>() <span class=\"hljs-comment\"># a是list类型</span><br>b = Animal() <span class=\"hljs-comment\"># b是Animal类型</span><br>c = Dog() <span class=\"hljs-comment\"># c是Dog类型</span><br></code></pre></td></tr></table></figure>\n\n<p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(a, <span class=\"hljs-built_in\">list</span>)<br><span class=\"hljs-literal\">True</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(b, Animal)<br><span class=\"hljs-literal\">True</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(c, Dog)<br><span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这3种类型。</p>\n<p>但是等等，试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(c, Animal)<br><span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p>\n<p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p>\n<p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>b = Animal()<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(b, Dog)<br><span class=\"hljs-literal\">False</span><br></code></pre></td></tr></table></figure>\n\n<p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p>\n<p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_twice</span>(<span class=\"hljs-params\">animal</span>):<br>    animal.run()<br>    animal.run()<br></code></pre></td></tr></table></figure>\n\n<p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Animal())<br>Animal <span class=\"hljs-keyword\">is</span> running...<br>Animal <span class=\"hljs-keyword\">is</span> running...<br></code></pre></td></tr></table></figure>\n\n<p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Dog())<br>Dog <span class=\"hljs-keyword\">is</span> running...<br>Dog <span class=\"hljs-keyword\">is</span> running...<br></code></pre></td></tr></table></figure>\n\n<p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Cat())<br>Cat <span class=\"hljs-keyword\">is</span> running...<br>Cat <span class=\"hljs-keyword\">is</span> running...<br></code></pre></td></tr></table></figure>\n\n<p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Tortoise</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Tortoise is running slowly...&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>run_twice(Tortoise())<br>Tortoise <span class=\"hljs-keyword\">is</span> running slowly...<br>Tortoise <span class=\"hljs-keyword\">is</span> running slowly...<br></code></pre></td></tr></table></figure>\n\n<p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p>\n<p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p>\n<p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p>\n<p>对扩展开放：允许新增<code>Animal</code>子类；</p>\n<p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p>\n<p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ascii\">                ┌───────────────┐<br>                │    object     │<br>                └───────────────┘<br>                        │<br>           ┌────────────┴────────────┐<br>           │                         │<br>           ▼                         ▼<br>    ┌─────────────┐           ┌─────────────┐<br>    │   Animal    │           │    Plant    │<br>    └─────────────┘           └─────────────┘<br>           │                         │<br>     ┌─────┴──────┐            ┌─────┴──────┐<br>     │            │            │            │<br>     ▼            ▼            ▼            ▼<br>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐<br>│   Dog   │  │   Cat   │  │  Tree   │  │ Flower  │<br>└─────────┘  └─────────┘  └─────────┘  └─────────┘<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"静态语言-vs-动态语言\"><a href=\"#静态语言-vs-动态语言\" class=\"headerlink\" title=\"静态语言 vs 动态语言\"></a>静态语言 vs 动态语言</h4><p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p>\n<p>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Timer</span>(object):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">self</span></span>):<br>        print(<span class=\"hljs-string\">&#x27;Start...&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>\n<p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p><strong>抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化</strong></p>\n<p><em>比如我们有香蕉的类，有苹果的类，有桃子的类，从这些类抽取相同的内容就是水果这个抽象的类，你吃水果时，要么是吃一个具体的香蕉，要么是吃一个具体的桃子。。。。。。你永远无法吃到一个叫做水果的东西</em></p>\n<p><em>从实现角度来看，抽象类与普通类的不同之处在于：抽象类中有抽象方法，该类不能被实例化，只能被继承，且子类必须实现抽象方法。这一点与接口有点类似，但其实是不同的，即将揭晓答案</em></p>\n<h2 id=\"经典类和新式类\"><a href=\"#经典类和新式类\" class=\"headerlink\" title=\"经典类和新式类\"></a>经典类和新式类</h2><p><img src=\"/2020/297a89d9/1610094679745.jpg\" alt=\"1610094679745\"></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://www.oikiou.top/2019/b0d7d162/",
            "url": "https://www.oikiou.top/2019/b0d7d162/",
            "title": "C语言高质量编程",
            "date_published": "2019-10-28T02:30:00.000Z",
            "content_html": "<h1 id=\"C语言高质量编程\"><a href=\"#C语言高质量编程\" class=\"headerlink\" title=\"C语言高质量编程\"></a>C语言高质量编程</h1><h1 id=\"1-2-头文件的结构\"><a href=\"#1-2-头文件的结构\" class=\"headerlink\" title=\"1.2 头文件的结构\"></a>1.2 头文件的结构</h1><ol>\n<li>头文件开头处的版权和版本声明（参见示例1-1）。</li>\n<li>预处理块。</li>\n<li>函数和类结构声明等。</li>\n</ol>\n<p>假设头文件名称为 <code>graphics.h</code>，头文件的结构参见下面。</p>\n<ul>\n<li>【规则1-2-1】为了防止头文件被重复引用，应当用<code>ifndef/define/endif</code> 结构产生预处理块。</li>\n<li>【规则 1-2-2】用<code>#include &lt;filename.h&gt;</code> 格式来引用标准库的头文件（编译器将从标准库目录开始搜索）。</li>\n<li>【规则1-2-3】用<code>#include “filename.h”</code> 格式来引用非标准库的头文件（编译器将从用户的工作目录开始搜索）。</li>\n<li>【建议1-2-1】头文件中只存放“声明”而不存放“定义”在 C++ 语法中，类的成员函数可以在声明的同时被定义，并且自动成为内联函数。这虽然会带来书写上的方便，但却造成了风格不一致，弊大于利。建议将成员函数的定义与声明分开，不论该函数体有多么小。</li>\n<li>【建议1-2-2】不提倡使用全局变量，尽量不要在头文件中出现象extern int value 这类声明。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> GRAPHICS_H <span class=\"hljs-comment\">// 防止graphics.h 被重复引用</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> GRAPHICS_H</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span> <span class=\"hljs-comment\">// 引用标准库的头文件</span></span><br>⋯<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> “myheader.h” <span class=\"hljs-comment\">// 引用非标准库的头文件</span></span><br>⋯<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Function1</span><span class=\"hljs-params\">(⋯)</span>; <span class=\"hljs-comment\">// 全局函数声明</span><br>⋯<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span> // 类结构声明</span><br><span class=\"hljs-class\">&#123;</span><br>⋯<br>&#125;;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"1-3-定义文件的结构\"><a href=\"#1-3-定义文件的结构\" class=\"headerlink\" title=\"1.3 定义文件的结构\"></a>1.3 定义文件的结构</h1><p>定义文件有三部分内容：</p>\n<ol>\n<li>定义文件开头处的版权和版本声明（参见示例1-1）。</li>\n<li>对一些头文件的引用。</li>\n<li>程序的实现体（包括数据和代码）。<br>假设定义文件的名称为 graphics.cpp，定义文件的结构参见下面。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> “graphics.h” <span class=\"hljs-comment\">// 引用头文件</span></span><br>⋯<br><span class=\"hljs-comment\">// 全局函数的实现体</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Function1</span><span class=\"hljs-params\">(⋯)</span><br>&#123;<br>⋯<br>&#125;<br><span class=\"hljs-comment\">// 类成员函数的实现体</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Box::Draw</span><span class=\"hljs-params\">(⋯)</span><br>&#123;<br>⋯<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-1-空行\"><a href=\"#2-1-空行\" class=\"headerlink\" title=\"2.1 空行\"></a>2.1 空行</h1><p>空行起着分隔程序段落的作用。空行得体（不过多也不过少）将使程序的布局更加清晰。空行不会浪费内存，虽然打印含有空行的程序是会多消耗一些纸张，但是值得。所以不要舍不得用空行。</p>\n<ul>\n<li>【规则 2-1-1】在每个类声明之后、每个函数定义结束之后都要加空行。参见示例2-1（a）</li>\n<li>【规则2-1-2】在一个函数体内，逻揖上密切相关的语句之间不加空行，其它地方应加空行分隔</li>\n</ul>\n<h1 id=\"2-2-代码行\"><a href=\"#2-2-代码行\" class=\"headerlink\" title=\"2.2 代码行\"></a>2.2 代码行</h1><ul>\n<li>【规则2-2-1】<strong>一行代码只做一件事情</strong>，<strong>如只定义一个变量</strong>，或只写一条语句。这样的代码容易阅读，并且方便于写注释。</li>\n<li>【规则2-2-2】if、for、while、do 等语句自占一行，执行语句不得紧跟其后。**不论执行语句有多少都要加{}**。这样可以防止书写失误。</li>\n</ul>\n<h1 id=\"2-3-代码行内的空格\"><a href=\"#2-3-代码行内的空格\" class=\"headerlink\" title=\"2.3 代码行内的空格\"></a>2.3 代码行内的空格</h1><ul>\n<li>【规则2-3-1】关键字之后要留空格。象const、virtual、inline、case 等关键字之后至少要留一个空格，否则无法辨析关键字。象if、for、while 等关键字之后应留一个空格再跟左括号‘（’，以突出关键字。</li>\n<li>【规则2-3-2】函数名之后不要留空格，紧跟左括号‘（’，以与关键字区别。</li>\n<li><strong>【规则2-3-3】</strong>‘（’向后紧跟，‘）’、‘，’、‘;’ 向前紧跟，<strong>紧跟处不留空格。</strong></li>\n<li><strong>【规则2-3-4】</strong>‘，’之后要留空格，如<code>Function(x,  y,  z)</code>。如果‘;’不是一行的结束符号，其后要留空格，如<code>for (initialization;  condition;  update)</code>。</li>\n<li>【规则2-3-5】赋值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符，如“&#x3D;”、“+&#x3D;” “&gt;&#x3D;”、“&lt;&#x3D;”、“+”、“*”、“%”、“&amp;&amp;”、“||”、“&lt;&lt;”,“^”等二元操作符的前后应当加空格。</li>\n<li>【规则2-3-6】一元操作符如“!”、“~”、“++”、“–”、“&amp;”（地址运算符）等前后不加空格。</li>\n<li>【规则2-3-7】xu“［］”、“.”、“-&gt;”这类操作符前后不加空格。</li>\n<li>【建议2-3-1】对于表达式比较长的for 语句和if 语句，为了紧凑起见可以适当地去掉一些空格，如<code>for (i=0; i&lt;10; i++)和if ((a&lt;=b) &amp;&amp; (c&lt;=d))</code></li>\n</ul>\n<h1 id=\"2-4-对齐\"><a href=\"#2-4-对齐\" class=\"headerlink\" title=\"2.4 对齐\"></a>2.4 对齐</h1><ul>\n<li>【规则2-4-1】程序的分界符‘{’和‘}’应独占一行并且位于同一列，同时与引用它们的语句左对齐。</li>\n<li>【规则2-4-2】{ }之内的代码块在‘{’右边数格处左对齐。</li>\n</ul>\n<h1 id=\"2-5-长行拆分\"><a href=\"#2-5-长行拆分\" class=\"headerlink\" title=\"2.5 长行拆分\"></a>2.5 长行拆分</h1><ul>\n<li>【规则2-5-1】代码行最大长度宜控制在70 至80 个字符以内。代码行不要过长，否则眼睛看不过来，也不便于打印。</li>\n<li>【规则2-5-2】长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首（以便突出操作符）。拆分出的新行要进行适当的缩进，使排版整齐，语句可读。</li>\n</ul>\n<h1 id=\"2-6-修饰符的位置\"><a href=\"#2-6-修饰符的位置\" class=\"headerlink\" title=\"2.6 修饰符的位置\"></a>2.6 修饰符的位置</h1><p>修饰符 * 和＆ 应该靠近数据类型还是该靠近变量名，是个有争议的活题。若将修饰符 * 靠近数据类型，例如：int*  x; 从语义上讲此写法比较直观，即x是int 类型的指针。上述写法的弊端是容易引起误解，例如：int*  x, y; 此处y 容易被误解为指针变量。虽然将x 和y 分行定义可以避免误解，但并不是人人都愿意这样做。</p>\n<ul>\n<li>【规则2-6-1】应当将修饰符 * 和＆ 紧靠变量名</li>\n</ul>\n<h1 id=\"2-7-注释\"><a href=\"#2-7-注释\" class=\"headerlink\" title=\"2.7 注释\"></a>2.7 注释</h1><p>C 语言的注释符为“&#x2F;<em>…</em>&#x2F;”。C++语言中，程序块的注释常采用“&#x2F;<em>…</em>&#x2F;”，行注释一般采用“&#x2F;&#x2F;…”。注释通常用于：<br>（1）版本、版权声明；<br>（2）函数接口说明；<br>（3）重要的代码行或段落提示。<br>虽然注释有助于理解代码，但注意不可过多地使用注释。<br>【规则2-7-1】注释是对代码的“提示”，而不是文档。程序中的注释不可喧宾夺主，注释太多了会让人眼花缭乱。注释的花样要少。<br>【规则2-7-2】如果代码本来就是清楚的，则不必加注释。否则多此一举，令人厌烦。例如i++; &#x2F;&#x2F; i 加 1，多余的注释<br>【规则2-7-3】边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。<br>【规则2-7-4】注释应当准确、易懂，防止注释有二义性。错误的注释不但无益反而有害。<br>【规则2-7-5】尽量避免在注释中使用缩写，特别是不常用缩写。<br>【规则2-7-6】注释的位置应与被描述的代码相邻，可以放在代码的上方或右方，不可放在下方。<br><strong>【规则2-7-8】</strong>当代码比较长，特别是有多重嵌套时，应当在一些段落的结束处加注释，便于阅读。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">* 函数介绍：</span><br><span class=\"hljs-comment\">* 输入参数：</span><br><span class=\"hljs-comment\">* 输出参数：</span><br><span class=\"hljs-comment\">* 返回值：</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Function</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> x, <span class=\"hljs-type\">float</span> y, <span class=\"hljs-type\">float</span> z)</span><br>&#123;<br>    …<br>&#125;<br><br><span class=\"hljs-keyword\">if</span> (…)<br>&#123;<br>    …<br>    <span class=\"hljs-keyword\">while</span> (…)<br>    &#123;<br>        …<br>    &#125; <span class=\"hljs-comment\">// end of while</span><br>    …<br>&#125; <span class=\"hljs-comment\">// end of if</span><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-简单的单片机应用程序命名规则\"><a href=\"#3-2-简单的单片机应用程序命名规则\" class=\"headerlink\" title=\"3.2 简单的单片机应用程序命名规则\"></a>3.2 简单的单片机应用程序命名规则</h1><ol>\n<li>函数名用大写字母开头的单词组合而成。<br>例如：<br>void Draw(void); &#x2F;&#x2F; 函数名<br>void Setvalue(int value); &#x2F;&#x2F; 函数名</li>\n<li>变量和参数用小写字母开头的单词组合而成，float 变量名前加 f，int 变量名前加 i，bit变量前加 b 。（char 不加）<br>例如：<br>bit b_tirm;<br>int i_time;<br>float f_time;<br>char time;</li>\n<li>常量、宏定义（DF_xxx）全用大写的字母，用下划线分割单词。<br>例如：<br>code char MAX &#x3D; 100;<br>#define DF_MAX 100</li>\n</ol>\n<h1 id=\"4-3-if-语句\"><a href=\"#4-3-if-语句\" class=\"headerlink\" title=\"4.3 if 语句\"></a>4.3 if 语句</h1><h2 id=\"4-3-1-布尔变量与零值比较\"><a href=\"#4-3-1-布尔变量与零值比较\" class=\"headerlink\" title=\"4.3.1 布尔变量与零值比较\"></a>4.3.1 布尔变量与零值比较</h2><p>【规则4-3-1】不可将布尔变量直接与TRUE、FALSE 或者1、0 进行比较。根据布尔类型的语义，零值为“假”（记为FALSE），任何非零值都是“真”（记为TRUE）。TRUE 的值究竟是什么并没有统一的标准。例如Visual C++ 将TRUE 定义为</p>\n<p>1，而Visual Basic 则将TRUE 定义为-1。</p>\n<p>假设布尔变量名字为flag，它与零值比较的标准if 语句如下：</p>\n<p>if (flag) &#x2F;&#x2F; 表示flag 为真</p>\n<p>if (!flag) &#x2F;&#x2F; 表示flag 为假</p>\n<p>其它的用法都属于不良风格，例如：<br>if (flag &#x3D;&#x3D; TRUE)<br>if (flag &#x3D;&#x3D; 1 )<br>if (flag &#x3D;&#x3D; FALSE)</p>\n<p>if (flag &#x3D;&#x3D; 0)</p>\n<h2 id=\"4-3-2-整型变量与零值比较\"><a href=\"#4-3-2-整型变量与零值比较\" class=\"headerlink\" title=\"4.3.2 整型变量与零值比较\"></a>4.3.2 整型变量与零值比较</h2><p>【规则4-3-2】应当将整型变量用“&#x3D;&#x3D;”或“！&#x3D;”直接与0 比较。<br>假设整型变量的名字为value，它与零值比较的标准if 语句如下：<br>if (value &#x3D;&#x3D; 0)<br>if (value !&#x3D; 0)<br>不可模仿布尔变量的风格而写成<br>if (value) &#x2F;&#x2F; 会让人误解 value 是布尔变量</p>\n<p>if (!value)</p>\n<h2 id=\"4-3-3-浮点变量与零值比较\"><a href=\"#4-3-3-浮点变量与零值比较\" class=\"headerlink\" title=\"4.3.3 浮点变量与零值比较\"></a>4.3.3 浮点变量与零值比较</h2><p>【规则4-3-3】不可将浮点变量用“&#x3D;&#x3D;”或“！&#x3D;”与任何数字比较。千万要留意，无论是float 还是double 类型的变量，都有精度限制。所以一定要避免将浮点变量用“&#x3D;&#x3D;”或“！&#x3D;”与数字比较，应该设法转化成“&gt;&#x3D;”或“&lt;&#x3D;”形式。</p>\n<p>假设浮点变量的名字为x，应当将</p>\n<p>if (x &#x3D;&#x3D; 0.0) &#x2F;&#x2F; 隐含错误的比较<br>转化为<br>if ((x&gt;&#x3D;-EPSINON) &amp;&amp; (x&lt;&#x3D;EPSINON))</p>\n<p>其中EPSINON 是允许的误差（即精度）。</p>\n<h3 id=\"4-3-4-指针变量与零值比较\"><a href=\"#4-3-4-指针变量与零值比较\" class=\"headerlink\" title=\"4.3.4 指针变量与零值比较\"></a>4.3.4 指针变量与零值比较</h3><p>【规则4-3-4】应当将指针变量用“&#x3D;&#x3D;”或“！&#x3D;”与NULL 比较。指针变量的零值是“空”（记为NULL）。尽管NULL 的值与0 相同，但是两者意义不同。假设指针变量的名字为p，它与零值比较的标准if 语句如下：</p>\n<p>if (p &#x3D;&#x3D; NULL) &#x2F;&#x2F; p 与NULL 显式比较，强调p 是指针变量</p>\n<p>if (p !&#x3D; NULL)<br>不要写成<br>if (p &#x3D;&#x3D; 0) &#x2F;&#x2F; 容易让人误解p 是整型变量<br>if (p !&#x3D; 0)<br>或者<br>if (p) &#x2F;&#x2F; 容易让人误解p 是布尔变量</p>\n<p>if (!p)</p>\n<h3 id=\"4-3-5-对if-语句的补充说明\"><a href=\"#4-3-5-对if-语句的补充说明\" class=\"headerlink\" title=\"4.3.5 对if 语句的补充说明\"></a>4.3.5 对if 语句的补充说明</h3><p>有时候我们可能会看到 if (NULL &#x3D;&#x3D; p) 这样古怪的格式。不是程序写错了，是程序员为了防止将 if (p &#x3D;&#x3D; NULL) 误写成 if (p &#x3D; NULL)，而有意把p 和NULL 颠倒。编译器认为 if (p &#x3D; NULL) 是合法的，但是会指出 if (NULL &#x3D; p)是错误的，因为NULL不能被赋值。</p>\n<h1 id=\"4-4-循环语句的效率\"><a href=\"#4-4-循环语句的效率\" class=\"headerlink\" title=\"4.4 循环语句的效率\"></a>4.4 循环语句的效率</h1><p>【建议4-4-1】在多重循环中，如果有可能，应当将最长的循环放在最内层，最短的循环放在最外层，以减少CPU 跨切循环层的次数。例如示例4-4(b)的效率比示例4-4(a)的高。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 示例 4-4(a) 低效率：长循环在最外层 </span><br><span class=\"hljs-keyword\">for</span> (row=<span class=\"hljs-number\">0</span>; row&lt;<span class=\"hljs-number\">100</span>; row++)<br>&#123;<br>    <span class=\"hljs-keyword\">for</span> ( col=<span class=\"hljs-number\">0</span>; col&lt;<span class=\"hljs-number\">5</span>; col++ )<br>    &#123;<br>        sum = sum + a[row][col];<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 示例4-4(b) 高效率：长循环在最内层</span><br><span class=\"hljs-keyword\">for</span> (col=<span class=\"hljs-number\">0</span>; col&lt;<span class=\"hljs-number\">5</span>; col++ )<br>&#123;<br>    <span class=\"hljs-keyword\">for</span> (row=<span class=\"hljs-number\">0</span>; row&lt;<span class=\"hljs-number\">100</span>; row++)<br>    &#123;<br>        sum = sum + a[row][col];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>【建议4-4-2】如果循环体内存在逻辑判断，并且循环次数很大，宜将逻辑判断移到循环体的外面。示例4-4(c)的程序比示例4-4(d)多执行了N-1 次逻辑判断。并且由于前者老要进行逻辑判断，打断了循环“流水线”作业，使得编译器不能对循环进行优化处理，降低了效率。如果N 非常大，最好采用示例4-4(d)的写法，可以提高效率。如果N 非常小，两者效率差别并不明显，采用示例4-4(c)的写法比较好，因为程序更加简洁。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 效率低但程序简洁</span><br><span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;N; i++)<br>&#123;<br>    <span class=\"hljs-keyword\">if</span> (condition)<br>        DoSomething();<br>    <span class=\"hljs-keyword\">else</span><br>        DoOtherthing();<br>&#125;<br><span class=\"hljs-comment\">// 效率高但程序不简洁</span><br><span class=\"hljs-keyword\">if</span> (condition)<br>&#123;<br>    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;N; i++)<br>        DoSomething();<br>&#125;<br><span class=\"hljs-keyword\">else</span><br>&#123;<br>    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;N; i++)<br>        DoOtherthing();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-5-for-语句的循环控制变量\"><a href=\"#4-5-for-语句的循环控制变量\" class=\"headerlink\" title=\"4.5 for 语句的循环控制变量\"></a>4.5 for 语句的循环控制变量</h1><p>【规则4-5-1】不可在for 循环体内修改循环变量，防止for 循环失去控制。<br>【建议4-5-1】建议for 语句的循环控制变量的取值采用“半开半闭区间”写法。<br>示例 4-5(a)中的x 值属于半开半闭区间“0 &#x3D;&lt; x &lt; N”，起点到终点的间隔为N，循环次数为N。<br>示例 4-5(b)中的x 值属于闭区间“0 &#x3D;&lt; x &lt;&#x3D; N-1”，起点到终点的间隔为N-1，循环次数为N。</p>\n<p>相比之下，示例4-5(a)的写法更加直观，尽管两者的功能是相同的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 循环变量属于半开半闭区间 </span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">0</span>; x&lt;N; x++)<br>&#123;<br>    ⋯<br>&#125;<br><span class=\"hljs-comment\">// 循环变量属于闭区间</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">0</span>; x&lt;=N<span class=\"hljs-number\">-1</span>; x++)<br>&#123;<br>    ⋯<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-6-switch-语句\"><a href=\"#4-6-switch-语句\" class=\"headerlink\" title=\"4.6 switch 语句\"></a>4.6 switch 语句</h1><p>【规则4-6-1】每个case 语句的结尾不要忘了加break，否则将导致多个分支重叠（除非有意使多个分支重叠）。<br>【规则4-6-2】不要忘记最后那个default 分支。即使程序真的不需要default 处理，也应该保留语句 default : break; 这样做并非多此一举，而是为了防止别人误以为你忘了default 处理。</p>\n<h1 id=\"4-7-goto-语句\"><a href=\"#4-7-goto-语句\" class=\"headerlink\" title=\"4.7 goto 语句\"></a>4.7 goto 语句</h1><p>自从提倡结构化设计以来，goto 就成了有争议的语句。首先，由于goto 语句可以灵活跳转，如果不加限制，它的确会破坏结构化设计风格。其次，goto 语句经常带来错误或隐患。它可能跳过了某些对象的构造、变量的初始化、重要的计算等语句，例如：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\">goto <span class=\"hljs-keyword\">state</span>;<br>String s1, s2; // 被goto 跳过<br>int sum = <span class=\"hljs-number\">0</span>; // 被goto 跳过<br>⋯<br><span class=\"hljs-keyword\">state</span>:<br>⋯<br></code></pre></td></tr></table></figure>\n\n<p>所以我们主张少用、慎用goto 语句，而不是禁用。</p>\n<h1 id=\"5-1-为什么需要常量\"><a href=\"#5-1-为什么需要常量\" class=\"headerlink\" title=\"5.1 为什么需要常量\"></a>5.1 为什么需要常量</h1><p>如果不使用常量，直接在程序中填写数字或字符串，将会有什么麻烦？<br>（1） 程序的可读性（可理解性）变差。程序员自己会忘记那些数字或字符串是什么意思，用户则更加不知它们从何处来、表示什么。<br>（2） 在程序的很多地方输入同样的数字或字符串，难保不发生书写错误。</p>\n<p>（3） 如果要修改数字或字符串，则会在很多地方改动，既麻烦又容易出错。</p>\n<p>【规则5-1-1】尽量使用含义直观的常量来表示那些将在程序中多次出现的数字或字符串。</p>\n<h1 id=\"5-2-const-与-define-的比较\"><a href=\"#5-2-const-与-define-的比较\" class=\"headerlink\" title=\"5.2 const 与 #define 的比较\"></a>5.2 const 与 #define 的比较</h1><p>C++ 语言可以用const 来定义常量，也可以用 #define 来定义常量。但是前者比后者有更多的优点：<br>（1） const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误（边际效应）。</p>\n<p>（2） 有些集成化的调试工具可以对 const 常量进行调试，但是不能对宏常量进行调试。</p>\n<p>【规则5-2-1】在C++ 程序中只使用const 常量而不使用宏常量，即const 常量完全取代宏常量</p>\n<h1 id=\"5-3-常量定义规则\"><a href=\"#5-3-常量定义规则\" class=\"headerlink\" title=\"5.3 常量定义规则\"></a>5.3 常量定义规则</h1>",
            "tags": [
                "c"
            ]
        }
    ]
}