{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"algorithm\" category",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2019/14ee3806/",
            "url": "https://www.oikiou.top/2019/14ee3806/",
            "title": "PID算法",
            "date_published": "2019-08-21T14:57:15.000Z",
            "content_html": "<h2 id=\"PID算法笔记\"><a href=\"#PID算法笔记\" class=\"headerlink\" title=\"PID算法笔记\"></a>PID算法笔记</h2><p>位式控制算法，只考虑当前值，控制量有惯性，比较僵硬</p>\n<h3 id=\"P–比例算法\"><a href=\"#P–比例算法\" class=\"headerlink\" title=\"P–比例算法\"></a>P–比例算法</h3><ul>\n<li>只考虑现在的误差</li>\n</ul>\n<p>E<sub>k</sub> &#x3D; S<sub>V</sub> - X<sub>k</sub>(E<sub>k</sub>差值  S<sub>v</sub>期望值  X<sub>k</sub>当前值)</p>\n<p>单纯的P控制算法：P<sub>out</sub>&#x3D;K<sub>p</sub> * E<sub>k</sub> ( P<sub>out</sub>输出的控制量  K<sub>p</sub>控制量  E<sub>k</sub>差值)</p>\n<p><strong>单纯的P控制算法当前误差等于零后不控制</strong></p>\n<p>P<sub>out</sub>&#x3D;K<sub>p</sub> * E<sub>k</sub>+OUT<sub>0</sub>(OUT<sub>0</sub>是一个常数维持静态误差)</p>\n<hr>\n<h3 id=\"I–积分算法\"><a href=\"#I–积分算法\" class=\"headerlink\" title=\"I–积分算法\"></a>I–积分算法</h3><ul>\n<li>根据历史误差控制</li>\n</ul>\n<p>E<sub>1</sub>, E<sub>2</sub>, E<sub>3</sub>, E<sub>4</sub>, E<sub>5</sub>, ……….. E<sub>k</sub>  (E<sub>k</sub>差值)</p>\n<p>S<sub>k</sub>&#x3D;E<sub>1</sub>+ E<sub>2</sub>+ E<sub>3</sub>+ E<sub>4</sub>+ E<sub>5</sub>+ ……….. +E<sub>k</sub>    (S<sub>k</sub> 误差和即积分)</p>\n<p>I<sub>out</sub>&#x3D;K<sub>p</sub> * S<sub>k</sub> (I<sub>out</sub>输出的控制量  K<sub>p</sub>控制量)</p>\n<p><strong>单纯的I控制算法历史误差等于零后不控制（当前误差可能很大）</strong></p>\n<p>I<sub>out</sub>&#x3D;K<sub>p</sub> * S<sub>k</sub> +OUT<sub>0</sub>(OUT<sub>0</sub>是一个常数维持静态误差)</p>\n<hr>\n<h3 id=\"D–微分算法\"><a href=\"#D–微分算法\" class=\"headerlink\" title=\"D–微分算法\"></a>D–微分算法</h3><ul>\n<li>考察最近变化趋势进行控制</li>\n</ul>\n<p>D<sub>k</sub>&#x3D;E<sub>k</sub> - E<sub>k-1</sub></p>\n<p>D<sub>out</sub>&#x3D;K<sub>p</sub> * D<sub>k</sub> </p>\n<hr>\n<hr>\n<hr>\n<h2 id=\"Proportion-比例\"><a href=\"#Proportion-比例\" class=\"headerlink\" title=\"Proportion (比例)\"></a>Proportion (比例)</h2><p>误差越大，反馈越大</p>\n<p>过小时系统反应很慢，过大时会产生振荡</p>\n<ul>\n<li>开环增益越大，稳态误差减小（无法消除，属于有差调节）</li>\n<li>过渡时间缩短</li>\n<li>稳定程度变差</li>\n</ul>\n<h2 id=\"Integral（积分）\"><a href=\"#Integral（积分）\" class=\"headerlink\" title=\"Integral（积分）\"></a>Integral（积分）</h2><p>误差持续越久，反馈越大</p>\n<p>第一次到达目标会产生过冲，超调</p>\n<p>积分求位置误差</p>\n<ul>\n<li>消除系统稳态误差（能够消除静态误差，属于无差调节）</li>\n<li>稳定程度变差</li>\n</ul>\n<h2 id=\"Differential（微分）\"><a href=\"#Differential（微分）\" class=\"headerlink\" title=\"Differential（微分）\"></a>Differential（微分）</h2><p>误差变化率越大，反馈越大</p>\n<p>根据以前的变化率预测未来的变化率</p>\n<p>过大时会拖慢系统响应速度</p>\n<p>提高响应速度，减少震荡</p>\n<ul>\n<li>减小超调量</li>\n<li>减小调节时间（与P控制相比较而言）</li>\n<li>增强系统稳定性</li>\n<li>增加系统阻尼程度</li>\n</ul>\n<h2 id=\"PID总结\"><a href=\"#PID总结\" class=\"headerlink\" title=\"PID总结\"></a>PID总结</h2><ul>\n<li><strong>稳定性</strong>（P和I降低系统稳定性，D提高系统稳定性）：在平衡状态下，系统受到某个干扰后，经过一段时间其被控量可以达到某一稳定状态；</li>\n<li><strong>准确性</strong>（P和I提高稳态精度，D无作用）：系统处于稳态时，其稳态误差；</li>\n<li><strong>快速性</strong>（P和D提高响应速度，I降低响应速度）：系统对动态响应的要求。一般由过渡时间的长短来衡量。</li>\n</ul>\n",
            "tags": [
                "pid"
            ]
        },
        {
            "id": "https://www.oikiou.top/2019/79666db/",
            "url": "https://www.oikiou.top/2019/79666db/",
            "title": "数据结构",
            "date_published": "2019-08-21T14:57:15.000Z",
            "content_html": "<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"C语言打印运行时间\"><a href=\"#C语言打印运行时间\" class=\"headerlink\" title=\"C语言打印运行时间\"></a>C语言打印运行时间</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;time.h&gt;</span></span><br><span class=\"hljs-type\">time_t</span> start, stop;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    start = clock();<span class=\"hljs-comment\">//滴答时钟</span><br>    <span class=\"hljs-comment\">//运行的函数</span><br>    stop = clock();<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lf----%lf\\r\\n&quot;</span>, (<span class=\"hljs-type\">double</span>)(stop-start),(<span class=\"hljs-type\">double</span>)(stop-start)/CLK_TCK);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"尾递归可以优化成For\"><a href=\"#尾递归可以优化成For\" class=\"headerlink\" title=\"尾递归可以优化成For\"></a>尾递归可以优化成For</h2><p>尾递归：程序返回时才发生递归。</p>\n<h1 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h1><h2 id=\"1-3-应用实例：最大子列和问题\"><a href=\"#1-3-应用实例：最大子列和问题\" class=\"headerlink\" title=\"1.3 应用实例：最大子列和问题\"></a>1.3 应用实例：最大子列和问题</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Max3</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> A, <span class=\"hljs-type\">int</span> B, <span class=\"hljs-type\">int</span> C )</span><br>&#123; <span class=\"hljs-comment\">/* 返回3个整数中的最大值 */</span><br>    <span class=\"hljs-keyword\">return</span> A &gt; B ? A &gt; C ? A : C : B &gt; C ? B : C;<br>&#125;<br> <br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">DivideAndConquer</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> List[], <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right )</span><br>&#123; <span class=\"hljs-comment\">/* 分治法求List[left]到List[right]的最大子列和 */</span><br>    <span class=\"hljs-type\">int</span> MaxLeftSum, MaxRightSum; <span class=\"hljs-comment\">/* 存放左右子问题的解 */</span><br>    <span class=\"hljs-type\">int</span> MaxLeftBorderSum, MaxRightBorderSum; <span class=\"hljs-comment\">/*存放跨分界线的结果*/</span><br> <br>    <span class=\"hljs-type\">int</span> LeftBorderSum, RightBorderSum;<br>    <span class=\"hljs-type\">int</span> center, i;<br> <br>    <span class=\"hljs-keyword\">if</span>( left == right )  &#123; <span class=\"hljs-comment\">/* 递归的终止条件，子列只有1个数字 */</span><br>        <span class=\"hljs-keyword\">if</span>( List[left] &gt; <span class=\"hljs-number\">0</span> )  <span class=\"hljs-keyword\">return</span> List[left];<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br> <br>    <span class=\"hljs-comment\">/* 下面是&quot;分&quot;的过程 */</span><br>    center = ( left + right ) / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">/* 找到中分点 */</span><br>    <span class=\"hljs-comment\">/* 递归求得两边子列的最大和 */</span><br>    MaxLeftSum = DivideAndConquer( List, left, center );<br>    MaxRightSum = DivideAndConquer( List, center+<span class=\"hljs-number\">1</span>, right );<br> <br>    <span class=\"hljs-comment\">/* 下面求跨分界线的最大子列和 */</span><br>    MaxLeftBorderSum = <span class=\"hljs-number\">0</span>; LeftBorderSum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>( i=center; i&gt;=left; i-- ) &#123; <span class=\"hljs-comment\">/* 从中线向左扫描 */</span><br>        LeftBorderSum += List[i];<br>        <span class=\"hljs-keyword\">if</span>( LeftBorderSum &gt; MaxLeftBorderSum )<br>            MaxLeftBorderSum = LeftBorderSum;<br>    &#125; <span class=\"hljs-comment\">/* 左边扫描结束 */</span><br> <br>    MaxRightBorderSum = <span class=\"hljs-number\">0</span>; RightBorderSum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>( i=center+<span class=\"hljs-number\">1</span>; i&lt;=right; i++ ) &#123; <span class=\"hljs-comment\">/* 从中线向右扫描 */</span><br>        RightBorderSum += List[i];<br>        <span class=\"hljs-keyword\">if</span>( RightBorderSum &gt; MaxRightBorderSum )<br>            MaxRightBorderSum = RightBorderSum;<br>    &#125; <span class=\"hljs-comment\">/* 右边扫描结束 */</span><br> <br>    <span class=\"hljs-comment\">/* 下面返回&quot;治&quot;的结果 */</span><br>    <span class=\"hljs-keyword\">return</span> Max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );<br>&#125;<br> <br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MaxSubseqSum3</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> List[], <span class=\"hljs-type\">int</span> N )</span><br>&#123; <span class=\"hljs-comment\">/* 保持与前2种算法相同的函数接口 */</span><br>    <span class=\"hljs-keyword\">return</span> DivideAndConquer( List, <span class=\"hljs-number\">0</span>, N<span class=\"hljs-number\">-1</span> );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"第二章-线性结构\"><a href=\"#第二章-线性结构\" class=\"headerlink\" title=\"第二章 线性结构\"></a>第二章 线性结构</h1><h2 id=\"2-1-线性表及其实现\"><a href=\"#2-1-线性表及其实现\" class=\"headerlink\" title=\"2.1 线性表及其实现\"></a>2.1 线性表及其实现</h2><h3 id=\"数组实现\"><a href=\"#数组实现\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Position;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">List</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> &#123;</span><br>    ElementType Data[MAXSIZE];<br>    Position Last;<br>&#125;;<br> <br><span class=\"hljs-comment\">/* 初始化 */</span><br>List <span class=\"hljs-title function_\">MakeEmpty</span><span class=\"hljs-params\">()</span><br>&#123;<br>    List L;<br> <br>    L = (List)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> LNode));<br>    L-&gt;Last = <span class=\"hljs-number\">-1</span>;<br> <br>    <span class=\"hljs-keyword\">return</span> L;<br>&#125;<br> <br><span class=\"hljs-comment\">/* 查找 */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ERROR -1</span><br> <br>Position <span class=\"hljs-title function_\">Find</span><span class=\"hljs-params\">( List L, ElementType X )</span><br>&#123;<br>    Position i = <span class=\"hljs-number\">0</span>;<br> <br>    <span class=\"hljs-keyword\">while</span>( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )<br>        i++;<br>    <span class=\"hljs-keyword\">if</span> ( i &gt; L-&gt;Last )  <span class=\"hljs-keyword\">return</span> ERROR; <span class=\"hljs-comment\">/* 如果没找到，返回错误信息 */</span><br>    <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-keyword\">return</span> i;  <span class=\"hljs-comment\">/* 找到后返回的是存储位置 */</span><br>&#125;<br> <br><span class=\"hljs-comment\">/* 插入 */</span><br><span class=\"hljs-comment\">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span><br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Insert</span><span class=\"hljs-params\">( List L, ElementType X, Position P )</span> <br>&#123; <span class=\"hljs-comment\">/* 在L的指定位置P前插入一个新元素X */</span><br>    Position i;<br> <br>    <span class=\"hljs-keyword\">if</span> ( L-&gt;Last == MAXSIZE<span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-comment\">/* 表空间已满，不能插入 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;表满&quot;</span>); <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br>    &#125;  <br>    <span class=\"hljs-keyword\">if</span> ( P&lt;<span class=\"hljs-number\">0</span> || P&gt;L-&gt;Last+<span class=\"hljs-number\">1</span> ) &#123; <span class=\"hljs-comment\">/* 检查插入位置的合法性 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;位置不合法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br>    &#125; <br>    <span class=\"hljs-keyword\">for</span>( i=L-&gt;Last; i&gt;=P; i-- )<br>        L-&gt;Data[i+<span class=\"hljs-number\">1</span>] = L-&gt;Data[i]; <span class=\"hljs-comment\">/* 将位置P及以后的元素顺序向后移动 */</span><br>    L-&gt;Data[P] = X;  <span class=\"hljs-comment\">/* 新元素插入 */</span><br>    L-&gt;Last++;       <span class=\"hljs-comment\">/* Last仍指向最后元素 */</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <br>&#125; <br> <br><span class=\"hljs-comment\">/* 删除 */</span><br><span class=\"hljs-comment\">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span><br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Delete</span><span class=\"hljs-params\">( List L, Position P )</span><br>&#123; <span class=\"hljs-comment\">/* 从L中删除指定位置P的元素 */</span><br>    Position i;<br> <br>    <span class=\"hljs-keyword\">if</span>( P&lt;<span class=\"hljs-number\">0</span> || P&gt;L-&gt;Last ) &#123; <span class=\"hljs-comment\">/* 检查空表及删除位置的合法性 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;位置%d不存在元素&quot;</span>, P ); <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>( i=P+<span class=\"hljs-number\">1</span>; i&lt;=L-&gt;Last; i++ )<br>        L-&gt;Data[i<span class=\"hljs-number\">-1</span>] = L-&gt;Data[i]; <span class=\"hljs-comment\">/* 将位置P+1及以后的元素顺序向前移动 */</span><br>    L-&gt;Last--; <span class=\"hljs-comment\">/* Last仍指向最后元素 */</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"链表实现\"><a href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">PtrToLNode</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> &#123;</span><br>    ElementType Data;<br>    PtrToLNode Next;<br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> PtrToLNode Position;<br><span class=\"hljs-keyword\">typedef</span> PtrToLNode List;<br> <br><span class=\"hljs-comment\">/* 查找 */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ERROR NULL</span><br> <br>Position <span class=\"hljs-title function_\">Find</span><span class=\"hljs-params\">( List L, ElementType X )</span><br>&#123;<br>    Position p = L; <span class=\"hljs-comment\">/* p指向L的第1个结点 */</span><br> <br>    <span class=\"hljs-keyword\">while</span> ( p &amp;&amp; p-&gt;Data!=X )<br>        p = p-&gt;Next;<br> <br>    <span class=\"hljs-comment\">/* 下列语句可以用 return p; 替换 */</span><br>    <span class=\"hljs-keyword\">if</span> ( p )<br>        <span class=\"hljs-keyword\">return</span> p;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>&#125;<br> <br><span class=\"hljs-comment\">/* 带头结点的插入 */</span><br><span class=\"hljs-comment\">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 */</span><br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Insert</span><span class=\"hljs-params\">( List L, ElementType X, Position P )</span><br>&#123; <span class=\"hljs-comment\">/* 这里默认L有头结点 */</span><br>    Position tmp, pre;<br> <br>    <span class=\"hljs-comment\">/* 查找P的前一个结点 */</span>        <br>    <span class=\"hljs-keyword\">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            <br>    <span class=\"hljs-keyword\">if</span> ( pre==<span class=\"hljs-literal\">NULL</span> ) &#123; <span class=\"hljs-comment\">/* P所指的结点不在L中 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;插入位置参数错误\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">/* 找到了P的前一个结点pre */</span><br>        <span class=\"hljs-comment\">/* 在P前插入新结点 */</span><br>        tmp = (Position)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> LNode)); <span class=\"hljs-comment\">/* 申请、填装结点 */</span><br>        tmp-&gt;Data = X; <br>        tmp-&gt;Next = P;<br>        pre-&gt;Next = tmp;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-comment\">/* 带头结点的删除 */</span><br><span class=\"hljs-comment\">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 */</span><br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Delete</span><span class=\"hljs-params\">( List L, Position P )</span><br>&#123; <span class=\"hljs-comment\">/* 这里默认L有头结点 */</span><br>    Position tmp, pre;<br> <br>    <span class=\"hljs-comment\">/* 查找P的前一个结点 */</span>        <br>    <span class=\"hljs-keyword\">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            <br>    <span class=\"hljs-keyword\">if</span> ( pre==<span class=\"hljs-literal\">NULL</span> || P==<span class=\"hljs-literal\">NULL</span>) &#123; <span class=\"hljs-comment\">/* P所指的结点不在L中 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;删除位置参数错误\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">/* 找到了P的前一个结点pre */</span><br>        <span class=\"hljs-comment\">/* 将P位置的结点删除 */</span><br>        pre-&gt;Next = P-&gt;Next;<br>        <span class=\"hljs-built_in\">free</span>(P);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-2-堆栈\"><a href=\"#2-2-堆栈\" class=\"headerlink\" title=\"2.2 堆栈\"></a>2.2 堆栈</h2><h3 id=\"数组实现-1\"><a href=\"#数组实现-1\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Position;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SNode</span> &#123;</span><br>    ElementType *Data; <span class=\"hljs-comment\">/* 存储元素的数组 */</span><br>    Position Top;      <span class=\"hljs-comment\">/* 栈顶指针 */</span><br>    <span class=\"hljs-type\">int</span> MaxSize;       <span class=\"hljs-comment\">/* 堆栈最大容量 */</span><br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SNode</span> *<span class=\"hljs-title\">Stack</span>;</span><br> <br>Stack <span class=\"hljs-title function_\">CreateStack</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> MaxSize )</span><br>&#123;<br>    Stack S = (Stack)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> SNode));<br>    S-&gt;Data = (ElementType *)<span class=\"hljs-built_in\">malloc</span>(MaxSize * <span class=\"hljs-keyword\">sizeof</span>(ElementType));<br>    S-&gt;Top = <span class=\"hljs-number\">-1</span>;<br>    S-&gt;MaxSize = MaxSize;<br>    <span class=\"hljs-keyword\">return</span> S;<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsFull</span><span class=\"hljs-params\">( Stack S )</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> (S-&gt;Top == S-&gt;MaxSize<span class=\"hljs-number\">-1</span>);<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Push</span><span class=\"hljs-params\">( Stack S, ElementType X )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( IsFull(S) ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;堆栈满&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        S-&gt;Data[++(S-&gt;Top)] = X;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsEmpty</span><span class=\"hljs-params\">( Stack S )</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> (S-&gt;Top == <span class=\"hljs-number\">-1</span>);<br>&#125;<br> <br>ElementType <span class=\"hljs-title function_\">Pop</span><span class=\"hljs-params\">( Stack S )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( IsEmpty(S) ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;堆栈空&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> ERROR; <span class=\"hljs-comment\">/* ERROR是ElementType的特殊值，标志错误 */</span><br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <br>        <span class=\"hljs-keyword\">return</span> ( S-&gt;Data[(S-&gt;Top)--] );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链表实现-1\"><a href=\"#链表实现-1\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SNode</span> *<span class=\"hljs-title\">PtrToSNode</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SNode</span> &#123;</span><br>    ElementType Data;<br>    PtrToSNode Next;<br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> PtrToSNode Stack;<br> <br>Stack <span class=\"hljs-title function_\">CreateStack</span><span class=\"hljs-params\">( )</span> <br>&#123; <span class=\"hljs-comment\">/* 构建一个堆栈的头结点，返回该结点指针 */</span><br>    Stack S;<br> <br>    S = (Stack)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> SNode));<br>    S-&gt;Next = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">return</span> S;<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsEmpty</span> <span class=\"hljs-params\">( Stack S )</span><br>&#123; <span class=\"hljs-comment\">/* 判断堆栈S是否为空，若是返回true；否则返回false */</span><br>    <span class=\"hljs-keyword\">return</span> ( S-&gt;Next == <span class=\"hljs-literal\">NULL</span> );<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">Push</span><span class=\"hljs-params\">( Stack S, ElementType X )</span><br>&#123; <span class=\"hljs-comment\">/* 将元素X压入堆栈S */</span><br>    PtrToSNode TmpCell;<br> <br>    TmpCell = (PtrToSNode)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> SNode));<br>    TmpCell-&gt;Data = X;<br>    TmpCell-&gt;Next = S-&gt;Next;<br>    S-&gt;Next = TmpCell;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br> <br>ElementType <span class=\"hljs-title function_\">Pop</span><span class=\"hljs-params\">( Stack S )</span>  <br>&#123; <span class=\"hljs-comment\">/* 删除并返回堆栈S的栈顶元素 */</span><br>    PtrToSNode FirstCell;<br>    ElementType TopElem;<br> <br>    <span class=\"hljs-keyword\">if</span>( IsEmpty(S) ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;堆栈空&quot;</span>); <br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        FirstCell = S-&gt;Next; <br>        TopElem = FirstCell-&gt;Data;<br>        S-&gt;Next = FirstCell-&gt;Next;<br>        <span class=\"hljs-built_in\">free</span>(FirstCell);<br>        <span class=\"hljs-keyword\">return</span> TopElem;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-3-队列\"><a href=\"#2-3-队列\" class=\"headerlink\" title=\"2.3 队列\"></a>2.3 队列</h2><h3 id=\"数组实现-2\"><a href=\"#数组实现-2\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Position;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QNode</span> &#123;</span><br>    ElementType *Data;     <span class=\"hljs-comment\">/* 存储元素的数组 */</span><br>    Position Front, Rear;  <span class=\"hljs-comment\">/* 队列的头、尾指针 */</span><br>    <span class=\"hljs-type\">int</span> MaxSize;           <span class=\"hljs-comment\">/* 队列最大容量 */</span><br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QNode</span> *<span class=\"hljs-title\">Queue</span>;</span><br> <br>Queue <span class=\"hljs-title function_\">CreateQueue</span><span class=\"hljs-params\">( <span class=\"hljs-type\">int</span> MaxSize )</span><br>&#123;<br>    Queue Q = (Queue)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> QNode));<br>    Q-&gt;Data = (ElementType *)<span class=\"hljs-built_in\">malloc</span>(MaxSize * <span class=\"hljs-keyword\">sizeof</span>(ElementType));<br>    Q-&gt;Front = Q-&gt;Rear = <span class=\"hljs-number\">0</span>;<br>    Q-&gt;MaxSize = MaxSize;<br>    <span class=\"hljs-keyword\">return</span> Q;<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsFull</span><span class=\"hljs-params\">( Queue Q )</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> ((Q-&gt;Rear+<span class=\"hljs-number\">1</span>)%Q-&gt;MaxSize == Q-&gt;Front);<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">AddQ</span><span class=\"hljs-params\">( Queue Q, ElementType X )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( IsFull(Q) ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;队列满&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        Q-&gt;Rear = (Q-&gt;Rear+<span class=\"hljs-number\">1</span>)%Q-&gt;MaxSize;<br>        Q-&gt;Data[Q-&gt;Rear] = X;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsEmpty</span><span class=\"hljs-params\">( Queue Q )</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> (Q-&gt;Front == Q-&gt;Rear);<br>&#125;<br> <br>ElementType <span class=\"hljs-title function_\">DeleteQ</span><span class=\"hljs-params\">( Queue Q )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( IsEmpty(Q) ) &#123; <br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;队列空&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>  &#123;<br>        Q-&gt;Front =(Q-&gt;Front+<span class=\"hljs-number\">1</span>)%Q-&gt;MaxSize;<br>        <span class=\"hljs-keyword\">return</span>  Q-&gt;Data[Q-&gt;Front];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"链表实现-2\"><a href=\"#链表实现-2\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">PtrToNode</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> &#123;</span> <span class=\"hljs-comment\">/* 队列中的结点 */</span><br>    ElementType Data;<br>    PtrToNode Next;<br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> PtrToNode Position;<br> <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QNode</span> &#123;</span><br>    Position Front, Rear;  <span class=\"hljs-comment\">/* 队列的头、尾指针 */</span><br>    <span class=\"hljs-type\">int</span> MaxSize;           <span class=\"hljs-comment\">/* 队列最大容量 */</span><br>&#125;;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QNode</span> *<span class=\"hljs-title\">Queue</span>;</span><br> <br><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">IsEmpty</span><span class=\"hljs-params\">( Queue Q )</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> ( Q-&gt;Front == <span class=\"hljs-literal\">NULL</span>);<br>&#125;<br> <br>ElementType <span class=\"hljs-title function_\">DeleteQ</span><span class=\"hljs-params\">( Queue Q )</span><br>&#123;<br>    Position FrontCell; <br>    ElementType FrontElem;<br>     <br>    <span class=\"hljs-keyword\">if</span>  ( IsEmpty(Q) ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;队列空&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        FrontCell = Q-&gt;Front;<br>        <span class=\"hljs-keyword\">if</span> ( Q-&gt;Front == Q-&gt;Rear ) <span class=\"hljs-comment\">/* 若队列只有一个元素 */</span><br>            Q-&gt;Front = Q-&gt;Rear = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">/* 删除后队列置为空 */</span><br>        <span class=\"hljs-keyword\">else</span>                     <br>            Q-&gt;Front = Q-&gt;Front-&gt;Next;<br>        FrontElem = FrontCell-&gt;Data;<br> <br>        <span class=\"hljs-built_in\">free</span>( FrontCell );  <span class=\"hljs-comment\">/* 释放被删除结点空间  */</span><br>        <span class=\"hljs-keyword\">return</span>  FrontElem;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"第三章-树\"><a href=\"#第三章-树\" class=\"headerlink\" title=\"第三章 树\"></a>第三章 树</h1><h2 id=\"3-3-二叉树的遍历\"><a href=\"#3-3-二叉树的遍历\" class=\"headerlink\" title=\"3.3 二叉树的遍历\"></a>3.3 二叉树的遍历</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">InorderTraversal</span><span class=\"hljs-params\">( BinTree BT )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>( BT ) &#123;<br>        InorderTraversal( BT-&gt;Left );<br>        <span class=\"hljs-comment\">/* 此处假设对BT结点的访问就是打印数据 */</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, BT-&gt;Data); <span class=\"hljs-comment\">/* 假设数据为整型 */</span><br>        InorderTraversal( BT-&gt;Right );<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PreorderTraversal</span><span class=\"hljs-params\">( BinTree BT )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>( BT ) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, BT-&gt;Data );<br>        PreorderTraversal( BT-&gt;Left );<br>        PreorderTraversal( BT-&gt;Right );<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PostorderTraversal</span><span class=\"hljs-params\">( BinTree BT )</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>( BT ) &#123;<br>        PostorderTraversal( BT-&gt;Left );<br>        PostorderTraversal( BT-&gt;Right );<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, BT-&gt;Data);<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">LevelorderTraversal</span> <span class=\"hljs-params\">( BinTree BT )</span><br>&#123; <br>    Queue Q; <br>    BinTree T;<br> <br>    <span class=\"hljs-keyword\">if</span> ( !BT ) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">/* 若是空树则直接返回 */</span><br>     <br>    Q = CreatQueue(); <span class=\"hljs-comment\">/* 创建空队列Q */</span><br>    AddQ( Q, BT );<br>    <span class=\"hljs-keyword\">while</span> ( !IsEmpty(Q) ) &#123;<br>        T = DeleteQ( Q );<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, T-&gt;Data); <span class=\"hljs-comment\">/* 访问取出队列的结点 */</span><br>        <span class=\"hljs-keyword\">if</span> ( T-&gt;Left )   AddQ( Q, T-&gt;Left );<br>        <span class=\"hljs-keyword\">if</span> ( T-&gt;Right )  AddQ( Q, T-&gt;Right );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "数据结构",
                "堆栈",
                "队列",
                "链表",
                "树",
                "二叉树"
            ]
        }
    ]
}