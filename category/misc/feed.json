{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"misc\" category",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2018/2d20bb21/",
            "url": "https://www.oikiou.top/2018/2d20bb21/",
            "title": "STM32F070系列的IAP程序",
            "date_published": "2018-08-16T11:20:02.000Z",
            "content_html": "<h1 id=\"STM32F070系列的IAP程序\"><a href=\"#STM32F070系列的IAP程序\" class=\"headerlink\" title=\"STM32F070系列的IAP程序\"></a>STM32F070系列的IAP程序</h1><h1 id=\"总程序思路\"><a href=\"#总程序思路\" class=\"headerlink\" title=\"总程序思路\"></a>总程序思路</h1><p><img src=\"/2018/2d20bb21/70.png\" alt=\"bootloader\"></p>\n<p><img src=\"/2018/2d20bb21/70-16635087132592.png\" alt=\"app\"></p>\n<p>之所以不直接将接收到的BIN文件直接写入到APP区域是因为如果升级过程出现某些错误时，程序将会清除升级标志位，并跳转到APP运行程序减少产品变砖的概率。</p>\n<p><em><strong>注：如果在  将BacpupApp区域的BIN文件拷贝到App区域   这一步如果拷贝两次都校验失败将会导致程序停掉。</strong></em></p>\n<h1 id=\"STM32内Flash区域划分\"><a href=\"#STM32内Flash区域划分\" class=\"headerlink\" title=\"STM32内Flash区域划分\"></a>STM32内Flash区域划分</h1><p> <img src=\"/2018/2d20bb21/70-16635087883674.png\" alt=\"stm32\"></p>\n<p><img src=\"/2018/2d20bb21/70-16635087985376.png\" alt=\"flash\"></p>\n<p>此次使用的MCU型号是STM32F070CB，由其Flash组织特性可知其Flash一页为1KB（若总Flash大小，大于等于256KB则其一页大小为2KB），为了程序简单高效，所以使FLAG占用一页（1KB）的位置（Flag只使用了前2B的空间）。</p>\n<h1 id=\"STM32与上位机通信过程\"><a href=\"#STM32与上位机通信过程\" class=\"headerlink\" title=\"STM32与上位机通信过程\"></a>STM32与上位机通信过程</h1><h2 id=\"上位机发送给STM32\"><a href=\"#上位机发送给STM32\" class=\"headerlink\" title=\"上位机发送给STM32\"></a>上位机发送给STM32</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 16B 命令数据长度</span><br><span class=\"hljs-comment\"># 注：命令长度设置为 0x10  即16B大小</span><br>0x55  0xAA   0x01    命令长度    命令码   固件总包数   0x00   0x00   0x00   0x00   0x00   0x00   0x00  0x00   0x00    和校验<br><br><span class=\"hljs-comment\"># 1024+7B 固件数据长度</span><br>0x55  0xAA   0x01  包号  命令码     0xFF   BINData[1024]    和校验<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"STM32发送给上位机\"><a href=\"#STM32发送给上位机\" class=\"headerlink\" title=\"STM32发送给上位机\"></a>STM32发送给上位机</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 16B 命令数据长度</span><br><span class=\"hljs-comment\"># 注：命令长度设置为 0x10  即16B大小</span><br>0x55  0xAA   0x01  命令长度  命令码    0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00    和校验<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2018/2d20bb21/70-16635090195918.png\" alt=\"img\"></p>\n<h1 id=\"IAP应用说明\"><a href=\"#IAP应用说明\" class=\"headerlink\" title=\"IAP应用说明\"></a>IAP应用说明</h1><ul>\n<li>App区域和Bootloader区域都有IAP实现的程序段，所以要实现IAP就要要求App区域和Bootloader的程序都可以正常工作。</li>\n</ul>\n<p>App程序需要做的修改：</p>\n<ol>\n<li>添加 iap.c 文件，并在main函数最前面调用 iap.c 里的函数    iRemapIrqVector();   重映射中断向量</li>\n<li>用这种方法重映射中断向量，RAM的前0xC0个字节不能用，需要将RAM始地址修改到  0x2000 00C0 处，将Size大小减掉0xC0</li>\n<li>ROM起始地址修改到  0x0800 3000 处，将Size大小设置成0xE800（58KB）</li>\n<li>在程序的串口命令判断中添加IAP升级命令判断，满足条件则使能升级标志位，并重启MCU进入Bootloader</li>\n<li>刷入APP和Bootloader</li>\n</ol>\n<h1 id=\"关于移植到其他芯片\"><a href=\"#关于移植到其他芯片\" class=\"headerlink\" title=\"关于移植到其他芯片\"></a>关于移植到其他芯片</h1><ol>\n<li>如果移植到F103系列芯片的话重映射中断向量将变得非常简单，一行代码就搞定，也就无需修改RAM起始地址</li>\n<li>如果移植的芯片容量不一样需要查看其一个页的大小是多少，然后重新划分Flash区域</li>\n</ol>\n<p>Bootloader源码下载：<a href=\"https://download.csdn.net/download/weixin_42078116/10610445\">源码</a><br>App区源码：待加入<br>上位机程序和源码：<a href=\"https://download.csdn.net/download/weixin_42078116/10610490\">源码</a></p>\n<p>参考资料：</p>\n<p><a href=\"http://www.openedv.com/forum.php?mod=viewthread&tid=85906\">STM32实现IAP功能的学习笔记</a></p>\n<p><a href=\"http://www.openedv.com/forum.php?mod=viewthread&tid=85906\">STM32实现IAP功能的学习笔记</a> </p>\n<h1 id=\"扩展：STM32运行过程\"><a href=\"#扩展：STM32运行过程\" class=\"headerlink\" title=\"扩展：STM32运行过程\"></a>扩展：STM32运行过程</h1><blockquote>\n<p>  TIPS：STM32上电后先  <strong>执行复位中断 Reset_Handler</strong>  然后才会进入  main 函数。</p>\n<p>  STM32的程序运行过程在很多资料里也都有介绍，因为STM32F103的单片机是基于Cortex-M3核的，它的内部主要是通过中断向量表来响应各种中断，内部闪存的起始地址是0x08000000，中断向量表的起始地址是0x8000004，程序启动后，将首先从“中断向量表”取出复位中断向量执行复位中断程序完成启动，当中断来临时STM32 的内部硬件机制亦会自动将 PC 指针定位到“中断向量表”处，并根据中断源取出对应的中断向量执行相应的中断服务程序。</p>\n<p>  <img src=\"/2018/2d20bb21/70-166350916978910.png\" alt=\"img\"></p>\n<p>  如上图所示STM32的正常启动流程是：<br>  a. STM32上电后会从 0x8000004 处取出复位中断向量的地址，并跳转执行复位中断服务程序，如标号1所示；<br>  b. 复位中断复位程序执行完成之后就会跳转到我们的main函数如标号2所示；<br>  c. main函数一般为死循环，当其收到某一中断请求之后STM32会强制把PC指针指向中断向量表，如标号3所示；<br>  d. 查询中断向量表，根据中断源来跳转到相应的中断服务程序中执行响应的操作；如标号4、5所示；<br>  e. 执行完中断服务程序之后会再回到main函数中，如标号6所示。</p>\n<p>  以上是STM32的正常运行过程，而当加入IAP程序之后，运行流程就如下所示：</p>\n<p>  <img src=\"/2018/2d20bb21/70-166350918005812.png\" alt=\"img\"></p>\n<p>  加入IAP后程序运行如下：<br>  a. STM32复位之后还是从0x8000004处获取中断向量表的地址，并跳转执行复位中断服务程序，如标号1所示；<br>  b. 执行完复位中断服务程序之后回调转到IAP的main函数中，如标号2所示；<br>  c. IAP的过程就是通过某种选定的通信方式（如串口）来接收程序文件，并且存储在指定的FLASH空间里，随后会加载新的程序，而新程序<br>  的复位中断向量起始地址为0X08000004+N+M，取出新程序的复位中断向量的地址，并跳转执行新程序的复位中断服务程序，随后跳转<br>  至新程序的 main 函数，如标号3、4所示；<br>  d. 此时在STM32的FLASH里面会有两个中断向量表，在新程序 main 函数执行的过程中，当中断来临时PC指针仍会回跳转至地址为<br>  0x8000004 中断向量表处，而并不是新程序的中断向量表，这是由STM32的硬件机制决定的，如标号5所示；<br>  e. 查询中断向量表，根据中断源来跳转到新的中断服务程序中执行响应的操作，如标号6所示；<br>  f. 执行完中断服务程序之后会再回到main函数中，如标号7、8所示。</p>\n</blockquote>\n",
            "tags": [
                "stm32",
                "iap",
                "bootloader"
            ]
        },
        {
            "id": "https://www.oikiou.top/2018/125d6be2/",
            "url": "https://www.oikiou.top/2018/125d6be2/",
            "title": "蓝桥杯 超准超声波测距",
            "date_published": "2018-04-27T09:38:49.000Z",
            "content_html": "<h1 id=\"蓝桥杯-单片机组-超准超声波测距\"><a href=\"#蓝桥杯-单片机组-超准超声波测距\" class=\"headerlink\" title=\"蓝桥杯 单片机组 超准超声波测距\"></a>蓝桥杯 单片机组 超准超声波测距</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Timer1Init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> <span class=\"hljs-comment\">//2000微秒@12.000MHz</span><br>&#123;<br>    AUXR &amp;= <span class=\"hljs-number\">0xBF</span>; <span class=\"hljs-comment\">//定时器时钟12T模式</span><br>    TMOD &amp;= <span class=\"hljs-number\">0x0F</span>; <span class=\"hljs-comment\">//设置定时器模式</span><br>    TMOD |= <span class=\"hljs-number\">0x10</span>; <span class=\"hljs-comment\">//设置定时器模式</span><br>    TL1 = <span class=\"hljs-number\">0x30</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>    TH1 = <span class=\"hljs-number\">0xF8</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>    TF1 = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//清除TF1标志</span><br>    <span class=\"hljs-comment\">// TR1 = 1; //定时器1开始计时</span><br>&#125;<br><br> <br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Sand_wav</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i;<br><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">20</span>;i++)<br>    &#123;<br>        P10 = ~P10;<br>        &#123;<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i;_nop_();_nop_();i = <span class=\"hljs-number\">33</span>;<span class=\"hljs-keyword\">while</span> (--i);&#125;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">Read_wav</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">float</span> range;<br><br>    Sand_wav();<br>     <br>    <span class=\"hljs-comment\">// TR0 = 0;</span><br>    TR1 = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>((P11 != <span class=\"hljs-number\">0</span>) &amp;&amp; (TF1 == <span class=\"hljs-number\">0</span>));<br>    TR1 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// TR0 = 1;</span><br>     <br>    <span class=\"hljs-keyword\">if</span>(TF1 == <span class=\"hljs-number\">1</span>)<br>    &#123;<br>        TF1 = <span class=\"hljs-number\">0</span>;<br>        TL1 = <span class=\"hljs-number\">0x30</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>        TH1 = <span class=\"hljs-number\">0xF8</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">99</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        range = TH1*<span class=\"hljs-number\">256</span> + TL1 <span class=\"hljs-number\">-63535</span> +<span class=\"hljs-number\">260</span>;<br>     <br>        range = range * <span class=\"hljs-number\">0.017</span>;<br>     <br>        TL1 = <span class=\"hljs-number\">0x30</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>        TH1 = <span class=\"hljs-number\">0xF8</span>; <span class=\"hljs-comment\">//设置定时初值</span><br>     <br>        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>)range;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>注意   </p>\n<ul>\n<li>ET1不要打开</li>\n<li>在Read_wav没有关闭T0要注意主程序延时使程序进入中断</li>\n<li>清除中断标志   重新TH0 TL0初值赋值</li>\n<li>运算时减去260是除去发送波形的间隔（此BUG极大影响了精准度 近4cm）</li>\n</ul>\n<p>单片机组 和 嵌入式组的相关代码资源可以在我的主页下载。</p>\n",
            "tags": [
                "蓝桥杯",
                "超声波"
            ]
        }
    ]
}