<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Oikiou&#39;s Blog • Posts by &#34;embedded&#34; category</title>
        <link>https://www.oikiou.top</link>
        <description>Blog</description>
        <language>zh-CN</language>
        <pubDate>Thu, 03 Jul 2025 20:42:16 +0800</pubDate>
        <lastBuildDate>Thu, 03 Jul 2025 20:42:16 +0800</lastBuildDate>
        <category>c++</category>
        <category>c/c++</category>
        <category>c</category>
        <category>ms-dos</category>
        <category>windows</category>
        <category>cmd</category>
        <category>pid</category>
        <category>micropython</category>
        <category>python</category>
        <category>embedded</category>
        <category>qt</category>
        <category>pyqt</category>
        <category>css</category>
        <category>html</category>
        <category>web</category>
        <category>js</category>
        <category>数据结构</category>
        <category>堆栈</category>
        <category>队列</category>
        <category>链表</category>
        <category>树</category>
        <category>二叉树</category>
        <category>正则表达式</category>
        <category>aes</category>
        <category>autosar</category>
        <category>cc2530</category>
        <category>zigbee</category>
        <category>hp</category>
        <category>chrome</category>
        <category>sscanf</category>
        <category>flash</category>
        <category>hex</category>
        <category>jpeg</category>
        <category>webp</category>
        <category>jpeg2000</category>
        <category>image</category>
        <category>ssl</category>
        <category>https</category>
        <category>license</category>
        <category>md5</category>
        <category>major</category>
        <category>markdown</category>
        <category>note</category>
        <category>osi</category>
        <category>RustDesk</category>
        <category>iap</category>
        <category>bootloader</category>
        <category>stm32</category>
        <category>tags</category>
        <category>label</category>
        <category>category</category>
        <category>typora</category>
        <category>usart</category>
        <category>rts</category>
        <category>cts</category>
        <category>dtr</category>
        <category>dsr</category>
        <category>ws2812</category>
        <category>spi</category>
        <category>dma</category>
        <category>makefile</category>
        <category>xip</category>
        <category>nor</category>
        <category>nand</category>
        <category>android</category>
        <category>mtp</category>
        <category>pc</category>
        <category>driver</category>
        <category>ip</category>
        <category>location</category>
        <category>api</category>
        <category>zip</category>
        <category>gzip</category>
        <category>bzip</category>
        <category>tar</category>
        <category>character encoding</category>
        <category>gb2312</category>
        <category>utf-8</category>
        <category>zsh</category>
        <category>shell</category>
        <category>linux</category>
        <category>words</category>
        <category>cortexm3</category>
        <category>DS_Store</category>
        <category>rtf</category>
        <category>后缀</category>
        <category>机智云</category>
        <category>kms</category>
        <category>office</category>
        <category>volume</category>
        <category>apk</category>
        <category>java</category>
        <category>蓝桥杯</category>
        <category>国赛</category>
        <category>ct117e</category>
        <category>超声波</category>
        <category>ct117e-ex</category>
        <category>github</category>
        <category>hosts</category>
        <category>audio</category>
        <category>video</category>
        <category>esp32</category>
        <category>idf</category>
        <category>usb</category>
        <category>cat_drive</category>
        <category>cad</category>
        <category>switch</category>
        <category>nintendo</category>
        <category>game</category>
        <category>hardware</category>
        <category>lenovo</category>
        <category>disk</category>
        <category>pve</category>
        <category>virtual</category>
        <category>摄影</category>
        <category>software</category>
        <category>dslogic</category>
        <category>逻辑分析仪</category>
        <category>pyhton</category>
        <category>decoder</category>
        <category>synology</category>
        <category>cmake</category>
        <category>docker</category>
        <category>dockerfile</category>
        <category>namespace</category>
        <category>cgroup</category>
        <category>dockerhub</category>
        <category>frp</category>
        <category>hyperv</category>
        <category>git</category>
        <category>j-link</category>
        <category>rtt</category>
        <category>serial</category>
        <category>debug</category>
        <category>jlink</category>
        <category>obsidian</category>
        <category>ps</category>
        <category>powershell</category>
        <category>rdpwrap</category>
        <category>rdp</category>
        <category>sourceinsigh</category>
        <category>si</category>
        <category>ide</category>
        <category>spacedesk</category>
        <category>投屏</category>
        <category>vscode</category>
        <category>j-tag</category>
        <category>commenttranslate</category>
        <category>wsl</category>
        <category>wordpress</category>
        <category>mysql</category>
        <category>nginx</category>
        <category>speedtest</category>
        <category>tools</category>
        <category>tmux</category>
        <category>unit</category>
        <category>m</category>
        <category>cm</category>
        <category>mm</category>
        <category>s</category>
        <category>us</category>
        <category>cortex-a7</category>
        <category>cortex-m3</category>
        <category>hexo</category>
        <category>jekyll</category>
        <category>fluid</category>
        <category>cusdis</category>
        <category>twikoo</category>
        <category>blog</category>
        <category>gravatar</category>
        <category>cravatar</category>
        <category>rtos</category>
        <category>rt-thread</category>
        <category>rtx</category>
        <category>keil</category>
        <category>raspberry</category>
        <category>wiringpi</category>
        <category>pwm</category>
        <category>ucos</category>
        <category>ap</category>
        <category>wifi</category>
        <category>bluetooth</category>
        <category>蓝牙</category>
        <category>v2ray</category>
        <category>linuxapp</category>
        <category>zlib</category>
        <category>minizip</category>
        <category>modbus</category>
        <category>curl</category>
        <category>libcurl</category>
        <category>alpha_mini</category>
        <category>正点原子</category>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2025/87426b16/</guid>
            <title>ESP32 Develop</title>
            <link>https://www.oikiou.top/2025/87426b16/</link>
            <category>embedded</category>
            <category>esp32</category>
            <category>idf</category>
            <pubDate>Thu, 03 Jul 2025 20:42:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ESP32&#34;&gt;&lt;a href=&#34;#ESP32&#34; class=&#34;headerlink&#34; title=&#34;ESP32&#34;&gt;&lt;/a&gt;ESP32&lt;/h1&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;idf.py set-target esp32c3&lt;br&gt;&lt;br&gt;idf.py menuconfig&lt;br&gt;&lt;br&gt;idf.py build&lt;br&gt;&lt;br&gt;idf.py -p COM12 flash moniter&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h1 id=&#34;IDF&#34;&gt;&lt;a href=&#34;#IDF&#34; class=&#34;headerlink&#34; title=&#34;IDF&#34;&gt;&lt;/a&gt;IDF&lt;/h1&gt;&lt;h2 id=&#34;组件管理器-The-ESP-Component-Registry&#34;&gt;&lt;a href=&#34;#组件管理器-The-ESP-Component-Registry&#34; class=&#34;headerlink&#34; title=&#34;组件管理器 The ESP Component Registry&#34;&gt;&lt;/a&gt;组件管理器 The ESP Component Registry&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://components.espressif.com/&#34;&gt;https://components.espressif.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-manifest&#34;&gt;&lt;a href=&#34;#create-manifest&#34; class=&#34;headerlink&#34; title=&#34;create-manifest&#34;&gt;&lt;/a&gt;create-manifest&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;idf.py create-manifest&lt;/code&gt; 为 main 组件创建清单文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idf.py create-manifest --component=my_component&lt;/code&gt; 在 &lt;code&gt;components&lt;/code&gt; 目录下，为组件 &lt;strong&gt;my_component&lt;/strong&gt; 创建清单文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idf.py create-manifest --path=&amp;quot;../../my_component&amp;quot;&lt;/code&gt; 在 &lt;code&gt;my_component&lt;/code&gt; 目录下，为组件 &lt;strong&gt;my_component&lt;/strong&gt; 创建清单文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在向项目的某个组件添加新的清单时，必须先运行 &lt;code&gt;idf.py reconfigure&lt;/code&gt;，手动重新配置项目。&lt;/p&gt;
&lt;h3 id=&#34;add-dependency&#34;&gt;&lt;a href=&#34;#add-dependency&#34; class=&#34;headerlink&#34; title=&#34;add-dependency&#34;&gt;&lt;/a&gt;add-dependency&lt;/h3&gt;&lt;p&gt;要为 ESP-IDF 项目中的组件（如 &lt;code&gt;my_component&lt;/code&gt;）添加依赖项，可以运行命令 &lt;code&gt;idf.py add-dependency DEPENDENCY&lt;/code&gt;。&lt;br&gt;&lt;code&gt;DEPENDENCY&lt;/code&gt; 参数代表一个由 IDF 组件管理器管理的额外组件，而 &lt;code&gt;my_component&lt;/code&gt; 也依赖于这个组件。&lt;code&gt;DEPENDENCY&lt;/code&gt; 参数的格式为 &lt;code&gt;namespace/name=1.0.0&lt;/code&gt;，namespace&amp;#x2F;name 代表组件名称，&amp;#x3D;1.0.0 是组件的版本范围，详情请参阅 &lt;a href=&#34;https://docs.espressif.com/projects/idf-component-manager/en/latest/reference/versioning.html&#34;&gt;版本文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;直接编辑&#34;&gt;&lt;a href=&#34;#直接编辑&#34; class=&#34;headerlink&#34; title=&#34;直接编辑&#34;&gt;&lt;/a&gt;直接编辑&lt;/h3&gt;&lt;p&gt;通过在文本编辑器直接编辑，你可以轻松定义清单文件 &lt;code&gt;idf_component.yml&lt;/code&gt; 中的依赖项。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2024/9bf1668d/</guid>
            <title>一些优秀的开源项目</title>
            <link>https://www.oikiou.top/2024/9bf1668d/</link>
            <category>embedded</category>
            <pubDate>Thu, 01 Aug 2024 18:12:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;OS&#34;&gt;&lt;a href=&#34;#OS&#34; class=&#34;headerlink&#34; title=&#34;OS&#34;&gt;&lt;/a&gt;OS&lt;/h1&gt;&lt;h1 id=&#34;Net&#34;&gt;&lt;a href=&#34;#Net&#34; class=&#34;headerlink&#34; title=&#34;Net&#34;&gt;&lt;/a&gt;Net&lt;/h1&gt;&lt;h3 id=&#34;Tinyhttpd（示例代码）&#34;&gt;&lt;a href=&#34;#Tinyhttpd（示例代码）&#34; class=&#34;headerlink&#34; title=&#34;Tinyhttpd（示例代码）&#34;&gt;&lt;/a&gt;Tinyhttpd（示例代码）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;tinyhttpd&lt;/strong&gt;是一个超轻量型Http Server，使用C语言开发，全部代码只有 502 行（包括注释），附带一个简单的 Client 可以通过阅读这段代码理解一个 Http Server 的本质。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tinyhttpd 是我为学校项目编写的一个相对简单的网络服务器。虽然非常简单，但 tinyhttpd 是线程化的，可以处理基本的 CGI 脚本！这是一个用于演示 http 背后概念的教育工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;项目地址&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;http://sourceforge.net/projects/tinyhttpd/&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&#34;MQTT&#34;&gt;&lt;a href=&#34;#MQTT&#34; class=&#34;headerlink&#34; title=&#34;MQTT&#34;&gt;&lt;/a&gt;MQTT&lt;/h2&gt;&lt;h1 id=&#34;Tools&#34;&gt;&lt;a href=&#34;#Tools&#34; class=&#34;headerlink&#34; title=&#34;Tools&#34;&gt;&lt;/a&gt;Tools&lt;/h1&gt;&lt;h2 id=&#34;CRC&#34;&gt;&lt;a href=&#34;#CRC&#34; class=&#34;headerlink&#34; title=&#34;CRC&#34;&gt;&lt;/a&gt;CRC&lt;/h2&gt;&lt;h3 id=&#34;libcrc&#34;&gt;&lt;a href=&#34;#libcrc&#34; class=&#34;headerlink&#34; title=&#34;libcrc&#34;&gt;&lt;/a&gt;libcrc&lt;/h3&gt;&lt;p&gt;Libcrc - C 语言多平台 MIT 许可 CRC 库&lt;br&gt;&lt;a href=&#34;https://github.com/lammertb/libcrc&#34;&gt;https://github.com/lammertb/libcrc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;cJSON&#34;&gt;&lt;a href=&#34;#cJSON&#34; class=&#34;headerlink&#34; title=&#34;cJSON&#34;&gt;&lt;/a&gt;cJSON&lt;/h2&gt;&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DaveGamble/cJSON&#34;&gt;https://github.com/DaveGamble/cJSON&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;&lt;a href=&#34;#单元测试&#34; class=&#34;headerlink&#34; title=&#34;单元测试&#34;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;h3 id=&#34;Cmockery-单元测试框架&#34;&gt;&lt;a href=&#34;#Cmockery-单元测试框架&#34; class=&#34;headerlink&#34; title=&#34;Cmockery 单元测试框架&#34;&gt;&lt;/a&gt;Cmockery 单元测试框架&lt;/h3&gt;&lt;p&gt;Cmockery 是一个轻量级库，用于编写 C 单元测试。google 开发。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/cmockery&#34;&gt;https://github.com/google/cmockery&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;libev&#34;&gt;&lt;a href=&#34;#libev&#34; class=&#34;headerlink&#34; title=&#34;libev&#34;&gt;&lt;/a&gt;libev&lt;/h3&gt;&lt;p&gt;libev是一个全功能和高性能的事件循环库，libev 参考并模仿了libevent和perl模块Event。它用于GNU虚拟专用以太网、rxvt-unicode、auditd、Deliantra MORPG服务器和客户端以及许多其他程序。node.js曾经嵌入了libev，现在更换为了libuv。&lt;/p&gt;
&lt;p&gt;其以高效出名，它可以将 IO 事件、定时器、和信号统一起来，统一放在事件处理这一套框架下处理。&lt;/p&gt;
&lt;p&gt;基于 Reactor 模式，效率较高，并且代码精简（4.15 版本 8000 多行），是学习事件驱动编程的很好的资源。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://libev.schmorp.de/&#34;&gt;http://libev.schmorp.de/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/enki/libev&#34;&gt;https://github.com/enki/libev&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;QR-Code&#34;&gt;&lt;a href=&#34;#QR-Code&#34; class=&#34;headerlink&#34; title=&#34;QR Code&#34;&gt;&lt;/a&gt;QR Code&lt;/h2&gt;&lt;h3 id=&#34;QR-Code-generator-library&#34;&gt;&lt;a href=&#34;#QR-Code-generator-library&#34; class=&#34;headerlink&#34; title=&#34;QR Code generator library&#34;&gt;&lt;/a&gt;QR Code generator library&lt;/h3&gt;&lt;p&gt;该项目旨在成为多种语言中最好、最清晰的二维码生成器库。主要目标是灵活的选项和绝对的正确性。次要目标是紧凑的实现大小和良好的文档注释。&lt;br&gt;&lt;a href=&#34;https://github.com/nayuki/QR-Code-generator&#34;&gt;https://github.com/nayuki/QR-Code-generator&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2023/9c721b62/</guid>
            <title>USB</title>
            <link>https://www.oikiou.top/2023/9c721b62/</link>
            <category>embedded</category>
            <category>usb</category>
            <pubDate>Fri, 01 Dec 2023 18:12:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;USB-版本及发展历史&#34;&gt;&lt;a href=&#34;#USB-版本及发展历史&#34; class=&#34;headerlink&#34; title=&#34;USB 版本及发展历史&#34;&gt;&lt;/a&gt;USB 版本及发展历史&lt;/h1&gt;&lt;p&gt;USB接口自1994年推出以来，经过26年的发展，经过USB1.0&amp;#x2F;1.1、USB2.0、USB3.x，最终发展到了现在的USB4；传输速率也从最开始的1.5Mbps，大幅提高到了最新的40Gbps。&lt;br&gt;&lt;img src=&#34;/2023/9c721b62/image-20240621114302408.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;USB1-0&#34;&gt;&lt;a href=&#34;#USB1-0&#34; class=&#34;headerlink&#34; title=&#34;USB1.0&#34;&gt;&lt;/a&gt;USB1.0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1996年1月15日推出USB1.0接口规范&lt;/li&gt;
&lt;li&gt;规定低速传输速率为1.5Mbit&amp;#x2F;s&lt;/li&gt;
&lt;li&gt;对外提供供电电压为5V，最大电流500mA&lt;/li&gt;
&lt;li&gt;一般适用于鼠标、键盘等低速HID设备。&lt;/li&gt;
&lt;li&gt;支持热插拨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;USB1-1&#34;&gt;&lt;a href=&#34;#USB1-1&#34; class=&#34;headerlink&#34; title=&#34;USB1.1&#34;&gt;&lt;/a&gt;USB1.1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1998年9月23日对原来的USB1.0进行升级，提出了USB1.1&lt;/li&gt;
&lt;li&gt;USB1.1规定了全速传输速率为12Mbit&amp;#x2F;s,并兼容USB1.0的1.5Mbit&amp;#x2F;s&lt;/li&gt;
&lt;li&gt;传输线缆最大度度3m&lt;/li&gt;
&lt;li&gt;对外提供供电电压为5V，最大电流500mA&lt;/li&gt;
&lt;li&gt;一般适用于鼠标、键盘、U盘，光驱等。&lt;/li&gt;
&lt;li&gt;一个USB接口理论上可以支持127个设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;USB2-0&#34;&gt;&lt;a href=&#34;#USB2-0&#34; class=&#34;headerlink&#34; title=&#34;USB2.0&#34;&gt;&lt;/a&gt;USB2.0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2000年4月27日由USB-IF组织提出了USB2.0总线协议规范&lt;/li&gt;
&lt;li&gt;具备480Mbit&amp;#x2F;s的高速传输速率，向下兼容低速1.5Mbit&amp;#x2F;s和全速12Mit&amp;#x2F;s&lt;/li&gt;
&lt;li&gt;传输线缆最大度度5m&lt;/li&gt;
&lt;li&gt;对外提供供电电压为5V，最大电流500mA&lt;/li&gt;
&lt;li&gt;通过HUB级联的方式，一个USB接口理论上可以扩展127个USB设备&lt;/li&gt;
&lt;li&gt;支持 4种传输方式：控制传输、中断传输、同步传输和块传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;USB3 的名字有些多&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;带宽&lt;/th&gt;
&lt;th&gt;别名，指的是同一种&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;USB3.0&lt;/td&gt;
&lt;td&gt;2008年11月17&lt;/td&gt;
&lt;td&gt;5Gbps&lt;/td&gt;
&lt;td&gt;SuperSpeed USB、USB 3.2 Gen 1、USB 3.1 Gen 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB3.1&lt;/td&gt;
&lt;td&gt;2013年7月&lt;/td&gt;
&lt;td&gt;10Gbps&lt;/td&gt;
&lt;td&gt;SuperSpeed USB 10Gbps、USB 3.2 Gen 2、USB 3.1 Gen 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB3.2&lt;/td&gt;
&lt;td&gt;2017年9月份&lt;/td&gt;
&lt;td&gt;20Gbps&lt;/td&gt;
&lt;td&gt;SuperSpeed USB 20Gbps、USB 3.2 Gen 2x2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;USB3-0-USB-3-2-Gen-1-USB-3-1-Gen-1&#34;&gt;&lt;a href=&#34;#USB3-0-USB-3-2-Gen-1-USB-3-1-Gen-1&#34; class=&#34;headerlink&#34; title=&#34;USB3.0 &amp;#x2F; USB 3.2 Gen 1 &amp;#x2F; USB 3.1 Gen 1&#34;&gt;&lt;/a&gt;USB3.0 &amp;#x2F; USB 3.2 Gen 1 &amp;#x2F; USB 3.1 Gen 1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;超高速USB3.0规范于2008年11月17日出USB-IF组织推出。&lt;/li&gt;
&lt;li&gt;提供更高的5.0Gbit&amp;#x2F;s的超高速传输速度，并向下兼容低速1.5Mbits&amp;#x2F;s、全速12Mbit&amp;#x2F;s和高速480Mbit&amp;#x2F;s传输速率&lt;/li&gt;
&lt;li&gt;对外提供供电电压为5V，最大电流900mA&lt;/li&gt;
&lt;li&gt;传输线缆最大度度3m&lt;/li&gt;
&lt;li&gt;增加了新的电源管理功能，支持待机、睡眠以及暂定模式，更加省电。&lt;/li&gt;
&lt;li&gt;全双工通讯。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;USB3-1-USB-3-2-Gen-2-USB-3-1-Gen-2&#34;&gt;&lt;a href=&#34;#USB3-1-USB-3-2-Gen-2-USB-3-1-Gen-2&#34; class=&#34;headerlink&#34; title=&#34;USB3.1 &amp;#x2F; USB 3.2 Gen 2 &amp;#x2F; USB 3.1 Gen 2&#34;&gt;&lt;/a&gt;USB3.1 &amp;#x2F; USB 3.2 Gen 2 &amp;#x2F; USB 3.1 Gen 2&lt;/h2&gt;&lt;p&gt;2013年7月份，USB 3.1发布，速度翻番至10Gbps，同时USB-IF就把USB 3.0改名为USB 3.1 Gen 1，新的USB 3.1则叫做USB 3.1 Gen 2。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2013年7月份发布&lt;/li&gt;
&lt;li&gt;速度翻番至10Gbps&lt;/li&gt;
&lt;li&gt;新增USB A&amp;#x2F;V影音传输。以更适合作为移动设备的输出接口，尤其是可逆的Type-C。&lt;/li&gt;
&lt;li&gt;将供电的最高允许标准提高到了20V&amp;#x2F;5A，供电100W。&lt;/li&gt;
&lt;li&gt;必须使用USB Type-C接口才能达到10Gbps的速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;USB3-2-USB-3-2-Gen-2x2&#34;&gt;&lt;a href=&#34;#USB3-2-USB-3-2-Gen-2x2&#34; class=&#34;headerlink&#34; title=&#34;USB3.2 &amp;#x2F; USB 3.2 Gen 2x2&#34;&gt;&lt;/a&gt;USB3.2 &amp;#x2F; USB 3.2 Gen 2x2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2017年9月份，USB 3.2发布。&lt;/li&gt;
&lt;li&gt;据最新公布的规范，USB 3.0、USB 3.1的版本命名都将彻底消失，统一被划入USB 3.2的序列，三者分别再次改名叫做USB 3.2 Gen 1、USB 3.2 Gen 2、USB 3.2 Gen 2x2。&lt;/li&gt;
&lt;li&gt;它们还各自有一个市场推广命名，分别是SuperSpeed USB、SuperSpeed USB 10Gbps、SuperSpeed USB 20Gbps。&lt;br&gt;  之所以想出USB 3.2 Gen2x2这样的名字，大概是因为它使用了USB Type-C接口的上下两端全部针脚，速度得以翻番。&lt;/li&gt;
&lt;li&gt;必须使用USB Type-C接口才能达到20Gbps的速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;USB-描述符&#34;&gt;&lt;a href=&#34;#USB-描述符&#34; class=&#34;headerlink&#34; title=&#34;USB 描述符&#34;&gt;&lt;/a&gt;USB 描述符&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  USB是个通用的总线，端口都是统一的。但是USB设备却各种各样，例如USB鼠标，USB键盘，U盘等等，那么USB主机是如何识别出不同的设备的呢？这就要依赖于描述符了。&lt;/p&gt;
&lt;p&gt;  USB的描述符主要有&lt;strong&gt;设备描述符，配置描述符，接口描述符，端点描述符，字符串描述符，HID描述符，报告描述符&lt;/strong&gt;等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;USB各个描述符之间的关系&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  一个USB设备有一个&lt;strong&gt;设备描述符&lt;/strong&gt;，设备描述符里面决定了该设备有&lt;strong&gt;多少种配置&lt;/strong&gt;，每种配置描述符对应着配置描述符；&lt;/p&gt;
&lt;p&gt;  而在&lt;strong&gt;配置描述符&lt;/strong&gt;中又定义了该配置里面有&lt;strong&gt;多少个接口&lt;/strong&gt;，每个接口有对应的接口描述符；&lt;/p&gt;
&lt;p&gt;  在&lt;strong&gt;接口描述符&lt;/strong&gt;里面又定义了该接口有&lt;strong&gt;多少个端点&lt;/strong&gt;，每个端点对应一个端点描述符；&lt;/p&gt;
&lt;p&gt;  在&lt;strong&gt;端点描述符&lt;/strong&gt;定义了端点的大小，类型等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  由此我们可以看出，USB的描述符之间的关系是一层一层的，最上一层是设备描述符，下面是配置描述符，再下面是接口描述符，再下面是端点描述符。&lt;/p&gt;
&lt;p&gt;  在获取描述符时，先获取设备描述符，然后再获取配置描述符，根据配置描述符中的配置集合长度，一次将配置描述符、接口描述符、端点描述符一起一次读回。&lt;/p&gt;
&lt;p&gt;  其中可能还会有获取设备序列号，厂商字符串，产品字符串等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;各个描述符的编号&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; DEVICE_DESCRIPTOR               0x01  &lt;span class=&#34;hljs-comment&#34;&gt;//设备描述符   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; CONFIGURATION_DESCRIPTOR        0x02  &lt;span class=&#34;hljs-comment&#34;&gt;//配置描述符   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; STRING_DESCRIPTOR               0x03  &lt;span class=&#34;hljs-comment&#34;&gt;//字符串描述符   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; INTERFACE_DESCRIPTOR            0x04  &lt;span class=&#34;hljs-comment&#34;&gt;//接口描述符   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ENDPOINT_DESCRIPTOR             0x05  &lt;span class=&#34;hljs-comment&#34;&gt;//端点描述符  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;&lt;img src=&#34;/2023/9c721b62/v2-43379ad330f4acd76ce885f2e1359458_720w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/9c721b62/usbdes.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/9c721b62/image-20240620151939825.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;设备描述符-0x01-Device-Descriptor&#34;&gt;&lt;a href=&#34;#设备描述符-0x01-Device-Descriptor&#34; class=&#34;headerlink&#34; title=&#34;设备描述符 0x01 Device Descriptor&#34;&gt;&lt;/a&gt;设备描述符 0x01 Device Descriptor&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2023/9c721b62/dev.png&#34; alt=&#34;设备描述符&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义标准的设备描述符结构&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;DEVICE_DCESCRIPTOR_STRUCT&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    BYTE blength;            &lt;span class=&#34;hljs-comment&#34;&gt;// 设备描述符的字节数大小&lt;/span&gt;&lt;br&gt;    BYTE bDescriptorType;    &lt;span class=&#34;hljs-comment&#34;&gt;// 设备描述符类型编号&lt;/span&gt;&lt;br&gt;    WORD bcdUSB;             &lt;span class=&#34;hljs-comment&#34;&gt;// USB版本号&lt;/span&gt;&lt;br&gt;    BYTE bDeviceClass;       &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的设备类代码&lt;/span&gt;&lt;br&gt;    BYTE bDeviceSubClass;    &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的子类代码&lt;/span&gt;&lt;br&gt;    BYTE bDeviceProtocol;    &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的设备协议代码&lt;/span&gt;&lt;br&gt;    BYTE bMaxPacketSize0;    &lt;span class=&#34;hljs-comment&#34;&gt;// 端点0的最大包大小&lt;/span&gt;&lt;br&gt;    WORD idVendor;           &lt;span class=&#34;hljs-comment&#34;&gt;// 厂商编号&lt;/span&gt;&lt;br&gt;    WORD idProduct;          &lt;span class=&#34;hljs-comment&#34;&gt;// 产品编号&lt;/span&gt;&lt;br&gt;    WORD bcdDevice;          &lt;span class=&#34;hljs-comment&#34;&gt;// 设备出厂编号&lt;/span&gt;&lt;br&gt;    BYTE iManufacturer;      &lt;span class=&#34;hljs-comment&#34;&gt;// 设备厂商字符串的索引&lt;/span&gt;&lt;br&gt;    BYTE iProduct;           &lt;span class=&#34;hljs-comment&#34;&gt;// 描述产品字符串的索引&lt;/span&gt;&lt;br&gt;    BYTE iSerialNumber;      &lt;span class=&#34;hljs-comment&#34;&gt;// 描述设备序列号字符串的索引&lt;/span&gt;&lt;br&gt;    BYTE bNumConfigurations; &lt;span class=&#34;hljs-comment&#34;&gt;// 可能的配置数量&lt;/span&gt;&lt;br&gt;&amp;#125; DEVICE_DESCRIPTOR_STRUCT, *pDEVICE_DESCRIPTOR_STRUCT;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 实际的设备描述符示例&lt;/span&gt;&lt;br&gt;DEVICE_DESCRIPTOR_STRUCT device_descriptor = &amp;#123;&lt;br&gt;.blength           =&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(DEVICE_DESCRIPTOR_STRUCT),&lt;span class=&#34;hljs-comment&#34;&gt;// 设备描述符的字节数大小，这里是18字节&lt;/span&gt;&lt;br&gt;.bDescriptorType   =DEVICE_DESCRIPTOR,  &lt;span class=&#34;hljs-comment&#34;&gt;// 设备描述符类型编号，设备描述符是01&lt;/span&gt;&lt;br&gt;.bcdUSB            =&lt;span class=&#34;hljs-number&#34;&gt;0x1001&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;// USB版本号，这里是USB01.10，即USB1.1。由于51是大端模式，所以高低字节交换&lt;/span&gt;&lt;br&gt;.bDeviceClass      =&lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的设备类代码，0表示类型在接口描述符中定义&lt;/span&gt;&lt;br&gt;.bDeviceSubClass   =&lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的子类代码，上面一项为0时，本项也要设置为0&lt;/span&gt;&lt;br&gt;.bDeviceProtocol   =&lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// USB分配的设备协议代码，上面一项为0时，本项也要设置为0&lt;/span&gt;&lt;br&gt;.bMaxPacketSize0   =&lt;span class=&#34;hljs-number&#34;&gt;0x10&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// 端点0的最大包大小，这里为16字节&lt;/span&gt;&lt;br&gt;.idVendor          =&lt;span class=&#34;hljs-number&#34;&gt;0x7104&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;// 厂商编号，这个是需要跟USB组织申请的ID号，表示厂商代号。&lt;/span&gt;&lt;br&gt;.idProduct         =&lt;span class=&#34;hljs-number&#34;&gt;0xf0ff&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;// 该产品的编号，跟厂商编号一起配合使用，让主机注册该设备并加载相应的驱动程序&lt;/span&gt;&lt;br&gt;.bcdDevice         =&lt;span class=&#34;hljs-number&#34;&gt;0x0100&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;// 设备出厂编号&lt;/span&gt;&lt;br&gt;.iManufacturer     =&lt;span class=&#34;hljs-number&#34;&gt;0x01&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// 设备厂商字符串的索引，在获取字符串描述符时，使用该索引号来识别不同的字符串&lt;/span&gt;&lt;br&gt;.iProduct          =&lt;span class=&#34;hljs-number&#34;&gt;0x02&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// 描述产品字符串的索引，同上&lt;/span&gt;&lt;br&gt;.iSerialNumber     =&lt;span class=&#34;hljs-number&#34;&gt;0x03&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;// 描述设备序列号字符串的索引，同上&lt;/span&gt;&lt;br&gt;.bNumConfigurations=&lt;span class=&#34;hljs-number&#34;&gt;0x01&lt;/span&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 可能的配置数为1，即该设备只有一个配置&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bLength&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是设备描述符的总长度，以字节为单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bDescriptorType&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表了本描述符的类型。&lt;/li&gt;
&lt;li&gt;用于描述设备的描述符 是0x01。&lt;ul&gt;
&lt;li&gt;其他描述符的数值及含义&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;/2023/9c721b62/d976ff82852a45ea8fc59183689cbd5b.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bcdUSB&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示了设备支持的USB版本，通常是最新版本。&lt;/li&gt;
&lt;li&gt;这是一个&lt;a href=&#34;https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;spm=1001.2101.3001.7020&#34;&gt;二进制&lt;/a&gt;代码形式的十进制数据，采用0xAABC的形式，其中A是主版本号，B是次版本号，C是子次版本号。&lt;/li&gt;
&lt;li&gt;例如，USB2.0设备拥有0x0200值，USB1.1设备拥有0x0110值。通常，主机将使用bcdUSB以确定需要加载的USB驱动器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bDeviceClass&lt;/strong&gt;、&lt;strong&gt;bDeviceSubClass&lt;/strong&gt;、&lt;strong&gt;bDeviceProtocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分别代表&lt;strong&gt;设备类型&lt;/strong&gt;，&lt;strong&gt;子类型&lt;/strong&gt;，&lt;strong&gt;设备使用的协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;USB-IF区分设备类分了三个等级（类-子类-协议码）其中，&lt;ul&gt;
&lt;li&gt;类包含人机交互类、图像类、无线类、音频类等等，&lt;/li&gt;
&lt;li&gt;子类比如音频类的音频控制、音频流等等，&lt;/li&gt;
&lt;li&gt;协议比如人机接口类中的鼠标、键盘、&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%A7%A6%E6%91%B8%E5%B1%8F&amp;spm=1001.2101.3001.7020&#34;&gt;触摸屏&lt;/a&gt;等，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;  为何会有这么多USB的Class分类，子分类，设备协议。&lt;br&gt;  我们要知道，USB协议设计的目的，就是为实现通用，用单一的USB接口取代之前种类繁多的各种其他接口。而为了取代其他各种接口，那意味着就要实现各种设备所对应的各种功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bMaxPackeSize0&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端点一次最大传多少个字节。&lt;/li&gt;
&lt;li&gt;根据设备，数据包的大小可以为 8 个字节、 16 个字节、 32 个字节和 64 个字节。&lt;/li&gt;
&lt;li&gt;USB协议里有规定，端点0最低8字节，端点的最大传输大小和USB速度等级以及传输类型有关，&lt;strong&gt;控制传输一般使用端点0&lt;/strong&gt;，低速最大8字节，全速和高速最大传输64字节：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;idVendor&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表着设备的生产商ID,由USB设备生产商向USB-IF官方来统一管理和申请。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;idProduct&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表着该生产商生产的产品编号，同一厂商下的不同idProduct代表着该公司不同的产品系列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bcdDevice&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个BCD编码格式，代表着设备的出产编号，或者同一产品的版本更新迭代。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iManufacturer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述厂商的字符串的索引，为0则表示没有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iProduct&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述产品的字符串的索引，为0则表示没有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iSerialNumber&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品序列号字符串的索引，为0则表示没有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bNumConfigurations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指示设备有多少个配置，前面提到过，一个USB可能有多个配置，一般USB产品都是1个配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置描述符-0x02-Configuration-Descriptor&#34;&gt;&lt;a href=&#34;#配置描述符-0x02-Configuration-Descriptor&#34; class=&#34;headerlink&#34; title=&#34;配置描述符 0x02 Configuration Descriptor&#34;&gt;&lt;/a&gt;配置描述符 0x02 Configuration Descriptor&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;偏移&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;大小&lt;br&gt;Byte&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;bLength&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该描述符的长度 &amp;#x3D; 9 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;bDescriptorType&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;描述符类型 &amp;#x3D; 配置（02h）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;wTotalLength&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;总长度包括接口和端点描述符在内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;bNumInterfaces&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;本配置中接口的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;bConfigurationValue&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;SET_CONFIGURATION 请求所使用的配置值，用于选择该配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;iConfiguration&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;描述该配置的字符串索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;bmAttributes&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;位 7：预留（设置为 1） &lt;br&gt;位 6：自供电 &lt;br&gt;位 5：远程唤醒&lt;br&gt;位 4:0：保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;bMaxPower&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;本配置所需的最大功耗（单位为 2 mA）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bLength&lt;/strong&gt; 1字节，表示配置描述符的长度，配置描述符的长度是9字节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bDescriptor&lt;/strong&gt; 1字节，表示描述符的类型，配置描述符的类型编码为 0x02。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;wTotalLength&lt;/strong&gt; 2字节，是整个配置描述符集合的总长度。包括配置描述符，接口描述符，端点描述符和类特殊描述符（如果有）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bNumInterfaces&lt;/strong&gt; 1字节，则定义了在该指定配置中接口总数。最小为 1 个接口，通常功能单一的设备只有一个接口（如鼠标），而复合设备具有多个接口（如音频设备）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bConfigurationValue&lt;/strong&gt; 1字节，表示该配置的值，设置配置请求时会发送一个配置值，如果某个配置的bConfigurationValue和它相匹配，就表示该配置被激活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iConfiguration&lt;/strong&gt; 1字节，描述该配置的字符串的索引，如果该值为0，表示没有字符串来描述它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bmAttributes&lt;/strong&gt; 1字节，定义了 USB 设备的一些特性。 位7保留，必须设置为1，位6表示供电方式，设置为 0表示设备由总线供电，设置为 1 表示设备自供电。位5表示是否支持远程唤醒，设置为 1表示支持远程唤醒，设置为 0 表示不支持远程唤醒。位4~位0设置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bMaxPower&lt;/strong&gt; 1字节，表示设备需要从总线获取的最大电流量，以 2 mA 为单位。如需要200mA的最大电流，则该字段的值为100。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字符串描述符-0x03&#34;&gt;&lt;a href=&#34;#字符串描述符-0x03&#34; class=&#34;headerlink&#34; title=&#34;字符串描述符 0x03&#34;&gt;&lt;/a&gt;字符串描述符 0x03&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;偏移&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;大小（字节）&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;bLength&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该描述符的长度 &amp;#x3D; 7 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;bDescriptorType&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;描述符类型 &amp;#x3D; STRING （03h）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2..n&lt;/td&gt;
&lt;td&gt;bString 或 wLangID&lt;/td&gt;
&lt;td&gt;变化&lt;/td&gt;
&lt;td&gt;Unicode 编码字符串 或 LANGID 代码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;字符串描述符是可选的，字符串描述符用于描述一些方便人们阅读的信息，比如制造商、设备名称啥的。如果一个设备没有字符串描述符，那么其他描述符中和字符串有关的索引值都必须为 0。&lt;/p&gt;
&lt;h2 id=&#34;接口描述符-0x04-Interface-Descriptor&#34;&gt;&lt;a href=&#34;#接口描述符-0x04-Interface-Descriptor&#34; class=&#34;headerlink&#34; title=&#34;接口描述符 0x04 Interface Descriptor&#34;&gt;&lt;/a&gt;接口描述符 0x04 Interface Descriptor&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;偏移&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;大小（字节）&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;bLength&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该描述符的长度 &amp;#x3D; 9 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;bDescriptorType&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;描述符类型 &amp;#x3D; 接口（04h）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;bInterfaceNumber&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该接口基于零的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;bAlternateSetting&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;备用设置值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;bNumEndpoints&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该接口所使用的端点数量（不包含 EP0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;bInterfaceClass&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;接口类别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;bInterfaceSubclass&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;接口子类别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;bInterfaceProtocol&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;接口协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;iInterface&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该接口字符串描述符索引&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bLength&lt;/strong&gt; 1字节，表示接口描述符的长度，标准的接口描述符的长度为9字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bDescriptorType&lt;/strong&gt; 1字节，表示描述符的类型，接口描述符的类型编码为 0x04。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bInterfaceNumber&lt;/strong&gt; 1字节，表示该接口的编号，如果一个配置具有多个接口，每个接口的编号都不相同，从0开始依次递增对一个配置的接口进行编号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bAlternateSetting&lt;/strong&gt; 1字节，接口的备用编号，很少用到，设置为0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bNumEndpoints&lt;/strong&gt; 1字节，表示该接口的端点数（不包括0端点）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bInterfaceClass、bInterfaceSubClass、bInterfaceProtocol&lt;/strong&gt; 均为1字节，分别表示接口所使用的类，子类以及协议，由USB协会规定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iInterface&lt;/strong&gt; 1字节，描述该接口的字符串的索引值，如果为0，表示没有字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;bInterfaceClass&lt;/strong&gt;、&lt;strong&gt;bDeviceClass&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Base Class&lt;/th&gt;
&lt;th&gt;Descriptor Usage&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;00h&lt;/td&gt;
&lt;td&gt;Device&lt;/td&gt;
&lt;td&gt;Use class information in the Interface Descriptors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Audio USB音频，参见UAC规范&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;02h&lt;/td&gt;
&lt;td&gt;Both&lt;/td&gt;
&lt;td&gt;Communications and &lt;a href=&#34;https://www.usbzh.com/article/detail-842.html&#34;&gt;CDC&lt;/a&gt; Control 网卡、调制解调器、串列端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;03h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.usbzh.com/article/detail-76.html&#34;&gt;HID&lt;/a&gt; (Human Interface Device)，键盘、鼠标 参见&lt;a href=&#34;https://www.usbzh.com/article/detail-76.html&#34;&gt;HID&lt;/a&gt;规范&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;05h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Physical 控制杆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Image 影像扫描仪、Picture Transfer Protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;07h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Printer 打印机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;08h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Mass Storage U盘、移动硬盘、存储卡读卡器、数字相机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;09h&lt;/td&gt;
&lt;td&gt;Device&lt;/td&gt;
&lt;td&gt;Hub &lt;a href=&#34;https://www.usbzh.com/article/detail-25.html&#34;&gt;集线器&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0Ah&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.usbzh.com/article/detail-842.html&#34;&gt;CDC&lt;/a&gt;-Data 调制解调器、网络卡、ISDN、传真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0Bh&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Smart Card 读卡器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0Dh&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Content Security&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0Eh&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Video USB视频，&lt;a href=&#34;https://www.usbzh.com/article/detail-80.html&#34;&gt;UVC&lt;/a&gt;摄像头，参见&lt;a href=&#34;https://www.usbzh.com/article/detail-80.html&#34;&gt;UVC&lt;/a&gt;规范&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0Fh&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Personal Healthcare&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Audio&amp;#x2F;Video Devices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11h&lt;/td&gt;
&lt;td&gt;Device&lt;/td&gt;
&lt;td&gt;Billboard Device Class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;USB Type-C Bridge Class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DCh&lt;/td&gt;
&lt;td&gt;Both&lt;/td&gt;
&lt;td&gt;Diagnostic Device&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E0h&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Wireless Controller 蓝牙&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EFh&lt;/td&gt;
&lt;td&gt;Both&lt;/td&gt;
&lt;td&gt;Miscellaneous&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FEh&lt;/td&gt;
&lt;td&gt;Interface&lt;/td&gt;
&lt;td&gt;Application Specific 红外线资料桥接器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FFh&lt;/td&gt;
&lt;td&gt;Both&lt;/td&gt;
&lt;td&gt;Vendor Specific 自定义USB设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;更多信息参考 &lt;a href=&#34;https://www.usb.org/defined-class-codes&#34;&gt;USB.org&lt;/a&gt; 的部分章节&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;端点描述符-0x05-Endpoint-Descriptor&#34;&gt;&lt;a href=&#34;#端点描述符-0x05-Endpoint-Descriptor&#34; class=&#34;headerlink&#34; title=&#34;端点描述符 0x05 Endpoint Descriptor&#34;&gt;&lt;/a&gt;端点描述符 0x05 Endpoint Descriptor&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;偏移&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;大小&lt;br&gt;Byte&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;bLength&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该描述符长度 &amp;#x3D; 7 个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;bDescriptorType&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;描述符类型 &amp;#x3D; 端点（05h）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;bEndpointAddress&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;位 3…0&lt;/strong&gt;：端点数量 &lt;br/&gt;&lt;strong&gt;位 6…4&lt;/strong&gt;：预留，复位为零 &lt;br/&gt;&lt;strong&gt;位 7&lt;/strong&gt;：端点的方向。控制端点可以忽略该位。 &lt;br/&gt;0 &amp;#x3D; OUT 端点 (主机到设备) &lt;br/&gt;1 &amp;#x3D; IN 端点 (设备到主机)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;bmAttributes&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;位 1…0&lt;/strong&gt;：传输类型 &lt;br/&gt;00 &amp;#x3D; 控制传输 &lt;br/&gt;01 &amp;#x3D; 同步传输 &lt;br/&gt;10 &amp;#x3D; 批量传输 &lt;br/&gt;11 &amp;#x3D; 中断传输 &lt;br/&gt;如果该端点不是同步端点，那么位 5 到位 2 将被预留，必须将这些位设置为零。如果该端点是同步的，这些位将按如下内容定义： &lt;br/&gt;&lt;strong&gt;位 3…2&lt;/strong&gt;：同步类型 &lt;br/&gt;00 &amp;#x3D; 无同步 &lt;br/&gt;01 &amp;#x3D; 异步 &lt;br/&gt;10 &amp;#x3D; 自适应 &lt;br/&gt;11 &amp;#x3D; 同步 &lt;br/&gt;&lt;strong&gt;位 5…4&lt;/strong&gt;：用途类型 &lt;br/&gt;00 &amp;#x3D; 数据端点 &lt;br/&gt;01 &amp;#x3D; 反馈端点 &lt;br/&gt;10 &amp;#x3D; 隐式反馈数据端点 &lt;br/&gt;数值 11 表示保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;wMaxPacketSize&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该端点的数据包最大尺寸&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;bInterval&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;中断端点的轮询间隔，单位为 ms（对于同步端点，该间隔为 1 ms；控制或批量端点可能忽略该字段）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bLength&lt;/strong&gt; 1字节，表示端点描述符的长度，标准的端点描述符的长度为7字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bDescriptorType&lt;/strong&gt; 1字节，表示描述符的类型，端点描述符的类型编码为 0x05。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bEndpointAddress&lt;/strong&gt; 1字节，表示该端点的地址和方向。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bmAttributes&lt;/strong&gt; 1字节，表示该端点的属性，详细看上表。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transfer Type&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制CONTROL&lt;/strong&gt; 控制端点被用来控制对 USB 设备的不同部分访问。&lt;em&gt;通常用作配置设备、获取设备信息、发送命令到设备或获取设备状态报告&lt;/em&gt;。这些端点通常较小。&lt;em&gt;每个 USB 设备都有一个控制端点称为”端点 0”, 被 USB 核心用来在插入时配置设备&lt;/em&gt;。USB协议保证总有足够的带宽留给控制端点传送数据到设备.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断INTERRUPT&lt;/strong&gt;每当 USB 主机向设备请求数据时，中断端点以固定的速率传送&lt;em&gt;小量的数据&lt;/em&gt;。此为USB 键盘和鼠标的主要的数据传送方法。它还用以传送数据到 USB 设备来控制设备。&lt;em&gt;通常不用来传送大量数据&lt;/em&gt;。USB协议保证总有足够的带宽留给中断端点传送数据到设备.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批量BULK&lt;/strong&gt;  批量端点用以传送大量数据。这些端点常比中断端点大得多. 它们普遍用于&lt;em&gt;不能有任何数据丢失的数据&lt;/em&gt;。USB 协议&lt;em&gt;不保证传输在特定时间范围内完成&lt;/em&gt;。如果总线上没有足够的空间来发送整个BULK包，它被分为多个包进行传输。这些端点普遍用于打印机、USB Mass Storage和USB网络设备上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等时ISOCHRONOUS&lt;/strong&gt; 等时端点也批量传送大量数据, 但是这个数据&lt;em&gt;不被保证能送达&lt;/em&gt;。这些端点用在可以处理数据丢失的设备中，并且更多依赖于保持持续的数据流。如音频和视频设备等等。&lt;/li&gt;
&lt;li&gt;对比总结：&lt;em&gt;控制&lt;/em&gt;和&lt;em&gt;批量&lt;/em&gt;端点用于异步数据传送，而&lt;em&gt;中断&lt;/em&gt;和&lt;em&gt;同步&lt;/em&gt;端点是周期性的。这意味着这些端点被设置来在固定的时间连续传送数据，USB 核心为它们保留了相应的带宽。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wMaxPacketSize&lt;/strong&gt; 2字节，表示该端点的数据包最大长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bInterval&lt;/strong&gt; 1字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个端点描述符都规定了该端点所支持的最大数据包长 (wMaxPacketSize)，主机每次发送数据包，都不能超过端点的最大包长，各种端点的最大包长如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端点类型&lt;/th&gt;
&lt;th&gt;最大包长 (低速)&lt;/th&gt;
&lt;th&gt;最大包长 (全速)&lt;/th&gt;
&lt;th&gt;最大包长 (高)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;控制端点&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&amp;#x2F;16&amp;#x2F;32&amp;#x2F;64&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实时端点&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;1023&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中断端点&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;批量端点&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;8&amp;#x2F;16&amp;#x2F;32&amp;#x2F;64&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;HID&#34;&gt;&lt;a href=&#34;#HID&#34; class=&#34;headerlink&#34; title=&#34;HID&#34;&gt;&lt;/a&gt;HID&lt;/h1&gt;&lt;h1 id=&#34;UVC&#34;&gt;&lt;a href=&#34;#UVC&#34; class=&#34;headerlink&#34; title=&#34;UVC&#34;&gt;&lt;/a&gt;UVC&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;UVC，全称为：USB video(device) class,是微软与另外几家设备厂商联合推出的为USB视频捕获设备定义的协议标准，目前已成为USB org标准之一。&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2018/ef667962/</guid>
            <title>嵌入式编程杂乱笔记</title>
            <link>https://www.oikiou.top/2018/ef667962/</link>
            <category>embedded</category>
            <category>note</category>
            <category>stm32</category>
            <pubDate>Sun, 11 Mar 2018 22:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;嵌入式编程杂乱笔记目录&#34;&gt;&lt;a href=&#34;#嵌入式编程杂乱笔记目录&#34; class=&#34;headerlink&#34; title=&#34;嵌入式编程杂乱笔记目录&#34;&gt;&lt;/a&gt;嵌入式编程杂乱笔记目录&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;硬件类&#34;&gt;&lt;a href=&#34;#硬件类&#34; class=&#34;headerlink&#34; title=&#34;硬件类&#34;&gt;&lt;/a&gt;硬件类&lt;/h1&gt;&lt;h2 id=&#34;NTC和PTC&#34;&gt;&lt;a href=&#34;#NTC和PTC&#34; class=&#34;headerlink&#34; title=&#34;NTC和PTC&#34;&gt;&lt;/a&gt;NTC和PTC&lt;/h2&gt;&lt;p&gt;NTC (Negative Temperature Coefficient 负温度系数)      PTC (Positive 正温度系数)&lt;/p&gt;
&lt;h2 id=&#34;VCC、-VDD、VEE、VSS区别&#34;&gt;&lt;a href=&#34;#VCC、-VDD、VEE、VSS区别&#34; class=&#34;headerlink&#34; title=&#34;VCC、 VDD、VEE、VSS区别&#34;&gt;&lt;/a&gt;VCC、 VDD、VEE、VSS区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一、解释&lt;br&gt;VCC：C&amp;#x3D;circuit 表示电路的意思, 即接入电路的电压；&lt;br&gt;VDD：D&amp;#x3D;device 表示器件的意思, 即器件内部的工作电压；&lt;br&gt;VSS：S&amp;#x3D;series 表示公共连接的意思，通常指电路公共接地端电压；&lt;br&gt;VEE：负电压供电；&lt;br&gt;VPP：编程&amp;#x2F;擦除电压。&lt;/li&gt;
&lt;li&gt;二、说明&lt;br&gt;1、对于数字电路来说，VCC是电路的供电电压,VDD是芯片的工作电压（通常Vcc&amp;gt;Vdd），VSS是接地点。&lt;br&gt;2、有些IC既有VDD引脚又有VCC引脚，说明这种器件自身带有电压转换功能。&lt;br&gt;3、在场效应管（或COMS器件）中，VDD为漏极，VSS为源极，VDD和VSS指的是元件引脚，而不表示供电电压。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;NOR-NAND&#34;&gt;&lt;a href=&#34;#NOR-NAND&#34; class=&#34;headerlink&#34; title=&#34;NOR NAND&#34;&gt;&lt;/a&gt;NOR NAND&lt;/h2&gt;&lt;p&gt;NOR(或非) NAND(与非)&lt;/p&gt;
&lt;p&gt;SLC（Single-Level Cell）、MLC（Multi-Level Cell） 、 TLC（Triple-Level Cell）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共同点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者向浮栅中注入电子表示0(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)，未注入表示1，对其清除数据是对其写1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOR FLASH&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;随机读取(可随机读取，能直接运行代码，BIOS)&lt;/li&gt;
&lt;li&gt;随机读取较快、写入较很慢(热电子注入效率更低)、擦除次数较少、&lt;/li&gt;
&lt;li&gt;容量较小、体积较小、可靠性高一些、数据保存期更高&lt;/li&gt;
&lt;li&gt;初始通电消耗更多的电流, 待机状态电流远远更低&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;浮栅 热电子注入方式充电、FN隧道效应放电&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAND FLASH&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;块读取(块读取，不能运行代码)&lt;/li&gt;
&lt;li&gt;随机读取较慢(地址线复用导致)、顺序读取速度较快、写入较快、擦除次数较多、&lt;/li&gt;
&lt;li&gt;容量较大、体积较大、可靠性较低一些(较容易发生位交换现象)、数据保存期低一些&lt;/li&gt;
&lt;li&gt;待机状态功耗较高&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;浮栅 FN隧道效应充电、FN隧道效应放电&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/contenteetimes-images-design-embedded-2018-fl-1-t1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;详细介绍&#34;&gt;&lt;a href=&#34;#详细介绍&#34; class=&#34;headerlink&#34; title=&#34;详细介绍&#34;&gt;&lt;/a&gt;详细介绍&lt;/h3&gt;&lt;h4 id=&#34;浮栅效应管&#34;&gt;&lt;a href=&#34;#浮栅效应管&#34; class=&#34;headerlink&#34; title=&#34;浮栅效应管&#34;&gt;&lt;/a&gt;浮栅效应管&lt;/h4&gt;&lt;p&gt;NOR FLASH 和 NAND FLASH 都是使用浮栅场效应管(Floating Gate FET)作为基本存储单元来存储数据的，浮栅场效应管共有 4 个端电极，分别是为源极（Source）、漏极（Drain）、控制栅极（Control Gate）和浮置栅极（Floating Gate），前 3 个端电极的作用于普通 MOSFET 是一样的，区别仅在于浮栅，FLASH 就是利用浮栅是否存储电荷来表征数字 0’和‘1’的。&lt;/p&gt;
&lt;p&gt;当向浮栅注入电荷后，D 和 S 之间存在导电沟道，从 D 极读到‘0’&lt;span style=&#34;color:#29b6f6&#34;&gt;(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)&lt;/span&gt;；当浮栅中没有电荷时，D 和 S 间没有导电沟道，从 D 极读到‘1’，原理示意图见图&lt;/p&gt;
&lt;p&gt;注：SLC 可以简单认为是利用浮栅是否存储电荷来表征数字 0’和‘1’的，MLC 则是要利用浮栅中电荷的多少来表征‘00’，‘01’，‘10’和‘11’的，TLC 与 MLC 类似。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  SLC传统上，每个储存单元内储存1个信息位，称为单阶储存单元（Single-Level Cell，SLC）。SLC闪存的优点是传输速度更快，功率消耗更低和储存单元的寿命更长，成本也就更高。一般情况下，SLC多数用于企业级的固态硬盘中，由于企业对于数据的安全性要求更高，需要保存更长时间。&lt;/p&gt;
&lt;p&gt;  MLC多阶储存单元（Multi-Level Cell,MLC）可以在每个储存单元内储存2个以上的信息位。与SLC相比，MLC成本较低，其传输速度较慢，功率消耗较高和储存单元的寿命较低。 但目前主流的固态硬盘中，性能较为优秀的产品选用的都是MLC颗粒，因此可以说MLC颗粒的固态硬盘拥有较高的性价比。甚至一些企业级的固态硬盘，使用的也是MLC颗粒，被专门优化过，称为eMLC颗粒，e代表的是企业enterprise。&lt;/p&gt;
&lt;p&gt;  TLC三阶储存单元（Triple-Level Cell, TLC），这种架构的原理与MLC类似，但可以在每个储存单元内储存3个信息位。由于存储的数据密度相对MLC和SLC更大，所以价格也就更便宜，但使用寿命和性能也就更低，不过这并不能阻止人们购买TLC颗粒的固态硬盘。甚至目前市场上绝大多数的入门级产品使用的都是TLC颗粒。而为了解决TLC颗粒过低的写入寿命问题，许多厂商都在研发新技术，3D-TLC就是这样的技术，目前已经比较广泛的应用在产品中，其性能甚至可以和MLC颗粒一较长短，使用寿命得到大幅度的延长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_01_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;读-写-擦除&#34;&gt;&lt;a href=&#34;#读-写-擦除&#34; class=&#34;headerlink&#34; title=&#34;读 写 擦除&#34;&gt;&lt;/a&gt;读 写 擦除&lt;/h5&gt;&lt;p&gt;FLASH 中，常用的向浮栅注入电荷的技术有两种—热电子注入(hot electron injection)和 F-N 隧道效应(Fowler Nordheim tunneling)；从浮栅中挪走电荷的技术通常使用 F-N 隧道效应(Fowler Nordheim tunneling)，基本原理见图。&lt;/p&gt;
&lt;p&gt;写操作就是向浮栅注入电荷的过程，NOR FLASH 通过热电子注入方式向浮栅注入电荷（这种方法的电荷注入效率较低，因此 NOR FLASH 的写速率较低），NAND FLASH 则通过 F-N 隧道效应向浮栅注入电荷。FLASH 在写操作之前，必须先将原来的数据擦除（即将浮栅中的电荷挪走），也即 FLASH 擦除后读出的都是‘1’。&lt;span style=&#34;color:#29b6f6&#34;&gt;(只能擦除再写入的原因应该是擦除和写入加的电压是反向的, 一个是充电, 一个是放电)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;擦除操作就是从浮栅中挪走电荷的过程，NOR FLASH 和 NAND FLASH 都是通过 F-N 隧道效应将浮栅中的电荷挪走的。&lt;/p&gt;
&lt;p&gt;读出操作时，控制栅极上施加的电压很小，不会改变浮栅中的电荷量，即读出操作不会改变 FLASH 中原有的数据，也即浮栅有电荷时，D 和 S 间存在导电沟道，从 D 极读到‘0’&lt;span style=&#34;color:#29b6f6&#34;&gt;(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)&lt;/span&gt;；当浮栅中没有电荷时，D 和 S 间没有导电沟道，从 D 极读到‘1’。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sunev.cn/blog/wp-content/uploads/2020/03/20200311_03_Nor_FLASH_vs_NAND_FLASH.png&#34;&gt;&lt;img src=&#34;/2018/ef667962/20200311_03_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;NOR-和-NAND-Flash-的结构特性&#34;&gt;&lt;a href=&#34;#NOR-和-NAND-Flash-的结构特性&#34; class=&#34;headerlink&#34; title=&#34;NOR 和 NAND Flash 的结构特性&#34;&gt;&lt;/a&gt;NOR 和 NAND Flash 的结构特性&lt;/h4&gt;&lt;h6 id=&#34;NOR-Flash&#34;&gt;&lt;a href=&#34;#NOR-Flash&#34; class=&#34;headerlink&#34; title=&#34;NOR Flash&#34;&gt;&lt;/a&gt;NOR Flash&lt;/h6&gt;&lt;p&gt;NOR FLASH 的结构原理图见图 ，可见每个 Bit Line 下的基本存储单元是并联的，当某个 Word Line 被选中后，就可以实现对该 Word 的读取，也就是可以实现位读取（即 Random Ａccess），且具有较高的读取速率&lt;/p&gt;
&lt;p&gt;下图是一个 3*8bit 的 NOR FLASH 的原理结构图，这种并联结构决定了 NOR FLASH 的很多特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_04_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是沿 Bit Line 切面的剖面图，展示了 NOR FLASH 的硅切面示意图，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_05_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本存储单元的并联结构决定了金属导线占用很大的面积，因此 NOR　FLASH 的存储密度较低，无法适用于需要大容量存储的应用场合，即适用于 code-storage，不适用于 data-storage。&lt;/li&gt;
&lt;li&gt;基本存储单元的并联结构决定了 NOR FLASH 具有存储单元可独立寻址且读取效率高的特性，因此适用于 code-storage，且程序可以直接在 NOR 中运行（即具有 RAM 的特性）。&lt;/li&gt;
&lt;li&gt;NOR FLASH 写入采用了热电子注入方式，效率较低，因此 NOR 写入速率较低，不适用于频繁擦除&amp;#x2F;写入场合。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;  最后来个小贴士：NOR  FLASH 的中的 N 是 NOT，含义是 Floating Gate 中有电荷时，读出‘0’，无电荷时读出‘1’，是一种‘非’的逻辑；OR 的含义是同一个 Bit Line 下的各个基本存储单元是并联的，是一种‘或’的逻辑，这就是 NOR 的由来。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;NAND-Flash&#34;&gt;&lt;a href=&#34;#NAND-Flash&#34; class=&#34;headerlink&#34; title=&#34;NAND Flash&#34;&gt;&lt;/a&gt;NAND Flash&lt;/h6&gt;&lt;p&gt;NAND FLASH 的结构原理图见图，可见每个 Bit Line 下的基本存储单元是串联的，NAND 读取数据的单位是 Page，当需要读取某个 Page 时，FLASH 控制器就不在这个 Page 的 Word Line 施加电压，而对其他所有 Page 的 Word Line 施加电压（电压值不能改变 Floating Gate 中电荷数量），让这些 Page 的所有基本存储单元的 D 和 S 导通，而我们要读取的 Page 的基本存储单元的 D 和 S 的导通&amp;#x2F;关断状态则取决于 Floating Gate 是否有电荷，有电荷时，Bit Line 读出‘0’，无电荷 Bit Line 读出‘1’，实现了 Page 数据的读出，可见 NAND 无法实现位读取（即 Random Ａccess），程序代码也就无法在 NAND 上运行。&lt;/p&gt;
&lt;p&gt;下图是一个 8*8bit 的 NAND FLASH 的原理结构图，NAND FLASH 的串联结构决定了其很多特点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_07_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是沿 Bit Line 切面的剖面图，展示了 NAND FLASH 的硅切面示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_08_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本存储单元的串联结构减少了金属导线占用的面积，Die 的利用率很高，因此 NAND FLASH 存储密度高，适用于需要大容量存储的应用场合，即适用于 data-storage，见图 3.3[3]。&lt;/li&gt;
&lt;li&gt;基本存储单元的串联结构决定了 NAND FLASH 无法进行位读取，也就无法实现存储单元的独立寻址，因此程序不可以直接在 NAND 中运行,因此 NAND 是以 Page 为读取单位和写入单位，以 Block 为擦除单位，见图 3.6。&lt;/li&gt;
&lt;li&gt;NAND FLASH 写入采用 F-N 隧道效应方式，效率较高，因此 NAND 擦除&amp;#x2F;写入速率很高，适用于频繁擦除&amp;#x2F;写入场合。同时 NAND 是以 Page 为单位进行读取的，因此读取速率也不算低（稍低于 NOR）。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;  最后来个小贴士：NAND FLASH 的中的 N 是 NOT，含义是 Floating Gate 中有电荷时，读出‘0’，无电荷时读出‘1’，是一种‘非’的逻辑；AND 的含义是同一个 Bit Line 下的各个基本存储单元是串联的，是一种‘与’的逻辑，这就是 NAND 的由来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;NOR-和-NAND-的对比&#34;&gt;&lt;a href=&#34;#NOR-和-NAND-的对比&#34; class=&#34;headerlink&#34; title=&#34;NOR 和 NAND 的对比&#34;&gt;&lt;/a&gt;NOR 和 NAND 的对比&lt;/h6&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_10_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_11_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;eMMC&#34;&gt;&lt;a href=&#34;#eMMC&#34; class=&#34;headerlink&#34; title=&#34;eMMC&#34;&gt;&lt;/a&gt;eMMC&lt;/h2&gt;&lt;p&gt;eMMC (Embedded Multi Media Card) 为MMC协会所订立的主要针对手机或平板电脑等产品的内嵌式存储器标准规格。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eMMC&lt;/strong&gt; 是 **flash(一般是NAND flash)&lt;strong&gt;加&lt;/strong&gt;主控IC(坏块处理 ECC纠错 和数据管理)**，封装相对比较标准，并对外提供标准接口，类似于SD卡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  Flash的生产厂家主要有： Samsung, Toshiba,Hynix, Intel, Micron,&lt;/p&gt;
&lt;p&gt;  flash控制IC主要有：Phison（群联）, SMI（慧荣）, SiliconGo(硅格半导体）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;几乎所有的手机和平板电脑都使用这种形式的闪存作为主存储，直到 2016 年&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Flash_Storage&#34;&gt;通用闪存&lt;/a&gt;(UFS) 开始控制市场。&lt;/p&gt;
&lt;p&gt;eMMC 不支持&lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&#34;&gt;SPI-bus&lt;/a&gt;协议，一般使用 MLC NAND flash。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sequential Read(MB&amp;#x2F;s)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sequential Write(MB&amp;#x2F;s)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Random Read(IO&amp;#x2F;s)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Random Write(IO&amp;#x2F;s)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Clock Frequency(Mhz)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Used in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 4.3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 4.4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 4.41&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;52[&lt;a href=&#34;https://en.wikipedia.org/wiki/MultiMediaCard#cite_note-11&#34;&gt;11]&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 4.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;140[&lt;a href=&#34;https://en.wikipedia.org/wiki/MultiMediaCard#cite_note-12&#34;&gt;12]&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Snapdragon_800&#34;&gt;Snapdragon 800&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 5.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;250&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;90&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;13000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Snapdragon 801&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eMMC 5.1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;250&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;125&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;13000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Snapdragon 820&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;UFS&#34;&gt;&lt;a href=&#34;#UFS&#34; class=&#34;headerlink&#34; title=&#34;UFS&#34;&gt;&lt;/a&gt;UFS&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;UFS&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;1.0&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;1.1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.0&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;3.0&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;3.1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;4.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Introduced&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2011-02&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2012-06&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2013-09&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2016-04&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2020-08&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2018-01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2020-01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2022-08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Bandwidth per lane&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;300 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;600 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1450 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2900 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Max. number of lanes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Max. total bandwidth&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;300 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1200 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2900 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5800 MB&amp;#x2F;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/M-PHY&#34;&gt;M-PHY&lt;/a&gt; version&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/UniPro&#34;&gt;UniPro&lt;/a&gt; version&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;NFC&#34;&gt;&lt;a href=&#34;#NFC&#34; class=&#34;headerlink&#34; title=&#34;NFC&#34;&gt;&lt;/a&gt;NFC&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;近场通信&lt;/strong&gt;（英语：Near-field communication，NFC），又称&lt;strong&gt;近距离无线通信&lt;/strong&gt;、&lt;strong&gt;近距离通信&lt;/strong&gt;，是一套&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A&#34;&gt;通信协议&lt;/a&gt;，让两个电子设备（其中一个通常是移动设备，例如&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%9E%8B%E6%89%8B%E6%A9%9F&#34;&gt;智能手机&lt;/a&gt;）在相距几厘米之内进行&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%82%B3%E8%BC%B8&#34;&gt;通信&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;近场通信是一种短距高频的无线电技术，在&lt;strong&gt;13.56MHz&lt;/strong&gt;频率运行于20厘米距离内[&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E8%BF%91%E5%A0%B4%E9%80%9A%E8%A8%8A#cite_note-Ortiz_2008-5&#34;&gt;5]&lt;/a&gt;。其传输速度有106 Kbit&amp;#x2F;秒、212 Kbit&amp;#x2F;秒或者424 Kbit&amp;#x2F;秒三种。&lt;/p&gt;
&lt;p&gt;NFC的工作模式有&lt;strong&gt;卡模式&lt;/strong&gt;、&lt;strong&gt;读写器模式&lt;/strong&gt;和&lt;strong&gt;点对点模式&lt;/strong&gt;三种&lt;/p&gt;
&lt;h2 id=&#34;RFID&#34;&gt;&lt;a href=&#34;#RFID&#34; class=&#34;headerlink&#34; title=&#34;RFID&#34;&gt;&lt;/a&gt;RFID&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;射频识别&lt;/strong&gt;（英语：&lt;strong&gt;R&lt;/strong&gt;adio &lt;strong&gt;F&lt;/strong&gt;requency &lt;strong&gt;ID&lt;/strong&gt;entification，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB&#34;&gt;缩写&lt;/a&gt;：&lt;strong&gt;RFID&lt;/strong&gt;）是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A&#34;&gt;无线&lt;/a&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF&#34;&gt;通信技术&lt;/a&gt;，可以通过&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%94%B5&#34;&gt;无线电&lt;/a&gt;信号识别特定目标并读写相关数据，而无需识别系统与特定目标之间建立&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9C%BA%E6%A2%B0&#34;&gt;机械&lt;/a&gt;或者&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%89%E5%AD%A6&#34;&gt;光学&lt;/a&gt;接触。&lt;/p&gt;
&lt;p&gt;某些标签在识别时从识别器发出的电磁场中就可以得到能量，&lt;strong&gt;并不需要电池&lt;/strong&gt;；&lt;strong&gt;也有标签本身拥有电源&lt;/strong&gt;，并可以主动发出无线电波（调成无线电频率的电磁场）。&lt;/p&gt;
&lt;p&gt;无源 RFID 标签主要在三个频率范围内运行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.atlasrfidstore.com/low-frequency-rfid-and-animal-identification&#34;&gt;低频&lt;/a&gt;(LF) 125 -134 kHz&lt;/li&gt;
&lt;li&gt;高频 (HF)13.56 MHz&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.atlasrfidstore.com/what-is-rfid&#34;&gt;超高频&lt;/a&gt;(UHF) 856 MHz 至 960 MHz&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;NFC 与 RFID 有什么区别？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  简而言之：&lt;/p&gt;
&lt;p&gt;  RFID 代表射频识别，一种在不同距离的非接触式单向&lt;strong&gt;通信方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;  NFC 近场通信，允许双向通信并需要用户操作，从特性上来看NFC的功能会更强，&lt;strong&gt;NFC是RFID的一个子集&lt;/strong&gt;。 &lt;/p&gt;
&lt;p&gt;  RFID 是使用无线电波唯一识别物品的过程，而 NFC 是 RFID 技术系列中的一个专门子集。具体来说，NFC 是高频 (HF) RFID 的一个分支，均工作在 13.56 MHz 频率。NFC 旨在成为一种安全的数据交换形式，NFC 设备既可以作为 NFC 阅读器，也可以作为 &lt;a href=&#34;https://www.atlasrfidstore.com/near-field-communication/&#34;&gt;NFC 标签&lt;/a&gt;。这种独特的功能允许 NFC 设备进行点对点通信。&lt;/p&gt;
&lt;p&gt;  归根结底，&lt;strong&gt;NFC 建立在 HF RFID 的标准之上&lt;/strong&gt;，并将其工作频率的局限性转化为近场通信的独特功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;范围和应用&lt;/strong&gt;——NFC 的作用范围非常短，一般工作范围在 0.1 米以内。它是一种用户交互技术，需要用户的特殊参与才能保证支付或访问等功能的完成。NFC技术在门禁、公共交通、移动支付等领域发挥着巨大的作用。&lt;/li&gt;
&lt;li&gt;另一方面，RFID 扫描器可以同时读取大量标签，这在仓库库存中很常见。RFID 在数百英尺的距离内工作。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信&lt;/strong&gt;——RFID 通常只能进行单向通信（从标签到阅读器），而 NFC 则能够进行双向通信。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储——NFC&lt;/strong&gt;可以存储比简单识别信息更复杂的数据。NFC 标签最多可以存储 4KB 的数据。这些数据可以采用多种格式，包括文本、URL 和媒体。虽然 RFID 标签通常需要昂贵的读取器来提取数据，但大多数现代智能手机都配备了 NFC 读取功能。这大大降低了实施 NFC 标签的成本，因为用户可以简单地使用他们的智能手机读取数据。智能手机可以在标签或卡上读取和写入数据，获取详细的元数据，在扫描标签时启动应用程序或 URL，还可以使用 NFC（点对点 (P2P) 通信）在手机之间共享数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;编译器相关&#34;&gt;&lt;a href=&#34;#编译器相关&#34; class=&#34;headerlink&#34; title=&#34;编译器相关&#34;&gt;&lt;/a&gt;编译器相关&lt;/h1&gt;&lt;h2 id=&#34;Keil仿真准确测量运行时间&#34;&gt;&lt;a href=&#34;#Keil仿真准确测量运行时间&#34; class=&#34;headerlink&#34; title=&#34;Keil仿真准确测量运行时间&#34;&gt;&lt;/a&gt;Keil仿真准确测量运行时间&lt;/h2&gt;&lt;p&gt;Debug-&amp;gt;Setting-&amp;gt;Trsce-&amp;gt;Core 修改好核心时钟频率即可准确测量函数运行时间&lt;/p&gt;
&lt;h2 id=&#34;程序内存位置分配&#34;&gt;&lt;a href=&#34;#程序内存位置分配&#34; class=&#34;headerlink&#34; title=&#34;程序内存位置分配&#34;&gt;&lt;/a&gt;程序内存位置分配&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bss段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;未初始化的全局变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;BSS段（BSS segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;已初始化的全局变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据段（DATA segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;text段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码段&lt;/li&gt;
&lt;li&gt;代码段（CODE segment&amp;#x2F;TEXTsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rodata段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;？？？&lt;/li&gt;
&lt;li&gt;存放C中的字符串和#define定义的常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;heap堆：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆（程序员指定的内存 malloc）&lt;/li&gt;
&lt;li&gt;当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stack栈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存&amp;#x2F;恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;？？？&lt;/li&gt;
&lt;li&gt;常量段一般包含编译器产生的数据（与只读段包含用户定义的只读数据不同）。比如说由一个语句a&amp;#x3D;2+3编译器把2+3编译期就算出5，存成常量5在常量段中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Pragma-Pack-内存对齐&#34;&gt;&lt;a href=&#34;#Pragma-Pack-内存对齐&#34; class=&#34;headerlink&#34; title=&#34;#Pragma Pack (内存对齐)&#34;&gt;&lt;/a&gt;#Pragma Pack (内存对齐)&lt;/h2&gt;&lt;h3 id=&#34;规则&#34;&gt;&lt;a href=&#34;#规则&#34; class=&#34;headerlink&#34; title=&#34;规则&#34;&gt;&lt;/a&gt;规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;复杂类型中各个成员按照它们被声明的顺序在内存中顺序存储，第一个成员的地址和整个类型的地址相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结构、联合或者类的对齐长度，按照#pragma pack    &lt;strong&gt;指定的对齐参数&lt;/strong&gt;   和     &lt;strong&gt;这个数据成员自身长度&lt;/strong&gt;     两个中    &lt;strong&gt;比较小&lt;/strong&gt;     的那个进行。（确定成员位置）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复杂类型（如结构）整体的对齐&amp;lt;注意是“整体”&amp;gt;是按照结构体中     &lt;strong&gt;长度最大的数据成员&lt;/strong&gt;     和    &lt;strong&gt;#pragma pack指定值之间&lt;/strong&gt;     &lt;strong&gt;较小&lt;/strong&gt;    的那个值进行；这样在成员是复杂类型时，可以最小化长度。（确定对齐大小）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即：先用规则3确定变量对齐的“容器”大小，再用规则2确定各个变量的存放位置。&lt;/p&gt;
&lt;h3 id=&#34;看图&#34;&gt;&lt;a href=&#34;#看图&#34; class=&#34;headerlink&#34; title=&#34;看图&#34;&gt;&lt;/a&gt;看图&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;stc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; one;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; two;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; three;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; four;&lt;br&gt;&amp;#125; c,d;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98-1608969543089.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98-1608969576331.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;原型&#34;&gt;&lt;a href=&#34;#原型&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pragma pack(n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pragma pack()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1)&lt;span class=&#34;hljs-comment&#34;&gt;//自定义对齐参数   指定对齐参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;MotorStartStop_&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//Code******&lt;/span&gt;&lt;br&gt;&amp;#125; MStartStopRec_TYPEDEF;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;span class=&#34;hljs-comment&#34;&gt;//取消自定义的对齐参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pragma Pack(push)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pragma Pack(pop)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push)&lt;span class=&#34;hljs-comment&#34;&gt;//Push压栈  保存系统的对齐方式(push指令之前的对齐状态)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1)&lt;span class=&#34;hljs-comment&#34;&gt;//            自定义对齐方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;MotorStartStop_&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//Code******&lt;/span&gt;&lt;br&gt;&amp;#125; MStartStopRec_TYPEDEF;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(pop)&lt;span class=&#34;hljs-comment&#34;&gt;//Pop弹出    恢复系统的对齐方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push,1)&lt;span class=&#34;hljs-comment&#34;&gt;//此语句等同于以下两条语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1) &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;pragma-OPTIMIZE-n-优化级别调整&#34;&gt;&lt;a href=&#34;#pragma-OPTIMIZE-n-优化级别调整&#34; class=&#34;headerlink&#34; title=&#34;#pragma OPTIMIZE(n)(优化级别调整)&#34;&gt;&lt;/a&gt;#pragma OPTIMIZE(n)(优化级别调整)&lt;/h2&gt;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;在ARM里面已经用不了&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; save			&lt;span class=&#34;hljs-comment&#34;&gt;//SAVE指令将优化指令的当前设置存储到一个SAVE堆栈中。可以使用RESTORE指令还原设置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; optimize (1)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;.&lt;br&gt;.&lt;br&gt;.&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; restore			&lt;span class=&#34;hljs-comment&#34;&gt;//RESTORE指令 恢复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h2&gt;&lt;p&gt; tip:宏函数&lt;/p&gt;
&lt;p&gt;在大多数情况下，内联特定功能的决定最好留给编译器。使用&lt;code&gt;__inline__&lt;/code&gt;或&lt;code&gt;inline&lt;/code&gt;关键字限定函数的功能向编译器暗示它可以内联该函数，&lt;strong&gt;但最终决定权在于编译器&lt;/strong&gt;。使用限定函数将&lt;code&gt;__attribute__((always_inline))&lt;/code&gt;强制编译器内联函数。 &lt;/p&gt;
&lt;h3 id=&#34;inline内联&#34;&gt;&lt;a href=&#34;#inline内联&#34; class=&#34;headerlink&#34; title=&#34;__inline内联&#34;&gt;&lt;/a&gt;&lt;del&gt;__inline内联&lt;/del&gt;&lt;/h3&gt;&lt;p&gt;最终决定权在于编译器,不使用&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; __inline &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x*&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f(x) + f(y);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;forceinline强制内联&#34;&gt;&lt;a href=&#34;#forceinline强制内联&#34; class=&#34;headerlink&#34; title=&#34;__forceinline强制内联&#34;&gt;&lt;/a&gt;__forceinline强制内联&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__forceinline&lt;/code&gt;的语义与C ++ &lt;code&gt;inline&lt;/code&gt; 关键字的语义完全相同。编译器将尝试内联该函数，而不管其特性如何。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在某些情况下，编译器可能会选择忽略&lt;code&gt;__forceinline&lt;/code&gt;关键字而不是内联函数。&lt;/strong&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归函数永远不会内联到自身中。&lt;/li&gt;
&lt;li&gt;使用函数&lt;code&gt;alloca()&lt;/code&gt;(内存分配函数)永远不会内联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;__forceinline&lt;/code&gt;是存储类限定符。它不影响函数的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它等效于 &lt;strong&gt;attribute&lt;/strong&gt;((always_inline))&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;__forceinline &lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x &amp;gt; y ? x : y; &lt;span class=&#34;hljs-comment&#34;&gt;// always inline if possible&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((always_inline))&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x &amp;gt; y ? x : y; &lt;span class=&#34;hljs-comment&#34;&gt;// always inline if possible&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用递减的循环可以提高程序运行效率&#34;&gt;&lt;a href=&#34;#使用递减的循环可以提高程序运行效率&#34; class=&#34;headerlink&#34; title=&#34;使用递减的循环可以提高程序运行效率&#34;&gt;&lt;/a&gt;使用递减的循环可以提高程序运行效率&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124222426.htm&#34;&gt;参考  C代码中循环终止的优化 &lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用简单终止循环的条件。&lt;/li&gt;
&lt;li&gt;使用递减到0的循环 &lt;/li&gt;
&lt;li&gt;使用 unsigned int 类型&lt;/li&gt;
&lt;li&gt;与0进行对比&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;volatile-的使用&#34;&gt;&lt;a href=&#34;#volatile-的使用&#34; class=&#34;headerlink&#34; title=&#34;volatile 的使用&#34;&gt;&lt;/a&gt;volatile 的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;访问内存映射的外围设备。&lt;/li&gt;
&lt;li&gt;在多个线程之间共享全局变量。&lt;/li&gt;
&lt;li&gt;在中断例程或信号处理程序中访问全局变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;纯函数-优化&#34;&gt;&lt;a href=&#34;#纯函数-优化&#34; class=&#34;headerlink&#34; title=&#34;纯函数(优化)&#34;&gt;&lt;/a&gt;纯函数(优化)&lt;/h2&gt;&lt;p&gt; &lt;code&gt;__pure&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;纯函数定义：同样的的输入有同样的输出， 纯函数无法通过使用全局变量或通过指针间接读取或写入全局状态 &lt;/p&gt;
&lt;p&gt;优势：编译器通常可以执行强大的优化， 例如通用子表达式消除（CSE） 。&lt;/p&gt;
&lt;h2 id=&#34;packed-pragma-packed-字节对齐&#34;&gt;&lt;a href=&#34;#packed-pragma-packed-字节对齐&#34; class=&#34;headerlink&#34; title=&#34;__packed  #pragma packed 字节对齐&#34;&gt;&lt;/a&gt;__packed  #pragma packed 字节对齐&lt;/h2&gt;&lt;p&gt; 将整个结构声明为 __packed 通常会导致代码大小和性能的损失。 &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;__packed &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mystruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; s;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// 不建议的&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mystruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c;&lt;br&gt;    __packed &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; s; &lt;span class=&#34;hljs-comment&#34;&gt;// 建议的&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; &lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124230195.htm&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124230944.htm&#34;&gt;__packed和#pragma packed对比&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;func-FUNCTION-FILE-LINE&#34;&gt;&lt;a href=&#34;#func-FUNCTION-FILE-LINE&#34; class=&#34;headerlink&#34; title=&#34;__func__ __FUNCTION__ __FILE__ __LINE__&#34;&gt;&lt;/a&gt;__func__ __FUNCTION__ __FILE__ __LINE__&lt;/h2&gt;&lt;p&gt;__func__ __FUNCTION__ __FILE__ __LINE__&lt;/p&gt;
&lt;p&gt;获取当前函数名称&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;This function is called &amp;#x27;%s&amp;#x27;.\n&amp;quot;&lt;/span&gt;, __func__);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;prints:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;This function is called &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;attribute-used-不能将其优化移除&#34;&gt;&lt;a href=&#34;#attribute-used-不能将其优化移除&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((used))不能将其优化移除&#34;&gt;&lt;/a&gt;__attribute__((used))不能将其优化移除&lt;/h2&gt;&lt;p&gt;用这个东西声明函数之后，即使这个函数没有被引用，编译器也不能将其优化移除，仍然要求将此函数保留在工程中。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;lose_this&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((used))&lt;/span&gt;;     &lt;span class=&#34;hljs-comment&#34;&gt;// retained in object file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; arg)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (arg+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this_too&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((used))&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 保留在工程文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this_too&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; arg)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (arg&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (;;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;attribute-section-“XX-name”-放置到特定的段里面&#34;&gt;&lt;a href=&#34;#attribute-section-“XX-name”-放置到特定的段里面&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((section(“XX_name”)))放置到特定的段里面&#34;&gt;&lt;/a&gt;__attribute__((section(“XX_name”)))放置到特定的段里面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;XX_name:是输入段的名称(字符串)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个东西是告诉编译器，将特定的函数或者变量放置到特定的段里面。&lt;/p&gt;
&lt;p&gt;变量和函数在输入段中的地址是连续的，并顺序先按section名(也就是XX_name)排序，section内再按照函数名称进行排序。&lt;/p&gt;
&lt;h2 id=&#34;attribute-at-0x00-将变量定义到指定的地方&#34;&gt;&lt;a href=&#34;#attribute-at-0x00-将变量定义到指定的地方&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((at(0x00)))将变量定义到指定的地方&#34;&gt;&lt;/a&gt;__attribute__((at(0x00)))将变量定义到指定的地方&lt;/h2&gt;&lt;p&gt;将变量定义到指定的地方&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//linux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; temp_A@&lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//定义无符号变量temp_A，强制其地址为0x00 变量@地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//keil&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; cnt __attribute__((at(&lt;span class=&#34;hljs-number&#34;&gt;0x20008000&lt;/span&gt;))); &lt;span class=&#34;hljs-comment&#34;&gt;//格式固定下划线为两个下划线，括号必须那么多层&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;attribute-alias-“sss”-起别名&#34;&gt;&lt;a href=&#34;#attribute-alias-“sss”-起别名&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((alias(“sss”)))起别名&#34;&gt;&lt;/a&gt;__attribute__((alias(“sss”)))起别名&lt;/h2&gt;&lt;p&gt;相当于起别名&lt;/p&gt;
&lt;h3 id=&#34;Example&#34;&gt;&lt;a href=&#34;#Example&#34; class=&#34;headerlink&#34; title=&#34;Example&#34;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, __FUNCTION__);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((alias(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)))&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;gazonk&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    bar(); &lt;span class=&#34;hljs-comment&#34;&gt;// calls foo&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;Code-RO-RW-ZI&#34;&gt;&lt;a href=&#34;#Code-RO-RW-ZI&#34; class=&#34;headerlink&#34; title=&#34;Code RO RW ZI&#34;&gt;&lt;/a&gt;Code RO RW ZI&lt;/h2&gt;&lt;p&gt;Program Size: Code&amp;#x3D;14554 RO-data&amp;#x3D;1234 RW-data&amp;#x3D;272 ZI-data&amp;#x3D;6168  &lt;/p&gt;
&lt;p&gt;Program Size: Code&amp;#x3D;13682 RO-data&amp;#x3D;1098 RW-data&amp;#x3D;224 ZI-data&amp;#x3D;6160  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Only&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Write&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zero Initial&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;  编译器插入一个小的引导程序代码，该代码从编译好的image中获取具有初始化数据初始值的块，并将其复制到 RAM（这是 RW 区域）中。然后它将剩余的已用 RAM（ZI 区域）清零。然后控制权转移到程序员编写的实际代码中。&lt;/p&gt;
  &lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Total&lt;/span&gt; RO Size (Code+Ro data)                &lt;span class=&#34;hljs-number&#34;&gt;36732&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;87&lt;/span&gt;kB)&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Total&lt;/span&gt; RW Size (RW Data + ZI Data)           &lt;span class=&#34;hljs-number&#34;&gt;27348&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;71&lt;/span&gt;kB&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Total&lt;/span&gt; ROM Size (Code + RO Data + RW Data)   &lt;span class=&#34;hljs-number&#34;&gt;36812&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;95&lt;/span&gt;kB&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;汇编延时-不受优化影响&#34;&gt;&lt;a href=&#34;#汇编延时-不受优化影响&#34; class=&#34;headerlink&#34; title=&#34;汇编延时 不受优化影响&#34;&gt;&lt;/a&gt;汇编延时 不受优化影响&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @brief 汇编延时&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @attention us延时不是很准确&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @details 三个汇编指令理论应该是三个时钟周期&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 则 理论上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * ms AsmDelay( n*(SystemCoreClock/3000) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 实际有所差异 在STM32F105上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * ms AsmDelay( n*(SystemCoreClock/6000) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined (__CC_ARM)              &lt;span class=&#34;hljs-comment&#34;&gt;// ARM Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;__attribute__((always_inline)) __ASM &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;AsmDelay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    subs    r0, #&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    bne     AsmDelay;&lt;br&gt;    bx      lr;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined (__ICCARM__)         &lt;span class=&#34;hljs-comment&#34;&gt;// IAR Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;AsmDelay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    __asm(&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;subs  r0, #1\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bne.n AsmDelay\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bx    lr&amp;quot;&lt;/span&gt;&lt;br&gt;    );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; (__GUNC__)            &lt;span class=&#34;hljs-comment&#34;&gt;// GUN Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; __attribute__((naked)) AsmDelay(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;br&gt;&amp;#123;&lt;br&gt;    __asm(&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;subs  r0, #1\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bne   AsmDelay\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bx    lr&amp;quot;&lt;/span&gt;&lt;br&gt;    );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;大小端-endian&#34;&gt;&lt;a href=&#34;#大小端-endian&#34; class=&#34;headerlink&#34; title=&#34;大小端 endian&#34;&gt;&lt;/a&gt;大小端 endian&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大端模式Big-endian，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；&lt;code&gt;大端模式便于阅读&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小端模式Little-endian，………..&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0x00123456&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;大端&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;0x00000000&lt;/td&gt;
&lt;td&gt;0x00000001&lt;/td&gt;
&lt;td&gt;0x00000002&lt;/td&gt;
&lt;td&gt;0x00000003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;0x34&lt;/td&gt;
&lt;td&gt;0x56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;小端&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;0x00000000&lt;/td&gt;
&lt;td&gt;0x00000001&lt;/td&gt;
&lt;td&gt;0x00000002&lt;/td&gt;
&lt;td&gt;0x00000003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;0x56&lt;/td&gt;
&lt;td&gt;0x34&lt;/td&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;C类&#34;&gt;&lt;a href=&#34;#C类&#34; class=&#34;headerlink&#34; title=&#34;C类&#34;&gt;&lt;/a&gt;C类&lt;/h1&gt;&lt;h2 id=&#34;变量命名&#34;&gt;&lt;a href=&#34;#变量命名&#34; class=&#34;headerlink&#34; title=&#34;变量命名&#34;&gt;&lt;/a&gt;变量命名&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择合适的变量长度(最短的标识符显示最多信息量的原则)&lt;/li&gt;
&lt;li&gt;短变量名i,j等一般作用域较小，有限范围内有效&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;循环变量的命名&#34;&gt;&lt;a href=&#34;#循环变量的命名&#34; class=&#34;headerlink&#34; title=&#34;循环变量的命名&#34;&gt;&lt;/a&gt;循环变量的命名&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;避免使用i、j、k等名字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果循环体长度较长的话，那就很容易使人忘记它代表的是什么，因此最好给循环控制变量一个富有意义的名字。由于经常进行更改，扩展和拷贝等代码到另一个程序中，因此，大多数有经验的程序员都避免用i、j、k这类的名字。&lt;br&gt;通过精心对循环控制变量进行命名，可以避免它们的交叉：当你想用i时误用了j，或者想用j时却又误用了i。&lt;br&gt;如果不得不使用它们的话，那除了把它们用作循环控制变量之外，最好不再用作别的变量名。这一约定是众所周知的，如果不遵守它只会引起别人的困惑。&lt;/p&gt;
&lt;h3 id=&#34;状态变量的命名&#34;&gt;&lt;a href=&#34;#状态变量的命名&#34; class=&#34;headerlink&#34; title=&#34;状态变量的命名&#34;&gt;&lt;/a&gt;状态变量的命名&lt;/h3&gt;&lt;p&gt;利用枚举类型和命名常量来设置状态量的值&lt;/p&gt;
&lt;p&gt;如果没有注释，将数值赋给状态量将是非常费解的。&lt;/p&gt;
&lt;h3 id=&#34;逻辑变量命名&#34;&gt;&lt;a href=&#34;#逻辑变量命名&#34; class=&#34;headerlink&#34; title=&#34;逻辑变量命名&#34;&gt;&lt;/a&gt;逻辑变量命名&lt;/h3&gt;&lt;p&gt;使用肯定的逻辑变量名。&lt;/p&gt;
&lt;p&gt;否定式的变量名如NotFound、NotDone和Notsuccessful等在“非”运算中是很难读懂的，如：&lt;/p&gt;
  &lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ebnf&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;if not NotFound&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参量的命名&#34;&gt;&lt;a href=&#34;#参量的命名&#34; class=&#34;headerlink&#34; title=&#34;参量的命名&#34;&gt;&lt;/a&gt;参量的命名&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;对常量来说，应该用它所代表的抽象实体而不是数值来命名。&lt;/strong&gt;&lt;br&gt;FIVE是一个很不恰当的常量名称（不管它代表的数值是否是5.0）；CYCLES_NEEDED则是个恰当的名称，CYCLES_NEEDED可以等于5.0也可以等于6.0，而Five &amp;#x3D; 6.0则是个荒唐的语句。&lt;/p&gt;
&lt;h2 id=&#34;运算符优先级&#34;&gt;&lt;a href=&#34;#运算符优先级&#34; class=&#34;headerlink&#34; title=&#34;运算符优先级&#34;&gt;&lt;/a&gt;运算符优先级&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/00.jpeg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  简记&lt;/p&gt;
&lt;p&gt;  算术运算符 &amp;gt; 关系运算符  &amp;gt; 位运算符 &amp;gt; 逻辑运算符 &amp;gt; 赋值运算符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;坑&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译报错 ！赋值运算符优先级最低！&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt; : data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//规范写法&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN!=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? (data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;):(data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;！！！极注意！！！  请小心有位运算时打上括号            &amp;lt;&amp;lt;  比  +-  要低 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;u16 temp;&lt;br&gt;u8 h,l;&lt;br&gt;temp = (u16)(h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 正确语法&lt;/span&gt;&lt;br&gt;temp = h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 错误语法！！！！！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;printf&#34;&gt;&lt;a href=&#34;#printf&#34; class=&#34;headerlink&#34; title=&#34;printf()&#34;&gt;&lt;/a&gt;printf()&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;转换说明符&lt;/th&gt;
&lt;th&gt;输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%a，%A&lt;/td&gt;
&lt;td&gt;浮点数、十六进制、p-计数法（c99）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%c&lt;/td&gt;
&lt;td&gt;一个单一的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%d&lt;/td&gt;
&lt;td&gt;有符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%f&lt;/td&gt;
&lt;td&gt;浮点数、十六进制数法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%e,%E&lt;/td&gt;
&lt;td&gt;e计数法，E计数法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%g,%G&lt;/td&gt;
&lt;td&gt;g自动使用%e和%f，G自动使用%E和%f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%i&lt;/td&gt;
&lt;td&gt;有符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%o&lt;/td&gt;
&lt;td&gt;一个八进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%p&lt;/td&gt;
&lt;td&gt;一个指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%s&lt;/td&gt;
&lt;td&gt;一个字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%u&lt;/td&gt;
&lt;td&gt;无符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%x，%X&lt;/td&gt;
&lt;td&gt;十六进制数字的无符号十六进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%%&lt;/td&gt;
&lt;td&gt;百分号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;项目是左对齐的；打印在字符的最左侧开始处。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;有符号的值显示正负号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(空格)&lt;/td&gt;
&lt;td&gt;带前导空格，复数会带减号符号，+会覆盖空格标志。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;%o以0开始，%x以0x开始，浮点保证打印小数点，%g防止尾随零被删&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;前导零填充，会忽略-符号。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;digit(s)&lt;/td&gt;
&lt;td&gt;字段宽度的最小值。&lt;br/&gt;%4d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.digit(s)&lt;/td&gt;
&lt;td&gt;精度。&lt;br/&gt;%5.2f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示short int或unsigned short int&lt;br/&gt;%hu、%hx、%6.4hd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hh&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示signed char或unsigned char&lt;br/&gt;%hhu、%hhx、%6.4hhd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示intmax_t或uintmax_t&lt;br/&gt;%jd、%8jX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。long int或unsigned long int&lt;br/&gt;%ld、%lu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ll&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。long long int或unsigned long long int（C99）&lt;br/&gt;%lld、%llu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;和浮点数一起使用。表示long double&lt;br/&gt;%Lf、%Le&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。ptrdiff_t（两个指针的差，相对向量）(C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;和整数转换符一起使用。表示一个size_t值（sizeof的返回值）(C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;数值数据类型-u-ul-b&#34;&gt;&lt;a href=&#34;#数值数据类型-u-ul-b&#34; class=&#34;headerlink&#34; title=&#34;数值数据类型 u ul b&#34;&gt;&lt;/a&gt;数值数据类型 u ul b&lt;/h2&gt;&lt;h3 id=&#34;用于说明数据类型&#34;&gt;&lt;a href=&#34;#用于说明数据类型&#34; class=&#34;headerlink&#34; title=&#34;用于说明数据类型&#34;&gt;&lt;/a&gt;用于说明数据类型&lt;/h3&gt;&lt;p&gt;u &amp;#x3D;&amp;#x3D; unsigned int&lt;/p&gt;
&lt;p&gt;l &amp;#x3D;&amp;#x3D;  long&lt;/p&gt;
&lt;p&gt;ul &amp;#x3D;&amp;#x3D; unsigned long&lt;/p&gt;
&lt;p&gt;数值后面加“L”和“l”（小写的l）的意义是该数值是long型。&lt;br&gt;详细说如下：&lt;br&gt;5L			的数据类型为long int。&lt;br&gt;5.12L	   的数据类型为long double。&lt;br&gt;数值后面加“U”和“u”的意义是该数值是unsigned型。&lt;/p&gt;
&lt;h3 id=&#34;用于说明数值表示方法&#34;&gt;&lt;a href=&#34;#用于说明数值表示方法&#34; class=&#34;headerlink&#34; title=&#34;用于说明数值表示方法&#34;&gt;&lt;/a&gt;用于说明数值表示方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;进制↓   \   表示方法→&lt;/th&gt;
&lt;th&gt;前面加&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;二进制&lt;/td&gt;
&lt;td&gt;0b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0b1010 &amp;#x3D; 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;八进制&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;012 &amp;#x3D; 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;u l ul&lt;/td&gt;
&lt;td&gt;1u (规范性)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十六进制&lt;/td&gt;
&lt;td&gt;0x&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0x12 &amp;#x3D; 18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意：在宏定义中数字应加上尾缀，避免与八进制混淆&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sprintf&#34;&gt;&lt;a href=&#34;#sprintf&#34; class=&#34;headerlink&#34; title=&#34;sprintf()&#34;&gt;&lt;/a&gt;sprintf()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;写入buff的数据会连带‘\0’一起写入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 C 里，对“字符串”的通常约定，是以 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 为结尾的字符串。从而在传递字符串参数的时候，只需要一个指向字符串首字符的指针。来自 C 的操作字符串的函数(&lt;code&gt;sprintf&lt;/code&gt;, &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;strcat&lt;/code&gt;, 等等)通常都遵循这一约定，包括在写字符串的时候，会在末尾添加一个 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 。（除非在某些情况下有特殊约定）&lt;/p&gt;
&lt;p&gt;但是，&lt;code&gt;memcpy&lt;/code&gt; 等不是操作字符串的函数，就不会添加最后的 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;snprintf&#34;&gt;&lt;a href=&#34;#snprintf&#34; class=&#34;headerlink&#34; title=&#34;snprintf()&#34;&gt;&lt;/a&gt;snprintf()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所传入的值以&lt;strong&gt;‘\0’&lt;/strong&gt;结尾    要得到   &lt;strong&gt;20&lt;/strong&gt;  个数据需要传入参数  &lt;strong&gt;20+1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果传入的str是&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; size参数是5则 无法写入&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; ,size参数是6 则可以写入 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sscanf&#34;&gt;&lt;a href=&#34;#sscanf&#34; class=&#34;headerlink&#34; title=&#34;sscanf()&#34;&gt;&lt;/a&gt;sscanf()&lt;/h2&gt;&lt;h3 id=&#34;原型-1&#34;&gt;&lt;a href=&#34;#原型-1&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sscanf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *buffer, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *format, [ argument ] ...   )&lt;/span&gt;; &lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;buffer 			  存储的数据&lt;br&gt;format 			窗体控件字符串。 有关详细信息，请参阅”格式规范”。&lt;br&gt;argument	    可选自变量&lt;br&gt;locale			   要使用的区域设置&lt;/p&gt;
&lt;h3 id=&#34;说明&#34;&gt;&lt;a href=&#34;#说明&#34; class=&#34;headerlink&#34; title=&#34;说明&#34;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;sscanf与scanf类似，都是用于输入的，只是后者以键盘(stdin)为输入源，前者以&lt;strong&gt;固定字符串&lt;/strong&gt;为输入源。&lt;/p&gt;
&lt;h4 id=&#34;控制字符说明&#34;&gt;&lt;a href=&#34;#控制字符说明&#34; class=&#34;headerlink&#34; title=&#34;控制字符说明&#34;&gt;&lt;/a&gt;控制字符说明&lt;/h4&gt;&lt;blockquote&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;%c  一个单一的字符 &lt;br&gt;%d  一个十进制整数 &lt;br&gt;%i  一个整数 &lt;br&gt;%e, %f, %g 一个浮点数 &lt;br&gt;%o  一个八进制数 &lt;br&gt;%s  一个字符串 &lt;br&gt;%x  一个十六进制数 &lt;br&gt;%p  一个指针 &lt;br&gt;%n  一个等于读取字符数量的整数&lt;br&gt;%u  一个无符号整数&lt;br&gt;%[]  一个字符集 &lt;br&gt;\%\%  一个精度符&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;函数返回值&#34;&gt;&lt;a href=&#34;#函数返回值&#34; class=&#34;headerlink&#34; title=&#34;函数返回值&#34;&gt;&lt;/a&gt;函数返回值&lt;/h3&gt;&lt;p&gt;函数将返回成功赋值的字段个数；返回值不包括已读取但未赋值的字段个数。 返回值为 0 表示没有将任何字段赋值。 如果在第一次读取之前到达字符串结尾，则返回EOF。&lt;/p&gt;
&lt;h3 id=&#34;例程&#34;&gt;&lt;a href=&#34;#例程&#34; class=&#34;headerlink&#34; title=&#34;例程&#34;&gt;&lt;/a&gt;例程&lt;/h3&gt;&lt;h4 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 &amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取指定长度的字符串。如在下例中，取最大长度为4字节的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 &amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%4s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：1234&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取到指定字符为止的字符串。如在下例中，取遇到空格为止字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 abcdedf&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[^ ]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取仅包含指定字符集的字符串。如在下例中，取仅包含1到9和小写字母的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456abcdedfBCDEF&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[1-9a-z]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456abcdedf&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取到指定字符集为止的字符串。如在下例中，取遇到大写字母为止的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456abcdedfBCDEF&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[^A-Z]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456abcdedf&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//给定一个字符串iios/12DDWDFF@122，获取 / 和 @ 之间的字符串，先将 &amp;quot;iios/&amp;quot;过滤掉，再将非&amp;#x27;@&amp;#x27;的一串内容送到buf中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;iios/12DDWDFF@122&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%*[^/]/%[^@]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：12DDWDFF&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//给定一个字符串&amp;quot;hello, world&amp;quot;，仅保留&amp;quot;world&amp;quot;。（注意：“，”之后有一空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello, world&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%*s%s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：world&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&#34;图片&#34;&gt;&lt;a href=&#34;#图片&#34; class=&#34;headerlink&#34; title=&#34;图片&#34;&gt;&lt;/a&gt;图片&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20161218131342960.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Union&#34;&gt;&lt;a href=&#34;#Union&#34; class=&#34;headerlink&#34; title=&#34;Union&#34;&gt;&lt;/a&gt;Union&lt;/h2&gt;&lt;h3 id=&#34;数据拆分、移位&#34;&gt;&lt;a href=&#34;#数据拆分、移位&#34; class=&#34;headerlink&#34; title=&#34;数据拆分、移位&#34;&gt;&lt;/a&gt;数据拆分、移位&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	u16 Val_u16;&lt;br&gt;	u8 Val_u8[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125;_HL_UNION;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Struct&#34;&gt;&lt;a href=&#34;#Struct&#34; class=&#34;headerlink&#34; title=&#34;Struct&#34;&gt;&lt;/a&gt;Struct&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意节约内存，小数据全部写在前面方便对齐。&lt;/li&gt;
&lt;li&gt;结构体内的结构体因为已经是对其了的，所以，可以建议放在最前、最后。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;C语言位域的内存存放顺序&#34;&gt;&lt;a href=&#34;#C语言位域的内存存放顺序&#34; class=&#34;headerlink&#34; title=&#34;C语言位域的内存存放顺序&#34;&gt;&lt;/a&gt;C语言位域的内存存放顺序&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;字节序的影响&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;在小端字节序（如常见的x86架构）下，位域从低地址开始存储。&lt;/li&gt;
&lt;li&gt;在大端字节序下，位域的存储顺序可能会有所不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译器的实现差异&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;不同编译器对位域的实现可能不同。例如，GCC会尽量压缩存储，而VC&amp;#x2F;VS可能不会&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;匿名-union-struct&#34;&gt;&lt;a href=&#34;#匿名-union-struct&#34; class=&#34;headerlink&#34; title=&#34;匿名 union struct&#34;&gt;&lt;/a&gt;匿名 union struct&lt;/h2&gt;&lt;p&gt;可以在&lt;strong&gt;结构体&lt;/strong&gt;中声明某个联合体（或结构体）而不用指出它的名字，如此之后就可以像使用结构体成员一样直接使用其中联合体（或结构体）的成员。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  Anonymous unions are a GNU extension, not part of any standard version of the C language. &lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;Anonymous unions were added in C11, so they are now a standard part of the language. Presumably GCC’s &lt;code&gt;-std=c11&lt;/code&gt; lets you use them.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// union 普通联合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; title[&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; author[&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; dollars;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; yen;&lt;br&gt;  &amp;#125; price;&lt;br&gt;&amp;#125; book;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// anonymous union 匿名联合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; title[&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; author[&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; dollars;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; yen;&lt;br&gt;  &amp;#125;;&lt;br&gt;&amp;#125; book;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在前一种定义的情况下，需要使用：&lt;/span&gt;&lt;br&gt;book.price.dollars;&lt;br&gt;book.price.yen;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 而在后面一种定义下，我们直接使用：&lt;/span&gt;&lt;br&gt;book.dollars;&lt;br&gt;book.yen;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;person_jim_t&lt;/span&gt;&amp;#123;&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;    *name;  &lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;  area_code;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; phone_number;  &lt;br&gt;    &amp;#125;; &lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-type&#34;&gt;person_jim_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;person_tim_t&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;    *name;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; gender;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;  id;&lt;br&gt;    &amp;#125;;&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-type&#34;&gt;person_tim_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;net_info_t&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt;                val[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;];&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;             ip[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;];          &lt;span class=&#34;hljs-comment&#34;&gt;// int ip address&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;             mask[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;];        &lt;span class=&#34;hljs-comment&#34;&gt;// &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;             gateway[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;];     &lt;span class=&#34;hljs-comment&#34;&gt;// &lt;/span&gt;&lt;br&gt;    &amp;#125;;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-type&#34;&gt;net_info_t&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;keil&#34;&gt;&lt;a href=&#34;#keil&#34; class=&#34;headerlink&#34; title=&#34;keil&#34;&gt;&lt;/a&gt;keil&lt;/h3&gt;&lt;p&gt;keil也支持匿名结构体、联合体 需要使用编译器参数&lt;code&gt;#pragma anon_unions&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; anon_unions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; nLow        :&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; nHigh         :&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;;&lt;br&gt;	&amp;#125;;&lt;br&gt;&amp;#125;kkTypedef;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;register&#34;&gt;&lt;a href=&#34;#register&#34; class=&#34;headerlink&#34; title=&#34;register&#34;&gt;&lt;/a&gt;register&lt;/h2&gt;&lt;p&gt;　　这个关键字&lt;strong&gt;请求&lt;/strong&gt;（只是请求，最终看编译器）编译器尽可能的将变量存在CPU内部寄存器中，而不是通过内存寻址访问，以提高效率。注意是尽可能，不是绝对。你想想，一个CPU 的寄存器也就那么几个或几十个，你要是定义了很多很多register 变量，它累死也可能不能全部把这些变量放入寄存器吧。&lt;/p&gt;
&lt;p&gt;register是一个C语言的关键字，用来声明寄存器变量，即存放在CPU的寄存器里的变量。寄存器变量的访问速度比内存变量快得多，因为寄存器是CPU内部的组成部分，而内存是外部的设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寄存器变量只能用于基本数据类型，如int, char, float等，不能用于数组、结构体、联合等复合类型&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;寄存器变量的作用域和自动变量相同，即只在定义它的函数或代码块内有效&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8&#34;&gt;1&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;寄存器变量不能取地址，因为它们没有固定的内存位置。&lt;/li&gt;
&lt;li&gt;寄存器变量的数量受到CPU寄存器的限制，如果声明过多的寄存器变量，编译器可能会忽略register关键字，将它们当作普通的自动变量处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;volatile&#34;&gt;&lt;a href=&#34;#volatile&#34; class=&#34;headerlink&#34; title=&#34;volatile&#34;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;典型用处&lt;ul&gt;
&lt;li&gt;寄存器的访问&lt;/li&gt;
&lt;li&gt;全局变量被中断修改&lt;/li&gt;
&lt;li&gt;多线程共享的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;const volatile&lt;ul&gt;
&lt;li&gt;两者同时修饰一个对象的典型情况，是用于驱动中访问外部设备的只读寄存器。&lt;/li&gt;
&lt;li&gt;（1）本程序段中不能对a作修改，任何修改都是非法的，或者至少是粗心，编译器应该报错，防止这种粗心；&lt;/li&gt;
&lt;li&gt;（2）另一个程序段则完全有可能修改，因此编译器最好不要做太激进的优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;并行设备的硬件寄存器（如：状态寄存器）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;延伸 const  volatile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;  两者同时修饰一个对象的典型情况，是用于驱动中访问外部设备的只读寄存器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本程序段中不能对a作修改，任何修改都是非法的，或者至少是粗心，编译器应该报错，防止这种粗心；&lt;/li&gt;
&lt;li&gt;另一个程序段则完全有可能修改，因此编译器最好不要做太激进的优化。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个中断服务子程序中会访问到的&lt;strong&gt;非自动变量&lt;/strong&gt;(Non-automatic variables)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动变量&lt;/strong&gt;：是在函数内部定义和使用的变量，它是&lt;strong&gt;局部变量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非自动变量&lt;/strong&gt;：有两种，一种是&lt;strong&gt;全局变量&lt;/strong&gt;，一种是&lt;strong&gt;静态变量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多线程应用中被几个任务共享的变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;static&#34;&gt;&lt;a href=&#34;#static&#34; class=&#34;headerlink&#34; title=&#34;static&#34;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提高程序鲁棒性（Robust）稳健性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要有两种用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修饰全局变量也就是文件上定义的变量，防止被extern，污染命名空间（命名冲突）&lt;/li&gt;
&lt;li&gt;修饰函数内定义的变量，保持变量的持久性（函数体内定义）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化代码结构和程序性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存放在静态数据区，这样可以提高数据的局部性，提高缓存的利用效率&lt;/li&gt;
&lt;li&gt;多次调用不会多次分配内存，节省内存分配时间&lt;/li&gt;
&lt;li&gt;显示的声明作用域和生命周期，提高代码可读性和可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认初始化为0，不需要显式的初始化为0，存放在静态数据区（类似于全局变量的位置）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块内不对外开放的变量都应该使用static修饰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;const&#34;&gt;&lt;a href=&#34;#const&#34; class=&#34;headerlink&#34; title=&#34;const&#34;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不可变&lt;/li&gt;
&lt;li&gt;提高程序鲁棒性（Robust）稳健性&lt;/li&gt;
&lt;li&gt;没有修改需求的指针都应该被const修饰&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于Const指针&#34;&gt;&lt;a href=&#34;#关于Const指针&#34; class=&#34;headerlink&#34; title=&#34;关于Const指针&#34;&gt;&lt;/a&gt;关于Const指针&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p1;		&lt;span class=&#34;hljs-comment&#34;&gt;//指向常量的指针 (const int) *p1，指向的值不能修改，指针本身可以修改&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; p2;    	&lt;span class=&#34;hljs-comment&#34;&gt;//指针是常量 int *(const p2) 不能指向别的变量，但是指向的变量可以修改		因为不能被修改所以必须要被初始化。&lt;/span&gt;&lt;br&gt;   &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; p3;&lt;span class=&#34;hljs-comment&#34;&gt;//不能指向别的变量，也不能修改指向变量的值&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注意   这个等同于第一个   容易产生误解尽量不要使用这个表达&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; *p;		&lt;span class=&#34;hljs-comment&#34;&gt;//指向常量的指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Const常量可以被修改&#34;&gt;&lt;a href=&#34;#Const常量可以被修改&#34; class=&#34;headerlink&#34; title=&#34;Const常量可以被修改&#34;&gt;&lt;/a&gt;Const常量可以被修改&lt;/h3&gt;&lt;p&gt;对于一个Cont常量，实际上你访问的是它的&lt;strong&gt;内存拷贝&lt;/strong&gt;，你仍然可以去用指针去修改它。&lt;/p&gt;
&lt;h3 id=&#34;const-局部变量&#34;&gt;&lt;a href=&#34;#const-局部变量&#34; class=&#34;headerlink&#34; title=&#34;const 局部变量&#34;&gt;&lt;/a&gt;const 局部变量&lt;/h3&gt;&lt;p&gt;const 局部变量居然定义在stack上，用指针居然可以修改其值&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; const_val=&lt;span class=&#34;hljs-number&#34;&gt;66&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p = &amp;amp;const_val;&lt;br&gt;    &lt;br&gt;	*p = &lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;const_val=%d \r\n&amp;quot;&lt;/span&gt;, const_val );		&lt;span class=&#34;hljs-comment&#34;&gt;//const_val=33&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;const-volatile&#34;&gt;&lt;a href=&#34;#const-volatile&#34; class=&#34;headerlink&#34; title=&#34;const volatile&#34;&gt;&lt;/a&gt;const volatile&lt;/h3&gt;&lt;p&gt;见 volatile 相关内容&lt;/p&gt;
&lt;h2 id=&#34;指针&#34;&gt;&lt;a href=&#34;#指针&#34; class=&#34;headerlink&#34; title=&#34;指针&#34;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;h3 id=&#34;const-指针&#34;&gt;&lt;a href=&#34;#const-指针&#34; class=&#34;headerlink&#34; title=&#34;const 指针&#34;&gt;&lt;/a&gt;const 指针&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;###%E5%85%B3%E4%BA%8EConst%E6%8C%87%E9%92%88&#34;&gt;关于Const指针&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;有x个指针的数组&#34;&gt;&lt;a href=&#34;#有x个指针的数组&#34; class=&#34;headerlink&#34; title=&#34;有x个指针的数组&#34;&gt;&lt;/a&gt;有x个指针的数组&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *p2[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;hljs-comment&#34;&gt;//这是有三个指针的数组&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;指向x个元素数组的指针&#34;&gt;&lt;a href=&#34;#指向x个元素数组的指针&#34; class=&#34;headerlink&#34; title=&#34;指向x个元素数组的指针&#34;&gt;&lt;/a&gt;指向x个元素数组的指针&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指针执行&lt;code&gt;p1 = p1 + 1;&lt;/code&gt;操作，p1中的值会增加12个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; (*p1)[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;hljs-comment&#34;&gt;//指向x个元素数组的指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;二维、多维数组的指针&#34;&gt;&lt;a href=&#34;#二维、多维数组的指针&#34; class=&#34;headerlink&#34; title=&#34;二维、多维数组的指针&#34;&gt;&lt;/a&gt;二维、多维数组的指针&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] =&amp;#123;&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&amp;#125;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*pa)[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = a&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//a是指向指针的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//a是一个指针，他指向的是下一维度的数组的头（指针、地址，它指向二维数组的第一个值），&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h3 id=&#34;指针参数的内存传递&#34;&gt;&lt;a href=&#34;#指针参数的内存传递&#34; class=&#34;headerlink&#34; title=&#34;指针参数的内存传递&#34;&gt;&lt;/a&gt;指针参数的内存传递&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; a=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, b=&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun_p&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    p = &amp;amp;b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun_p_p&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    *p = &amp;amp;b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p_a = &amp;amp;a;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;amp;a=%X-&amp;amp;b=%X\r\n&amp;quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    fun_p(p_a);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    fun_p_p(&amp;amp;p_a);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;编译器总是要为函数的每个参数制作临时副本，&lt;code&gt;void fun_p(int *p)&lt;/code&gt;函数的指针参数是&lt;code&gt;p&lt;/code&gt;，编译器为其分配的副本是&lt;code&gt;_p&lt;/code&gt;，编译器使&lt;code&gt;_p=p&lt;/code&gt;就是两者不是同一个变量但是指向相同的地址，函数里面修改了&lt;code&gt;_P&lt;/code&gt;的指向，但是并没有修改&lt;code&gt;p&lt;/code&gt;的指向，所以导致函数&lt;code&gt;void fun_p(int *p)&lt;/code&gt;并没有得到期待的运行结果。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;void fun_p_p(int *p)&lt;/code&gt;函数是用指向&lt;code&gt;p_a&lt;/code&gt;的指针修改了&lt;code&gt;p_a&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;修改某个变量，要用指向这个变量的指针！而修改指针要用（指向指针的指针）才行！&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;野指针-wild-pointer&#34;&gt;&lt;a href=&#34;#野指针-wild-pointer&#34; class=&#34;headerlink&#34; title=&#34;野指针 wild pointer&#34;&gt;&lt;/a&gt;野指针 wild pointer&lt;/h3&gt;&lt;p&gt;野指针突出一个野字，这个野就是状态未知的。它可能指向一块未知的区域。&lt;br&gt;野指针是指尚未正确初始化的指针，因此指向某个随机内存块。产生野指针是一个严重错误。&lt;/p&gt;
&lt;h3 id=&#34;空指针&#34;&gt;&lt;a href=&#34;#空指针&#34; class=&#34;headerlink&#34; title=&#34;空指针&#34;&gt;&lt;/a&gt;空指针&lt;/h3&gt;&lt;p&gt;一般我们将等于&lt;code&gt;0&lt;/code&gt;&amp;#x2F;&lt;code&gt;NULL&lt;/code&gt;&amp;#x2F;&lt;code&gt;nullptr&lt;/code&gt;的指针称为空指针。空指针不能被解引用，但是可以对空指针取地址。&lt;br&gt;&lt;code&gt;0&lt;/code&gt;是&lt;code&gt;int&lt;/code&gt;类型，&lt;code&gt;NULL&lt;/code&gt;在g++下是一个宏定义，而&lt;code&gt;nullptr&lt;/code&gt;是有类型的；&lt;/p&gt;
&lt;h3 id=&#34;悬空指针-dangling-pointer&#34;&gt;&lt;a href=&#34;#悬空指针-dangling-pointer&#34; class=&#34;headerlink&#34; title=&#34;悬空指针 dangling pointer&#34;&gt;&lt;/a&gt;悬空指针 dangling pointer&lt;/h3&gt;&lt;p&gt;悬空指针是指指针指向的内容已被释放，指针指向的对象的生命周期已结束。&lt;br&gt;悬垂指针是指以前指向有效地址但现在不再指向的指针。这通常是由于该内存位置被释放并且不再可用。除非您尝试访问该指针指向的内存位置，否则悬垂指针没有任何问题。最佳做法始终是不产生或留下悬垂指针。&lt;/p&gt;
&lt;h2 id=&#34;跳的转到指定地址执行程序&#34;&gt;&lt;a href=&#34;#跳的转到指定地址执行程序&#34; class=&#34;headerlink&#34; title=&#34;跳的转到指定地址执行程序&#34;&gt;&lt;/a&gt;跳的转到指定地址执行程序&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;第一种办法：&lt;span class=&#34;hljs-keyword&#34;&gt;goto&lt;/span&gt;&lt;br&gt;第二种办法：&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//解释&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)				&lt;span class=&#34;hljs-comment&#34;&gt;//函数指针类型&lt;/span&gt;&lt;br&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)) &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//将 100 强制转换为 函数指针类型&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数定义&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//code&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数调用&lt;/span&gt;&lt;br&gt;func();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用函数指针来执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*pF)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;) = func;	&lt;span class=&#34;hljs-comment&#34;&gt;//使用函数指针指向func函数&lt;/span&gt;&lt;br&gt;pF();						&lt;span class=&#34;hljs-comment&#34;&gt;//利用函数指针调用函数&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;内联函数-inline&#34;&gt;&lt;a href=&#34;#内联函数-inline&#34; class=&#34;headerlink&#34; title=&#34;内联函数 inline&#34;&gt;&lt;/a&gt;内联函数 inline&lt;/h2&gt;&lt;p&gt;详见Keil-&amp;gt; Arm Compiler 6 User’s Guides-&amp;gt; Inlining functions&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Inlining options, keywords, or attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__inline__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this keyword on a function definition or declaration as a hint to the compiler  to favor inlining of the function. However, for each function call, the compiler  still decides whether to inline the function. This is equivalent to  &lt;code&gt;__inline&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__attribute__((always_inline))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this function attribute on a function definition or declaration to tell the  compiler to always inline this function, with certain exceptions such as for  recursive functions. This overrides the &lt;code&gt;-fno-inline-functions&lt;/code&gt;  option.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__attribute__((noinline))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this function attribute on a function definition or declaration to tell the  compiler to not inline the function. This is equivalent to  &lt;code&gt;__declspec(noinline)&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-fno-inline-functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This  is a compiler command-line option. Specify this option to the compiler to  disable inlining. This option overrides the &lt;code&gt;__inline__&lt;/code&gt;  hint.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arm Compiler only  inlines functions within the same compilation unit, unless you use Link Time  Optimization. For more information, see &lt;a href=&#34;armclang_intro_chr1413367986635.htm&#34;&gt;&lt;em&gt;Optimizing across modules with link time  optimization&lt;/em&gt;&lt;/a&gt; in the Software Development  Guide. &lt;/li&gt;
&lt;li&gt;C++ and C99 provide the &lt;code&gt;inline&lt;/code&gt; language keyword. The effect of  this &lt;code&gt;inline&lt;/code&gt; language keyword is identical to the effect of using  the &lt;code&gt;__inline__&lt;/code&gt; compiler keyword. However, the effect in C99 mode is  different from the effect in C++ or other C that does not adhere to the C99  standard. For more information, see &lt;a href=&#34;https://developer.arm.com/docs/101754/0614/armclang-reference/other-compiler-specific-features/inline-functions&#34;&gt;&lt;em&gt;Inline functions&lt;/em&gt;&lt;/a&gt; in  the Arm Compiler Reference Guide. &lt;/li&gt;
&lt;li&gt;Function inlining normally happens at higher optimization levels, such as  &lt;code&gt;-O2&lt;/code&gt;, except when you specify  &lt;code&gt;__attribute__((always_inline))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;do-while-continue&#34;&gt;&lt;a href=&#34;#do-while-continue&#34; class=&#34;headerlink&#34; title=&#34;do while continue&#34;&gt;&lt;/a&gt;do while continue&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 相当于一个go to 去到了contin&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;contin:;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-comment&#34;&gt;/* ... */&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;预编译ifdef&#34;&gt;&lt;a href=&#34;#预编译ifdef&#34; class=&#34;headerlink&#34; title=&#34;预编译ifdef&#34;&gt;&lt;/a&gt;预编译ifdef&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;ifdef&lt;/span&gt; WIN7&lt;/span&gt;&lt;br&gt;     xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined WIN8 &lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;	xxxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined(WIN7)&lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined(WIN8) &lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;	xxxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏相关&#34;&gt;&lt;a href=&#34;#宏相关&#34; class=&#34;headerlink&#34; title=&#34;宏相关&#34;&gt;&lt;/a&gt;宏相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般来说在宏中不要使用增量(++i)或减量(–i)运算符。假设宏里面有多个替换，结果是不可预知的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏后面对宏的注释应该要用块注释，而不应使用行注释。因为有些编译器会将行注释理解成宏的一部分(这么智障的编译器嘛？？)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;define定义一个宏函数记得写 do{}while(0)&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; device_init_wakeup(dev,val) \ &lt;/span&gt;&lt;br&gt; device_can_wakeup(dev) = !!(val);   \ &lt;br&gt; device_set_wakeup_enable(dev,val);&lt;br&gt; &lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) device_init_wakeup(d, v);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   为什么不简单写{}&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; device_init_wakeup(dev,val) \ &lt;/span&gt;&lt;br&gt;&amp;#123; device_can_wakeup(dev) = !!(val); \ &lt;br&gt;device_set_wakeup_enable(dev,val); &amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &lt;br&gt;    device_init_wakeup(d, v);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;__FILE__和__LINE__，FILE展开为当前源文件的文件名，是一个字符串，LINE展开为当前代码行的行号，是一个整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似上面的 C99有__func__ 可以打印出当前函数名，但是注意这是一个变量而不是宏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gcc 定义宏&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;gcc -c -DMACHINE=&lt;span class=&#34;hljs-number&#34;&gt;8086&lt;/span&gt; main.c&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏中用#将宏参量（可以是变量、函数名）转换成&lt;strong&gt;字符串&lt;/strong&gt;。——创建字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏中用##将两者进行粘合变成&lt;strong&gt;一个标识符&lt;/strong&gt;(变量等…)。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; X_NAME(n) 	x##n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; X_CHAR(x)	#x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; PSQR(x)		printf( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;The square of &amp;quot;&lt;/span&gt; #x &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; is %d\n&amp;quot;&lt;/span&gt;,((x)*(x)) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; PSQRx(x)	printf( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;The square of %s is %d\n&amp;quot;&lt;/span&gt;, #x, ((x)*(x)) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;X_NAME&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//等价于   x1 = 5;&lt;/span&gt;&lt;br&gt;PSQR( x1 );&lt;br&gt;PSQRx( x1 );&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s-%s-%d\r\n&amp;quot;&lt;/span&gt;, X_CHAR( X_NAME(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) ), X_CHAR( x1 ), X_NAME(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) );&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;The square of x1 is 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;The square of x1 is 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;X_NAME( 1 )-x1-5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可变参数&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; DEBUGP(format, ...) printk(format, ## __VA_ARGS__)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在C语言中，未定义的宏默认值为0。&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; CONFIG_CHARGE_OUT_SHUTDOWN != 0&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CONFIG_CHARGE_OUT_SHUTDOWN is not equal to zero.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CONFIG_CHARGE_OUT_SHUTDOWN is not defined or equal to zero.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在上述代码中，由于 `CONFIG_CHARGE_OUT_SHUTDOWN` 没有被定义，`#if` 指令的条件不成立，所以第一个 `printf` 语句不会被编译。相反，由于存在 `#else` 部分，第二个 `printf` 语句会被编译并执行，输出 &amp;quot;CONFIG_CHARGE_OUT_SHUTDOWN is not defined or equal to zero.&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;宏展开的顺序&#34;&gt;&lt;a href=&#34;#宏展开的顺序&#34; class=&#34;headerlink&#34; title=&#34;宏展开的顺序&#34;&gt;&lt;/a&gt;宏展开的顺序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带#和带##的运算符不需要进行参数的展开！！除了带#和##运算符的参数之外，其它参数在替换之前要对实参本身做充分的展开，所以应该先把sub_z展开成26再替换到alt[x]中x的位置。&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; sh(x) printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; #x &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;=%d, or %d\n&amp;quot;&lt;/span&gt;,n##x,alt[x])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; sub_z 26&lt;/span&gt;&lt;br&gt;&lt;br&gt;sh(sub_z)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//展开成了printf(&amp;quot;n&amp;quot; &amp;quot;sub_z&amp;quot; &amp;quot;=%d, or %d\n&amp;quot;,nsub_z,alt[26])&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;强制转换&#34;&gt;&lt;a href=&#34;#强制转换&#34; class=&#34;headerlink&#34; title=&#34;强制转换&#34;&gt;&lt;/a&gt;强制转换&lt;/h2&gt;&lt;h3 id=&#34;signed-int转换到unsigned-int&#34;&gt;&lt;a href=&#34;#signed-int转换到unsigned-int&#34; class=&#34;headerlink&#34; title=&#34;signed int转换到unsigned int&#34;&gt;&lt;/a&gt;signed int转换到unsigned int&lt;/h3&gt;&lt;p&gt;带符号整型转换到无符号整型,最高位(high-order bit)会丧失其作为符号位的功能。如果该带符号整数的值非负,那么转换后值不变;如果该带符号整数的值为负,那么转换后的结果通常是一个非常大的正数。&lt;/p&gt;
&lt;h2 id=&#34;uint32-t-无符号相减-定时器溢出问题&#34;&gt;&lt;a href=&#34;#uint32-t-无符号相减-定时器溢出问题&#34; class=&#34;headerlink&#34; title=&#34;uint32_t 无符号相减 定时器溢出问题&#34;&gt;&lt;/a&gt;uint32_t 无符号相减 定时器溢出问题&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timer_loop&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Timer&lt;/span&gt;* &lt;span class=&#34;hljs-title&#34;&gt;target&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(target=head_handle; target; target=target-&amp;gt;next) &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(_timer_ticks &amp;gt;= target-&amp;gt;timeout) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(target-&amp;gt;repeat == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;				timer_stop(target);&lt;br&gt;			&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;				target-&amp;gt;timeout = _timer_ticks + target-&amp;gt;repeat;&lt;br&gt;			&amp;#125;&lt;br&gt;			target-&amp;gt;timeout_cb();&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个uint32_t的_timer_ticks，每毫秒自加1，设备运行到49天的时候会涉及到溢出的问题。所以在timer_loop里面的判断超时的语句需要小修改下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if(_timer_ticks &amp;gt;= target-&amp;gt;timeout)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 修改为 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;if((int)((uint32_t)(target-&amp;gt;timeout -_timer_ticks)) &amp;lt;= 0)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;完美解决uint32_t变量溢出时，超时判断有误的bug&lt;/p&gt;
&lt;p&gt;HAL库的无符号相减，tick是++&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;((now_tick - tick_start) &amp;lt; wait )&lt;br&gt;&amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;RT-thread 内的判断&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 最大定时长度是 RT_TICK_MAX / 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((current_tick - t-&amp;gt;timeout_tick) &amp;lt; RT_TICK_MAX / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;p&gt;&lt;strong&gt;这里其实涉及的是无符号数相减，减出负数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;负数在计算机内是用其补码来存储的。&lt;/p&gt;
&lt;p&gt;减法会被换算成两个数的加法，a-b会被换算成a加上b的补码，即a+(~b+1)。&lt;/p&gt;
&lt;p&gt;252-250&amp;#x3D;(b1111 1100)+(b0000 0110)&amp;#x3D;(b0000 0010)&amp;#x3D;2&lt;/p&gt;
&lt;p&gt;1-250&amp;#x3D;(b0000 0001)+(b0000 0110)&amp;#x3D;(b0000 0111)&amp;#x3D;7&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;所以计算两值的差值就可以直接相减&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; now = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; pre = &lt;span class=&#34;hljs-number&#34;&gt;250&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; differ=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;differ = (&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;)(now - pre);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// differ = 0x08&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;c编译原理&#34;&gt;&lt;a href=&#34;#c编译原理&#34; class=&#34;headerlink&#34; title=&#34;c编译原理&#34;&gt;&lt;/a&gt;c编译原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/2018051223284857.png&#34; alt=&#34;2018051223284857&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20180513215202780.png&#34; alt=&#34;20180513215202780&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;预编译&#34;&gt;&lt;a href=&#34;#预编译&#34; class=&#34;headerlink&#34; title=&#34;预编译&#34;&gt;&lt;/a&gt;预编译&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;define展开&lt;/li&gt;
&lt;li&gt;FILE LINE等展开&lt;/li&gt;
&lt;li&gt;include包含&lt;/li&gt;
&lt;li&gt;转化 .i 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -E&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;编译&#34;&gt;&lt;a href=&#34;#编译&#34; class=&#34;headerlink&#34; title=&#34;编译&#34;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化在这进行，包括数值计算一类&lt;/li&gt;
&lt;li&gt;编译成汇编文件&lt;/li&gt;
&lt;li&gt;转化 .s .asm文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -S&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;汇编&#34;&gt;&lt;a href=&#34;#汇编&#34; class=&#34;headerlink&#34; title=&#34;汇编&#34;&gt;&lt;/a&gt;汇编&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;汇编语言代码翻译成目标机器指令的过程&lt;/li&gt;
&lt;li&gt;data段code段在这里产生&lt;/li&gt;
&lt;li&gt;转化 .o .obj文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -c&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;链接成 .exe .out .axf等&lt;/li&gt;
&lt;li&gt;动态链接、静态链接(动态库.so、静态库.a)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h2 id=&#34;内存分配相关&#34;&gt;&lt;a href=&#34;#内存分配相关&#34; class=&#34;headerlink&#34; title=&#34;内存分配相关&#34;&gt;&lt;/a&gt;内存分配相关&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/215103893_2_20210208091156224-16901904300991.png&#34; alt=&#34;Stm32RAM布局&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/806053-20170722131756261-1095755633.png&#34; alt=&#34;806053-20170722131756261-1095755633&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;code-代码区&#34;&gt;&lt;a href=&#34;#code-代码区&#34; class=&#34;headerlink&#34; title=&#34;.code 代码区&#34;&gt;&lt;/a&gt;.code 代码区&lt;/h3&gt;&lt;p&gt;代码段（code segment&amp;#x2F;text segment ）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  STM32 在上电启动之后默认从 Flash 启动, 在STM32里面Code部分不会被搬运到RAM内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;data-已初始化区&#34;&gt;&lt;a href=&#34;#data-已初始化区&#34; class=&#34;headerlink&#34; title=&#34;.data 已初始化区&#34;&gt;&lt;/a&gt;.data 已初始化区&lt;/h3&gt;&lt;h3 id=&#34;bss-未初始化区&#34;&gt;&lt;a href=&#34;#bss-未初始化区&#34; class=&#34;headerlink&#34; title=&#34;.bss 未初始化区&#34;&gt;&lt;/a&gt;.bss 未初始化区&lt;/h3&gt;&lt;h3 id=&#34;heap-堆区&#34;&gt;&lt;a href=&#34;#heap-堆区&#34; class=&#34;headerlink&#34; title=&#34;heap 堆区&#34;&gt;&lt;/a&gt;heap 堆区&lt;/h3&gt;&lt;h3 id=&#34;stack-栈区&#34;&gt;&lt;a href=&#34;#stack-栈区&#34; class=&#34;headerlink&#34; title=&#34;stack 栈区&#34;&gt;&lt;/a&gt;stack 栈区&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/686215-20151218231826459-500964006.png&#34; alt=&#34;686215-20151218231826459-500964006&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在C语言中，函数参数的入栈顺序是从右到左&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-delete-malloc-free&#34;&gt;&lt;a href=&#34;#new-delete-malloc-free&#34; class=&#34;headerlink&#34; title=&#34;new delete malloc free&#34;&gt;&lt;/a&gt;new delete malloc free&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  free两次有时可能是极其严重的安全漏洞，将一个指针释放两次是非常危险的行为，它可能造成任意代码执行。 &lt;a href=&#34;https://awakened1712.github.io/hacking/hacking-whatsapp-gif-rce/&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;new-delete&#34;&gt;&lt;a href=&#34;#new-delete&#34; class=&#34;headerlink&#34; title=&#34;new &amp;#x2F; delete&#34;&gt;&lt;/a&gt;new &amp;#x2F; delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x2F; release memory 分配&amp;#x2F;释放&lt;ol&gt;
&lt;li&gt;Memory allocated from ‘Free Store’.   这个FreeStore和Heap不一定一样 似乎取决于它的具体实现方式&lt;/li&gt;
&lt;li&gt;Returns a fully typed pointer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; (standard version) never returns a &lt;code&gt;NULL&lt;/code&gt; (will throw on failure).&lt;/li&gt;
&lt;li&gt;Are called with Type-ID (compiler calculates the size). 使用 Type-ID 调用（编译器计算大小）。&lt;/li&gt;
&lt;li&gt;Has a version explicitly to handle arrays. 有一个明确的版本来处理数组。&lt;/li&gt;
&lt;li&gt;Reallocating (to get more space) not handled intuitively (because of copy constructor). 重新分配（以获得更多空间）没有直观地处理（因为复制构造函数）。&lt;/li&gt;
&lt;li&gt;Whether they call &lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt; is implementation defined. 他们是否调用&lt;code&gt;malloc&lt;/code&gt;&amp;#x2F;&lt;code&gt;free&lt;/code&gt;是由实现来定义的。&lt;/li&gt;
&lt;li&gt;Can add a new memory allocator to deal with low memory (&lt;code&gt;std::set_new_handler&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator new&lt;/code&gt; &amp;#x2F; &lt;code&gt;operator delete&lt;/code&gt; can be overridden legally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constructor &amp;#x2F; destructor used to initialize &amp;#x2F; destroy the object.  构造函数&amp;#x2F;析构函数用于初始化&amp;#x2F;销毁对象。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;malloc-free&#34;&gt;&lt;a href=&#34;#malloc-free&#34; class=&#34;headerlink&#34; title=&#34;malloc &amp;#x2F; free&#34;&gt;&lt;/a&gt;malloc &amp;#x2F; free&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x2F; release memory&lt;ol&gt;
&lt;li&gt;Memory allocated from ‘Heap’.&lt;/li&gt;
&lt;li&gt;Returns a &lt;code&gt;void*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Returns &lt;code&gt;NULL&lt;/code&gt; on failure.&lt;/li&gt;
&lt;li&gt;Must specify the size required in bytes. 必须以字节为单位指定所需的大小。&lt;/li&gt;
&lt;li&gt;Allocating array requires manual calculation of space. 分配数组需要手动计算空间。&lt;/li&gt;
&lt;li&gt;Reallocating larger chunk of memory simple (no copy constructor to worry about). 重新分配更大的内存块很简单（无需担心复制构造函数）。&lt;/li&gt;
&lt;li&gt;They will &lt;strong&gt;NOT&lt;/strong&gt; call &lt;code&gt;new&lt;/code&gt; &amp;#x2F; &lt;code&gt;delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No way to splice user code into the allocation sequence to help with low memory. 无法将用户代码拼接到分配序列中以帮助解决内存不足的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt; can &lt;strong&gt;NOT&lt;/strong&gt; be overridden legally.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Table-comparison-of-the-features&#34;&gt;&lt;a href=&#34;#Table-comparison-of-the-features&#34; class=&#34;headerlink&#34; title=&#34;Table comparison of the features:&#34;&gt;&lt;/a&gt;Table comparison of the features:&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Feature&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;new&lt;/code&gt; &amp;#x2F; &lt;code&gt;delete&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Memory allocated from&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;‘Free Store’&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;‘Heap’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Returns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fully typed pointer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;void*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;On failure&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Throws (never returns &lt;code&gt;NULL&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Returns &lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Required size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Calculated by compiler&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Must be specified in bytes&lt;br/&gt;必须以字节为单位指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Handling arrays&lt;br&gt;处理数组&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Has an explicit version&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Requires manual calculations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Reallocating&lt;br&gt;重新分配&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not handled intuitively&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Simple (no copy constructor)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Call of reverse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Implementation defined&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Low memory cases&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Can add a new memory allocator&lt;br&gt;可以添加新的内存分配器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not handled by user code&lt;br&gt;不由用户代码处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Overridable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Use of constructor &amp;#x2F; destructor&lt;br&gt;构造函数&amp;#x2F;析构函数的使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;运算符&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Technically, memory allocated by &lt;code&gt;new&lt;/code&gt; comes from the ‘Free Store’ while memory allocated by &lt;code&gt;malloc&lt;/code&gt; comes from the ‘Heap’. Whether these two areas are the same is an implementation detail, which is another reason that &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; cannot be mixed. 从技术上讲，分配的内存&lt;code&gt;new&lt;/code&gt;来自“免费存储”，而分配的内存&lt;code&gt;malloc&lt;/code&gt;来自“堆”。这两个区域是否相同是一个实现细节，这是另一个&lt;code&gt;malloc&lt;/code&gt;不能&lt;code&gt;new&lt;/code&gt;混为一谈的原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最相关的区别是&lt;code&gt;new&lt;/code&gt;运算符分配内存然后调用&lt;strong&gt;构造函数&lt;/strong&gt;，&lt;code&gt;delete&lt;/code&gt;调用&lt;strong&gt;析构函数&lt;/strong&gt;然后释放内存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格来说，new 操作符只是分配内存。是 new 表达式调用 new 运算符，然后在分配的内存中运行构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;调用对象的ctor，&lt;code&gt;delete&lt;/code&gt;调用dtor。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;malloc&lt;/code&gt;&amp;amp;&lt;code&gt;free&lt;/code&gt;只是分配和释放原始内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;复合字面量（Compound-Literals）&#34;&gt;&lt;a href=&#34;#复合字面量（Compound-Literals）&#34; class=&#34;headerlink&#34; title=&#34;复合字面量（Compound Literals）&#34;&gt;&lt;/a&gt;复合字面量（Compound Literals）&lt;/h2&gt;&lt;p&gt;字面量是&lt;strong&gt;除了符号常量之外的常量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如，1是int型字面量，3.14是float型字面量，’C’是char型字面量，’Yudao’是字符串字面量。&lt;/p&gt;
&lt;p&gt;那么，数组和结构体是否也能有字面量来表示呢？&lt;/p&gt;
&lt;p&gt;因此，C99标准委员会就新增了复合字面量(compound literals)。&lt;/p&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a href=&#34;#语法&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  ( type-name ) { initializer-list }&lt;/p&gt;
&lt;p&gt;  ( type-name ) { initializer-list , }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;约束&#34;&gt;&lt;a href=&#34;#约束&#34; class=&#34;headerlink&#34; title=&#34;约束&#34;&gt;&lt;/a&gt;约束&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  The type name shall specify an object type or an array of unknown size, but not a variable length array type.&lt;br&gt;  type name指定了数组类型或结构体类型，数组长度不能是可变的。&lt;/p&gt;
&lt;p&gt;  No initializer shall attempt to provide a value for an object not contained within the entire unnamed object specified by the compound literal.&lt;br&gt;  匿名”对象”的初始化必须在在复合字面量的大括号中。&lt;/p&gt;
&lt;p&gt;  If the compound literal occurs outside the body of a function, the initializer list shall consist of constant expressions.&lt;br&gt;  如果复合字面量是文件作用域，initializer list的表达式必须是常量表达式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;例如下面是一个普通的数组声明。&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;int&lt;/span&gt; age[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]=[&lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面创建了一个和age数组相同的匿名数组，也有两个int类型值&lt;/p&gt;
&lt;figure class=&#34;highlight angelscript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs angelscript&#34;&gt;(&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; [&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;])&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;&amp;#125;; &lt;span class=&#34;hljs-comment&#34;&gt;//内含2个元素的复合字面量&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意去掉申明中的数组名，留下的&lt;code&gt;int[2]&lt;/code&gt;就是复合字面量的类型名。&lt;/p&gt;
&lt;p&gt;因为复合字面量是匿名的，所以不能先创建然后再使用它，必须在创建的同时使用它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般需要这样定义使用：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 简单用法       ***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *pt1;&lt;br&gt;pt1=(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;])&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对于多维数组   ***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*pt2)[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//申明一个指向二维数组的指针，该数组内有2个数组元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//每个元素是内含4个int类型值的数组&lt;/span&gt;&lt;br&gt;pt2 = (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; [&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]) &amp;#123;&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&amp;#125;,&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;,&amp;#125;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对于结构体     ***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; a; &lt;br&gt;  &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; b[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125; structure;&lt;br&gt;structure = ((&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; foo) &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一些应用&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; AV_FOURCC_MAX_STRING_SIZE 32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; av_fourcc2str(fourcc) av_fourcc_make_string((char[AV_FOURCC_MAX_STRING_SIZE])&amp;#123;0&amp;#125;, fourcc)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;hljs-title function_&#34;&gt;av_fourcc_make_string&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *buf, &lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; fourcc)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; type = &lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, av_fourcc2str(type));&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 匿名构建了一块内存地址 (char[AV_FOURCC_MAX_STRING_SIZE])&amp;#123;0&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* data;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;   length;&lt;br&gt;&amp;#125; Array;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Array* arr)&lt;/span&gt; &amp;#123; &amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 曾经的写法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;   data[]  = &amp;#123; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;#125;;&lt;br&gt;Array arr [&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = &amp;#123;data, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;br&gt;foo(arr);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 现在的写法&lt;/span&gt;&lt;br&gt;foo( (Array[]) &amp;#123; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;[]) &amp;#123; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;#125; );&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;内建函数&#34;&gt;&lt;a href=&#34;#内建函数&#34; class=&#34;headerlink&#34; title=&#34;内建函数&#34;&gt;&lt;/a&gt;内建函数&lt;/h2&gt;&lt;h1 id=&#34;STM32相关&#34;&gt;&lt;a href=&#34;#STM32相关&#34; class=&#34;headerlink&#34; title=&#34;STM32相关&#34;&gt;&lt;/a&gt;STM32相关&lt;/h1&gt;&lt;h2 id=&#34;ADC-与-通道映射关系&#34;&gt;&lt;a href=&#34;#ADC-与-通道映射关系&#34; class=&#34;headerlink&#34; title=&#34;ADC 与 通道映射关系&#34;&gt;&lt;/a&gt;ADC 与 通道映射关系&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/ADC%E9%80%9A%E9%81%93%E4%B8%8E%E5%BC%95%E8%84%9A%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.png&#34; alt=&#34;ADC通道与引脚对应关系&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Printf第一个字符丢失&#34;&gt;&lt;a href=&#34;#Printf第一个字符丢失&#34; class=&#34;headerlink&#34; title=&#34;Printf第一个字符丢失&#34;&gt;&lt;/a&gt;Printf第一个字符丢失&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将发送放在等待标志位后面即可解决问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* Loop until the end of transmission */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* Place your implementation of fputc here */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* e.g. write a character to the USART */&lt;/span&gt;&lt;br&gt;	USART_SendData(USART2, (&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;) ch);&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ch;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;通用TIM-PWM输出低电平&#34;&gt;&lt;a href=&#34;#通用TIM-PWM输出低电平&#34; class=&#34;headerlink&#34; title=&#34;通用TIM PWM输出低电平&#34;&gt;&lt;/a&gt;通用TIM PWM输出低电平&lt;/h2&gt;&lt;p&gt;调用 TIM_CCxCmd 关闭输出使能即可&lt;strong&gt;持续输出低电平&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;TIM_CCxCmd&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TIM_TypeDef* TIMx, &lt;span class=&#34;hljs-type&#34;&gt;uint16_t&lt;/span&gt; TIM_Channel, &lt;span class=&#34;hljs-type&#34;&gt;uint16_t&lt;/span&gt; TIM_CCx)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CCxE位&lt;/th&gt;
&lt;th&gt;OCx输出状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;禁止输出(OCx&amp;#x3D;0，OCx_EN&amp;#x3D;0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;OCx &amp;#x3D; OCxREF + 极性，OCx_EN&amp;#x3D;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;杂乱笔记&#34;&gt;&lt;a href=&#34;#杂乱笔记&#34; class=&#34;headerlink&#34; title=&#34;杂乱笔记&#34;&gt;&lt;/a&gt;杂乱笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仿真建议使用SWD模式(使用的线少)         emmm。。。。？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KEY_UP高电有效（可用于唤醒）、KEY0、KEY1低电有效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;编译器会默认把没有赋值的变量自动赋值为0（真的是这样吗？，局部变量呢？答复:局部变量不会被初始化,请一定注意要去手动进行初始化）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NTC (Negative Temperature Coefficient 负温度系数)      PTC (Positive 正温度系数)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RTC (实时时钟)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;APB1和APB2的区别,&lt;br&gt;APB1操作速度限于36MHz,	上面连接的是低速外设,包括 TIM234567、WWDG、SPI2、SPI3、USART23、UART45、CAN12、PWRPower interface clock、 BKP、 DAC、I2C12、等，&lt;strong&gt;具体请参考7.3.8章节APB1外设使能寄存器&lt;/strong&gt;&lt;br&gt;APB2操作速度全速,	上面连接的是高速外设,包括 UART1 、SPI1、Timer1、ADC1、ADC2、所有普通 IO 口(PA-PE)(PA-PE)(PA-PE)(PA-PE)(PA-PE)(PA-PE) 、第二功能IO 口 、&lt;strong&gt;具体请参考7.3.7章节APB2外设使能寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原子提供的delay_ms 最大是1864ms不能超过这个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;volatile 简单地说就是防止编译器对代码进行优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;enum 枚举类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SysTick     LOAD 转载到 VAL 需要时钟周期所以计算 LOAD 时需要-1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PA13 PA14 PA15 PB3 PB4 上电默认是SWD+JTAG模式所以这些GPIO口不能直接使用可调用 GPIO_PinRemapConfig 函数修改&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DAC要将对应的IO设置成模拟输入！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;USART1 时钟脉冲来源   PCLK2     USART2-4来源   PCLK1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用USART不需要使能AFIO    （发生重映射才需要进行打开AFIO参考CSDN）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;0,1,2,3,4 各有自己的中断函数        5-9共用一个中断函数    10-15共用一个中断函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;u8 temp &lt;em&gt;attribute&lt;/em&gt;((at (地址)));					&amp;#x2F;&amp;#x2F;需要定义为全局变量—-定义变量到指定地址&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容量&lt;/p&gt;
&lt;p&gt;4表示16KB （小容量ld）&lt;br&gt;6表示32KB （小容量ld）&lt;br&gt;8表示64KB （中容量md）&lt;br&gt;B表示128KB （中容量md）&lt;br&gt;C表示256KB （大容量hd）&lt;br&gt;E表示512KB （大容量hd）&lt;br&gt;F表示768KB （超大容量xl）&lt;br&gt;G表示1024KB （超大容量xl）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC输入范围：VREF- ≤  VIN  ≤  VREF+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在扫描模式下，由ADC_SQRx或者ADC_JSQRx寄存器选中的通道被转换。如果设置了EOCIE或者JEOCIE，在最后一个通道转换完毕后才会产生EOC或者JEOC中断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC ADC1通道17 测得的是内部参考电压(根据数据手册中的数据，这个参照电压的典型值是1.20V，最小值是1.16V，最大值是1.24V)，!!!不是ADC的参考电压Vref+!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统滴答定时器&lt;/p&gt;
&lt;p&gt;SysTick-&amp;gt;CTRL        类似控制及状态位寄存器&lt;br&gt;SysTick-&amp;gt;LOAD	   到时间自动重装的重装载寄存器&lt;br&gt;SysTick-&amp;gt;VAL	      当前数值寄存器&lt;br&gt;SysTick-&amp;gt;CALIB      校准数值寄存器（暂时没有用到）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;RTOS相关&#34;&gt;&lt;a href=&#34;#RTOS相关&#34; class=&#34;headerlink&#34; title=&#34;RTOS相关&#34;&gt;&lt;/a&gt;RTOS相关&lt;/h1&gt;&lt;h2 id=&#34;进程-线程-协程&#34;&gt;&lt;a href=&#34;#进程-线程-协程&#34; class=&#34;headerlink&#34; title=&#34;进程 线程 协程&#34;&gt;&lt;/a&gt;进程 线程 协程&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&#34;https://www.cnblogs.com/Survivalist/p/11527949.html&#34;&gt;一文读懂什么是进程、线程、协程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;进程&#34;&gt;&lt;a href=&#34;#进程&#34; class=&#34;headerlink&#34; title=&#34;进程&#34;&gt;&lt;/a&gt;进程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;进程的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  进程 – 是现代操作系统的一个基本概念，是并发程序出现后出现的一个重要概念，它是指 程序在一个数据集合上运行的过程，是系统进行资源分配和调度运行的一个独立单位，有时 也称为活动、路径或任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;资源分配的最小单位(拥有独立的地址空间，同一个进程内的线程共享进程地址空间)&lt;/li&gt;
&lt;li&gt;进程是程序执行的实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我的理解是在windows里面每一个程序启动都会有一个进程的存在，这个进程会有一个虚拟的地址空间。&lt;/strong&gt;（而在STM32一类芯片内是没有虚拟地址空间的，如果跑了RTOS，系统所调度的其实是&lt;strong&gt;进程的子项线程&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;  我们都知道计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行于操作系统之上的。&lt;/p&gt;
&lt;p&gt;    进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。&lt;/p&gt;
&lt;p&gt;  进程一般由程序、数据集合和进程控制块三部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序用于描述进程要完成的功能，是控制进程执行的指令集；&lt;/li&gt;
&lt;li&gt;数据集合是程序在执行时所需要的数据和工作区；&lt;/li&gt;
&lt;li&gt;程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  进程具有的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;并发性：任何进程都可以同其他进程一起并发执行；&lt;/li&gt;
&lt;li&gt;独立性：进程是系统进行资源分配和调度的一个独立单位；&lt;/li&gt;
&lt;li&gt;结构性：进程由程序、数据和进程控制块三部分组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;线程&#34;&gt;&lt;a href=&#34;#线程&#34; class=&#34;headerlink&#34; title=&#34;线程&#34;&gt;&lt;/a&gt;线程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;线程的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  线程– &lt;strong&gt;是进程中的一个实体,是被系统调度和分配的基本单元&lt;/strong&gt;。 每个程序至少包含一个线 程，那就是主线程。 线程自己只拥有很少的系统资源（如程序计数器、一组寄存器和栈）， 但它可与同属一个进程的其他线程共享所属进程所拥有的全部资源，同一进程中的多个线程 之间可以并发执行，从而更好地改善了系统资源的利用率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;程序执行的最小单位&lt;/li&gt;
&lt;li&gt;CPU调度最小单位，一个进程并发多个线程&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;  线程是程序执行流的最小单元，是处理器调度和分派的基本单位。一个&lt;strong&gt;进程&lt;/strong&gt;可以有一个或多个&lt;strong&gt;线程&lt;/strong&gt;，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。&lt;/p&gt;
&lt;p&gt;  一个标准的&lt;strong&gt;线程&lt;/strong&gt;由线程ID、当前指令指针(PC)、寄存器和堆栈组成。&lt;/p&gt;
&lt;p&gt;  而&lt;strong&gt;进程&lt;/strong&gt;由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/2018/ef667962/process.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  如上图，在任务管理器的进程一栏里，有道词典和有道云笔记就是&lt;strong&gt;进程&lt;/strong&gt;，而在进程下又有着多个执行不同任务的&lt;strong&gt;线程&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;协程&#34;&gt;&lt;a href=&#34;#协程&#34; class=&#34;headerlink&#34; title=&#34;协程&#34;&gt;&lt;/a&gt;协程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它是基于线程的，一个线程内有多个协程&lt;/li&gt;
&lt;li&gt;由程序员自行管理的更加轻量的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;协程-1&#34;&gt;&lt;a href=&#34;#协程-1&#34; class=&#34;headerlink&#34; title=&#34;协程&#34;&gt;&lt;/a&gt;协程&lt;/h2&gt;&lt;p&gt;  协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。&lt;/p&gt;
&lt;p&gt;  因为是自主开辟的异步任务，所以很多人也更喜欢叫它们纤程（Fiber），或者绿色线程（GreenThread）。正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/2018/ef667962/6765e36cc4604fba897976638af03524.jpeg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;协程的目的&#34;&gt;&lt;a href=&#34;#协程的目的&#34; class=&#34;headerlink&#34; title=&#34;协程的目的&#34;&gt;&lt;/a&gt;协程的目的&lt;/h2&gt;&lt;p&gt;  在传统的J2EE系统中都是基于每个请求占用一个线程去完成完整的业务逻辑（包括事务）。所以系统的吞吐能力取决于每个线程的操作耗时。如果遇到很耗时的I&amp;#x2F;O行为，则整个系统的吞吐立刻下降，因为这个时候线程一直处于阻塞状态，如果线程很多的时候，会存在很多线程处于空闲状态（等待该线程执行完才能执行），造成了资源应用不彻底。&lt;/p&gt;
&lt;p&gt;  最常见的例子就是JDBC（它是同步阻塞的），这也是为什么很多人都说数据库是瓶颈的原因。这里的耗时其实是让CPU一直在等待I&amp;#x2F;O返回，说白了线程根本没有利用CPU去做运算，而是处于空转状态。而另外过多的线程，也会带来更多的ContextSwitch开销。&lt;/p&gt;
&lt;p&gt;  对于上述问题，现阶段行业里的比较流行的解决方案之一就是单线程加上异步回调。其代表派是node.js以及Java里的新秀Vert.x。&lt;/p&gt;
&lt;p&gt;  而协程的目的就是当出现长时间的I&amp;#x2F;O操作时，通过让出目前的协程调度，执行下一个任务的方式，来消除ContextSwitch上的开销。&lt;/p&gt;
&lt;h2 id=&#34;协程的特点&#34;&gt;&lt;a href=&#34;#协程的特点&#34; class=&#34;headerlink&#34; title=&#34;协程的特点&#34;&gt;&lt;/a&gt;协程的特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;线程的切换由操作系统负责调度，协程由用户自己进行调度，因此减少了上下文切换，提高了效率。&lt;/li&gt;
&lt;li&gt;线程的默认Stack大小是1M，而协程更轻量，接近1K。因此可以在相同的内存中开启更多的协程。&lt;/li&gt;
&lt;li&gt;由于在同一个线程上，因此可以避免竞争关系而使用锁。&lt;/li&gt;
&lt;li&gt;适用于被阻塞的，且需要大量并发的场景。但不适用于大量计算的多线程，遇到此种情况，更好实用线程去解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;进程和线程关系&#34;&gt;&lt;a href=&#34;#进程和线程关系&#34; class=&#34;headerlink&#34; title=&#34;进程和线程关系&#34;&gt;&lt;/a&gt;进程和线程关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;资源分配给进程，同一进程内的所有线程共享该进程的所有资源；&lt;/li&gt;
&lt;li&gt;同一个进程的线程之间可以直接交流；两个进程想通信，必须通过一个中间代理来实现；&lt;/li&gt;
&lt;li&gt;处理机分配给线程，即真正在处理机上运行的是线程；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程共享内存空间；进程的内存是独立的；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;系统开销：在创建和撤销进程的时候，系统都要分配和回收资源，导致系统的明显大于创建和撤销线程时的开销。但进程有独立的地址空间，进程崩溃后，在保护模式的下不会对其他进程造成影响，而线程只是进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有独立的地址空间，一个线程死后就等于整个进程死掉，所以多进程程序要比多线程程序健壮，但是在进程切换的时候消耗的资源较大，效率差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程执行效率高; 多进程耗资源，安全。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;互斥量和信号量的区别&#34;&gt;&lt;a href=&#34;#互斥量和信号量的区别&#34; class=&#34;headerlink&#34; title=&#34;互斥量和信号量的区别&#34;&gt;&lt;/a&gt;互斥量和信号量的区别&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 互斥量用于线程的互斥，信号量用于线程的同步。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是互斥量和信号量的根本区别，也就是互斥和同步之间的区别。&lt;/p&gt;
&lt;p&gt;互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。&lt;/p&gt;
&lt;p&gt;同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 互斥量值只能为0&amp;#x2F;1，信号量值可以为非负整数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是说，一个互斥量只能用于一个资源的互斥访问，它不能实现多个资源的多线程互斥问题。信号量可以实现多个同类资源的多线程互斥和同步。当信号量为单值信号量是，也可以完成一个资源的互斥访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 互斥量的加锁和解锁必须由同一线程分别对应使用，信号量可以由一个线程释放，另一个线程得到。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;外设&#34;&gt;&lt;a href=&#34;#外设&#34; class=&#34;headerlink&#34; title=&#34;外设&#34;&gt;&lt;/a&gt;外设&lt;/h1&gt;&lt;h2 id=&#34;I2C&#34;&gt;&lt;a href=&#34;#I2C&#34; class=&#34;headerlink&#34; title=&#34;I2C&#34;&gt;&lt;/a&gt;I2C&lt;/h2&gt;&lt;p&gt;I2C，也称为 &lt;strong&gt;I2C&lt;/strong&gt; 或 &lt;strong&gt;IIC&lt;/strong&gt;，是飞利浦半导体于 1982 年发明的&lt;strong&gt;同步&lt;/strong&gt;、&lt;strong&gt;多主&amp;#x2F;多从&lt;/strong&gt;（控制器&amp;#x2F;目标）、&lt;strong&gt;分组交换&lt;/strong&gt;、&lt;strong&gt;单端&lt;/strong&gt;串行&lt;strong&gt;通信&lt;/strong&gt;总线。&lt;/p&gt;
&lt;p&gt;I2C仅使用两条双向&lt;a href=&#34;https://en.wikipedia.org/wiki/Open-collector&#34;&gt;集电极开&lt;/a&gt;路或&lt;a href=&#34;https://en.wikipedia.org/wiki/Open-drain&#34;&gt;漏极开&lt;/a&gt;路线路：串行数据线（SDA）和串行时钟线（SCL），由&lt;a href=&#34;https://en.wikipedia.org/wiki/Resistor&#34;&gt;电阻&lt;/a&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pull-up_resistor&#34;&gt;上拉&lt;/a&gt;。使用的典型电压为+5 V或+3.3 V，但允许使用其他电压的系统。&lt;/p&gt;
&lt;p&gt;I2C从机地址有7位、8位、10位不同的地址空间，一般来说7位比较常见。&lt;/p&gt;
&lt;p&gt;I²C的参考设计使用一个7比特长度的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9D%80%E7%A9%BA%E9%96%93&#34;&gt;地址空间&lt;/a&gt;但保留了16个地址，所以在一组总线最多可和112个节点通信[&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/I%C2%B2C#cite_note-3&#34;&gt;a]&lt;/a&gt;。在7位寻址过程中，从机地址在启动信号后的第一个字节开始传输，该字节的前7位为从机地址，第8位为读写位，其中0表示写，1表示读。&lt;/p&gt;
&lt;p&gt;虽然最大的节点数目是被地址空间所限制住，但实际上也会被总线上的总&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AE%B9&#34;&gt;电容&lt;/a&gt;所限制住，一般而言为400 pF。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;br&gt;调试的时候需要注意设备地址是已经左移之后的还是未左移的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/I2C_data_transfer.svg&#34; alt=&#34;Data transfer sequence&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;参考上面的图像我们可以看到，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  START：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在SCL信号为 &lt;strong&gt;高&lt;/strong&gt; 的时候，SDA由 &lt;strong&gt;高&lt;/strong&gt; 变 &lt;strong&gt;低&lt;/strong&gt; 是START信号。&lt;/li&gt;
&lt;li&gt;（助记，SCL的高电平状态下SDA不允许变化，除非是start信号或者stop信号。空闲状态SCL和SDA都是高电平，start和stop都是由SDA产生的信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  DATA TRANSMISSION：在数据传输阶段，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝色阶段：SCL被拉低，此时SDA变成特定电平。&lt;/li&gt;
&lt;li&gt;绿色阶段：SCL被拉 &lt;strong&gt;高&lt;/strong&gt; (图中B1)，SDA的电平不允许变化。&lt;em&gt;数据在SCL的 &lt;strong&gt;上升沿&lt;/strong&gt; 进行采样。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  STOP：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在SCL信号为H的时候，SDA由L变H是STOP信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通信速率&#34;&gt;&lt;a href=&#34;#通信速率&#34; class=&#34;headerlink&#34; title=&#34;通信速率&#34;&gt;&lt;/a&gt;通信速率&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;双向通信速度（模式）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;允许任意低的时钟频率&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;10 kbit&amp;#x2F;s：低速模式&lt;/p&gt;
&lt;p&gt;100 kbit&amp;#x2F;s：标准模式，Standard-mode (Sm)；&lt;/p&gt;
&lt;p&gt;400 kbit&amp;#x2F;s：快速模式，Fast-mode (Fm)；&lt;/p&gt;
&lt;p&gt;1 Mbit&amp;#x2F;s：快速模式+，Fast-mode Plus (Fm+)；&lt;/p&gt;
&lt;p&gt;3.4Mbit&amp;#x2F;s：高速模式，High-speed mode (Hs-mode)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单向通信速度（模式）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5 Mbit&amp;#x2F;s：超快模式，UItra Fast-mode (UFm)。&lt;/p&gt;
&lt;h2 id=&#34;SPI&#34;&gt;&lt;a href=&#34;#SPI&#34; class=&#34;headerlink&#34; title=&#34;SPI&#34;&gt;&lt;/a&gt;SPI&lt;/h2&gt;&lt;p&gt;串行外设接口（SPI）是一种&lt;strong&gt;同步串行&lt;/strong&gt;通信规范，主要用于嵌入式系统，用于芯片（电子设备）之间的短距离有线通信。摩托罗拉在 1980 年代中期开发了该规范，该规范已成为具有许多变体的事实标准。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调试SPI千万要注意CPOL CPHA大部分通信异常都是出现在这里&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SPI有四个逻辑信号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCLK : Serial Clock (clock signal from main)&lt;/li&gt;
&lt;li&gt;MOSI : Main Out Sub In (data output from main)&lt;/li&gt;
&lt;li&gt;MISO : Main In Sub Out (data output from sub)&lt;/li&gt;
&lt;li&gt;CS : Chip Select (&lt;strong&gt;active low signal&lt;/strong&gt; from main to address devices and initiate transmission　从主设备到寻址设备并启动传输的低电平有效信号)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一对一SPI&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  &lt;img src=&#34;/2018/ef667962/SPI_basic_operation,_single_Main_&amp;_Sub.svg.png&#34; alt=&#34;SPI_basic_operation,_single_Main_&amp;amp;_Sub.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;  使用单个主器件和单个子器件的基本 SPI 配置。每个器件在内部使用&lt;a href=&#34;https://en.wikipedia.org/wiki/Shift_register&#34;&gt;移位寄存&lt;/a&gt;器进行串行通信，它们共同构成一个片间&lt;a href=&#34;https://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;循环缓冲器&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;多点SPI&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  Multidrop SPI bus (多点SPI总线)&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/2018/ef667962/SPI_main_sub_multidrop.svg.png&#34; alt=&#34;SPI_main_sub_multidrop.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;  Daisy-chained SPI (菊花链式 SPI)&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;/2018/ef667962/SPI_main_sub_daisychain.svg.png&#34; alt=&#34;SPI_main_sub_daisychain.svg&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  　&lt;strong&gt;优势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此协议默认全双工通信&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Push-pull_output&#34;&gt;推挽式驱动器&lt;/a&gt;（与漏极开路相反）提供良好的信号完整性和高速度&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Throughput&#34;&gt;吞吐量高于&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I²C&lt;/a&gt; 或 &lt;a href=&#34;https://en.wikipedia.org/wiki/System_Management_Bus&#34;&gt;SMBus&lt;/a&gt;。不限于任何最大时钟速度，可实现高速运行&lt;/li&gt;
&lt;li&gt;传输位的完全协议灵活性&lt;ul&gt;
&lt;li&gt;不限于 8 位符号&lt;/li&gt;
&lt;li&gt;任意选择消息大小、内容和用途&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;极其简单的硬件接口&lt;ul&gt;
&lt;li&gt;由于电路（包括上拉电阻）较少，因此功耗通常低于&lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I²C&lt;/a&gt;或SMBus&lt;/li&gt;
&lt;li&gt;无仲裁或相关故障模式 - 与 &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN-bus&#34;&gt;CAN 总线&lt;/a&gt;不同&lt;/li&gt;
&lt;li&gt;从机使用主时钟，不需要精密振荡器&lt;/li&gt;
&lt;li&gt;从机不需要唯一的&lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space&#34;&gt;地址&lt;/a&gt; – 与 &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I²C&lt;/a&gt; 或 &lt;a href=&#34;https://en.wikipedia.org/wiki/GPIB&#34;&gt;GPIB&lt;/a&gt; 或 &lt;a href=&#34;https://en.wikipedia.org/wiki/SCSI&#34;&gt;SCSI&lt;/a&gt; 不同&lt;/li&gt;
&lt;li&gt;不需要收发器 - 与 &lt;a href=&#34;https://en.wikipedia.org/wiki/CAN-bus&#34;&gt;CAN 总线&lt;/a&gt;不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IC封装上仅使用4个引脚，比并行接口少得多&lt;/li&gt;
&lt;li&gt;每个器件最多一独特信号（芯片选择）;所有其他信号是共享的&lt;/li&gt;
&lt;li&gt;信号是单向的，便于&lt;a href=&#34;https://en.wikipedia.org/wiki/Galvanic_isolation&#34;&gt;电气隔离&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;简单的软件实施&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  &lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使是三线式SPI，也需要比&lt;a href=&#34;https://zh.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I²C&lt;/a&gt;更多的IC线路&lt;/li&gt;
&lt;li&gt;无带内寻址;共享总线上需要带外芯片选择信号&lt;/li&gt;
&lt;li&gt;子没有硬件&lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_control_(data)&#34;&gt;流控制&lt;/a&gt;（但主可以延迟下一个时钟边沿以降低传输速率）&lt;/li&gt;
&lt;li&gt;不支持动态添加节点（热插拔）&lt;ul&gt;
&lt;li&gt;没有从机检测机制，主机无法检测是否与从机断开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常仅支持一个主设备（取决于设备的硬件实现）&lt;/li&gt;
&lt;li&gt;未定义错误检查协议&lt;/li&gt;
&lt;li&gt;无法进行数据检验，不定义额外的协议时（如CRC）无法保证数据正确性。&lt;/li&gt;
&lt;li&gt;与&lt;a href=&#34;https://en.wikipedia.org/wiki/RS-232&#34;&gt;RS-232&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/RS-485&#34;&gt;RS-485&lt;/a&gt;或&lt;a href=&#34;https://en.wikipedia.org/wiki/CAN-bus&#34;&gt;CAN总线&lt;/a&gt;相比，只能处理短距离。（通过使用&lt;a href=&#34;https://en.wikipedia.org/wiki/RS-422&#34;&gt;RS-422&lt;/a&gt;等收发器可以延长其距离。&lt;/li&gt;
&lt;li&gt;信号路径中的光隔离器限制了MISO传输的时钟速度，因为时钟和数据之间增加了延迟&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双通道 SPI(Dual SPI)&lt;strong&gt;、&lt;/strong&gt;四通道 SPI(Quad SPI)&lt;/strong&gt; 和&lt;strong&gt;三线串行总线&lt;/strong&gt;等一些变体是半双工的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;  CKPOL (Clock Polarity) &amp;#x3D; CPOL &amp;#x3D; POL &amp;#x3D; Polarity &amp;#x3D; （时钟）极性&lt;br&gt;  CKPHA (Clock Phase)  &amp;#x3D; CPHA &amp;#x3D; PHA &amp;#x3D; Phase &amp;#x3D; （时钟）相位&lt;/p&gt;
&lt;h3 id=&#34;CPOL极性&#34;&gt;&lt;a href=&#34;#CPOL极性&#34; class=&#34;headerlink&#34; title=&#34;CPOL极性&#34;&gt;&lt;/a&gt;CPOL极性&lt;/h3&gt;&lt;p&gt;  先说什么是SCLK时钟的空闲时刻，其就是当SCLK在发送8个bit比特数据之前和之后的状态，于此对应的，SCLK在发送数据的时候，就是正常的工作的时候，有效active的时刻了。其英文精简解释为：Clock Polarity &amp;#x3D; IDLE state of SCK。&lt;/p&gt;
&lt;p&gt;  SPI的CPOL，&lt;span style=&#34;color:#29b6f6&#34;&gt;&lt;strong&gt;表示当SCLK空闲idle的时候，其电平的值是低电平0还是高电平1&lt;/strong&gt;&lt;/span&gt;：&lt;br&gt;  CPOL&amp;#x3D;0，时钟空闲idle时候的电平是低电平，所以当SCLK有效的时候，就是高电平，就是所谓的active-high；&lt;br&gt;  CPOL&amp;#x3D;1，时钟空闲idle时候的电平是高电平，所以当SCLK有效的时候，就是低电平，就是所谓的active-low；&lt;br&gt;  &lt;img src=&#34;/2018/ef667962/231416549884871.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;  从上图中可以看出，(CPOL&amp;#x3D;0)的SCK 波形，它有（传输）8 个脉冲，而在脉冲传输前和完成后都保持在【低电平状态】。&lt;br&gt;  此时的状态就是时钟的空闲状态或无效状态，因为此时没有脉冲，也就不会有数据传输。同理得出，（CPOL&amp;#x3D;）1 的图，时钟的空闲状态或无效状态时SCK 是保持【高电平的】。&lt;/p&gt;
&lt;h3 id=&#34;CPHA相位&#34;&gt;&lt;a href=&#34;#CPHA相位&#34; class=&#34;headerlink&#34; title=&#34;CPHA相位&#34;&gt;&lt;/a&gt;CPHA相位&lt;/h3&gt;&lt;p&gt;  首先说明一点，capture strobe &amp;#x3D; latch &amp;#x3D; read &amp;#x3D; sample，都是表示数据采样，数据有效的时刻。&lt;br&gt;  相位，对应着数据采样是在第几个边沿（edge），是第一个边沿还是第二个边沿，0对应着第一个边沿，1对应着第二个边沿。对于：&lt;/p&gt;
&lt;p&gt;  CPHA&amp;#x3D;0，表示第一个边沿：&lt;br&gt;  对于CPOL&amp;#x3D;0，idle时候的是低电平，第一个边沿就是从低变到高，所以是上升沿；&lt;br&gt;  对于CPOL&amp;#x3D;1，idle时候的是高电平，第一个边沿就是从高变到低，所以是下降沿；&lt;/p&gt;
&lt;p&gt;  CPHA&amp;#x3D;1，表示第二个边沿：&lt;br&gt;  对于CPOL&amp;#x3D;0，idle时候的是低电平，第二个边沿就是从高变到低，所以是下降沿；&lt;br&gt;  对于CPOL&amp;#x3D;1，idle时候的是高电平，第一个边沿就是从低变到高，所以是上升沿；&lt;/p&gt;
&lt;p&gt;  &lt;span style=&#34;color:#29b6f6&#34;&gt;&lt;strong&gt;数据是在SCK的第一个时钟边沿保持稳定【数据被采样捕获】，在下一个边沿改变【SCK 的下降沿数据改变】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;SPI mode&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Clock polarity (CPOL) 极性&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Clock phase (CPHA) 相位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Data is shifted out on&lt;br&gt;数据移出&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Data is sampled on&lt;br&gt;数据采样&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;falling SCLK, and when CS activates&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rising SCLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rising SCLK, and when CS activates&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;falling SCLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;falling SCLK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rising SCLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rising SCLK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;falling SCLK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;SPI-变种-SingleSPI-DualSPI-QuadSPI-OctoSPI&#34;&gt;&lt;a href=&#34;#SPI-变种-SingleSPI-DualSPI-QuadSPI-OctoSPI&#34; class=&#34;headerlink&#34; title=&#34;SPI 变种 SingleSPI DualSPI QuadSPI OctoSPI&#34;&gt;&lt;/a&gt;SPI 变种 SingleSPI DualSPI QuadSPI OctoSPI&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Single SPI&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  SPI 适用于大多数用例，例如快速原型设计、设备编程和自动化测试。SPI 速度很快，大多数Single SPI串行吞吐率达到 10 Mbps 左右。然而，单条数据线将无法以SPI最快的速度发送数据。 多 I&amp;#x2F;O SPI能够支持单个设备增加吞吐量。&lt;/p&gt;
&lt;p&gt;  SPI 本身是全双工的。&lt;strong&gt;Dual SPI Quad SPI都是半双工&lt;/strong&gt;，因为使用 2-4 个引脚来发送和接收。&lt;strong&gt;切换到双 SPI 或四 SPI 是通过在单 SPI 模式下发送命令字节来完成的&lt;/strong&gt;。命令字节将在Dual SPI或Quad SPI下请求响应。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dual SPI&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   Dual SPI 具有双 I&amp;#x2F;O 接口，与标准串行闪存设备相比，传输速率提高了一倍。MISO 和 MOSI 数据引脚以&lt;strong&gt;半双工&lt;/strong&gt;模式运行，每个时钟周期发送两位。MOSI 线变为 IO0，MISO 线变为 IO1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Quad SPI&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  Quad SPI 与 Dual SPI 类似，以&lt;strong&gt;半双工&lt;/strong&gt;模式运行，但吞吐量提高了四倍。添加了两条额外的数据线，每个时钟周期传输 4 位。数据线现在为 IO0、IO1、IO2 和 IO3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Octo SPI&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  与 Dual SPI 类似，以&lt;strong&gt;半双工&lt;/strong&gt;模式运行，但吞吐量提高了八倍。每个时钟周期传输 8 位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Camera&#34;&gt;&lt;a href=&#34;#Camera&#34; class=&#34;headerlink&#34; title=&#34;Camera&#34;&gt;&lt;/a&gt;Camera&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  VGA，即分辨率为 640 * 480 的输出模式；&lt;br&gt;  QVGA，即分辨率为 320 * 240 的输出模式；&lt;br&gt;  QQVGA，即分辨率为 160 * 120 的输出模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;SCCB&#34;&gt;&lt;a href=&#34;#SCCB&#34; class=&#34;headerlink&#34; title=&#34;SCCB&#34;&gt;&lt;/a&gt;SCCB&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  SCCB 全称是：Serial Camera Control Bus 即串行摄像头控制总线，是由 OV（OmniVision 的简称）公司定义和发展的三线式串行总线。不过，OV 公司为了减少传感器引脚的封装，现在SCCB 总线大多采用两线式接口总线。&lt;/p&gt;
&lt;p&gt;  SCCB 与 I2C极其相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;SD卡&#34;&gt;&lt;a href=&#34;#SD卡&#34; class=&#34;headerlink&#34; title=&#34;SD卡&#34;&gt;&lt;/a&gt;SD卡&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SD_card&#34;&gt;WIki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  SD 卡主要有 SD、Mini SD 和 microSD(原名 TF 卡，2004 年正式更名为 Micro SD Card)&lt;/p&gt;
&lt;p&gt;  Mini SD 已经被 microSD 取代，使用得不多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017181152917.png&#34; alt=&#34;image-20231017181152917&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;容量&#34;&gt;&lt;a href=&#34;#容量&#34; class=&#34;headerlink&#34; title=&#34;容量&#34;&gt;&lt;/a&gt;容量&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017175051870.png&#34; alt=&#34;image-20231017175051870&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;速度&#34;&gt;&lt;a href=&#34;#速度&#34; class=&#34;headerlink&#34; title=&#34;速度&#34;&gt;&lt;/a&gt;速度&lt;/h3&gt;&lt;h4 id=&#34;Bus-speed&#34;&gt;&lt;a href=&#34;#Bus-speed&#34; class=&#34;headerlink&#34; title=&#34;Bus speed&#34;&gt;&lt;/a&gt;Bus speed&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017175127898.png&#34; alt=&#34;image-20231017175127898&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Video-Speed-Class&#34;&gt;&lt;a href=&#34;#Video-Speed-Class&#34; class=&#34;headerlink&#34; title=&#34;Video Speed Class&#34;&gt;&lt;/a&gt;Video Speed Class&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017175323166.png&#34; alt=&#34;image-20231017175323166&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Application-Performance-Class&#34;&gt;&lt;a href=&#34;#Application-Performance-Class&#34; class=&#34;headerlink&#34; title=&#34;Application Performance Class&#34;&gt;&lt;/a&gt;Application Performance Class&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017175505941.png&#34; alt=&#34;image-20231017175505941&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;“×”-Class&#34;&gt;&lt;a href=&#34;#“×”-Class&#34; class=&#34;headerlink&#34; title=&#34;“×” Class&#34;&gt;&lt;/a&gt;“×” Class&lt;/h4&gt;&lt;p&gt;“×” Class是标准CD-ROM驱动器速度 150 &lt;a href=&#34;https://en.wikipedia.org/wiki/KB/s&#34;&gt;KB&amp;#x2F;s &lt;/a&gt;（大约 1.23 &lt;a href=&#34;https://en.wikipedia.org/wiki/Mbit/s&#34;&gt;Mbit&amp;#x2F;s&lt;/a&gt;）的倍数，由一些卡制造商使用，并因速度等级而被废弃。基本卡传输数据的速度高达 CD-ROM 速度的六倍 (6×)；即 900 kbit&amp;#x2F;s 或 7.37 Mbit&amp;#x2F;s。&lt;/p&gt;
&lt;p&gt;制造商可能会报告&lt;strong&gt;最佳情况的速度&lt;/strong&gt;，也可能会报告卡的&lt;strong&gt;最快读取速度&lt;/strong&gt;，该速度通常比写入速度更快。&lt;/p&gt;
&lt;p&gt;当卡同时列出 speed class 和 “×” Class时，后者可以被假定为仅读取速度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017180039726.png&#34; alt=&#34;image-20231017180039726&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;SDIO-接口&#34;&gt;&lt;a href=&#34;#SDIO-接口&#34; class=&#34;headerlink&#34; title=&#34;SDIO 接口&#34;&gt;&lt;/a&gt;SDIO 接口&lt;/h3&gt;&lt;h4 id=&#34;Pin&#34;&gt;&lt;a href=&#34;#Pin&#34; class=&#34;headerlink&#34; title=&#34;Pin&#34;&gt;&lt;/a&gt;Pin&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017184426226.png&#34; alt=&#34;image-20231017184426226&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Reg&#34;&gt;&lt;a href=&#34;#Reg&#34; class=&#34;headerlink&#34; title=&#34;Reg&#34;&gt;&lt;/a&gt;Reg&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/image-20231017184510884.png&#34; alt=&#34;image-20231017184510884&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Instruction-set-architecture-指令集架构&#34;&gt;&lt;a href=&#34;#Instruction-set-architecture-指令集架构&#34; class=&#34;headerlink&#34; title=&#34;Instruction set architecture 指令集架构&#34;&gt;&lt;/a&gt;Instruction set architecture 指令集架构&lt;/h1&gt;&lt;p&gt;Instruction set architecture(&lt;strong&gt;ISA&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;一般来说，市场上流通的ISA有两种类型。它们是 RISC 和 CISC 架构。RISC 代表精简指令集计算机(Reduced Instruction Set Computer)，而 CISC 代表复杂指令集计算机(Complex Instruction Set Computer)。&lt;/p&gt;
&lt;p&gt;这两种架构如今都很流行，x86（英特尔和 AMD 处理器）是顶级处理器，而 ARM（高通和联发科处理器）是最流行的 RISC 架构。&lt;/p&gt;
&lt;p&gt;RISC 架构中使用的&lt;strong&gt;较少指令&lt;/strong&gt;和其他优化技术使这些类型的处理器使用&lt;strong&gt;更少的功耗&lt;/strong&gt;，使其成为智能手机、相机、智能手表和各种物联网设备的理想选择。&lt;/p&gt;
&lt;h2 id=&#34;RISC-V&#34;&gt;&lt;a href=&#34;#RISC-V&#34; class=&#34;headerlink&#34; title=&#34;RISC-V&#34;&gt;&lt;/a&gt;RISC-V&lt;/h2&gt;&lt;p&gt;RISC-V是一种基于RISC的开放标准ISA，任何人都可以使用它来设计自己的芯片，而无需支付许可费。其开源特性允许对 RISC-V ISA 进行进一步修改和扩展，以制造用于特定任务的专用芯片。&lt;/p&gt;
&lt;h2 id=&#34;ARM&#34;&gt;&lt;a href=&#34;#ARM&#34; class=&#34;headerlink&#34; title=&#34;ARM&#34;&gt;&lt;/a&gt;ARM&lt;/h2&gt;&lt;p&gt;ARM 是一种基于 RISC 的闭源 ISA，授权给公司使用其处理器和 SoC。&lt;/p&gt;
&lt;h2 id=&#34;x86&#34;&gt;&lt;a href=&#34;#x86&#34; class=&#34;headerlink&#34; title=&#34;x86&#34;&gt;&lt;/a&gt;x86&lt;/h2&gt;&lt;h1 id=&#34;内建函数-builtin&#34;&gt;&lt;a href=&#34;#内建函数-builtin&#34; class=&#34;headerlink&#34; title=&#34;内建函数 builtin&#34;&gt;&lt;/a&gt;内建函数 builtin&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html&#34;&gt;Other Built-in Functions Provided by GCC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内建函数的函数命名，通常以 &lt;code&gt;__builtin&lt;/code&gt; 开头。这些函数主要在编译器内部使用，主要是为编译器服务的。&lt;br&gt;GCC 还提供了大量内置函数。其中一些是用于处理异常或可变长度参数列表的内部用途，这里不再赘述，因为它们可能会随时更改；我们不建议广泛使用这些函数。&lt;br&gt;其余函数是为了优化目的而提供的。&lt;/p&gt;
&lt;h2 id=&#34;builtin-expect&#34;&gt;&lt;a href=&#34;#builtin-expect&#34; class=&#34;headerlink&#34; title=&#34;__builtin_expect&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_expect&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;您可以使用&lt;code&gt;__builtin_expect&lt;/code&gt;来为编译器提供分支预测信息。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 表示大部分情况下 ptr 都不等于 NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (__builtin_expect (ptr != &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;))&lt;br&gt;  foo (*ptr);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在很多源码如Linux内核、Glib等,我们都能看到likely()和unlikely()这两个宏,通常这两个宏定义是下面这样的形式。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; likely(x)      __builtin_expect(!!(x), 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; unlikely(x)    __builtin_expect(!!(x), 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (unlikely(x == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 很少执行的代码&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 经常执行的代码&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&#34;builtin-bswap32-64&#34;&gt;&lt;a href=&#34;#builtin-bswap32-64&#34; class=&#34;headerlink&#34; title=&#34;__builtin_bswap32 64&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_bswap32 64&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;— 内置函数：int32_t &lt;strong&gt;__builtin_bswap32&lt;/strong&gt; ( int32_t x )  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回按字节顺序反转的 x&lt;code&gt;0xaabbccdd&lt;/code&gt; ；例如，变为&lt;code&gt;0xddccbbaa&lt;/code&gt;。此处的字节始终表示正好 8 位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;— 内置函数：int64_t &lt;strong&gt;__builtin_bswap64&lt;/strong&gt; ( int64_t x )  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 类似&lt;code&gt;__builtin_bswap32&lt;/code&gt;，只是参数和返回类型是 64 位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;builtin-return-address&#34;&gt;&lt;a href=&#34;#builtin-return-address&#34; class=&#34;headerlink&#34; title=&#34;__builtin_return_address&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_return_address&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;获取当前函数调用的返回地址。这个函数通常用于调试和分析程序的调用栈。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *__builtin_return_address(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; level);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 参数是一个无符号整型值，表示调用栈的深度。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 为 0 时，返回当前函数的返回地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 为 1 时，返回调用当前函数的函数的返回地址；&lt;/li&gt;
&lt;li&gt;以此类推。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;builtin-frame-address&#34;&gt;&lt;a href=&#34;#builtin-frame-address&#34; class=&#34;headerlink&#34; title=&#34;__builtin_frame_address&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_frame_address&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在函数调用过程中，还有一个“栈帧”的概念。函数每调用一次，都会将当前函数的现场（返回地址、寄存器等）保存在栈中，每一层函数调用都会将各自的现场信息都保存在各自的栈中。&lt;br&gt;这个栈也就是当前函数的栈帧，每一个栈帧有起始地址和结束地址，表示当前函数的堆栈信息。多层函数调用就会有多个栈帧，每个栈帧里会保存上一层栈帧的起始地址，这样各个栈帧就形成了一个调用链。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *__builtin_frame_address(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; level);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 参数是一个无符号整型值，表示调用栈的深度。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 为 0 时，返回当前函数的返回地址；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; 为 1 时，返回调用当前函数的函数的返回地址；&lt;/li&gt;
&lt;li&gt;以此类推。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;嵌入式高效位算法&#34;&gt;&lt;a href=&#34;#嵌入式高效位算法&#34; class=&#34;headerlink&#34; title=&#34;嵌入式高效位算法&#34;&gt;&lt;/a&gt;嵌入式高效位算法&lt;/h1&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://aggregate.org/MAGIC/#Bit%20Reversal&#34;&gt;The Aggregate Magic Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://graphics.stanford.edu/~seander/bithacks.html&#34;&gt;Bit Twiddling Hacks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WORDBITS:		数据宽度&lt;/p&gt;
&lt;h2 id=&#34;位逆序&#34;&gt;&lt;a href=&#34;#位逆序&#34; class=&#34;headerlink&#34; title=&#34;位逆序&#34;&gt;&lt;/a&gt;位逆序&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1&#34;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;在整数x中反转位有点痛苦，但这里有一个32位值的SWAR算法: &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xaaaaaaaa&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xcccccccc&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xf0f0f0f0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff00ff00&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;));&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | (x &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;));&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 也可以重写这个算法，使用4个而不是8个常量，从而节省一些指令带宽。在我的1.2GHz Athlon(雷鸟)上，这种差别太小了，无法可靠地测量。下面是另一个版本: &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y = &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | (x &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;));&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;8位查表&#34;&gt;&lt;a href=&#34;#8位查表&#34; class=&#34;headerlink&#34; title=&#34;8位查表&#34;&gt;&lt;/a&gt;8位查表&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;private Byte  &lt;span class=&#34;hljs-title function_&#34;&gt;BitReverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Byte bData)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Byte[] lookup = &amp;#123; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;,  &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;, &lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt; , &lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;,  &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt;,&lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt; &amp;#125;;&lt;br&gt;    Byte ret_val = (Byte)(((lookup[(bData &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x0F&lt;/span&gt;)]) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) + lookup[((bData &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xF0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)]);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ret_val;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;16位查表&#34;&gt;&lt;a href=&#34;#16位查表&#34; class=&#34;headerlink&#34; title=&#34;16位查表&#34;&gt;&lt;/a&gt;16位查表&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; BitReverseTable256[] = &lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x40&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x20&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x60&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x90&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x50&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x30&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x70&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF0&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x08&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x88&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x48&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x28&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x68&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x18&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x98&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x58&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x38&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x78&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF8&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x04&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x84&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x44&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x24&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x64&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x14&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x94&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x54&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x34&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x74&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF4&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFC&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x02&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x82&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x42&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x22&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x62&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x12&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x92&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x52&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x32&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x72&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF2&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFA&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x06&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x86&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x46&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x26&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x66&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x16&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x96&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x56&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x36&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x76&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF6&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFE&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x01&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x81&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x41&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x21&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x61&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x11&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x91&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x51&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x31&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x71&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF1&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x09&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x89&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x49&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x29&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x69&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x19&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x99&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x59&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x39&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x79&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF9&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x05&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x85&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x45&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x25&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x65&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x15&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x95&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x55&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x35&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x75&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF5&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xED&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFD&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x03&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x83&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x43&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x23&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x63&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x13&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x93&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x53&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x33&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x73&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF3&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFB&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x07&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x87&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x47&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x27&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x67&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x17&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x97&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x57&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x37&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x77&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF7&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFF&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v; &lt;span class=&#34;hljs-comment&#34;&gt;// reverse 32-bit value, 8 bits at time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; c; &lt;span class=&#34;hljs-comment&#34;&gt;// c will get v reversed&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Option 1:&lt;/span&gt;&lt;br&gt;c = (BitReverseTable256[v &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;) | &lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | &lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) |&lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;]);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Option 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; * p = (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *) &amp;amp;v;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; * q = (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *) &amp;amp;c;&lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;整数平均值&#34;&gt;&lt;a href=&#34;#整数平均值&#34; class=&#34;headerlink&#34; title=&#34;整数平均值&#34;&gt;&lt;/a&gt;整数平均值&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;(x+y)/&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//可能导致溢出 相加溢出&lt;/span&gt;&lt;br&gt;    &lt;br&gt;(x＆y)+((x ^ y)&amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)	&lt;span class=&#34;hljs-comment&#34;&gt;//可以改用这种方法&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;这实际上是“众所周知”事实的扩展，对于二进制整数值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;（x + y）&lt;/code&gt; 等于&lt;code&gt;（（x＆y）+（x | y））&lt;/code&gt;等于&lt;code&gt;（（x ^ y）+ 2 *（x＆y ））&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;给定两个整数值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，平均值的（底数）通常将由&lt;code&gt;（x + y）/ 2计算&lt;/code&gt;；不幸的是，由于溢出，这可能会产生错误的结果。一个非常偷偷摸摸的替代方法是使用&lt;code&gt;（x＆y）+（（（x ^ y）/ 2）&lt;/code&gt;。如果我们由于C没有指定是否对移位进行签名而意识到潜在的不可移植性，则可以将其简化为&lt;code&gt;（x＆y）+（（x ^ y）&amp;gt;&amp;gt; 1）&lt;/code&gt;。无论哪种情况，好处是此代码序列都不会溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;整数求最大最小值&#34;&gt;&lt;a href=&#34;#整数求最大最小值&#34; class=&#34;headerlink&#34; title=&#34;整数求最大最小值&#34;&gt;&lt;/a&gt;整数求最大最小值&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;x-(((x-y)&amp;gt;&amp;gt;(WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;))&amp;amp;(x-y))				&lt;span class=&#34;hljs-comment&#34;&gt;//Maximum&lt;/span&gt;&lt;br&gt;x+(((y-x)&amp;gt;&amp;gt;(WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;))&amp;amp;(y-x))				&lt;span class=&#34;hljs-comment&#34;&gt;//Minimum &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;p&gt;WORDBITS是数据宽度（8，16，32，……）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;((x-y)&amp;gt;&amp;gt;(WORDBITS-1)) 相当于取出符号位&lt;/p&gt;
&lt;p&gt;当x&amp;gt;y时结果是0&lt;/p&gt;
&lt;p style=&#34;color:red&#34;&gt; 注意！ 当x&lt;y时结果是全1，比如WORDBITS是8那么这个式子运算结果是0xFF &lt;/p&gt;
&lt;p style=&#34;color:red&#34;&gt;注意！ 负数的移位似乎不太一样（当有符号整数右移时，最左边的位的值被复制到其他位）,（ 不幸的是，这种行为是特定于体系结构的）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样的可以利用这一点应用到其他算法中：&lt;a href=&#34;#%E6%95%B4%E6%95%B0%E9%80%89%E6%8B%A9%E8%B5%8B%E5%80%BC&#34;&gt;整数选择赋值&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;整数选择赋值&#34;&gt;&lt;a href=&#34;#整数选择赋值&#34; class=&#34;headerlink&#34; title=&#34;整数选择赋值&#34;&gt;&lt;/a&gt;整数选择赋值&lt;/h2&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (a&amp;lt;b) x=c; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; x=d; 					&lt;span class=&#34;hljs-comment&#34;&gt;//都是整数&lt;/span&gt;&lt;br&gt;&lt;br&gt;x=((((a-b) &amp;gt;&amp;gt; (WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)) &amp;amp; (c^d)) ^ d) 	&lt;span class=&#34;hljs-comment&#34;&gt;//优化后&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&#34;#%E6%95%B4%E6%95%B0%E6%B1%82%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC&#34;&gt;整数求最大最小值&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;没有临时值，交换值两数据的值&#34;&gt;&lt;a href=&#34;#没有临时值，交换值两数据的值&#34; class=&#34;headerlink&#34; title=&#34;没有临时值，交换值两数据的值&#34;&gt;&lt;/a&gt;没有临时值，交换值两数据的值&lt;/h2&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//example 1&lt;/span&gt;&lt;br&gt;x ^= y; &lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x^y) */&lt;/span&gt;&lt;br&gt;y ^= x;	&lt;span class=&#34;hljs-comment&#34;&gt;/* y&amp;#x27; = (y^(x^y)) = x */&lt;/span&gt;&lt;br&gt;x ^= y; &lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x^y)^x = y */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//example 2&lt;/span&gt;&lt;br&gt;x += y; 	&lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x+y) */&lt;/span&gt;&lt;br&gt;y = x - y;	&lt;span class=&#34;hljs-comment&#34;&gt;/* y&amp;#x27; = (x+y)-y = x */&lt;/span&gt;&lt;br&gt;x -= y;		&lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x+y)-x = y */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;但是当x和y之间的大小有显著差异时，较小的大小的值可能会严重损失准确性。例如，如果x的模比y大得多，那么(x+y)&amp;#x3D;&amp;#x3D;x，最后得到y&amp;#x3D;0。 &lt;/p&gt;
&lt;p&gt;这里如果变量的存储大小很小 还可能会产生溢出 计算出来的数据就会问题了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算byte内有多少bit置1&#34;&gt;&lt;a href=&#34;#计算byte内有多少bit置1&#34; class=&#34;headerlink&#34; title=&#34;计算byte内有多少bit置1&#34;&gt;&lt;/a&gt;计算byte内有多少bit置1&lt;/h2&gt;&lt;p&gt;此为 汉明距离 问题&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;&lt;a href=&#34;#循环&#34; class=&#34;headerlink&#34; title=&#34;循环&#34;&gt;&lt;/a&gt;循环&lt;/h3&gt;&lt;p&gt;just&lt;/p&gt;
&lt;h3 id=&#34;Bit1-Bit0数量相关&#34;&gt;&lt;a href=&#34;#Bit1-Bit0数量相关&#34; class=&#34;headerlink&#34; title=&#34;Bit1 Bit0数量相关&#34;&gt;&lt;/a&gt;Bit1 Bit0数量相关&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//bit 1 较少 0x1000 0000 只需要一次&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; count=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (n)  &amp;#123;&lt;br&gt;        count++;&lt;br&gt;        n &amp;amp;= (n - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; count;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//bit 0 较少 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt;    n ^= (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (n)&lt;br&gt;    &amp;#123;&lt;br&gt;        count--;&lt;br&gt;        n &amp;amp;= (n - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; count;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;查表&#34;&gt;&lt;a href=&#34;#查表&#34; class=&#34;headerlink&#34; title=&#34;查表&#34;&gt;&lt;/a&gt;查表&lt;/h3&gt;&lt;p&gt;8位查表 4位查表&lt;/p&gt;
&lt;h3 id=&#34;合并计数-优&#34;&gt;&lt;a href=&#34;#合并计数-优&#34; class=&#34;headerlink&#34; title=&#34;合并计数(优)&#34;&gt;&lt;/a&gt;合并计数(优)&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;0x34520&lt;/code&gt;为例，&lt;code&gt;b0011 0100 0101 0010 0000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第一步：每2位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight tap&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs tap&#34;&gt;RAW |00110100010100100000|&lt;br&gt;H   |0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;|&lt;br&gt;L   |&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;-------------------------|&lt;br&gt;H&amp;gt;&amp;gt;1|&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;L   |&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;+ &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;= &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;10&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第二步：每4位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;RAW&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0100 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0101 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;H&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;  &lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;L&lt;/span&gt;      &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;-----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;H&amp;gt;&amp;gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;L&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;-----------------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;H:&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;L:&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;=&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第三步：每8位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight dns&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs dns&#34;&gt;RAW &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00010010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00010000&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0001&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0001&lt;/span&gt;    &lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;0010&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0010&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;br&gt;H:  &lt;span class=&#34;hljs-number&#34;&gt;00000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt;&lt;br&gt;L:  &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000000&lt;/span&gt;&lt;br&gt;=   &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000011&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第四步：每16位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;RAW 0000000000000010 0000001100000001&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    00000000         00000011        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;            00000010         00000001&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    &lt;/span&gt;&lt;br&gt;H:  0000000000000000 0000000000000011&lt;br&gt;L:  0000000000000010 0000000000000001&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;=   0000000000000010 0000000000000100&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第五步：每32位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;RAW 0000000000000010 0000000000000100&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    0000000000000000 0000000000000010&lt;/span&gt;&lt;br&gt;+   0000000000000000 0000000000000100&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;=   0000000000000000 0000000000000110 = 6 &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;这样最后得到的00000000 00000111即7即34520二进制中1的个数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;numbits&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK1  = &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK2  = &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK4  = &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK8  = &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK16 = &lt;span class=&#34;hljs-number&#34;&gt;0x0000ffff&lt;/span&gt;;&lt;br&gt;    i = (i&amp;amp;MASK1 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;amp;MASK1 );&lt;br&gt;    i = (i&amp;amp;MASK2 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;amp;MASK2 );&lt;br&gt;    i = (i&amp;amp;MASK4 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; &amp;amp;MASK4 );&lt;br&gt;    i = (i&amp;amp;MASK8 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; &amp;amp;MASK8 );&lt;br&gt;    i = (i&amp;amp;MASK16) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;&amp;amp;MASK16);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; i;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 另外一种实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; TWO(c)       	(0x1u &amp;lt;&amp;lt; (c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; MASK(c)      	(((unsigned int)(-1)) / (TWO(TWO(c)) + 1u))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; COUNT(x,c) 		((x) &amp;amp; MASK(c)) + (((x) &amp;gt;&amp;gt; (TWO(c))) &amp;amp; MASK(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) ;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* n = COUNT(n, 5) ;      for 64-bit integers */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; n ;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&#34;builtin-ctz&#34;&gt;&lt;a href=&#34;#builtin-ctz&#34; class=&#34;headerlink&#34; title=&#34;__builtin_ctz&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_ctz&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个函数作用是返回输入数二进制表示从&lt;strong&gt;最低位开始(右起)的连续的0的个数&lt;/strong&gt;；即 尾随 0 的位数&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __builtin_ctz (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __builtin_ctzl (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __builtin_ctzll (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;builtin-clz&#34;&gt;&lt;a href=&#34;#builtin-clz&#34; class=&#34;headerlink&#34; title=&#34;__builtin_clz&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_clz&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个函数作用是返回输入数二进制表示从&lt;strong&gt;最高位开始(左起)的连续的0的个数&lt;/strong&gt;；即 前导 0 位数&lt;/p&gt;
&lt;h2 id=&#34;builtin-ffs&#34;&gt;&lt;a href=&#34;#builtin-ffs&#34; class=&#34;headerlink&#34; title=&#34;__builtin_ffs&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_ffs&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个函数作用是返回输入数二进制表示的&lt;strong&gt;最低非0位的下标&lt;/strong&gt;，下标从1开始计数；如果传入0则返回0。&lt;/p&gt;
&lt;h2 id=&#34;bulitin-popcount&#34;&gt;&lt;a href=&#34;#bulitin-popcount&#34; class=&#34;headerlink&#34; title=&#34;__bulitin_popcount&#34;&gt;&lt;/a&gt;&lt;code&gt;__bulitin_popcount&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个函数作用是返回输入的二进制表示中&lt;strong&gt;1的个数&lt;/strong&gt;；如果传入0则返回 0 。&lt;/p&gt;
&lt;h2 id=&#34;builtin-parity&#34;&gt;&lt;a href=&#34;#builtin-parity&#34; class=&#34;headerlink&#34; title=&#34;__builtin_parity&#34;&gt;&lt;/a&gt;&lt;code&gt;__builtin_parity&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个函数作用是返回输入的二进制表示中&lt;strong&gt;1的个数的奇偶&lt;/strong&gt;,也就是输入的二进制中1的个数对2取模的结果。&lt;/p&gt;
&lt;h1 id=&#34;性能优化&#34;&gt;&lt;a href=&#34;#性能优化&#34; class=&#34;headerlink&#34; title=&#34;性能优化&#34;&gt;&lt;/a&gt;性能优化&lt;/h1&gt;&lt;h2 id=&#34;Duff’s-device&#34;&gt;&lt;a href=&#34;#Duff’s-device&#34; class=&#34;headerlink&#34; title=&#34;Duff’s device&#34;&gt;&lt;/a&gt;Duff’s device&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  循环展开尝试通过每次迭代执行一批循环体来减少检查循环是否完成所需的条件分支的开销。&lt;/p&gt;
&lt;p&gt;  为了处理迭代次数不能被展开循环增量整除的情况，汇编语言程序员的常用技术是直接跳转到展开循环体的中间来处理余数。&lt;/p&gt;
&lt;p&gt;  Duff 在 C 中通过使用 C 的case label drop-through功能跳转到展开的正文中来实现此技术。&lt;/p&gt;
&lt;p&gt;  Duff’s device 利用了C语言的一些特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;case语句后面的break语句不是必须的。&lt;/li&gt;
&lt;li&gt;在switch语句内，case标号可以出现在任意的子语句之前，甚至运行出现在if、for、while等语句内。(在这个设备发明之前，c语言是初版，switch语句的规范较为宽松)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;  尽管在 C 语言中有效，&lt;strong&gt;但 Duff 的设备违反了常见的 C 准则&lt;/strong&gt;，例如&lt;a href=&#34;https://en.wikipedia.org/wiki/MISRA_C&#34;&gt;MISRA 准则&lt;/a&gt;。某些编译器仅限于此类准则，因此可能会拒绝 Duff 的设备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;C语言示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;* to, &lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;* from, &lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; count)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (count &amp;lt;= &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; n = (count + &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (count % &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; &amp;#123; *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;:      *to = *from++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;:      *to = *from++;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (--n &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;描述语言示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pdl&#34;&gt;send(to, from, count)&lt;br&gt;register short *to, *from;&lt;br&gt;register count;&lt;br&gt;&amp;#123;&lt;br&gt;    register n = (count + 7) / 8;&lt;br&gt;    switch (count % 8) &amp;#123;&lt;br&gt;    case 0: do &amp;#123; *to = *from++;&lt;br&gt;    case 7:      *to = *from++;&lt;br&gt;    case 6:      *to = *from++;&lt;br&gt;    case 5:      *to = *from++;&lt;br&gt;    case 4:      *to = *from++;&lt;br&gt;    case 3:      *to = *from++;&lt;br&gt;    case 2:      *to = *from++;&lt;br&gt;    case 1:      *to = *from++;&lt;br&gt;            &amp;#125; while (--n &amp;gt; 0);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;功能一致的等效展开&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pdl&#34;&gt;send(to, from, count)&lt;br&gt;register short *to, *from;&lt;br&gt;register count;&lt;br&gt;&amp;#123;&lt;br&gt;    register n = (count + 7) / 8;&lt;br&gt;    switch (count % 8) &amp;#123;&lt;br&gt;        case 0: *to = *from++;&lt;br&gt;        case 7: *to = *from++;&lt;br&gt;        case 6: *to = *from++;&lt;br&gt;        case 5: *to = *from++;&lt;br&gt;        case 4: *to = *from++;&lt;br&gt;        case 3: *to = *from++;&lt;br&gt;        case 2: *to = *from++;&lt;br&gt;        case 1: *to = *from++;&lt;br&gt;    &amp;#125;&lt;br&gt;    while (--n &amp;gt; 0) &amp;#123;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;        *to = *from++;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;memcpy&#34;&gt;&lt;a href=&#34;#memcpy&#34; class=&#34;headerlink&#34; title=&#34;memcpy&#34;&gt;&lt;/a&gt;memcpy&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  他主要的思路是将文件分块尽量大些，让总线一次读取的数据全部可用。并一次拷贝多个数据，避免if等待。&lt;/p&gt;
&lt;p&gt;  这个程序的性能经过对比可以比直接赋值的情况下高8倍以上，count值较大的情况下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @brief  This function will copy memory content from source address to destination address.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @param  dst is the address of destination memory, points to the copied content.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @param  src  is the address of source memory, pointing to the data source to be copied.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @param  count is the copied length.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @return The address of destination memory&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;rt_weak &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;hljs-title function_&#34;&gt;rt_memcpy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *dst, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *src, &lt;span class=&#34;hljs-type&#34;&gt;rt_ubase_t&lt;/span&gt; count)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; UNALIGNED(X, Y) \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (((long)X &amp;amp; (sizeof (long) - 1)) | ((long)Y &amp;amp; (sizeof (long) - 1)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; BIGBLOCKSIZE    (sizeof (long) &amp;lt;&amp;lt; 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; LITTLEBLOCKSIZE (sizeof (long))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; TOO_SMALL(LEN)  ((LEN) &amp;lt; BIGBLOCKSIZE)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *dst_ptr = (&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)dst;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *src_ptr = (&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)src;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; *aligned_dst = RT_NULL;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; *aligned_src = RT_NULL;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_ubase_t&lt;/span&gt; len = count;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* If the size is small, or either SRC or DST is unaligned,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    then punt into the byte copy loop.  This should be rare. */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!TOO_SMALL(len) &amp;amp;&amp;amp; !UNALIGNED(src_ptr, dst_ptr))&lt;br&gt;    &amp;#123;&lt;br&gt;        aligned_dst = (&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; *)dst_ptr;&lt;br&gt;        aligned_src = (&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; *)src_ptr;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Copy 4X long words at a time if possible. */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (len &amp;gt;= BIGBLOCKSIZE)&lt;br&gt;        &amp;#123;&lt;br&gt;            *aligned_dst++ = *aligned_src++;&lt;br&gt;            *aligned_dst++ = *aligned_src++;&lt;br&gt;            *aligned_dst++ = *aligned_src++;&lt;br&gt;            *aligned_dst++ = *aligned_src++;&lt;br&gt;            len -= BIGBLOCKSIZE;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Copy one long word at a time if possible. */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (len &amp;gt;= LITTLEBLOCKSIZE)&lt;br&gt;        &amp;#123;&lt;br&gt;            *aligned_dst++ = *aligned_src++;&lt;br&gt;            len -= LITTLEBLOCKSIZE;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* Pick up any residual with a byte copier. */&lt;/span&gt;&lt;br&gt;        dst_ptr = (&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)aligned_dst;&lt;br&gt;        src_ptr = (&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *)aligned_src;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (len--)&lt;br&gt;        *dst_ptr++ = *src_ptr++;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; dst;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;undef&lt;/span&gt; UNALIGNED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;undef&lt;/span&gt; BIGBLOCKSIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;undef&lt;/span&gt; LITTLEBLOCKSIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;undef&lt;/span&gt; TOO_SMALL&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;







&lt;h1 id=&#34;规范性&#34;&gt;&lt;a href=&#34;#规范性&#34; class=&#34;headerlink&#34; title=&#34;规范性&#34;&gt;&lt;/a&gt;规范性&lt;/h1&gt;&lt;h2 id=&#34;头文件&#34;&gt;&lt;a href=&#34;#头文件&#34; class=&#34;headerlink&#34; title=&#34;头文件&#34;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;common.h作为顶层头文件，主要放置(f10x.h、通用define、通用enum、)，不得包含用户头文件以避免循环依赖。&lt;/li&gt;
&lt;li&gt;#ifndef标识符规范，前面加两个下划线 __COMMON_H&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;详细&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;全局变量&lt;/td&gt;
&lt;td&gt;前面加 g&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gRoomHmidity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指针&lt;/td&gt;
&lt;td&gt;前面加 p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pHumidity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有符号变量&lt;/td&gt;
&lt;td&gt;前面加i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;iTemperature&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;struct函数指针&lt;/td&gt;
&lt;td&gt;前面加f(可选的)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fGetVal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不允许直接访问&lt;/td&gt;
&lt;td&gt;前面加_&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_DataVal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enum&lt;/td&gt;
&lt;td&gt;变量前面加 e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;eFlag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;值全大写即可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ERR_OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Typedef&lt;/td&gt;
&lt;td&gt;后面加 _t&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;uint32_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;不要使用八进制，误认是十进制。&lt;/li&gt;
&lt;li&gt;Switch default无操作需要得到注释。&lt;/li&gt;
&lt;li&gt;禁止变量未赋值就进行使用。&lt;/li&gt;
&lt;li&gt;如果某常量与其他常量密切相关，在定义中应该明确表示出此关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; RAD=&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; DIAM=RAD*&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通讯过程中使用的结构,必须注意字节序。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免使用危险函数sprintf &amp;#x2F;vsprintf&amp;#x2F;strcpy&amp;#x2F;strcat&amp;#x2F;gets操作字符串&lt;ul&gt;
&lt;li&gt;用strncpy()代替strcpy()&lt;/li&gt;
&lt;li&gt;用strncat()代替strcat()&lt;/li&gt;
&lt;li&gt;用snprintf()代替sprintf()&lt;/li&gt;
&lt;li&gt;用fgets()代替gets()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特殊技巧及知识总结&#34;&gt;&lt;a href=&#34;#特殊技巧及知识总结&#34; class=&#34;headerlink&#34; title=&#34;特殊技巧及知识总结&#34;&gt;&lt;/a&gt;特殊技巧及知识总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字符串中可以使用\0OO(八进制)或\xHH(十六进制)来引用ASCII码中的符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ascii=\x35\n&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;ascii=5&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;if&amp;#x2F;else结构中尽量把TRUE概念较高的条件放到前面可以提高效率。&lt;/li&gt;
&lt;li&gt;尽量把最有可能FALSE的子表达式放在“&amp;amp;&amp;amp;”的左边，同理尽量把最有可能为TRUE的子表达式放在“||”的左边。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( p5 &amp;amp;&amp;amp; p95 )		&lt;span class=&#34;hljs-comment&#34;&gt;//第一个不满足就不满足&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( p95 || p5 )		&lt;span class=&#34;hljs-comment&#34;&gt;//第一个满足就满足&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;对于多维数组来说，”先行后列”的遍历效率会更高，但可能不明显。&lt;/li&gt;
&lt;li&gt;如果某常量与其他常量密切相关，在定义中应该明确表示出此关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; RAD=&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; DIAM=RAD*&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果输入参数传递的是一个ADT&amp;#x2F;UDT类型的参数（抽象数据类型&amp;#x2F;用户定义数据类型），宜采用 &lt;code&gt;const &amp;amp;&lt;/code&gt;的方式来传递以提高效率。而对于int等类型的基本类型的参数没有必要改成 &lt;code&gt;const &amp;amp;&lt;/code&gt;传递。指针传递，提高效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虽然类型名称和&lt;code&gt;*&lt;/code&gt;组合是一种指针类型，但是编译器是将&lt;code&gt;*&lt;/code&gt;于后面的变量结合的，列如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* a,b,c;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译器的理解是  a是int*， b、c是int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//这也是为什么推荐将*粘着变量的原因&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *a,b,c;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;多维数组中的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//以下四种表达是等价的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// i是指行，j是指列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// a[i][j]里面 *(a+i) 就等价于 a[i]&lt;/span&gt;&lt;br&gt;a[i][j]&lt;br&gt;*(a[i]+j)&lt;br&gt;(*(a+i))[j]&lt;br&gt;*(*(a+i)+j)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;字符数组&lt;/span&gt;是保存字符变量的数组，而&lt;span style=&#34;color:red&#34;&gt;字符串&lt;/span&gt;是以&lt;code&gt;\0&lt;/code&gt;结尾的字符数组。&lt;/li&gt;
&lt;li&gt;malloc&amp;#x2F;free和new&amp;#x2F;delete，这两者的区别主要有。new&amp;#x2F;delete是C++里的，更高级，更安全，返回的是有类型的指针，出错会抛出异常。&lt;/li&gt;
&lt;li&gt;中断内不能使用除法&lt;ul&gt;
&lt;li&gt;中断内有些指令需要较多的周期才能完成，它们是除法指令，双字传送指令LDRD&amp;#x2F;STRD以及多&lt;br&gt;重数据传送指令(LDM&amp;#x2F;STM)。对于前两者，CM3将为了保证中断及时响应而取消它们的执行。也就是中断内无法完成&lt;strong&gt;除法指令&lt;/strong&gt;！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试模式如果单步调试，会屏蔽各种中断，定时器，IWDG都无法进行，而且定时器仍然在计数但是不会响应中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码解析&#34;&gt;&lt;a href=&#34;#代码解析&#34; class=&#34;headerlink&#34; title=&#34;代码解析&#34;&gt;&lt;/a&gt;代码解析&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (tx_semaphore_get(tx_semaphore, convert_ms_to_ticks(timeout)))&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_SUCCESS:&lt;br&gt;        result = FFW_SUCCESS;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_NO_INSTANCE:&lt;br&gt;        result = FFW_TIMEOUT;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_SEMAPHORE_ERROR:&lt;br&gt;        result = FFW_INVALID_ARGUMENT;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;:&lt;br&gt;        result = FFW_FAILURE;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// convert_ms_to_ticks 这样做会更加通用&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;BUG-翻车集锦&#34;&gt;&lt;a href=&#34;#BUG-翻车集锦&#34; class=&#34;headerlink&#34; title=&#34;BUG 翻车集锦&#34;&gt;&lt;/a&gt;BUG 翻车集锦&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TIM捕获触发DMA传输，但是在调试模式下DMA传出来的数据有问题。&lt;/p&gt;
&lt;p&gt;把DMA出来的的数据再复制一份，复制出来的数据是没有问题的。&lt;/p&gt;
&lt;p&gt;分析可能是，DEBUG下CPU停了，但是DMA总线还在跑，外设可能也是还在运行的，导致看起来DMA出来的数据有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC矫正会发生ADC转换，如果有DMA配合使用，需要注意DMA需要在ADC矫正后使能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐式转换  小范围会转换成大范围  有一点特殊的是   unsigned int &amp;gt; int&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运算符优先级！位运算符优先级较低&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译报错&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)? data_temp |= &lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;:data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//规范写法&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN!=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)? (data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;):(data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;运算符优先级！！！极注意！！！  请小心有位运算时打上括号            &amp;lt;&amp;lt;  比  +-  要低&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;u16 temp;&lt;br&gt;u8 h,l;&lt;br&gt;temp = (u16)(h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 正确语法&lt;/span&gt;&lt;br&gt;temp = h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 错误语法！！！！！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0b110&lt;/code&gt; 这种二进制写法似乎只有在GNU模式才被允许。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STM32的看门狗是使得RST引脚拉低，来复位的。所以要注意复位电容的选择，太大会导致软件无法复位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;代码段内 \ 换行后不能接 /* xxx */ 注释，注释需要些在 \ 的前面，如 /* xxx */ \ 这样才行&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;printf 内字符串问题&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; DC_LOG_ERROR    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\x11&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 没有逗号 这是正常想要表达的逻辑, 前面的DC_LOG_ERROR 和 &amp;quot;%s:%d check SID Stasrt&amp;quot; 合并成一个表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(DC_LOG_ERROR  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s:%d check SID Stasrt&amp;quot;&lt;/span&gt;,__func__, __LINE__);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 有逗号 只会识别前面一个字符串 后面的都没了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(DC_LOG_ERROR, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s:%d check SID Stasrt&amp;quot;&lt;/span&gt;,__func__, __LINE__);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在 RSIC-V 的一个系统里面，系统会异常死机，报HardFault，报各种不一样的异常，排查后发现是32.768KHz的晶振所致，甚是奇怪！&lt;ul&gt;
&lt;li&gt;系统异常一定要优先检查 系统各大件是否运行正常 &lt;strong&gt;SoC、Flash、晶振(主晶振、RTC晶振)、当然还有最重要的电源&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRC XOR 各种校验的算法一定要确认一下多项式和初值，很多时候校验对不上都是这些的问题。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
