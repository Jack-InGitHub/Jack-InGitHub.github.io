<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Oikiou&#39;s Blog • Posts by &#34;rtos&#34; category</title>
        <link>https://www.oikiou.top</link>
        <description>Blog</description>
        <language>zh-CN</language>
        <pubDate>Wed, 21 Jul 2021 22:57:15 +0800</pubDate>
        <lastBuildDate>Wed, 21 Jul 2021 22:57:15 +0800</lastBuildDate>
        <category>hp</category>
        <category>chrome</category>
        <category>embedded</category>
        <category>cc2530</category>
        <category>zigbee</category>
        <category>sscanf</category>
        <category>c/c++</category>
        <category>jpeg</category>
        <category>webp</category>
        <category>jpeg2000</category>
        <category>image</category>
        <category>hex</category>
        <category>ssl</category>
        <category>https</category>
        <category>license</category>
        <category>md5</category>
        <category>markdown</category>
        <category>note</category>
        <category>osi</category>
        <category>iap</category>
        <category>bootloader</category>
        <category>stm32</category>
        <category>tags</category>
        <category>label</category>
        <category>category</category>
        <category>typora</category>
        <category>usart</category>
        <category>rts</category>
        <category>cts</category>
        <category>dtr</category>
        <category>dsr</category>
        <category>ws2812</category>
        <category>spi</category>
        <category>dma</category>
        <category>windows</category>
        <category>makefile</category>
        <category>xip</category>
        <category>nor</category>
        <category>nand</category>
        <category>android</category>
        <category>mtp</category>
        <category>pc</category>
        <category>driver</category>
        <category>ip</category>
        <category>location</category>
        <category>api</category>
        <category>zip</category>
        <category>gzip</category>
        <category>bzip</category>
        <category>tar</category>
        <category>zsh</category>
        <category>shell</category>
        <category>linux</category>
        <category>kms</category>
        <category>office</category>
        <category>volume</category>
        <category>DS_Store</category>
        <category>rtf</category>
        <category>后缀</category>
        <category>机智云</category>
        <category>蓝桥杯</category>
        <category>国赛</category>
        <category>ct117e</category>
        <category>character encoding</category>
        <category>gb2312</category>
        <category>utf-8</category>
        <category>ct117e-ex</category>
        <category>超声波</category>
        <category>github</category>
        <category>hosts</category>
        <category>c++</category>
        <category>c</category>
        <category>ms-dos</category>
        <category>micropython</category>
        <category>python</category>
        <category>qt</category>
        <category>pyqt</category>
        <category>pid</category>
        <category>数据结构</category>
        <category>堆栈</category>
        <category>队列</category>
        <category>链表</category>
        <category>树</category>
        <category>二叉树</category>
        <category>正则表达式</category>
        <category>life</category>
        <category>人生</category>
        <category>workflow</category>
        <category>心理学</category>
        <category>cad</category>
        <category>cat_drive</category>
        <category>switch</category>
        <category>nintendo</category>
        <category>game</category>
        <category>hardware</category>
        <category>lenovo</category>
        <category>disk</category>
        <category>摄影</category>
        <category>software</category>
        <category>synology</category>
        <category>cmake</category>
        <category>dslogic</category>
        <category>逻辑分析仪</category>
        <category>pyhton</category>
        <category>decoder</category>
        <category>git</category>
        <category>j-link</category>
        <category>rtt</category>
        <category>serial</category>
        <category>debug</category>
        <category>jlink</category>
        <category>flash</category>
        <category>j-tag</category>
        <category>docker</category>
        <category>dockerfile</category>
        <category>namespace</category>
        <category>cgroup</category>
        <category>dockerhub</category>
        <category>ps</category>
        <category>powershell</category>
        <category>rdpwrap</category>
        <category>rdp</category>
        <category>sourceinsigh</category>
        <category>si</category>
        <category>ide</category>
        <category>vscode</category>
        <category>spacedesk</category>
        <category>投屏</category>
        <category>wordpress</category>
        <category>web</category>
        <category>mysql</category>
        <category>nginx</category>
        <category>speedtest</category>
        <category>tools</category>
        <category>commenttranslate</category>
        <category>wsl</category>
        <category>tmux</category>
        <category>unit</category>
        <category>m</category>
        <category>cm</category>
        <category>mm</category>
        <category>s</category>
        <category>us</category>
        <category>hexo</category>
        <category>jekyll</category>
        <category>fluid</category>
        <category>cusdis</category>
        <category>twikoo</category>
        <category>blog</category>
        <category>gravatar</category>
        <category>cravatar</category>
        <category>cortex-a7</category>
        <category>cortex-m3</category>
        <category>rtx</category>
        <category>rtos</category>
        <category>keil</category>
        <category>raspberry</category>
        <category>wiringpi</category>
        <category>pwm</category>
        <category>ucos</category>
        <category>bluetooth</category>
        <category>蓝牙</category>
        <category>ap</category>
        <category>wifi</category>
        <category>alpha_mini</category>
        <category>正点原子</category>
        <category>modbus</category>
        <category>linuxapp</category>
        <category>curl</category>
        <category>libcurl</category>
        <category>zlib</category>
        <category>minizip</category>
        <category>rt-thread</category>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2021/42e53028/</guid>
            <title>RT-Thread</title>
            <link>https://www.oikiou.top/2021/42e53028/</link>
            <category>rtos</category>
            <category>rt-thread</category>
            <pubDate>Wed, 21 Jul 2021 22:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;RT-Thread-目录&#34;&gt;&lt;a href=&#34;#RT-Thread-目录&#34; class=&#34;headerlink&#34; title=&#34;RT-Thread 目录&#34;&gt;&lt;/a&gt;RT-Thread 目录&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;内核简介&#34;&gt;&lt;a href=&#34;#内核简介&#34; class=&#34;headerlink&#34; title=&#34;内核简介&#34;&gt;&lt;/a&gt;内核简介&lt;/h1&gt;&lt;h2 id=&#34;自动初始化机制&#34;&gt;&lt;a href=&#34;#自动初始化机制&#34; class=&#34;headerlink&#34; title=&#34;自动初始化机制&#34;&gt;&lt;/a&gt;自动初始化机制&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;初始化顺序&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;宏接口&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;INIT_BOARD_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;非常早期的初始化，此时调度器还未启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;INIT_PREV_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;主要是用于纯软件的初始化、没有太多依赖的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;INIT_DEVICE_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;外设驱动初始化相关，比如网卡设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;INIT_COMPONENT_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;组件初始化，比如文件系统或者 LWIP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;INIT_ENV_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;系统环境初始化，比如挂载文件系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;INIT_APP_EXPORT(fn)&lt;/td&gt;
&lt;td&gt;应用初始化，比如 GUI 应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;内核对象管理架构&#34;&gt;&lt;a href=&#34;#内核对象管理架构&#34; class=&#34;headerlink&#34; title=&#34;内核对象管理架构&#34;&gt;&lt;/a&gt;内核对象管理架构&lt;/h2&gt;&lt;p&gt;派生和继承&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/03kernel_object-1608970713169.png&#34; alt=&#34;RT-Thread 的内核对象容器及链表&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/03kernel_object2-1608970663476.png&#34; alt=&#34;03kernel_object2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;内核rtconfig-h配置&#34;&gt;&lt;a href=&#34;#内核rtconfig-h配置&#34; class=&#34;headerlink&#34; title=&#34;内核rtconfig.h配置&#34;&gt;&lt;/a&gt;内核rtconfig.h配置&lt;/h2&gt;&lt;p&gt;（1）RT-Thread 内核部分&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 表示内核对象的名称的最大长度，若代码中对象名称的最大长度大于宏定义的长度，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 多余的部分将被截掉。*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_NAME_MAX 8&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 字节对齐时设定对齐的字节个数。常使用 ALIGN(RT_ALIGN_SIZE) 进行字节对齐。*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_ALIGN_SIZE 4&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义系统线程优先级数；通常用 RT_THREAD_PRIORITY_MAX-1 定义空闲线程的优先级 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_THREAD_PRIORITY_MAX 32&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义时钟节拍，为 100 时表示 100 个 tick 每秒，一个 tick 为 10ms */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TICK_PER_SECOND 100&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 检查栈是否溢出，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_OVERFLOW_CHECK&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏开启 debug 模式，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启 debug 模式时：该宏定义为 0 时表示关闭打印组件初始化信息，定义为 1 时表示启用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_DEBUG_INIT 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启 debug 模式时：该宏定义为 0 时表示关闭打印线程切换信息，定义为 1 时表示启用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_DEBUG_THREAD 0&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏表示开启钩子函数的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_HOOK&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义了空闲线程的栈大小 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; IDLE_THREAD_STACK_SIZE 256&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（2）线程间同步与通信部分，该部分会使用到的对象有信号量、互斥量、事件、邮箱、消息队列、信号等。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启信号量的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_SEMAPHORE&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启互斥量的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_MUTEX&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启事件集的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_EVENT&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启邮箱的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_MAILBOX&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启消息队列的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_MESSAGEQUEUE&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启信号的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_SIGNALS&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（3）内存管理部分&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启静态内存池的使用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_MEMPOOL&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启两个或以上内存堆拼接的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_MEMHEAP&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启小内存管理算法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_SMALL_MEM&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 关闭 SLAB 内存管理算法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* #define RT_USING_SLAB */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启堆的使用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_HEAP&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（4）内核设备对象&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 表示开启了系统设备的使用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_DEVICE&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启系统控制台设备的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_CONSOLE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义控制台设备的缓冲区大小 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_CONSOLEBUF_SIZE 128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 控制台设备的名称 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_CONSOLE_DEVICE_NAME &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uart1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（5）自动初始化方式&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏开启自动初始化机制，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_COMPONENTS_INIT&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏开启设置应用入口为 main 函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_USER_MAIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义 main 线程的栈大小 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_MAIN_THREAD_STACK_SIZE 2048&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（6）FinSH&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏可开启系统 FinSH 调试工具的使用，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_FINSH&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：将该线程名称定义为 tshell */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_THREAD_NAME &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tshell&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：使用历史命令 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_USING_HISTORY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：对历史命令行数的定义 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_HISTORY_LINES 5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义该宏开启使用 Tab 键，未定义则关闭 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_USING_SYMTAB&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义该线程的优先级 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_THREAD_PRIORITY 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义该线程的栈大小 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_THREAD_STACK_SIZE 4096&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义命令字符长度 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_CMD_SIZE 80&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义该宏开启 MSH 功能 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_USING_MSH&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：开启 MSH 功能时，定义该宏默认使用 MSH 功能 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_USING_MSH_DEFAULT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 开启系统 FinSH 时：定义该宏，仅使用 MSH 功能 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; FINSH_USING_MSH_ONLY&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;（7）关于 MCU&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该工程使用的 MCU 为 STM32F103ZE；系统通过对芯片类型的定义，来定义芯片的管脚 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; STM32F103ZE&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义时钟源频率 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_HSE_VALUE 8000000&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义该宏开启 UART1 的使用 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USING_UART1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;常见宏定义说明&#34;&gt;&lt;a href=&#34;#常见宏定义说明&#34; class=&#34;headerlink&#34; title=&#34;常见宏定义说明&#34;&gt;&lt;/a&gt;常见宏定义说明&lt;/h2&gt;&lt;p&gt;1）rt_inline，定义如下，static 关键字的作用是令函数只能在当前的文件中使用；inline 表示内联，用 static 修饰后在调用函数时会建议编译器进行内联展开。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; rt_inline                   static __inline&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2）RT_USED，定义如下，该宏的作用是向编译器说明这段代码有用，即使函数中没有调用也要保留编译。例如 RT-Thread 自动初始化功能使用了自定义的段，使用 RT_USED 会将自定义的代码段保留。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_USED                     __attribute__((used))&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3）RT_UNUSED，定义如下，表示函数或变量可能不使用，这个属性可以避免编译器产生警告信息。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_UNUSED                   __attribute__((unused))&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4）RT_WEAK，定义如下，常用于定义函数，编译器在链接函数时会优先链接没有该关键字前缀的函数，如果找不到则再链接由 weak 修饰的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_WEAK                     __weak&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5）ALIGN(n)，定义如下，作用是在给某对象分配地址空间时，将其存放的地址按照 n 字节对齐，这里 n 可取 2 的幂次方。字节对齐的作用不仅是便于 CPU 快速访问，同时合理的利用字节对齐可以有效地节省存储空间。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ALIGN(n)                    __attribute__((aligned(n)))&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;6）RT_ALIGN(size,align)，定义如下，作用是将 size 提升为 align 定义的整数的倍数，例如，RT_ALIGN(13,4) 将返回 16。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_ALIGN(size, align)      (((size) + (align) - 1) &amp;amp; ~((align) - 1))&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;线程管理&#34;&gt;&lt;a href=&#34;#线程管理&#34; class=&#34;headerlink&#34; title=&#34;线程管理&#34;&gt;&lt;/a&gt;线程管理&lt;/h1&gt;&lt;h2 id=&#34;线程状态&#34;&gt;&lt;a href=&#34;#线程状态&#34; class=&#34;headerlink&#34; title=&#34;线程状态&#34;&gt;&lt;/a&gt;线程状态&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;状态&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;初始状态&lt;/td&gt;
&lt;td&gt;当线程刚开始创建还没开始运行时就处于初始状态；&lt;br/&gt;在初始状态下，线程不参与调度。&lt;br/&gt;此状态在 RT-Thread 中的宏定义为 RT_THREAD_INIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;就绪状态&lt;/td&gt;
&lt;td&gt;在就绪状态下，线程按照优先级排队，等待被执行；&lt;br/&gt;一旦当前线程运行完毕让出处理器，操作系统会马上寻找最高优先级的就绪态线程运行。&lt;br/&gt;此状态在 RT-Thread 中的宏定义为 RT_THREAD_READY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;运行状态&lt;/td&gt;
&lt;td&gt;线程当前正在运行。在单核系统中，只有 rt_thread_self() 函数返回的线程处于运行状态；&lt;br/&gt;在多核系统中，可能就不止这一个线程处于运行状态。&lt;br/&gt;此状态在 RT-Thread 中的宏定义为 RT_THREAD_RUNNING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;挂起状态&lt;/td&gt;
&lt;td&gt;也称阻塞态。它可能因为资源不可用而挂起等待，或线程主动延时一段时间而挂起。&lt;br/&gt;在挂起状态下，线程不参与调度。&lt;br/&gt;此状态在 RT-Thread 中的宏定义为 RT_THREAD_SUSPEND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关闭状态&lt;/td&gt;
&lt;td&gt;当线程运行结束时将处于关闭状态。&lt;br/&gt;关闭状态的线程不参与线程的调度。&lt;br/&gt;此状态在 RT-Thread 中的宏定义为 RT_THREAD_CLOSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;线程状态的切换&#34;&gt;&lt;a href=&#34;#线程状态的切换&#34; class=&#34;headerlink&#34; title=&#34;线程状态的切换&#34;&gt;&lt;/a&gt;线程状态的切换&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/04thread_sta.png&#34; alt=&#34;线程状态转换图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程的管理API&#34;&gt;&lt;a href=&#34;#线程的管理API&#34; class=&#34;headerlink&#34; title=&#34;线程的管理API&#34;&gt;&lt;/a&gt;线程的管理API&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/04thread_ops.png&#34; alt=&#34;线程相关操作&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建删除-create&#34;&gt;&lt;a href=&#34;#创建删除-create&#34; class=&#34;headerlink&#34; title=&#34;创建删除-create&#34;&gt;&lt;/a&gt;创建删除-create&lt;/h3&gt;&lt;p&gt;系统会从动态堆内存中分配一个线程句柄以及按照参数中指定的栈大小从动态堆内存中分配相应的空间。分配出来的栈空间是按照 rtconfig.h 中配置的 &lt;strong&gt;RT_ALIGN_SIZE&lt;/strong&gt; 方式对齐&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*entry)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; stack_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; priority,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; tick)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;线程的名称；&lt;br/&gt;线程名称的最大长度由 rtconfig.h 中的宏 RT_NAME_MAX 指定，多余部分会被自动截掉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;entry&lt;/td&gt;
&lt;td&gt;线程入口函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;线程入口函数参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stack_size&lt;/td&gt;
&lt;td&gt;线程栈大小，单位是字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;priority&lt;/td&gt;
&lt;td&gt;线程的优先级。&lt;br/&gt;优先级范围根据系统配置情况（rtconfig.h 中的 RT_THREAD_PRIORITY_MAX 宏定义），如果支持的是 256 级优先级，那么范围是从 0~255，数值越小优先级越高，0 代表最高优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tick&lt;/td&gt;
&lt;td&gt;线程的时间片大小。&lt;br/&gt;时间片（tick）的单位是操作系统的时钟节拍。当系统中存在相同优先级线程时，这个参数指定线程一次调度能够运行的最大时间长度。这个时间片运行结束时，调度器自动选择下一个就绪态的同优先级线程进行运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程创建成功，返回线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;线程创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;要删除的线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除线程成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;删除线程失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离-init&#34;&gt;&lt;a href=&#34;#初始化和脱离-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离-init&#34;&gt;&lt;/a&gt;初始化和脱离-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; rt_thread* thread,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*entry)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter), &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* stack_start, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; stack_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; priority, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; tick)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;静态线程的线程句柄（或者说线程控制块指针）、线程栈由用户提供。静态线程是指线程控制块、线程运行栈一般都设置为全局变量，在编译时就被确定、被分配处理，内核不负责动态分配内存空间。需要注意的是，用户提供的栈首地址需做&lt;strong&gt;系统对齐&lt;/strong&gt;（例如 ARM 上需要做 4 字节对齐）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄。线程句柄由用户提供出来，并指向对应的线程控制块内存地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;线程的名称；线程名称的最大长度由 rtconfig.h 中定义的 RT_NAME_MAX 宏指定，多余部分会被自动截掉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;entry&lt;/td&gt;
&lt;td&gt;线程入口函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;线程入口函数参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stack_start&lt;/td&gt;
&lt;td&gt;线程栈起始地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stack_size&lt;/td&gt;
&lt;td&gt;线程栈大小，单位是字节。在大多数系统中需要做栈空间地址对齐（例如 ARM 体系结构中需要向 4 字节地址对齐）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;priority&lt;/td&gt;
&lt;td&gt;线程的优先级。优先级范围根据系统配置情况（rtconfig.h 中的 RT_THREAD_PRIORITY_MAX 宏定义），如果支持的是 256 级优先级，那么范围是从 0 ～ 255，数值越小优先级越高，0 代表最高优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tick&lt;/td&gt;
&lt;td&gt;线程的时间片大小。时间片（tick）的单位是操作系统的时钟节拍。当系统中存在相同优先级线程时，这个参数指定线程一次调度能够运行的最大时间长度。这个时间片运行结束时，调度器自动选择下一个就绪态的同优先级线程进行运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;线程创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;线程创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_detach&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄，它应该是由 rt_thread_init 进行初始化的线程句柄。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;线程脱离成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;线程脱离失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;线程启动-startup&#34;&gt;&lt;a href=&#34;#线程启动-startup&#34; class=&#34;headerlink&#34; title=&#34;线程启动-startup&#34;&gt;&lt;/a&gt;线程启动-startup&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_startup&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;线程启动成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;线程起动失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;获取当前线程-self&#34;&gt;&lt;a href=&#34;#获取当前线程-self&#34; class=&#34;headerlink&#34; title=&#34;获取当前线程-self&#34;&gt;&lt;/a&gt;获取当前线程-self&lt;/h3&gt;&lt;p&gt;在程序的运行过程中，相同的一段代码可能会被多个线程执行，在执行的时候可以通过下面的函数接口获得当前执行的线程句柄：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_self&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;当前运行的线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;失败，调度器还未启动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;使线程让出处理器资源-yield&#34;&gt;&lt;a href=&#34;#使线程让出处理器资源-yield&#34; class=&#34;headerlink&#34; title=&#34;使线程让出处理器资源-yield&#34;&gt;&lt;/a&gt;使线程让出处理器资源-yield&lt;/h3&gt;&lt;p&gt;（如果当前优先级只有这一个线程，则这个线程继续执行，不进行上下文切换动作）。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_yield&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;rt_thread_yield() 和 rt_schedule() 比较相像，有相同优先级的其他就绪态线程存在时其行为&lt;strong&gt;有所差异&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;使线程睡眠-延时-sleep&#34;&gt;&lt;a href=&#34;#使线程睡眠-延时-sleep&#34; class=&#34;headerlink&#34; title=&#34;使线程睡眠(延时)-sleep&#34;&gt;&lt;/a&gt;使线程睡眠(延时)-sleep&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_sleep&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; tick)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_delay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; tick)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_mdelay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; ms)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;tick&amp;#x2F;ms&lt;/td&gt;
&lt;td&gt;线程睡眠的时间： sleep&amp;#x2F;delay 的传入参数 tick 以 1 个 OS Tick 为单位 ； mdelay 的传入参数 ms 以 1ms 为单位；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;操作成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;挂起和恢复线程-suspend&#34;&gt;&lt;a href=&#34;#挂起和恢复线程-suspend&#34; class=&#34;headerlink&#34; title=&#34;挂起和恢复线程-suspend&#34;&gt;&lt;/a&gt;挂起和恢复线程-suspend&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通常不应该使用这个函数来挂起线程本身，如果确实需要采用 rt_thread_suspend() 函数挂起当前任务，需要在调用 rt_thread_suspend() 函数后立刻调用 rt_schedule() 函数进行手动的线程上下文切换。用户只需要了解该接口的作用，不推荐使用该接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_suspend&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;线程挂起成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;线程挂起失败，因为该线程的状态并不是就绪状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;恢复线程就是让挂起的线程重新进入就绪状态，并将线程放入系统的就绪队列中；&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_resume&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;线程恢复成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;线程恢复失败，因为该个线程的状态并不是 RT_THREAD_SUSPEND 状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;控制线程-control&#34;&gt;&lt;a href=&#34;#控制线程-control&#34; class=&#34;headerlink&#34; title=&#34;控制线程-control&#34;&gt;&lt;/a&gt;控制线程-control&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_control&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; thread, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; cmd, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;线程控制接口 rt_thread_control() 的参数和返回值见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;线程句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmd&lt;/td&gt;
&lt;td&gt;指示控制命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arg&lt;/td&gt;
&lt;td&gt;控制参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;控制执行正确&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;指示控制命令 cmd 当前支持的命令包括：&lt;/p&gt;
&lt;p&gt;RT_THREAD_CTRL_CHANGE_PRIORITY：动态更改线程的优先级；&lt;/p&gt;
&lt;p&gt;RT_THREAD_CTRL_STARTUP：开始运行一个线程，等同于 rt_thread_startup() 函数调用；&lt;/p&gt;
&lt;p&gt;RT_THREAD_CTRL_CLOSE：关闭一个线程，等同于 rt_thread_delete() 函数调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;设置和删除空闲钩子-idle&#34;&gt;&lt;a href=&#34;#设置和删除空闲钩子-idle&#34; class=&#34;headerlink&#34; title=&#34;设置和删除空闲钩子-idle&#34;&gt;&lt;/a&gt;设置和删除空闲钩子-idle&lt;/h3&gt;&lt;p&gt;空闲钩子函数是空闲线程的钩子函数，如果设置了空闲钩子函数，就可以在系统执行空闲线程时，自动执行空闲钩子函数来做一些其他事情，比如系统指示灯。&lt;strong&gt;钩子函数必须保证空闲线程在任何时刻都不会处于挂起状态。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_idle_sethook&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*hook)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;))&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_idle_delhook&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*hook)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;))&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;设置空闲钩子函数 rt_thread_idle_sethook() &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hook&lt;/td&gt;
&lt;td&gt;设置的钩子函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;设置成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EFULL&lt;/td&gt;
&lt;td&gt;设置失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;删除空闲钩子函数 rt_thread_idle_delhook() &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hook&lt;/td&gt;
&lt;td&gt;删除的钩子函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ENOSYS&lt;/td&gt;
&lt;td&gt;删除失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;设置调度器钩子-scheduler&#34;&gt;&lt;a href=&#34;#设置调度器钩子-scheduler&#34; class=&#34;headerlink&#34; title=&#34;设置调度器钩子-scheduler&#34;&gt;&lt;/a&gt;设置调度器钩子-scheduler&lt;/h3&gt;&lt;p&gt;有时用户可能会想知道在一个时刻发生了什么样的线程切换，可以通过调用下面的函数接口设置一个相应的钩子函数。在系统线程切换时，这个钩子函数将被调用：&lt;strong&gt;请仔细编写你的钩子函数，稍有不慎将很可能导致整个系统运行不正常（在这个钩子函数中，基本上不允许调用系统 API，更不应该导致当前运行的上下文挂起）。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_scheduler_sethook&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*hook)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; rt_thread* from, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; rt_thread* to))&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hook&lt;/td&gt;
&lt;td&gt;表示用户定义的钩子函数指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;钩子函数 hook() 的声明如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hook&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; rt_thread* from, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; rt_thread* to)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;from&lt;/td&gt;
&lt;td&gt;表示系统所要切换出的线程控制块指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;to&lt;/td&gt;
&lt;td&gt;表示系统所要切换到的线程控制块指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;API应用示例&#34;&gt;&lt;a href=&#34;#API应用示例&#34; class=&#34;headerlink&#34; title=&#34;API应用示例&#34;&gt;&lt;/a&gt;API应用示例&lt;/h2&gt;&lt;p&gt;线程 2 计数到一定值会执行完毕，线程 2 被系统自动删除，计数停止。线程 1 一直打印计数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY         25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_STACK_SIZE       512&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE        5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid1 = RT_NULL;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 的入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 采用低优先级运行，一直打印计数值 */&lt;/span&gt;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1 count: %d\n&amp;quot;&lt;/span&gt;, count ++);&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread2_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *param)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 拥有较高的优先级，以抢占线程 1 而获得执行 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; count &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; ; count++)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 打印计数值 */&lt;/span&gt;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2 count: %d\n&amp;quot;&lt;/span&gt;, count);&lt;br&gt;    &amp;#125;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2 exit\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 运行结束后也将自动被系统脱离 */&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程示例 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建线程 1，名称是 thread1，入口是 thread1_entry*/&lt;/span&gt;&lt;br&gt;    tid1 = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                            thread1_entry, RT_NULL,&lt;br&gt;                            THREAD_STACK_SIZE,&lt;br&gt;                            THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 如果获得线程控制块，启动这个线程 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid1 != RT_NULL)&lt;br&gt;        rt_thread_startup(tid1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化线程 2，名称是 thread2，入口是 thread2_entry */&lt;/span&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread2_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack),&lt;br&gt;                   THREAD_PRIORITY - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(thread_sample, thread sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;\ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright by rt-thread team&lt;br&gt;msh &amp;gt;thread_sample&lt;br&gt;msh &amp;gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;thread2 count: &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;thread2 &lt;span class=&#34;hljs-built_in&#34;&gt;exit&lt;/span&gt;&lt;br&gt;thread1 count: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;thread1 count: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;thread1 count: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;thread1 count: &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;…&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&#34;笔记&#34;&gt;&lt;a href=&#34;#笔记&#34; class=&#34;headerlink&#34; title=&#34;笔记&#34;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;若某线程运行完毕，系统将自动删除线程：自动执行 rt_thread_exit() 函数，先将该线程从系统就绪队列中删除，再将该线程的状态更改为关闭状态，不再参与系统调度，然后挂入 rt_thread_defunct 僵尸队列（资源未回收、处于关闭状态的线程队列）中，最后空闲线程会回收被删除线程的资源。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;时钟管理&#34;&gt;&lt;a href=&#34;#时钟管理&#34; class=&#34;headerlink&#34; title=&#34;时钟管理&#34;&gt;&lt;/a&gt;时钟管理&lt;/h1&gt;&lt;h2 id=&#34;获取时钟节拍API&#34;&gt;&lt;a href=&#34;#获取时钟节拍API&#34; class=&#34;headerlink&#34; title=&#34;获取时钟节拍API&#34;&gt;&lt;/a&gt;获取时钟节拍API&lt;/h2&gt;&lt;p&gt;由于全局变量 rt_tick 在每经过一个时钟节拍时，值就会加 1，通过调用 rt_tick_get 会返回当前 rt_tick 的值，即可以获取到当前的时钟节拍值。此接口可用于记录系统的运行时间长短，或者测量某任务运行的时间。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_tick_get&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;rt_tick&lt;/td&gt;
&lt;td&gt;当前时钟节拍值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;软件定时器管理&#34;&gt;&lt;a href=&#34;#软件定时器管理&#34; class=&#34;headerlink&#34; title=&#34;软件定时器管理&#34;&gt;&lt;/a&gt;软件定时器管理&lt;/h2&gt;&lt;p&gt;RT-Thread 操作系统提供软件实现的定时器，以时钟节拍（OS Tick）的时间长度为单位，即定时数值必须是 OS Tick 的整数倍。它构建在硬件定时器基础之上，使系统能够提供不受数目限制的定时器服务。&lt;/p&gt;
&lt;p&gt;RT-Thread 的定时器提供两类定时器机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一类是单次触发定时器，这类定时器在启动后只会触发一次定时器事件，然后定时器自动停止。&lt;/li&gt;
&lt;li&gt;第二类是周期触发定时器，这类定时器会周期性的触发定时器事件，直到用户手动的停止，否则将永远持续执行下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，根据超时函数执行时所处的上下文环境，RT-Thread 的定时器可以分为 &lt;strong&gt;HARD_TIMER&lt;/strong&gt; 模式与 &lt;strong&gt;SOFT_TIMER&lt;/strong&gt; 模式，如下图。使用&lt;strong&gt;RT_TIMER_FLAG_HARD_TIMER&lt;/strong&gt; 和 **RT_TIMER_FLAG_SOFT_TIMER ** 来决定使用的模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/05timer_env.png&#34; alt=&#34;定时器上下文环境&#34;&gt;&lt;/p&gt;
&lt;p&gt;系统新创建并激活的定时器都会按照以超时时间排序的方式插入到 rt_timer_list 链表中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/05timer_linked_list.png&#34; alt=&#34;定时器链表示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;rt_tick(当前系统tick) 从 20 增长到 70，与 Timer1 的 timeout 值相等，这时会触发与 Timer1 定时器相关联的超时函数，同时将 Timer1 从 rt_timer_list 链表上删除。&lt;/p&gt;
&lt;p&gt;如果系统当前定时器状态在 10 个 tick 以后（rt_tick&amp;#x3D;30）有一个任务新创建了一个 tick 值为 300 的 Timer4 定时器，由于 Timer4 定时器的 timeout&amp;#x3D;rt_tick+300&amp;#x3D;330, 因此它将被插入到 Timer2 和 Timer3 定时器中间如下图,所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/05timer_linked_list2.png&#34; alt=&#34;定时器链表插入示意图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;定时器API&#34;&gt;&lt;a href=&#34;#定时器API&#34; class=&#34;headerlink&#34; title=&#34;定时器API&#34;&gt;&lt;/a&gt;定时器API&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/05timer_ops.png&#34; alt=&#34;定时器相关操作&#34;&gt;&lt;/p&gt;
&lt;p&gt;在系统启动时需要初始化定时器管理系统。可以通过下面的函数接口完成：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_system_timer_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果需要使用 SOFT_TIMER，则系统初始化时，应该调用下面这个函数接口：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_system_timer_thread_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;创建和删除-create&#34;&gt;&lt;a href=&#34;#创建和删除-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除-create&#34;&gt;&lt;/a&gt;创建和删除-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*timeout)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; time,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;定时器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void (timeout) (void parameter)&lt;/td&gt;
&lt;td&gt;定时器超时函数指针（当定时器超时时，系统会调用这个函数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;定时器超时函数的入口参数（当定时器超时时，调用超时回调函数会把这个参数做为入口参数传递给超时函数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;定时器的超时时间，单位是时钟节拍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;定时器创建时的参数，支持的值包括单次定时、周期定时、硬件定时器、软件定时器等（可以用 “或” 关系取多个值）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败（通常会由于系统内存不够用而返回 RT_NULL）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定时器的句柄&lt;/td&gt;
&lt;td&gt;定时器创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如下2 组值可以以 “或” 逻辑的方式赋给 flag。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_FLAG_ONE_SHOT      0x0     &lt;span class=&#34;hljs-comment&#34;&gt;/* 单次定时     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_FLAG_PERIODIC      0x2     &lt;span class=&#34;hljs-comment&#34;&gt;/* 周期定时     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_FLAG_HARD_TIMER    0x0     &lt;span class=&#34;hljs-comment&#34;&gt;/* 时钟中断的服务例程上下文中被调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_FLAG_SOFT_TIMER    0x4     &lt;span class=&#34;hljs-comment&#34;&gt;/* timer 线程的上下文中被调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要删除的定时器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除成功（如果参数 timer 句柄是一个 RT_NULL，将会导致一个 ASSERT 断言）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离定时器-init&#34;&gt;&lt;a href=&#34;#初始化和脱离定时器-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离定时器-init&#34;&gt;&lt;/a&gt;初始化和脱离定时器-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*timeout)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   &lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; time, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要初始化的定时器控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;定时器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void (timeout) (void parameter)&lt;/td&gt;
&lt;td&gt;定时器超时函数指针（当定时器超时时，系统会调用这个函数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;定时器超时函数的入口参数（当定时器超时时，调用超时回调函数会把这个参数做为入口参数传递给超时函数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;定时器的超时时间，单位是时钟节拍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;定时器创建时的参数，支持的值包括单次定时、周期定时、硬件定时器、软件定时器（可以用 “或” 关系取多个值），详见上面 &lt;strong&gt;创建和删除&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要脱离的定时器控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;脱离成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;启动和停止定时器-start&#34;&gt;&lt;a href=&#34;#启动和停止定时器-start&#34; class=&#34;headerlink&#34; title=&#34;启动和停止定时器-start&#34;&gt;&lt;/a&gt;启动和停止定时器-start&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_start&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;调用接口后，定时器的状态将更改为激活状态（RT_TIMER_FLAG_ACTIVATED），并按照超时顺序插入到 rt_timer_list 队列链表中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要启动的定时器控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;启动成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_stop&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当一个（周期性）定时器超时时，可以调用这个函数接口停止这个（周期性）定时器本身。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要停止的定时器控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功停止定时器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- RT_ERROR&lt;/td&gt;
&lt;td&gt;timer 已经处于停止状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;控制定时器-control&#34;&gt;&lt;a href=&#34;#控制定时器-control&#34; class=&#34;headerlink&#34; title=&#34;控制定时器-control&#34;&gt;&lt;/a&gt;控制定时器-control&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_timer_control&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; cmd, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* arg)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timer&lt;/td&gt;
&lt;td&gt;定时器句柄，指向要停止的定时器控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmd&lt;/td&gt;
&lt;td&gt;用于控制定时器的命令，当前支持四个命令，分别是设置定时时间，查看定时时间，设置单次触发，设置周期触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arg&lt;/td&gt;
&lt;td&gt;与 cmd 相对应的控制命令参数 比如，cmd 为设定超时时间时，就可以将超时时间参数通过 arg 进行设定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;函数参数 cmd 支持的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_CTRL_SET_TIME      0x0     &lt;span class=&#34;hljs-comment&#34;&gt;/* 设置定时器超时时间       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_CTRL_GET_TIME      0x1     &lt;span class=&#34;hljs-comment&#34;&gt;/* 获得定时器超时时间       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_CTRL_SET_ONESHOT   0x2     &lt;span class=&#34;hljs-comment&#34;&gt;/* 设置定时器为单次定时器   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; RT_TIMER_CTRL_SET_PERIODIC  0x3     &lt;span class=&#34;hljs-comment&#34;&gt;/* 设置定时器为周期型定时器 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;API应用示例-1&#34;&gt;&lt;a href=&#34;#API应用示例-1&#34; class=&#34;headerlink&#34; title=&#34;API应用示例&#34;&gt;&lt;/a&gt;API应用示例&lt;/h2&gt;&lt;p&gt;这是一个创建定时器的例子，这个例程会创建两个动态定时器，一个是单次定时，一个是周期性定时并让周期定时器运行一段时间后停止运行，如下所示：周期性定时器 1 的超时函数，每 10 个 OS Tick 运行 1 次，共运行 10 次（10 次后调用 rt_timer_stop 使定时器 1 停止运行）；单次定时器 2 的超时函数在第 30 个 OS Tick 时运行一次。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器的控制块 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer1;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_timer_t&lt;/span&gt; timer2;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器 1 超时函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timeout1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;periodic timer is timeout %d\n&amp;quot;&lt;/span&gt;, cnt);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 运行第 10 次，停止周期定时器 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (cnt++&amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_timer_stop(timer1);&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;periodic timer was stopped! \n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器 2 超时函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timeout2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;one shot timer is timeout\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timer_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建定时器 1  周期定时器 */&lt;/span&gt;&lt;br&gt;    timer1 = rt_timer_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;timer1&amp;quot;&lt;/span&gt;, timeout1,&lt;br&gt;                             RT_NULL, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;br&gt;                             RT_TIMER_FLAG_PERIODIC);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 启动定时器 1 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (timer1 != RT_NULL) rt_timer_start(timer1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建定时器 2 单次定时器 */&lt;/span&gt;&lt;br&gt;    timer2 = rt_timer_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;timer2&amp;quot;&lt;/span&gt;, timeout2,&lt;br&gt;                             RT_NULL,  &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;br&gt;                             RT_TIMER_FLAG_ONE_SHOT);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 启动定时器 2 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (timer2 != RT_NULL) rt_timer_start(timer2);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(timer_sample, timer sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight applescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs applescript&#34;&gt; \ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;timer_sample&lt;br&gt;msh &amp;gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;one shot timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;periodic timer was stopped!&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;初始化定时器的例子与创建定时器的例子类似，这个程序会初始化 2 个静态定时器，一个是单次定时，一个是周期性的定时，如下代码所示：周期性定时器 1 的超时函数，每 10 个 OS Tick 运行 1 次，共运行 10 次（10 次后调用 rt_timer_stop 使定时器 1 停止运行）；单次定时器 2 的超时函数在第 30 个 OS Tick 时运行一次。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器的控制块 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_timer&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;timer1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_timer&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;timer2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器 1 超时函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timeout1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;periodic timer is timeout\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 运行 10 次 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (cnt++&amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_timer_stop(&amp;amp;timer1);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器 2 超时函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timeout2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;one shot timer is timeout\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timer_static_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化定时器 */&lt;/span&gt;&lt;br&gt;    rt_timer_init(&amp;amp;timer1, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;timer1&amp;quot;&lt;/span&gt;,  &lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器名字是 timer1 */&lt;/span&gt;&lt;br&gt;                    timeout1, &lt;span class=&#34;hljs-comment&#34;&gt;/* 超时时回调的处理函数 */&lt;/span&gt;&lt;br&gt;                    RT_NULL, &lt;span class=&#34;hljs-comment&#34;&gt;/* 超时函数的入口参数 */&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;/* 定时长度，以 OS Tick 为单位，即 10 个 OS Tick */&lt;/span&gt;&lt;br&gt;                    RT_TIMER_FLAG_PERIODIC); &lt;span class=&#34;hljs-comment&#34;&gt;/* 周期性定时器 */&lt;/span&gt;&lt;br&gt;    rt_timer_init(&amp;amp;timer2, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;timer2&amp;quot;&lt;/span&gt;,   &lt;span class=&#34;hljs-comment&#34;&gt;/* 定时器名字是 timer2 */&lt;/span&gt;&lt;br&gt;                    timeout2, &lt;span class=&#34;hljs-comment&#34;&gt;/* 超时时回调的处理函数 */&lt;/span&gt;&lt;br&gt;                      RT_NULL, &lt;span class=&#34;hljs-comment&#34;&gt;/* 超时函数的入口参数 */&lt;/span&gt;&lt;br&gt;                      &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;hljs-comment&#34;&gt;/* 定时长度为 30 个 OS Tick */&lt;/span&gt;&lt;br&gt;                    RT_TIMER_FLAG_ONE_SHOT); &lt;span class=&#34;hljs-comment&#34;&gt;/* 单次定时器 */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 启动定时器 */&lt;/span&gt;&lt;br&gt;    rt_timer_start(&amp;amp;timer1);&lt;br&gt;    rt_timer_start(&amp;amp;timer2);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(timer_static_sample, timer_static sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight applescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs applescript&#34;&gt;\ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;timer_static_sample&lt;br&gt;msh &amp;gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;one shot timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;periodic timer &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;timeout&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;低于一个Tick的延时&#34;&gt;&lt;a href=&#34;#低于一个Tick的延时&#34; class=&#34;headerlink&#34; title=&#34;低于一个Tick的延时&#34;&gt;&lt;/a&gt;低于一个Tick的延时&lt;/h2&gt;&lt;p&gt;入口参数 us 指示出需要延时的微秒数目，这个函数只能支持低于 1 OS Tick 的延时，否则 SysTick 会出现溢出而不能够获得指定的延时时间。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;board.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_us_delay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; us)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; delta;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 获得延时经过的 tick 数 */&lt;/span&gt;&lt;br&gt;    us = us * (SysTick-&amp;gt;LOAD/(&lt;span class=&#34;hljs-number&#34;&gt;1000000&lt;/span&gt;/RT_TICK_PER_SECOND));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 获得当前时间 */&lt;/span&gt;&lt;br&gt;    delta = SysTick-&amp;gt;VAL;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 循环获得当前时间，直到达到指定的时间后退出循环 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (delta - SysTick-&amp;gt;VAL&amp;lt; us);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;笔记-1&#34;&gt;&lt;a href=&#34;#笔记-1&#34; class=&#34;headerlink&#34; title=&#34;笔记&#34;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;时钟节拍是特定的周期性中断，这个中断可以看做是系统心跳，中断之间的时间间隔取决于不同的应用，一般是 1ms–100ms，时钟节拍率越快，系统的额外开销就越大，从系统启动开始计数的时钟节拍数称为系统时间。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程间同步&#34;&gt;&lt;a href=&#34;#线程间同步&#34; class=&#34;headerlink&#34; title=&#34;线程间同步&#34;&gt;&lt;/a&gt;线程间同步&lt;/h1&gt;&lt;p&gt;线程的同步方式有很多种，其核心思想都是：&lt;strong&gt;在访问临界区的时候只允许一个 (或一类) 线程运行。&lt;/strong&gt;进入 &amp;#x2F; 退出临界区的方式有很多种：&lt;/p&gt;
&lt;p&gt;1）调用 rt_hw_interrupt_disable() 进入临界区，调用 rt_hw_interrupt_enable() 退出临界区；详见《中断管理》的全局中断开关内容。&lt;/p&gt;
&lt;p&gt;2）调用 rt_enter_critical() 进入临界区，调用 rt_exit_critical() 退出临界区。&lt;/p&gt;
&lt;h2 id=&#34;信号量Semaphore&#34;&gt;&lt;a href=&#34;#信号量Semaphore&#34; class=&#34;headerlink&#34; title=&#34;信号量Semaphore&#34;&gt;&lt;/a&gt;信号量Semaphore&lt;/h2&gt;&lt;p&gt;信号量的值对应了信号量对象的实例数目、资源数目，假如信号量值为 5，则表示共有 5 个信号量实例（资源）可以被使用，当信号量实例数目为零时，再申请该信号量的线程就会被挂起在该信号量的等待队列上，等待可用的信号量实例（资源）。&lt;/p&gt;
&lt;p&gt;可以形成&lt;strong&gt;锁&lt;/strong&gt;、&lt;strong&gt;同步&lt;/strong&gt;、&lt;strong&gt;资源计数&lt;/strong&gt;等关系，也能方便的用于&lt;strong&gt;线程与线程&lt;/strong&gt;、&lt;strong&gt;中断与线程&lt;/strong&gt;间的同步中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06sem_work.png&#34; alt=&#34;信号量工作示意图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Semaphore-API&#34;&gt;&lt;a href=&#34;#Semaphore-API&#34; class=&#34;headerlink&#34; title=&#34;Semaphore API&#34;&gt;&lt;/a&gt;Semaphore API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06sem_ops.png&#34; alt=&#34;信号量相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建和删除信号量-create&#34;&gt;&lt;a href=&#34;#创建和删除信号量-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除信号量-create&#34;&gt;&lt;/a&gt;创建和删除信号量-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; value,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当选择 RT_IPC_FLAG_FIFO（先进先出）方式时，那么等待线程队列将按照先进先出的方式排队，先进入的线程将先获得等待的信号量；&lt;/p&gt;
&lt;p&gt;当选择 RT_IPC_FLAG_PRIO（优先级等待）方式时，等待线程队列将按照优先级进行排队，优先级高的等待线程将先获得等待的信号量。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;信号量名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;信号量初始值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;信号量标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信号量的控制块指针&lt;/td&gt;
&lt;td&gt;创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; sem)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果删除该信号量时，有线程正在等待该信号量，那么删除操作会先唤醒等待在该信号量上的线程（等待线程的返回值是 - RT_ERROR），然后再释放信号量的内存资源。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;rt_sem_create() 创建的信号量对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离信号量-init&#34;&gt;&lt;a href=&#34;#初始化和脱离信号量-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离信号量-init&#34;&gt;&lt;/a&gt;初始化和脱离信号量-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt;       sem,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;     *name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;    value,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt;     flag)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;flag见上↑&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;信号量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;信号量名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;信号量初始值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;信号量标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;初始化成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; sem)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用该函数后，内核先唤醒所有挂在该信号量等待队列上的线程，然后将该信号量从内核对象管理器中脱离。原来挂起在信号量上的等待线程将获得 - RT_ERROR 的返回值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;信号量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;脱离成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;获取信号量-take&#34;&gt;&lt;a href=&#34;#获取信号量-take&#34; class=&#34;headerlink&#34; title=&#34;获取信号量-take&#34;&gt;&lt;/a&gt;获取信号量-take&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_take&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; sem, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; time)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;信号量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;指定的等待时间，单位是操作系统时钟节拍（OS Tick），或者RT_WAITING_FOREVER永远等待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功获得信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时依然未获得信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;其他错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;无等待获取信号量-trytake&#34;&gt;&lt;a href=&#34;#无等待获取信号量-trytake&#34; class=&#34;headerlink&#34; title=&#34;无等待获取信号量-trytake&#34;&gt;&lt;/a&gt;无等待获取信号量-trytake&lt;/h3&gt;&lt;p&gt;当用户不想在申请的信号量上挂起线程进行等待时，可以使用无等待方式获取信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_trytake&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; sem)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个函数与 rt_sem_take(sem, 0) 的作用相同，即当线程申请的信号量资源实例不可用的时候，它不会等待在该信号量上，而是直接返回 - RT_ETIMEOUT。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;信号量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功获得信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;获取失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;释放信号量-release&#34;&gt;&lt;a href=&#34;#释放信号量-release&#34; class=&#34;headerlink&#34; title=&#34;释放信号量-release&#34;&gt;&lt;/a&gt;释放信号量-release&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_sem_release&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; sem)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例如当信号量的值等于零时，并且有线程等待这个信号量时，释放信号量将唤醒等待在该信号量线程队列中的第一个线程，由它获取信号量；否则将把信号量的值加 1。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;sem&lt;/td&gt;
&lt;td&gt;信号量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功释放信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;信号量应用示例&#34;&gt;&lt;a href=&#34;#信号量应用示例&#34; class=&#34;headerlink&#34; title=&#34;信号量应用示例&#34;&gt;&lt;/a&gt;信号量应用示例&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;动态信号量的使用&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY         25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE        5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 指向信号量的指针 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_sem_t&lt;/span&gt; dynamic_sem = RT_NULL;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(count &amp;lt;= &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;        &amp;#123;&lt;br&gt;            count++;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* count 每计数 10 次，就释放一次信号量 */&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; == (count % &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;))&lt;br&gt;        &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t1 release a dynamic semaphore.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            rt_sem_release(dynamic_sem);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread2_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; number = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 永久方式等待信号量，获取到信号量，则执行 number 自加的操作 */&lt;/span&gt;&lt;br&gt;        result = rt_sem_take(dynamic_sem, RT_WAITING_FOREVER);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;        &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t2 take a dynamic semaphore, failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            rt_sem_delete(dynamic_sem);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;        &amp;#123;&lt;br&gt;            number++;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t2 take a dynamic semaphore. number = %d\n&amp;quot;&lt;/span&gt; ,number);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 信号量示例的初始化 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;semaphore_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建一个动态信号量，初始值是 0 */&lt;/span&gt;&lt;br&gt;    dynamic_sem = rt_sem_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dsem&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, RT_IPC_FLAG_FIFO);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (dynamic_sem == RT_NULL)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create dynamic semaphore failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create done. dynamic semaphore value = 0.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread1,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                   rt_thread1_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread1_stack),&lt;br&gt;                   THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread1);&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   rt_thread2_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack),&lt;br&gt;                   THREAD_PRIORITY&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(semaphore_sample, semaphore sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight livecodeserver&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs livecodeserver&#34;&gt; \ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;semaphore_sample&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;create&lt;/span&gt; done. dynamic semaphore &lt;span class=&#34;hljs-built_in&#34;&gt;value&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;0.&lt;/span&gt;&lt;br&gt;msh &amp;gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;t1 release &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore.&lt;br&gt;t2 take &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; dynamic semaphore. &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;信号量锁的作用，生产者消费者例程&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY       6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_STACK_SIZE     512&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE      5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 定义最大 5 个元素能够被产生 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; MAXSEM 5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 用于放置生产的整数数组 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;array&lt;/span&gt;[MAXSEM];&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 指向生产者、消费者在 array 数组中的读写位置 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;, get;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 指向线程控制块的指针 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; producer_tid = RT_NULL;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; consumer_tid = RT_NULL;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_semaphore&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sem_lock&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_semaphore&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;sem_empty&lt;/span&gt;, &lt;span class=&#34;hljs-title&#34;&gt;sem_full&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 生产者线程入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;producer_thread_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 运行 10 次 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (cnt &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 获取一个空位 */&lt;/span&gt;&lt;br&gt;        rt_sem_take(&amp;amp;sem_empty, RT_WAITING_FOREVER);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 修改 array 内容，上锁 */&lt;/span&gt;&lt;br&gt;        rt_sem_take(&amp;amp;sem_lock, RT_WAITING_FOREVER);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;array&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; % MAXSEM] = cnt + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the producer generates a number: %d\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;array&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; % MAXSEM]);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;++;&lt;br&gt;        rt_sem_release(&amp;amp;sem_lock);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 发布一个满位 */&lt;/span&gt;&lt;br&gt;        rt_sem_release(&amp;amp;sem_full);&lt;br&gt;        cnt++;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 暂停一段时间 */&lt;/span&gt;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the producer exit!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 消费者线程入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;consumer_thread_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; sum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 获取一个满位 */&lt;/span&gt;&lt;br&gt;        rt_sem_take(&amp;amp;sem_full, RT_WAITING_FOREVER);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 临界区，上锁进行操作 */&lt;/span&gt;&lt;br&gt;        rt_sem_take(&amp;amp;sem_lock, RT_WAITING_FOREVER);&lt;br&gt;        sum += &lt;span class=&#34;hljs-built_in&#34;&gt;array&lt;/span&gt;[get % MAXSEM];&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the consumer[%d] get a number: %d\n&amp;quot;&lt;/span&gt;, (get % MAXSEM), &lt;span class=&#34;hljs-built_in&#34;&gt;array&lt;/span&gt;[get % MAXSEM]);&lt;br&gt;        get++;&lt;br&gt;        rt_sem_release(&amp;amp;sem_lock);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 释放一个空位 */&lt;/span&gt;&lt;br&gt;        rt_sem_release(&amp;amp;sem_empty);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 生产者生产到 10 个数目，停止，消费者线程相应停止 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (get == &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 暂停一小会时间 */&lt;/span&gt;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the consumer sum is: %d\n&amp;quot;&lt;/span&gt;, sum);&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the consumer exit!\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;producer_consumer&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    get = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化 3 个信号量 */&lt;/span&gt;&lt;br&gt;    rt_sem_init(&amp;amp;sem_lock, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lock&amp;quot;&lt;/span&gt;,     &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,      RT_IPC_FLAG_FIFO);&lt;br&gt;    rt_sem_init(&amp;amp;sem_empty, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;,   MAXSEM, RT_IPC_FLAG_FIFO);&lt;br&gt;    rt_sem_init(&amp;amp;sem_full, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;full&amp;quot;&lt;/span&gt;,     &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,      RT_IPC_FLAG_FIFO);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建生产者线程 */&lt;/span&gt;&lt;br&gt;    producer_tid = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;producer&amp;quot;&lt;/span&gt;,&lt;br&gt;                                    producer_thread_entry, RT_NULL,&lt;br&gt;                                    THREAD_STACK_SIZE,&lt;br&gt;                                    THREAD_PRIORITY - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;                                    THREAD_TIMESLICE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (producer_tid != RT_NULL)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_thread_startup(producer_tid);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create thread producer failed&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建消费者线程 */&lt;/span&gt;&lt;br&gt;    consumer_tid = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;consumer&amp;quot;&lt;/span&gt;,&lt;br&gt;                                    consumer_thread_entry, RT_NULL,&lt;br&gt;                                    THREAD_STACK_SIZE,&lt;br&gt;                                    THREAD_PRIORITY + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;                                    THREAD_TIMESLICE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (consumer_tid != RT_NULL)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_thread_startup(consumer_tid);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create thread consumer failed&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(producer_consumer, producer_consumer sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight livecodeserver&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs livecodeserver&#34;&gt;\ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;producer_consumer&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;msh &amp;gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer generates &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; producer exit!&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;] &lt;span class=&#34;hljs-built_in&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer &lt;span class=&#34;hljs-built_in&#34;&gt;sum&lt;/span&gt; is: &lt;span class=&#34;hljs-number&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;the&lt;/span&gt; consumer exit!&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;互斥量-Mutex&#34;&gt;&lt;a href=&#34;#互斥量-Mutex&#34; class=&#34;headerlink&#34; title=&#34;互斥量 Mutex&#34;&gt;&lt;/a&gt;互斥量 Mutex&lt;/h2&gt;&lt;p&gt;互斥量又叫相互排斥的信号量，是一种特殊的二值信号量。&lt;/p&gt;
&lt;p&gt;互斥量和信号量不同的是：拥有互斥量的线程拥有互斥量的所有权，互斥量支持递归访问且能防止线程优先级翻转；并且互斥量只能由持有线程释放，而信号量则可以由任何线程释放。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06mutex_work.png&#34; alt=&#34;互斥量工作示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;线程优先级翻转如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06priority_inversion.png&#34; alt=&#34;优先级反转 (M 为信号量)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06priority_inherit.png&#34; alt=&#34;优先级继承 (M 为互斥量)&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;互斥量API&#34;&gt;&lt;a href=&#34;#互斥量API&#34; class=&#34;headerlink&#34; title=&#34;互斥量API&#34;&gt;&lt;/a&gt;互斥量API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06mutex_ops.png&#34; alt=&#34;互斥量相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建和删除互斥量-create&#34;&gt;&lt;a href=&#34;#创建和删除互斥量-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除互斥量-create&#34;&gt;&lt;/a&gt;创建和删除互斥量-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_create&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;互斥量的 flag 标志设置为 RT_IPC_FLAG_PRIO，表示在多个线程等待资源时，将由优先级高的线程优先获得资源。flag 设置为 RT_IPC_FLAG_FIFO，表示在多个线程等待资源时，将按照先来先得的顺序获得资源。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;互斥量的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;互斥量标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;互斥量句柄&lt;/td&gt;
&lt;td&gt;创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_delete&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当删除一个互斥量时，所有等待此互斥量的线程都将被唤醒，等待线程获得的返回值是 - RT_ERROR。然后系统将该互斥量从内核对象管理器链表中删除并释放互斥量占用的内存空间。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mutex&lt;/td&gt;
&lt;td&gt;互斥量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离互斥量-init&#34;&gt;&lt;a href=&#34;#初始化和脱离互斥量-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离互斥量-init&#34;&gt;&lt;/a&gt;初始化和脱离互斥量-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_init&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;flag见上&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mutex&lt;/td&gt;
&lt;td&gt;互斥量对象的句柄，它由用户提供，并指向互斥量对象的内存块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;互斥量的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;互斥量标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;初始化成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_detach&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用该函数接口后，内核先唤醒所有挂在该互斥量上的线程（线程的返回值是 -RT_ERROR），然后系统将该互斥量从内核对象管理器中脱离。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mutex&lt;/td&gt;
&lt;td&gt;互斥量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;获取互斥量-take&#34;&gt;&lt;a href=&#34;#获取互斥量-take&#34; class=&#34;headerlink&#34; title=&#34;获取互斥量-take&#34;&gt;&lt;/a&gt;获取互斥量-take&lt;/h3&gt;&lt;p&gt;线程获取了互斥量，那么线程就有了对该互斥量的所有权，即某一个时刻一个互斥量只能被一个线程持有。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_take&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; time)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果互斥量没有被其他线程控制，那么申请该互斥量的线程将成功获得该互斥量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果互斥量已经被当前线程线程控制，则该互斥量的持有计数加 1，当前线程也不会挂起等待。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果互斥量已经被其他线程占有，则当前线程在该互斥量上挂起等待，直到其他线程释放它或者等待时间超过指定的超时时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mutex&lt;/td&gt;
&lt;td&gt;互斥量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;指定等待的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功获得互斥量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;获取失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;释放互斥量-release&#34;&gt;&lt;a href=&#34;#释放互斥量-release&#34; class=&#34;headerlink&#34; title=&#34;释放互斥量-release&#34;&gt;&lt;/a&gt;释放互斥量-release&lt;/h3&gt;&lt;p&gt;当线程完成互斥资源的访问后，应尽快释放它占据的互斥量，使得其他线程能及时获取该互斥量。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mutex_release&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;只有已经拥有互斥量控制权的线程才能释放它，每释放一次该互斥量，它的持有计数就减 1。&lt;/li&gt;
&lt;li&gt;当该互斥量的持有计数为零时（即持有线程已经释放所有的持有操作），它变为可用，等待在该信号量上的线程将被唤醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mutex&lt;/td&gt;
&lt;td&gt;互斥量对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;互斥量应用示例&#34;&gt;&lt;a href=&#34;#互斥量应用示例&#34; class=&#34;headerlink&#34; title=&#34;互斥量应用示例&#34;&gt;&lt;/a&gt;互斥量应用示例&lt;/h2&gt;&lt;p&gt;这是一个互斥量的应用例程，互斥锁是一种保护共享资源的方法。当一个线程拥有互斥锁的时候，可以保护共享资源不被其他线程破坏。下面用一个例子来说明，有两个线程：线程 1 和线程 2，线程 1 对 2 个 number 分别进行加 1 操作；线程 2 也对 2 个 number 分别进行加 1 操作，使用互斥量保证线程改变 2 个 number 值的操作不被打断。如下代码所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互斥量例程&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY         8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE        5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 指向互斥量的指针 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; dynamic_mutex = RT_NULL;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; number1,number2 = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_entry1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;      &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 获取到互斥量后，先后对 number1、number2 进行加 1 操作，然后释放互斥量 */&lt;/span&gt;&lt;br&gt;          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);&lt;br&gt;          number1++;&lt;br&gt;          rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;);&lt;br&gt;          number2++;&lt;br&gt;          rt_mutex_release(dynamic_mutex);&lt;br&gt;       &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_entry2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;      &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 获取到互斥量后，检查 number1、number2 的值是否相同，相同则表示 mutex 起到了锁的作用 */&lt;/span&gt;&lt;br&gt;          rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(number1 != number2)&lt;br&gt;          &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;not protect.number1 = %d, mumber2 = %d \n&amp;quot;&lt;/span&gt;,number1 ,number2);&lt;br&gt;          &amp;#125;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;          &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mutex protect ,number1 = mumber2 is %d\n&amp;quot;&lt;/span&gt;,number1);&lt;br&gt;          &amp;#125;&lt;br&gt;&lt;br&gt;           number1++;&lt;br&gt;           number2++;&lt;br&gt;           rt_mutex_release(dynamic_mutex);&lt;br&gt;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(number1&amp;gt;=&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;)&lt;br&gt;              &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;      &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 互斥量示例的初始化 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;mutex_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建一个动态互斥量 */&lt;/span&gt;&lt;br&gt;    dynamic_mutex = rt_mutex_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dmutex&amp;quot;&lt;/span&gt;, RT_IPC_FLAG_FIFO);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (dynamic_mutex == RT_NULL)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create dynamic mutex failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread1,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                   rt_thread_entry1,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread1_stack),&lt;br&gt;                   THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread1);&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   rt_thread_entry2,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack),&lt;br&gt;                   THREAD_PRIORITY&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 MSH 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(mutex_sample, mutex sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;线程 1 与线程 2 中均使用互斥量保护对 2 个 number 的操作（倘若将线程 1 中的获取、释放互斥量语句注释掉，线程 1 将对 number 不再做保护），仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight livescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;\&lt;/span&gt; | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | &lt;span class=&#34;hljs-string&#34;&gt;\&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;mutex_sample&lt;br&gt;msh &amp;gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;…&lt;br&gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;48&lt;/span&gt;&lt;br&gt;mutex protect ,number1 = mumber2 &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;线程使用互斥量保护对两个 number 的操作，使 number 值保持一致。&lt;/p&gt;
&lt;p&gt;互斥量的另一个例子见下面的代码，这个例子将创建 3 个动态线程以检查持有互斥量时，持有的线程优先级是否被调整到等待线程优先级中的最高优先级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防止优先级翻转特性例程&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 指向线程控制块的指针 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid1 = RT_NULL;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid2 = RT_NULL;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid3 = RT_NULL;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_mutex_t&lt;/span&gt; mutex = RT_NULL;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY       10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_STACK_SIZE     512&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE    5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 先让低优先级线程运行 */&lt;/span&gt;&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 此时 thread3 持有 mutex，并且 thread2 等待持有 mutex */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 检查 thread2 与 thread3 的优先级情况 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid2-&amp;gt;current_priority != tid3-&amp;gt;current_priority)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 优先级不相同，测试失败 */&lt;/span&gt;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread2 is: %d\n&amp;quot;&lt;/span&gt;, tid2-&amp;gt;current_priority);&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread3 is: %d\n&amp;quot;&lt;/span&gt;, tid3-&amp;gt;current_priority);&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread2 is: %d\n&amp;quot;&lt;/span&gt;, tid2-&amp;gt;current_priority);&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread3 is: %d\n&amp;quot;&lt;/span&gt;, tid3-&amp;gt;current_priority);&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test OK.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread2_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread2 is: %d\n&amp;quot;&lt;/span&gt;, tid2-&amp;gt;current_priority);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 先让低优先级线程运行 */&lt;/span&gt;&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 试图持有互斥锁，此时 thread3 持有，应把 thread3 的优先级提升&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 到 thread2 相同的优先级&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    result = rt_mutex_take(mutex, RT_WAITING_FOREVER);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result == RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 释放互斥锁 */&lt;/span&gt;&lt;br&gt;        rt_mutex_release(mutex);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 3 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread3_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_tick_t&lt;/span&gt; tick;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the priority of thread3 is: %d\n&amp;quot;&lt;/span&gt;, tid3-&amp;gt;current_priority);&lt;br&gt;&lt;br&gt;    result = rt_mutex_take(mutex, RT_WAITING_FOREVER);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread3 take a mutex, failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 做一个长时间的循环，500ms */&lt;/span&gt;&lt;br&gt;    tick = rt_tick_get();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (rt_tick_get() - tick &amp;lt; (RT_TICK_PER_SECOND / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)) ;&lt;br&gt;&lt;br&gt;    rt_mutex_release(mutex);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;pri_inversion&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建互斥锁 */&lt;/span&gt;&lt;br&gt;    mutex = rt_mutex_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mutex&amp;quot;&lt;/span&gt;, RT_IPC_FLAG_FIFO);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (mutex == RT_NULL)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;create dynamic mutex failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建线程 1 */&lt;/span&gt;&lt;br&gt;    tid1 = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                            thread1_entry,&lt;br&gt;                            RT_NULL,&lt;br&gt;                            THREAD_STACK_SIZE,&lt;br&gt;                            THREAD_PRIORITY - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid1 != RT_NULL)&lt;br&gt;         rt_thread_startup(tid1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建线程 2 */&lt;/span&gt;&lt;br&gt;    tid2 = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                            thread2_entry,&lt;br&gt;                            RT_NULL,&lt;br&gt;                            THREAD_STACK_SIZE,&lt;br&gt;                            THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid2 != RT_NULL)&lt;br&gt;        rt_thread_startup(tid2);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建线程 3 */&lt;/span&gt;&lt;br&gt;    tid3 = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread3&amp;quot;&lt;/span&gt;,&lt;br&gt;                            thread3_entry,&lt;br&gt;                            RT_NULL,&lt;br&gt;                            THREAD_STACK_SIZE,&lt;br&gt;                            THREAD_PRIORITY + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid3 != RT_NULL)&lt;br&gt;        rt_thread_startup(tid3);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(pri_inversion, prio_inversion sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight subunit&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs subunit&#34;&gt;\ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     3.1.0 build Aug 27 2018&lt;br&gt; 2006 - 2018 Copyright by rt-thread team&lt;br&gt;msh &amp;gt;pri_inversion&lt;br&gt;the priority of thread2 is: 10&lt;br&gt;the priority of thread3 is: 11&lt;br&gt;the priority of thread2 is: 10&lt;br&gt;the priority of thread3 is: 10&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;test &lt;/span&gt;OK.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;事件集Event&#34;&gt;&lt;a href=&#34;#事件集Event&#34; class=&#34;headerlink&#34; title=&#34;事件集Event&#34;&gt;&lt;/a&gt;事件集Event&lt;/h2&gt;&lt;p&gt;一个事件集可以包含多个事件，利用事件集可以完成&lt;strong&gt;一对多&lt;/strong&gt;，&lt;strong&gt;多对多&lt;/strong&gt;，&lt;strong&gt;多对一&lt;/strong&gt;的线程间同步。&lt;/p&gt;
&lt;p&gt;这种多个事件的集合可以用一个 32 位无符号整型变量来表示，变量的每一位代表一个事件，线程通过 “逻辑与” 或“逻辑或”将一个或多个事件关联起来，形成事件组合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件的 “逻辑或” 也称为是独立型同步，指的是线程与任何事件之一发生同步；&lt;/li&gt;
&lt;li&gt;事件 “逻辑与” 也称为是关联型同步，指的是线程与若干事件都发生同步。&lt;/li&gt;
&lt;li&gt;事件只与线程相关，事件间相互独立：每个线程可拥有 32 个事件标志，采用一个 32 bit 无符号整型数进行记录，每一个 bit 代表一个事件；&lt;/li&gt;
&lt;li&gt;事件仅用于同步，不提供数据传输功能；&lt;/li&gt;
&lt;li&gt;事件无排队性，即多次向线程发送同一事件 (如果线程还未来得及读走)，其效果等同于只发送一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06event_work.png&#34; alt=&#34;事件集工作示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;线程 #1 的事件标志中第 1 位和第 30 位被置位，如果事件信息标记位设为逻辑与，则表示线程 #1 只有在事件 1 和事件 30 都发生以后才会被触发唤醒，如果事件信息标记位设为逻辑或，则事件 1 或事件 30 中的任意一个发生都会触发唤醒线程 #1。如果信息标记同时设置了清除标记位，则当线程 #1 唤醒后将主动把事件 1 和事件 30 清为零，否则事件标志将依然存在（即置 1）。&lt;/p&gt;
&lt;h3 id=&#34;事件集API&#34;&gt;&lt;a href=&#34;#事件集API&#34; class=&#34;headerlink&#34; title=&#34;事件集API&#34;&gt;&lt;/a&gt;事件集API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/06event_ops.png&#34; alt=&#34;事件相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建和删除事件集-create&#34;&gt;&lt;a href=&#34;#创建和删除事件集-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除事件集-create&#34;&gt;&lt;/a&gt;创建和删除事件集-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;事件集的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;事件集的标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事件对象的句柄&lt;/td&gt;
&lt;td&gt;创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; event)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在删除前会唤醒所有挂起在该事件集上的线程（线程的返回值是 - RT_ERROR），然后释放事件集对象占用的内存块。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;事件集对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离事件集-init&#34;&gt;&lt;a href=&#34;#初始化和脱离事件集-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离事件集-init&#34;&gt;&lt;/a&gt;初始化和脱离事件集-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; event, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;事件集对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;事件集的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;事件集的标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; event)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用户调用这个函数时，系统首先唤醒所有挂在该事件集等待队列上的线程（线程的返回值是 - RT_ERROR），然后将该事件集从内核对象管理器中脱离。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;事件集对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;发送事件-send&#34;&gt;&lt;a href=&#34;#发送事件-send&#34; class=&#34;headerlink&#34; title=&#34;发送事件-send&#34;&gt;&lt;/a&gt;发送事件-send&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_send&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; event, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用该函数接口时，通过参数 set 指定的事件标志来设定 event 事件集对象的事件标志值，然后遍历等待在 event 事件集对象上的等待线程链表，判断是否有线程的事件激活要求与当前 event 对象事件标志值匹配，如果有，则唤醒该线程。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;事件集对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;发送的一个或多个事件的标志值,它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;接收事件-recv&#34;&gt;&lt;a href=&#34;#接收事件-recv&#34; class=&#34;headerlink&#34; title=&#34;接收事件-recv&#34;&gt;&lt;/a&gt;接收事件-recv&lt;/h3&gt;&lt;p&gt;内核使用 32 位的无符号整数来标识事件集，它的每一位代表一个事件，因此一个事件集对象可同时等待接收 32 个事件.&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_event_recv&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_event_t&lt;/span&gt; event,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; option,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; timeout,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                           &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;* recved)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当用户调用这个接口时，系统首先根据 set 参数和接收选项 option 来判断它要接收的事件是否发生，如果已经发生，则根据参数 option 上是否设置有 RT_EVENT_FLAG_CLEAR 来决定是否重置事件的相应标志位，然后返回（其中 recved 参数返回接收到的事件）；如果没有发生，则把等待的 set 和 option 参数填入线程本身的结构中，然后把线程挂起在此事件上，直到其等待的事件满足条件或等待时间超过指定的超时时间。如果超时时间设置为零，则表示当线程要接受的事件没有满足其要求时就不等待，而直接返回 - RT_ETIMEOUT。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;事件集对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;接收线程感兴趣的事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;option&lt;/td&gt;
&lt;td&gt;接收选项 &lt;strong&gt;可取值见下&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;指定超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recved&lt;/td&gt;
&lt;td&gt;指向接收到的事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;option 的值可取：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 选择 逻辑与 或 逻辑或 的方式接收事件 */&lt;/span&gt;&lt;br&gt;RT_EVENT_FLAG_OR&lt;br&gt;RT_EVENT_FLAG_AND&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 选择清除重置事件标志位 */&lt;/span&gt;&lt;br&gt;RT_EVENT_FLAG_CLEAR&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;事件集应用示例&#34;&gt;&lt;a href=&#34;#事件集应用示例&#34; class=&#34;headerlink&#34; title=&#34;事件集应用示例&#34;&gt;&lt;/a&gt;事件集应用示例&lt;/h2&gt;&lt;p&gt;这是事件集的应用例程，例子中初始化了一个事件集，两个线程。一个线程等待自己关心的事件发生，另外一个线程发送事件，如代码清单 6-5 例所示：&lt;/p&gt;
&lt;p&gt;事件集的使用例程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY      9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE     5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; EVENT_FLAG3 (1 &amp;lt;&amp;lt; 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; EVENT_FLAG5 (1 &amp;lt;&amp;lt; 5)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 事件控制块 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_event&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;event&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_recv_event&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *param)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; e;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 第一次接收事件，事件 3 或事件 5 任意一个可以触发线程 1，接收完后清除事件标志 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (rt_event_recv(&amp;amp;event, (EVENT_FLAG3 | EVENT_FLAG5),&lt;br&gt;                      RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR,&lt;br&gt;                      RT_WAITING_FOREVER, &amp;amp;e) == RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: OR recv event 0x%x\n&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: delay 1s to prepare the second event\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 第二次接收事件，事件 3 和事件 5 均发生时才可以触发线程 1，接收完后清除事件标志 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (rt_event_recv(&amp;amp;event, (EVENT_FLAG3 | EVENT_FLAG5),&lt;br&gt;                      RT_EVENT_FLAG_AND | RT_EVENT_FLAG_CLEAR,&lt;br&gt;                      RT_WAITING_FOREVER, &amp;amp;e) == RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: AND recv event 0x%x\n&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1 leave.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread2_send_event&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *param)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2: send event3\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    rt_event_send(&amp;amp;event, EVENT_FLAG3);&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2: send event5\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    rt_event_send(&amp;amp;event, EVENT_FLAG5);&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2: send event3\n&amp;quot;&lt;/span&gt;);&lt;br&gt;    rt_event_send(&amp;amp;event, EVENT_FLAG3);&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2 leave.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;event_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化事件对象 */&lt;/span&gt;&lt;br&gt;    result = rt_event_init(&amp;amp;event, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;event&amp;quot;&lt;/span&gt;, RT_IPC_FLAG_FIFO);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;init event failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread1,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread1_recv_event,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread1_stack),&lt;br&gt;                   THREAD_PRIORITY - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread1);&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread2_send_event,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack),&lt;br&gt;                   THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(event_sample, event sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt; \ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright by rt-thread team&lt;br&gt;msh &amp;gt;event_sample&lt;br&gt;thread2: send event3&lt;br&gt;thread1: OR recv event &lt;span class=&#34;hljs-number&#34;&gt;0x8&lt;/span&gt;&lt;br&gt;thread1: delay &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;s to prepare the second event&lt;br&gt;msh &amp;gt;thread2: send event5&lt;br&gt;thread2: send event3&lt;br&gt;thread2 leave.&lt;br&gt;thread1: AND recv event &lt;span class=&#34;hljs-number&#34;&gt;0x28&lt;/span&gt;&lt;br&gt;thread1 leave.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;笔记-2&#34;&gt;&lt;a href=&#34;#笔记-2&#34; class=&#34;headerlink&#34; title=&#34;笔记&#34;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;p&gt;Semaphore:值、数值&lt;/p&gt;
&lt;p&gt;Mutex:二值性、只能持有进程释放&lt;/p&gt;
&lt;p&gt;Event:32Bit、进行’’或’’和’’与’’操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在获得互斥量后，请尽快释放互斥量，并且在持有互斥量的过程中，不得再行更改持有互斥量线程的优先级。&lt;/li&gt;
&lt;li&gt;互斥量不能在中断服务例程中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程间通信&#34;&gt;&lt;a href=&#34;#线程间通信&#34; class=&#34;headerlink&#34; title=&#34;线程间通信&#34;&gt;&lt;/a&gt;线程间通信&lt;/h1&gt;&lt;h2 id=&#34;邮箱Mailbox&#34;&gt;&lt;a href=&#34;#邮箱Mailbox&#34; class=&#34;headerlink&#34; title=&#34;邮箱Mailbox&#34;&gt;&lt;/a&gt;邮箱Mailbox&lt;/h2&gt;&lt;p&gt;邮箱用于线程间通信，特点是开销比较低，效率较高。邮箱中的每一封邮件只能容纳固定的 4 字节内容（针对 32 位处理系统，指针的大小即为 4 个字节，所以一封邮件恰好能够容纳一个指针）。&lt;/p&gt;
&lt;p&gt;如下图所示，线程或中断服务例程把一封 4 字节长度的邮件发送到邮箱中，而一个或多个线程可以从邮箱中接收这些邮件并进行处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07mb_work.png&#34; alt=&#34;邮箱工作示意图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;邮箱API&#34;&gt;&lt;a href=&#34;#邮箱API&#34; class=&#34;headerlink&#34; title=&#34;邮箱API&#34;&gt;&lt;/a&gt;邮箱API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07mb_ops.png&#34; alt=&#34;邮箱相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建和删除邮箱-create&#34;&gt;&lt;a href=&#34;#创建和删除邮箱-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除邮箱-create&#34;&gt;&lt;/a&gt;创建和删除邮箱-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_create&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;邮箱名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;邮箱容量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;邮箱标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;td&gt;创建成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_delete&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;删除邮箱时，如果有线程被挂起在该邮箱对象上，内核先唤醒挂起在该邮箱上的所有线程（线程返回值是 - RT_ERROR），然后再释放邮箱使用的内存，最后删除邮箱对象。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离邮箱-init&#34;&gt;&lt;a href=&#34;#初始化和脱离邮箱-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离邮箱-init&#34;&gt;&lt;/a&gt;初始化和脱离邮箱-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                  &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                  &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* msgpool,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                  &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                  &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;邮箱名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msgpool&lt;/td&gt;
&lt;td&gt;缓冲区指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;邮箱容量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;邮箱标志，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;即如果 msgpool 指向的缓冲区的字节数是 N，那么邮箱容量应该是 N&amp;#x2F;4。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用该函数接口后，内核先唤醒所有挂在该邮箱上的线程（线程获得返回值是 - RT_ERROR），然后将该邮箱对象从内核对象管理器中脱离。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;发送邮件-send&#34;&gt;&lt;a href=&#34;#发送邮件-send&#34; class=&#34;headerlink&#34; title=&#34;发送邮件-send&#34;&gt;&lt;/a&gt;发送邮件-send&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_send&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; value)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发送的邮件可以是 32 位任意格式的数据，一个整型值或者一个指向缓冲区的指针。当邮箱中的邮件已经满时，发送邮件的线程或者中断程序会收到 -RT_EFULL 的返回值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;邮件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;发送成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EFULL&lt;/td&gt;
&lt;td&gt;邮箱已经满了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;等待方式发送邮件-wait-send&#34;&gt;&lt;a href=&#34;#等待方式发送邮件-wait-send&#34; class=&#34;headerlink&#34; title=&#34;等待方式发送邮件-wait send&#34;&gt;&lt;/a&gt;等待方式发送邮件-wait send&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_send_wait&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                      &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; value,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                      &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; timeout)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;rt_mb_send_wait() 与 rt_mb_send() 的区别在于有等待时间，如果邮箱已经满了，那么发送线程将根据设定的 timeout 参数等待邮箱中因为收取邮件而空出空间。如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;邮件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;发送成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败，返回错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;接收邮件-recv&#34;&gt;&lt;a href=&#34;#接收邮件-recv&#34; class=&#34;headerlink&#34; title=&#34;接收邮件-recv&#34;&gt;&lt;/a&gt;接收邮件-recv&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mb_recv&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mailbox_t&lt;/span&gt; mb, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;* value, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; timeout)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;邮箱对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;邮件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;发送成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败，返回错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;邮箱应用示例&#34;&gt;&lt;a href=&#34;#邮箱应用示例&#34; class=&#34;headerlink&#34; title=&#34;邮箱应用示例&#34;&gt;&lt;/a&gt;邮箱应用示例&lt;/h2&gt;&lt;p&gt;这是一个邮箱的应用例程，初始化 2 个静态线程，一个静态的邮箱对象，其中一个线程往邮箱中发送邮件，一个线程往邮箱中收取邮件。如下代码所示：&lt;/p&gt;
&lt;p&gt;邮箱的使用例程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY      10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE     5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 邮箱控制块 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_mailbox&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mb&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 用于放邮件的内存池 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; mb_pool[&lt;span class=&#34;hljs-number&#34;&gt;128&lt;/span&gt;];&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; mb_str1[] = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I&amp;#x27;m a mail!&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; mb_str2[] = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;this is another mail!&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; mb_str3[] = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;over&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *str;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: try to recv a mail\n&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 从邮箱中收取邮件 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (rt_mb_recv(&amp;amp;mb, (&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt; *)&amp;amp;str, RT_WAITING_FOREVER) == RT_EOK)&lt;br&gt;        &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: get a mail from mailbox, the content:%s\n&amp;quot;&lt;/span&gt;, str);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (str == mb_str3)&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;/* 延时 100ms */&lt;/span&gt;&lt;br&gt;            rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 执行邮箱对象脱离 */&lt;/span&gt;&lt;br&gt;    rt_mb_detach(&amp;amp;mb);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread2_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; count;&lt;br&gt;&lt;br&gt;    count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (count &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        count ++;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (count &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x1&lt;/span&gt;)&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送 mb_str1 地址到邮箱中 */&lt;/span&gt;&lt;br&gt;            rt_mb_send(&amp;amp;mb, (&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;)&amp;amp;mb_str1);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送 mb_str2 地址到邮箱中 */&lt;/span&gt;&lt;br&gt;            rt_mb_send(&amp;amp;mb, (&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;)&amp;amp;mb_str2);&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 延时 200ms */&lt;/span&gt;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送邮件告诉线程 1，线程 2 已经运行结束 */&lt;/span&gt;&lt;br&gt;    rt_mb_send(&amp;amp;mb, (&lt;span class=&#34;hljs-type&#34;&gt;rt_uint32_t&lt;/span&gt;)&amp;amp;mb_str3);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;mailbox_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化一个 mailbox */&lt;/span&gt;&lt;br&gt;    result = rt_mb_init(&amp;amp;mb,&lt;br&gt;                        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mbt&amp;quot;&lt;/span&gt;,                      &lt;span class=&#34;hljs-comment&#34;&gt;/* 名称是 mbt */&lt;/span&gt;&lt;br&gt;                        &amp;amp;mb_pool[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],                &lt;span class=&#34;hljs-comment&#34;&gt;/* 邮箱用到的内存池是 mb_pool */&lt;/span&gt;&lt;br&gt;                        &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(mb_pool) / &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,        &lt;span class=&#34;hljs-comment&#34;&gt;/* 邮箱中的邮件数目，因为一封邮件占 4 字节 */&lt;/span&gt;&lt;br&gt;                        RT_IPC_FLAG_FIFO);          &lt;span class=&#34;hljs-comment&#34;&gt;/* 采用 FIFO 方式进行线程等待 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;init mailbox failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread1,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread1_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread1_stack),&lt;br&gt;                   THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread1);&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread2_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack),&lt;br&gt;                   THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(mailbox_sample, mailbox sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight vbnet&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vbnet&#34;&gt; \ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt;mailbox_sample&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; recv a mail&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; a mail &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; mailbox, the content:I&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#x27;m a mail!&lt;/span&gt;&lt;br&gt;msh &amp;gt;thread1: &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; recv a mail&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; a mail &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; mailbox, the content:this &lt;span class=&#34;hljs-built_in&#34;&gt;is&lt;/span&gt; another mail!&lt;br&gt;…&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; recv a mail&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; a mail &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; mailbox, the content:this &lt;span class=&#34;hljs-built_in&#34;&gt;is&lt;/span&gt; another mail!&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; recv a mail&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; a mail &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; mailbox, the content:over&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;消息队列Messagequeue&#34;&gt;&lt;a href=&#34;#消息队列Messagequeue&#34; class=&#34;headerlink&#34; title=&#34;消息队列Messagequeue&#34;&gt;&lt;/a&gt;消息队列Messagequeue&lt;/h2&gt;&lt;p&gt;消息队列是另一种常用的线程间通讯方式，是邮箱的扩展(消息队列：不固定长度的消息)。可以应用在多种场合：线程间的消息交换、使用串口接收不定长数据等。&lt;/p&gt;
&lt;p&gt;线程或中断服务例程可以将一条或多条消息放入消息队列中。同样，一个或多个线程也可以从消息队列中获得消息。当有多个消息发送到消息队列时，通常将先进入消息队列的消息先传给线程，也就是说，线程先得到的是最先进入消息队列的消息，即先进先出原则 (FIFO)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息框含有消息头（用于链表连接）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07msg_work.png&#34; alt=&#34;消息队列工作示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;消息队列和邮箱的明显不同是消息的长度并不限定在 4 个字节以内；另外，消息队列也包括了一个发送紧急消息的函数接口。但是当创建的是一个所有消息的最大长度是 4 字节的消息队列时，消息队列对象将蜕化成邮箱。&lt;/p&gt;
&lt;h3 id=&#34;消息队列API&#34;&gt;&lt;a href=&#34;#消息队列API&#34; class=&#34;headerlink&#34; title=&#34;消息队列API&#34;&gt;&lt;/a&gt;消息队列API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07msg_ops.png&#34; alt=&#34;消息队列相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建和删除消息队列-create&#34;&gt;&lt;a href=&#34;#创建和删除消息队列-create&#34; class=&#34;headerlink&#34; title=&#34;创建和删除消息队列-create&#34;&gt;&lt;/a&gt;创建和删除消息队列-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; msg_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;            &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; max_msgs, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;消息队列内存的大小 &amp;#x3D;[消息大小+消息头（用于链表连接）的大小]X消息队列最大个数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;消息队列的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msg_size&lt;/td&gt;
&lt;td&gt;消息队列中一条消息的最大长度，单位字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max_msgs&lt;/td&gt;
&lt;td&gt;消息队列的最大个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;消息队列采用的等待方式，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;发送成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;删除消息队列时，如果有线程被挂起在该消息队列等待队列上，则内核先唤醒挂起在该消息等待队列上的所有线程（线程返回值是 - RT_ERROR），然后再释放消息队列使用的内存，最后删除消息队列对象。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化和脱离消息队列-init&#34;&gt;&lt;a href=&#34;#初始化和脱离消息队列-init&#34; class=&#34;headerlink&#34; title=&#34;初始化和脱离消息队列-init&#34;&gt;&lt;/a&gt;初始化和脱离消息队列-init&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *msgpool, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; msg_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; pool_size, &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; flag)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;消息队列的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msgpool&lt;/td&gt;
&lt;td&gt;指向存放消息的缓冲区的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msg_size&lt;/td&gt;
&lt;td&gt;消息队列中一条消息的最大长度，单位字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pool_size&lt;/td&gt;
&lt;td&gt;存放消息的缓冲区大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flag&lt;/td&gt;
&lt;td&gt;消息队列采用的等待方式，它可以取如下数值： RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用该函数接口后，内核先唤醒所有挂在该消息等待队列对象上的线程（线程返回值是 -RT_ERROR），然后将该消息队列对象从内核对象管理器中脱离。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;发送消息-send&#34;&gt;&lt;a href=&#34;#发送消息-send&#34; class=&#34;headerlink&#34; title=&#34;发送消息-send&#34;&gt;&lt;/a&gt;发送消息-send&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;或者&lt;strong&gt;中断服务程序&lt;/strong&gt;都可以给消息队列发送消息。当发送消息时，消息队列对象先从空闲消息链表上取下一个空闲消息块，把线程或者中断服务程序发送的消息内容复制到消息块上，然后把该消息块挂到消息队列的尾部。当且仅当空闲消息链表上有可用的空闲消息块时，发送者才能成功发送消息；当空闲消息链表上无可用消息块，说明消息队列已满，此时，发送消息的的线程或者中断程序会收到一个错误码（-RT_EFULL）。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_send&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* buffer, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发送消息时，发送者需指定发送的消息队列的对象句柄（即指向消息队列控制块的指针），并且指定发送的消息内容以及消息大小。如下图所示，在发送一个普通消息之后，空闲消息链表上的队首消息被转移到了消息队列尾。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;消息大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EFULL&lt;/td&gt;
&lt;td&gt;消息队列已满&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败，表示发送的消息长度大于消息队列中消息的最大长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;等待方式发送消息-wait&#34;&gt;&lt;a href=&#34;#等待方式发送消息-wait&#34; class=&#34;headerlink&#34; title=&#34;等待方式发送消息-wait&#34;&gt;&lt;/a&gt;等待方式发送消息-wait&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_send_wait&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt;     mq,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *buffer,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt;   size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt;  timeout)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;rt_mq_send_wait() 与 rt_mq_send() 的区别在于有等待时间，如果消息队列已经满了，那么发送线程将根据设定的 timeout 参数进行等待。如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;消息大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EFULL&lt;/td&gt;
&lt;td&gt;消息队列已满&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败，表示发送的消息长度大于消息队列中消息的最大长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;发送紧急消息-urgent&#34;&gt;&lt;a href=&#34;#发送紧急消息-urgent&#34; class=&#34;headerlink&#34; title=&#34;发送紧急消息-urgent&#34;&gt;&lt;/a&gt;发送紧急消息-urgent&lt;/h3&gt;&lt;p&gt;发送紧急消息的过程与发送消息几乎一样，唯一的不同是，当发送紧急消息时，从空闲消息链表上取下来的消息块不是挂到消息队列的队尾，而是挂到队首，这样，接收者就能够优先接收到紧急消息，从而及时进行消息处理。发送紧急消息的函数接口如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_urgent&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* buffer, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;消息大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EFULL&lt;/td&gt;
&lt;td&gt;消息队列已满&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;接收消息-recv&#34;&gt;&lt;a href=&#34;#接收消息-recv&#34; class=&#34;headerlink&#34; title=&#34;接收消息-recv&#34;&gt;&lt;/a&gt;接收消息-recv&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mq_recv&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mq_t&lt;/span&gt; mq, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;* buffer,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; timeout)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接收消息时，接收者需指定存储消息的消息队列对象句柄，并且指定一个内存缓冲区，接收到的消息内容将被复制到该缓冲区里。此外，还需指定未能及时取到消息时的超时时间。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mq&lt;/td&gt;
&lt;td&gt;消息队列对象的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;消息大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;指定的超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功收到&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ERROR&lt;/td&gt;
&lt;td&gt;失败，返回错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;消息队列应用示例&#34;&gt;&lt;a href=&#34;#消息队列应用示例&#34; class=&#34;headerlink&#34; title=&#34;消息队列应用示例&#34;&gt;&lt;/a&gt;消息队列应用示例&lt;/h2&gt;&lt;p&gt;这是一个消息队列的应用例程，例程中初始化了 2 个静态线程，一个线程会从消息队列中收取消息；另一个线程会定时给消息队列发送普通消息和紧急消息，如下代码所示：&lt;/p&gt;
&lt;p&gt;消息队列的使用例程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 消息队列控制块 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_messagequeue&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mq&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 消息队列中用到的放置消息的内存池 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; msg_pool[&lt;span class=&#34;hljs-number&#34;&gt;2048&lt;/span&gt;];&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 从消息队列中接收消息 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (rt_mq_recv(&amp;amp;mq, &amp;amp;buf, &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(buf), RT_WAITING_FOREVER) == RT_EOK)&lt;br&gt;        &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: recv msg from msg queue, the content:%c\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (cnt == &lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 延时 50ms */&lt;/span&gt;&lt;br&gt;        cnt++;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1: detach mq \n&amp;quot;&lt;/span&gt;);&lt;br&gt;    rt_mq_detach(&amp;amp;mq);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;ALIGN(RT_ALIGN_SIZE)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;rt_thread&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;thread2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 2 入口 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread2_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; result;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (cnt == &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;)&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送紧急消息到消息队列中 */&lt;/span&gt;&lt;br&gt;            result = rt_mq_urgent(&amp;amp;mq, &amp;amp;buf, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;            &amp;#123;&lt;br&gt;                rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rt_mq_urgent ERR\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;            &amp;#123;&lt;br&gt;                rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2: send urgent message - %c\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (cnt&amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;hljs-comment&#34;&gt;/* 发送 20 次消息之后退出 */&lt;/span&gt;&lt;br&gt;        &amp;#123;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message queue stop send, thread2 quit\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;        &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送消息到消息队列中 */&lt;/span&gt;&lt;br&gt;            result = rt_mq_send(&amp;amp;mq, &amp;amp;buf, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;            &amp;#123;&lt;br&gt;                rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rt_mq_send ERR\n&amp;quot;&lt;/span&gt;);&lt;br&gt;            &amp;#125;&lt;br&gt;&lt;br&gt;            rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2: send message - %c\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;        &amp;#125;&lt;br&gt;        buf++;&lt;br&gt;        cnt++;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 延时 5ms */&lt;/span&gt;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 消息队列示例的初始化 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;msgq_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; result;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化消息队列 */&lt;/span&gt;&lt;br&gt;    result = rt_mq_init(&amp;amp;mq,&lt;br&gt;                        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mqt&amp;quot;&lt;/span&gt;,&lt;br&gt;                        &amp;amp;msg_pool[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],             &lt;span class=&#34;hljs-comment&#34;&gt;/* 内存池指向 msg_pool */&lt;/span&gt;&lt;br&gt;                        &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,                          &lt;span class=&#34;hljs-comment&#34;&gt;/* 每个消息的大小是 1 字节 */&lt;/span&gt;&lt;br&gt;                        &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(msg_pool),        &lt;span class=&#34;hljs-comment&#34;&gt;/* 内存池的大小是 msg_pool 的大小 */&lt;/span&gt;&lt;br&gt;                        RT_IPC_FLAG_FIFO);       &lt;span class=&#34;hljs-comment&#34;&gt;/* 如果有多个线程等待，按照先来先得到的方法分配消息 */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (result != RT_EOK)&lt;br&gt;    &amp;#123;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;init message queue failed.\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread1,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread1_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread1_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread1_stack), &lt;span class=&#34;hljs-number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;    rt_thread_startup(&amp;amp;thread1);&lt;br&gt;&lt;br&gt;    rt_thread_init(&amp;amp;thread2,&lt;br&gt;                   &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread2&amp;quot;&lt;/span&gt;,&lt;br&gt;                   thread2_entry,&lt;br&gt;                   RT_NULL,&lt;br&gt;                   &amp;amp;thread2_stack[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],&lt;br&gt;                   &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(thread2_stack), &lt;span class=&#34;hljs-number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;    rt_thread_startup(&amp;amp;thread2);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(msgq_sample, msgq sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight vbnet&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vbnet&#34;&gt;\ | /&lt;br&gt;- RT -     Thread Operating System&lt;br&gt; / | \     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; build Aug &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; - &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt; Copyright &lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt; rt-thread team&lt;br&gt;msh &amp;gt; msgq_sample&lt;br&gt;msh &amp;gt;thread2: send message - A&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:A&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - B&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - C&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - D&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - E&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:B&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - F&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - G&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - H&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send urgent message - I&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - J&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:I&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - K&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - L&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - M&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - N&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - O&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:C&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - P&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - Q&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - R&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - S&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread2:&lt;/span&gt; send message - T&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:D&lt;br&gt;message queue &lt;span class=&#34;hljs-keyword&#34;&gt;stop&lt;/span&gt; send, thread2 quit&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:E&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:F&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:G&lt;br&gt;…&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; recv msg &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; msg queue, the content:T&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;thread1:&lt;/span&gt; detach mq&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;信号Signal&#34;&gt;&lt;a href=&#34;#信号Signal&#34; class=&#34;headerlink&#34; title=&#34;信号Signal&#34;&gt;&lt;/a&gt;信号Signal&lt;/h2&gt;&lt;p&gt;信号（又称为软中断信号），在软件层次上是对中断机制的一种模拟，在原理上，一个线程收到一个信号与处理器收到一个中断请求可以说是类似的。&lt;/p&gt;
&lt;p&gt;应用程序(用户)能够使用的信号为 SIGUSR1（10）和 SIGUSR2（12）。&lt;/p&gt;
&lt;p&gt;信号本质是&lt;strong&gt;软中断&lt;/strong&gt;，用来通知线程发生了异步事件，用做线程之间的异常通知、应急处理。一个线程不必通过任何操作来等待信号的到达，事实上，线程也不知道信号到底什么时候到达，线程之间可以互相通过调用 rt_thread_kill() 发送软中断信号。&lt;/p&gt;
&lt;p&gt;收到信号的线程对各种信号有不同的处理方法，在信号安装时设定 handler 参数，处理方法可以分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种是类似中断的处理程序，对于需要处理的信号，线程可以指定处理函数，由该函数来处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种方法是，参数设为 SIG_IGN，忽略某个信号，对该信号不做任何处理，就像未发生过一样。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种方法是，参数设为 SIG_DFL，系统会调用默认的处理函数_signal_default_handler()。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图所示，假设线程 1 需要对信号进行处理，首先线程 1 安装一个信号并解除阻塞，并在安装的同时设定了对信号的异常处理方式；然后其他线程可以给线程 1 发送信号，触发线程 1 对该信号的处理。&lt;/p&gt;
&lt;p&gt;当信号被传递给线程 1 时，如果它正处于挂起状态，那会把状态改为就绪状态去处理对应的信号。如果它正处于运行状态，那么会在它当前的线程栈基础上建立新栈帧空间去处理对应的信号，需要注意的是使用的线程栈大小也会相应增加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07signal_work.png&#34; alt=&#34;信号工作机制&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;信号API&#34;&gt;&lt;a href=&#34;#信号API&#34; class=&#34;headerlink&#34; title=&#34;信号API&#34;&gt;&lt;/a&gt;信号API&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/07signal_ops.png&#34; alt=&#34;信号相关接口&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装信号-install&#34;&gt;&lt;a href=&#34;#安装信号-install&#34; class=&#34;headerlink&#34; title=&#34;安装信号-install&#34;&gt;&lt;/a&gt;安装信号-install&lt;/h3&gt;&lt;p&gt;如果线程要处理某一信号，那么就要在线程中安装该信号。安装信号主要用来确定信号值及线程针对该信号值的动作之间的映射关系，即线程将要处理哪个信号，该信号被传递给线程时，将执行何种操作。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_sighandler_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_signal_install&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; signo, &lt;span class=&#34;hljs-type&#34;&gt;rt_sighandler_t&lt;/span&gt;[] handler)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中 rt_sighandler_t 是定义信号处理函数的函数指针类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;signo&lt;/td&gt;
&lt;td&gt;信号值（只有 SIGUSR1 和 SIGUSR2 是开放给用户使用的，下同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;handler&lt;/td&gt;
&lt;td&gt;设置对信号值的处理方式 （函数指针）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIG_ERR&lt;/td&gt;
&lt;td&gt;错误的信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装信号前的 handler 值&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;屏蔽信号-mask&#34;&gt;&lt;a href=&#34;#屏蔽信号-mask&#34; class=&#34;headerlink&#34; title=&#34;屏蔽信号-mask&#34;&gt;&lt;/a&gt;屏蔽信号-mask&lt;/h3&gt;&lt;p&gt;信号阻塞，也可以理解为屏蔽信号。如果该信号被阻塞，则该信号将不会递达给安装此信号的线程，也不会引发软中断处理。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_signal_mask&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; signo)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;signo&lt;/td&gt;
&lt;td&gt;信号值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;解除信号屏蔽-unmask&#34;&gt;&lt;a href=&#34;#解除信号屏蔽-unmask&#34; class=&#34;headerlink&#34; title=&#34;解除信号屏蔽-unmask&#34;&gt;&lt;/a&gt;解除信号屏蔽-unmask&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_signal_unmask&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; signo)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;signo&lt;/td&gt;
&lt;td&gt;信号值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;发送信号-kill&#34;&gt;&lt;a href=&#34;#发送信号-kill&#34; class=&#34;headerlink&#34; title=&#34;发送信号-kill&#34;&gt;&lt;/a&gt;发送信号-kill&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_thread_kill&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; sig)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;tid&lt;/td&gt;
&lt;td&gt;接收信号的线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sig&lt;/td&gt;
&lt;td&gt;信号值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;发送成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EINVAL&lt;/td&gt;
&lt;td&gt;参数错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;等待信号-wait&#34;&gt;&lt;a href=&#34;#等待信号-wait&#34; class=&#34;headerlink&#34; title=&#34;等待信号-wait&#34;&gt;&lt;/a&gt;等待信号-wait&lt;/h3&gt;&lt;p&gt;等待 set 信号的到来，如果没有等到这个信号，则将线程挂起，直到等到这个信号或者等待时间超过指定的超时时间 timeout。如果等到了该信号，则将指向该信号体的指针存入 si，如下是等待信号的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_signal_wait&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_sigset_t&lt;/span&gt; *&lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;rt_siginfo_t&lt;/span&gt;[] *si, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; timeout)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;指定等待的信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;si&lt;/td&gt;
&lt;td&gt;指向存储等到信号信息的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timeout&lt;/td&gt;
&lt;td&gt;指定的等待时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;等到信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_ETIMEOUT&lt;/td&gt;
&lt;td&gt;超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-RT_EINVAL&lt;/td&gt;
&lt;td&gt;参数错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;信号应用示例&#34;&gt;&lt;a href=&#34;#信号应用示例&#34; class=&#34;headerlink&#34; title=&#34;信号应用示例&#34;&gt;&lt;/a&gt;信号应用示例&lt;/h2&gt;&lt;p&gt;这是一个信号的应用例程，如下代码所示。此例程创建了 1 个线程，在安装信号时，信号处理方式设为自定义处理，定义的信号的处理函数为 thread1_signal_handler()。待此线程运行起来安装好信号之后，给此线程发送信号。此线程将接收到信号，并打印信息。&lt;/p&gt;
&lt;p&gt;信号使用例程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;rtthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_PRIORITY         25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_STACK_SIZE       512&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; THREAD_TIMESLICE        5&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;rt_thread_t&lt;/span&gt; tid1 = RT_NULL;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 的信号处理函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_signal_handler&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; sig)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1 received signal %d\n&amp;quot;&lt;/span&gt;, sig);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 的入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thread1_entry&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *parameter)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 安装信号 */&lt;/span&gt;&lt;br&gt;    rt_signal_install(SIGUSR1, thread1_signal_handler);&lt;br&gt;    rt_signal_unmask(SIGUSR1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 运行 10 次 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (cnt &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 线程 1 采用低优先级运行，一直打印计数值 */&lt;/span&gt;&lt;br&gt;        rt_kprintf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1 count : %d\n&amp;quot;&lt;/span&gt;, cnt);&lt;br&gt;&lt;br&gt;        cnt++;&lt;br&gt;        rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 信号示例的初始化 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;signal_sample&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建线程 1 */&lt;/span&gt;&lt;br&gt;    tid1 = rt_thread_create(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;thread1&amp;quot;&lt;/span&gt;,&lt;br&gt;                            thread1_entry, RT_NULL,&lt;br&gt;                            THREAD_STACK_SIZE,&lt;br&gt;                            THREAD_PRIORITY, THREAD_TIMESLICE);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (tid1 != RT_NULL)&lt;br&gt;        rt_thread_startup(tid1);&lt;br&gt;&lt;br&gt;    rt_thread_mdelay(&lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt;);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 发送信号 SIGUSR1 给线程 1 */&lt;/span&gt;&lt;br&gt;    rt_thread_kill(tid1, SIGUSR1);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 导出到 msh 命令列表中 */&lt;/span&gt;&lt;br&gt;MSH_CMD_EXPORT(signal_sample, signal sample);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仿真运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt; &lt;span class=&#34;hljs-string&#34;&gt;\&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;RT&lt;/span&gt; &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt;     &lt;span class=&#34;hljs-string&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;Operating&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;System&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-string&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;\&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;Aug&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2006&lt;/span&gt; &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2018 &lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;Copyright&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;rt-thread&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;team&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;msh&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;gt;signal_sample&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;msh&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;gt;thread1&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;received&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;thread1 count :&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;笔记-3&#34;&gt;&lt;a href=&#34;#笔记-3&#34; class=&#34;headerlink&#34; title=&#34;笔记&#34;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;p&gt;Mailbox:开销较小，4字节内容，&lt;/p&gt;
&lt;p&gt;Message Queue:长度不固定、需要进行内存分配、&lt;/p&gt;
&lt;p&gt;Signal:软件中断&lt;/p&gt;
&lt;h1 id=&#34;内存管理&#34;&gt;&lt;a href=&#34;#内存管理&#34; class=&#34;headerlink&#34; title=&#34;内存管理&#34;&gt;&lt;/a&gt;内存管理&lt;/h1&gt;&lt;p&gt;RT-Thread 操作系统在内存管理上，根据上层应用及系统资源的不同，有针对性地提供了不同的内存分配管理算法。总体上可分为两类：内存堆管理与内存池管理，而内存堆管理又根据具体内存设备划分为三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种是针对小内存块的分配管理（小内存管理算法）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种是针对大内存块的分配管理（slab 管理算法）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种是针对多内存堆的分配情况（memheap 管理算法）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存堆Heap&#34;&gt;&lt;a href=&#34;#内存堆Heap&#34; class=&#34;headerlink&#34; title=&#34;内存堆Heap&#34;&gt;&lt;/a&gt;内存堆Heap&lt;/h2&gt;&lt;p&gt;RT-Thread 将 “ZI 段结尾处” 到内存尾部的空间用作内存堆。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/08Memory_distribution.png&#34; alt=&#34;RT-Thread 内存分布&#34;&gt;&lt;/p&gt;
&lt;p&gt;内存堆可以在当前资源满足的情况下，根据用户的需求分配任意大小的内存块。而当用户不需要再使用这些内存块时，又可以释放回堆中供其他应用分配使用。RT-Thread 系统为了满足不同的需求，提供了不同的内存管理算法，分别是&lt;strong&gt;小内存管理算法&lt;/strong&gt;、&lt;strong&gt;Slab&lt;/strong&gt; 管理算法和 &lt;strong&gt;memheap 管理算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小内存管理算法&lt;/strong&gt;主要针对系统资源比较少，一般用于小于 2MB 内存空间的系统；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slab 内存管理算法&lt;/strong&gt;则主要是0&lt;/p&gt;
&lt;p&gt;在系统资源比较丰富时，提供了一种近似多内存池管理算法的快速算法。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;memheap 管理算法&lt;/strong&gt;。memheap 方法适用于系统存在多个内存堆的情况，它可以将多个内存 “粘贴” 在一起，形成一个大的内存堆，用户使用起来会非常方便。&lt;/p&gt;
&lt;h3 id=&#34;小内存管理算法&#34;&gt;&lt;a href=&#34;#小内存管理算法&#34; class=&#34;headerlink&#34; title=&#34;小内存管理算法&#34;&gt;&lt;/a&gt;小内存管理算法&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/08smem_work.png&#34; alt=&#34;小内存管理工作机制图&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个内存块（不管是已分配的内存块还是空闲的内存块）都包含一个数据头，其中包括：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）magic&lt;/strong&gt;：变数（或称为幻数），它会被初始化成 0x1ea0（即英文单词 heap），用于标记这个内存块是一个内存管理用的内存数据块；变数不仅仅用于标识这个数据块是一个内存管理用的内存数据块，实质也是一个内存保护字：如果这个区域被改写，那么也就意味着这块内存块被非法改写（正常情况下只有内存管理器才会去碰这块内存）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）used&lt;/strong&gt;：指示出当前内存块是否已经分配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存管理的表现主要体现在内存的分配与释放上，小型内存管理算法可以用以下例子体现出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如下图所示的内存分配情况，空闲链表指针 lfree 初始指向 32 字节的内存块。当用户线程要再分配一个 64 字节的内存块时，但此 lfree 指针指向的内存块只有 32 字节并不能满足要求，内存管理器会继续寻找下一内存块，当找到再下一块内存块，128 字节时，它满足分配的要求。因为这个内存块比较大，分配器将把此内存块进行拆分，余下的内存块（52 字节）继续留在 lfree 链表中，如下图分配 64 字节后的链表结构所示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/08smem_work3.png&#34; alt=&#34;小内存管理算法链表结构示意图 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，在每次分配内存块前，都会留出 12 字节数据头用于 magic、used 信息及链表节点使用。返回给应用的地址实际上是这块内存块 12 字节以后的地址，前面的 12 字节数据头是用户永远不应该碰的部分（注：12 字节数据头长度会与系统对齐差异而有所不同）。&lt;/p&gt;
&lt;p&gt;释放时则是相反的过程，但分配器会查看前后相邻的内存块是否空闲，如果空闲则合并成一个大的空闲内存块。&lt;/p&gt;
&lt;h3 id=&#34;Slab管理算法&#34;&gt;&lt;a href=&#34;#Slab管理算法&#34; class=&#34;headerlink&#34; title=&#34;Slab管理算法&#34;&gt;&lt;/a&gt;Slab管理算法&lt;/h3&gt;&lt;p&gt;slab 分配器会根据对象的大小分成多个区（zone），也可以看成每类对象有一个内存池，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/08slab.png&#34; alt=&#34;slab 内存分配结构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个 zone 的大小在 32K 到 128K 字节之间，分配器会在堆初始化时根据堆的大小自动调整。系统中的 zone 最多包括 72 种对象，一次最大能够分配 16K 的内存空间，如果超出了 16K 那么直接从页分配器中分配。每个 zone 上分配的内存块大小是固定的，能够分配相同大小内存块的 zone 会链接在一个链表中，而 72 种对象的 zone 链表则放在一个数组（zone_array[]）中统一管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）内存分配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设分配一个 32 字节的内存，slab 内存分配器会先按照 32 字节的值，从 zone array 链表表头数组中找到相应的 zone 链表。如果这个链表是空的，则向页分配器分配一个新的 zone，然后从 zone 中返回第一个空闲内存块。如果链表非空，则这个 zone 链表中的第一个 zone 节点必然有空闲块存在（否则它就不应该放在这个链表中），那么就取相应的空闲块。如果分配完成后，zone 中所有空闲内存块都使用完毕，那么分配器需要把这个 zone 节点从链表中删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）内存释放&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分配器需要找到内存块所在的 zone 节点，然后把内存块链接到 zone 的空闲内存块链表中。如果此时 zone 的空闲链表指示出 zone 的所有内存块都已经释放，即 zone 是完全空闲的，那么当 zone 链表中全空闲 zone 达到一定数目后，系统就会把这个全空闲的 zone 释放到页面分配器中去。&lt;/p&gt;
&lt;h3 id=&#34;Memheap管理算法&#34;&gt;&lt;a href=&#34;#Memheap管理算法&#34; class=&#34;headerlink&#34; title=&#34;Memheap管理算法&#34;&gt;&lt;/a&gt;Memheap管理算法&lt;/h3&gt;&lt;p&gt; memheap 功能就可以很方便地把多个 memheap（地址可不连续）粘合起来用于系统的 heap 分配。&lt;/p&gt;
&lt;p&gt;memheap 工作机制如下图所示，首先将多块内存加入 memheap_item 链表进行粘合。当分配内存块时，会先从默认内存堆去分配内存，当分配不到时会查找 memheap_item 链表，尝试从其他的内存堆上分配内存块。应用程序不用关心当前分配的内存块位于哪个内存堆上，就像是在操作一个内存堆。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/08memheap.png&#34; alt=&#34;memheap 处理多内存堆&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;内存池Pool&#34;&gt;&lt;a href=&#34;#内存池Pool&#34; class=&#34;headerlink&#34; title=&#34;内存池Pool&#34;&gt;&lt;/a&gt;内存池Pool&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;创建&amp;#x2F;初始化&lt;/td&gt;
&lt;td&gt;rt_mp_create()&amp;#x2F;rt_mp_init()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分配内存块&lt;/td&gt;
&lt;td&gt;rt_mp_alloc()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;释放内存块&lt;/td&gt;
&lt;td&gt;rt_mp_free()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除&amp;#x2F;脱离&lt;/td&gt;
&lt;td&gt;rt_mp_delete()&amp;#x2F;rt_mp_detach()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;创建-x2F-删除-create&#34;&gt;&lt;a href=&#34;#创建-x2F-删除-create&#34; class=&#34;headerlink&#34; title=&#34;创建&amp;#x2F;删除-create&#34;&gt;&lt;/a&gt;创建&amp;#x2F;删除-create&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_mp_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_create&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; block_count,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; block_size)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;内存池名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block_count&lt;/td&gt;
&lt;td&gt;内存块数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block_size&lt;/td&gt;
&lt;td&gt;内存块容量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存池的句柄&lt;/td&gt;
&lt;td&gt;创建内存池对象成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;创建失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mp_t&lt;/span&gt; mp)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mp&lt;/td&gt;
&lt;td&gt;rt_mp_create 返回的内存池对象句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;删除成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;初始化-x2F-剥离-init&#34;&gt;&lt;a href=&#34;#初始化-x2F-剥离-init&#34; class=&#34;headerlink&#34; title=&#34;初始化&amp;#x2F;剥离-init&#34;&gt;&lt;/a&gt;初始化&amp;#x2F;剥离-init&lt;/h3&gt;&lt;p&gt;内存池块个数 &amp;#x3D; size &amp;#x2F; (block_size + 4 链表指针大小)，计算结果取整数。&lt;/p&gt;
&lt;p&gt;例如：内存池数据区总大小 size 设为 4096 字节，内存块大小 block_size 设为 80 字节；则申请的内存块个数为 4096&amp;#x2F; (80+4)&amp;#x3D; 48 个。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mp_t&lt;/span&gt; mp,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt;* name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *start, &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                        &lt;span class=&#34;hljs-type&#34;&gt;rt_size_t&lt;/span&gt; block size)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mp&lt;/td&gt;
&lt;td&gt;内存池对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;内存池名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;内存池的起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;内存池数据区域大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block_size&lt;/td&gt;
&lt;td&gt;内存块容量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;初始化成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- RT_ERROR&lt;/td&gt;
&lt;td&gt;失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_err_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_detach&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mp_t&lt;/span&gt; mp)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mp&lt;/td&gt;
&lt;td&gt;内存池对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_EOK&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;分配-alloc&#34;&gt;&lt;a href=&#34;#分配-alloc&#34; class=&#34;headerlink&#34; title=&#34;分配-alloc&#34;&gt;&lt;/a&gt;分配-alloc&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_alloc&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_mp_t&lt;/span&gt; mp, &lt;span class=&#34;hljs-type&#34;&gt;rt_int32_t&lt;/span&gt; time)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mp&lt;/td&gt;
&lt;td&gt;内存池对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分配的内存块地址&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT_NULL&lt;/td&gt;
&lt;td&gt;失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;释放-free&#34;&gt;&lt;a href=&#34;#释放-free&#34; class=&#34;headerlink&#34; title=&#34;释放-free&#34;&gt;&lt;/a&gt;释放-free&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_mp_free&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *block)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;内存块指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;笔记-4&#34;&gt;&lt;a href=&#34;#笔记-4&#34; class=&#34;headerlink&#34; title=&#34;笔记&#34;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;因为内存堆管理器要满足多线程情况下的安全分配，会考虑多线程间的互斥问题，所以请不要在中断服务例程中分配或释放动态内存块。因为它可能会引起当前上下文被挂起等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;RT-Thread的中断管理&#34;&gt;&lt;a href=&#34;#RT-Thread的中断管理&#34; class=&#34;headerlink&#34; title=&#34;RT-Thread的中断管理&#34;&gt;&lt;/a&gt;RT-Thread的中断管理&lt;/h1&gt;&lt;h2 id=&#34;中断工作机制&#34;&gt;&lt;a href=&#34;#中断工作机制&#34; class=&#34;headerlink&#34; title=&#34;中断工作机制&#34;&gt;&lt;/a&gt;中断工作机制&lt;/h2&gt;&lt;h3 id=&#34;中断处理过程&#34;&gt;&lt;a href=&#34;#中断处理过程&#34; class=&#34;headerlink&#34; title=&#34;中断处理过程&#34;&gt;&lt;/a&gt;中断处理过程&lt;/h3&gt;&lt;p&gt;RT-Thread 中断管理中，将中断处理程序分为中断前导程序、用户中断服务程序、中断后续程序三部分&lt;br&gt;&lt;img src=&#34;/2021/42e53028/09interrupt_work_process.png&#34; alt=&#34;中断处理程序的 3 部分&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;中断前导&#34;&gt;&lt;a href=&#34;#中断前导&#34; class=&#34;headerlink&#34; title=&#34;中断前导&#34;&gt;&lt;/a&gt;中断前导&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;保存 CPU 中断现场，这部分跟 CPU 架构相关，不同 CPU 架构的实现方式有差异。&lt;/p&gt;
&lt;p&gt;对于 Cortex-M 来说，该工作由硬件自动完成。当一个中断触发并且系统进行响应时，处理器硬件会将当前运行部分的上下文寄存器自动压入中断栈中，这部分的寄存器包括 PSR、PC、LR、R12、R3-R0 寄存器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通知内核进入中断状态，调用 rt_interrupt_enter() 函数，作用是把全局变量 rt_interrupt_nest 加 1，用它来记录中断嵌套的层数，代码如下所示。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_interrupt_enter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_base_t&lt;/span&gt; level;&lt;br&gt;&lt;br&gt;    level = rt_hw_interrupt_disable();&lt;br&gt;    rt_interrupt_nest ++;&lt;br&gt;    rt_hw_interrupt_enable(level);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;中断处理&#34;&gt;&lt;a href=&#34;#中断处理&#34; class=&#34;headerlink&#34; title=&#34;中断处理&#34;&gt;&lt;/a&gt;中断处理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中断完后&lt;strong&gt;不进行&lt;/strong&gt;线程切换，这种情况下用户中断服务程序和中断后续程序运行完毕后退出中断模式，返回被中断的线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中断完后&lt;strong&gt;进行&lt;/strong&gt;线程切换，这种情况会调用 rt_hw_context_switch_interrupt() 函数进行上下文切换，该函数跟 CPU 架构相关，不同 CPU 架构的实现方式有差异。&lt;/p&gt;
&lt;p&gt;rt_hw_context_switch_interrupt() 函数会触发PendSV异常，PendSV 异常被触发后，不会立即进行 PendSV 异常中断处理程序，因为此时还在中断处理中，只有当中断后续程序运行完毕，真正退出中断处理后，才进入 PendSV 异常中断处理程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;中断后续&#34;&gt;&lt;a href=&#34;#中断后续&#34; class=&#34;headerlink&#34; title=&#34;中断后续&#34;&gt;&lt;/a&gt;中断后续&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通知内核离开中断状态，通过调用 rt_interrupt_leave() 函数，将全局变量 rt_interrupt_nest 减 1，代码如下所示。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_interrupt_leave&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;rt_base_t&lt;/span&gt; level;&lt;br&gt;&lt;br&gt;    level = rt_hw_interrupt_disable();&lt;br&gt;    rt_interrupt_nest --;&lt;br&gt;    rt_hw_interrupt_enable(level);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;恢复中断前的 CPU 上下文，中断过程&lt;strong&gt;发生了线程切换&lt;/strong&gt;和&lt;strong&gt;没发生线程切换&lt;/strong&gt;的CPU上下文是不一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中断嵌套&#34;&gt;&lt;a href=&#34;#中断嵌套&#34; class=&#34;headerlink&#34; title=&#34;中断嵌套&#34;&gt;&lt;/a&gt;中断嵌套&lt;/h3&gt;&lt;p&gt;如果需要进行线程调度，线程的上下文切换将在所有中断处理程序都运行结束时才发生，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/09ths_switch.png&#34; alt=&#34;中断中的线程切换&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;中断栈&#34;&gt;&lt;a href=&#34;#中断栈&#34; class=&#34;headerlink&#34; title=&#34;中断栈&#34;&gt;&lt;/a&gt;中断栈&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;中断栈可以保存在打断线程的栈中，当从中断中退出时，返回相应的线程继续执行。&lt;/li&gt;
&lt;li&gt;中断栈也可以与线程栈完全分离开来，即每次进入中断时，在保存完打断线程上下文后，切换到新的中断栈中独立运行。在中断退出时，再做相应的上下文恢复。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用独立中断栈相对来说更容易实现，并且对于线程栈使用情况也比较容易了解和掌握（否则必须要为中断栈预留空间，如果系统支持中断嵌套，还需要考虑应该为嵌套中断预留多大的空间）。&lt;/p&gt;
&lt;h3 id=&#34;中断的底半处理&#34;&gt;&lt;a href=&#34;#中断的底半处理&#34; class=&#34;headerlink&#34; title=&#34;中断的底半处理&#34;&gt;&lt;/a&gt;中断的底半处理&lt;/h3&gt;&lt;p&gt;发生中断后，中断一般读取硬件状态或者数据，然后发送一个通知（信号量、事件、邮箱、消息队列等），接下来的相关线程收到通知对着数据进行进一步处理，这个处理的过程就叫&lt;strong&gt;底半处理&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个中断发生时，中断服务程序需要取得相应的硬件状态或者数据。如果中断服务程序接下来要对状态或者数据进行简单处理，比如 CPU 时钟中断，中断服务程序只需对一个系统时钟变量进行加一操作，然后就结束中断服务程序。这类中断需要的运行时间往往都比较短。但对于另外一些中断，中断服务程序在取得硬件状态或数据以后，还需要进行一系列更耗时的处理过程，通常需要将该中断分割为两部分，即&lt;strong&gt;上半部分&lt;/strong&gt;（Top Half）和&lt;strong&gt;底半部分&lt;/strong&gt;（Bottom Half）。在上半部分中，取得硬件状态和数据后，打开被屏蔽的中断，给相关线程发送一条通知（可以是 RT-Thread 所提供的信号量、事件、邮箱或消息队列等方式），然后结束中断服务程序；而接下来，相关的线程在接收到通知后，接着对状态或数据进行进一步的处理，这一过程称之为&lt;strong&gt;底半处理&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;中断管理API&#34;&gt;&lt;a href=&#34;#中断管理API&#34; class=&#34;headerlink&#34; title=&#34;中断管理API&#34;&gt;&lt;/a&gt;中断管理API&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2021/42e53028/09interrupt_ops.png&#34; alt=&#34;中断相关接口&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请注意！！！装载中断服务例程、中断源管理——的API 并不会出现在每一个移植分支中，例如通常 Cortex-M0&amp;#x2F;M3&amp;#x2F;M4 的移植分支中就没有这些 API。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;装载中断服务例程&#34;&gt;&lt;a href=&#34;#装载中断服务例程&#34; class=&#34;headerlink&#34; title=&#34;装载中断服务例程&#34;&gt;&lt;/a&gt;装载中断服务例程&lt;/h3&gt;&lt;p&gt;系统把用户的中断服务程序 (handler) 和指定的中断号关联起来，可调用如下的接口挂载一个新的中断服务程序：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_isr_handler_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_interrupt_install&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;vector&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                                        &lt;span class=&#34;hljs-type&#34;&gt;rt_isr_handler_t&lt;/span&gt;  handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                                        &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *param,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                                        &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;vector&lt;/td&gt;
&lt;td&gt;vector 是挂载的中断号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;handler&lt;/td&gt;
&lt;td&gt;新挂载的中断服务程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;param&lt;/td&gt;
&lt;td&gt;param 会作为参数传递给中断服务程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;中断的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;挂载这个中断服务程序之前挂载的中断服务程序的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;中断源管理&#34;&gt;&lt;a href=&#34;#中断源管理&#34; class=&#34;headerlink&#34; title=&#34;中断源管理&#34;&gt;&lt;/a&gt;中断源管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;屏蔽中断源&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常在 ISR 准备处理某个中断信号之前，我们需要先屏蔽该中断源，在 ISR 处理完状态或数据以后，及时的打开之前被屏蔽的中断源。&lt;/p&gt;
&lt;p&gt;屏蔽中断源可以保证在接下来的处理过程中硬件状态或者数据不会受到干扰，可调用下面这个函数接口：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_interrupt_mask&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;vector&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;vector&lt;/td&gt;
&lt;td&gt;要屏蔽的中断号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;打开被屏蔽的中断源&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_interrupt_umask&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;vector&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;vector&lt;/td&gt;
&lt;td&gt;要打开屏蔽的中断号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;全局中断开关&#34;&gt;&lt;a href=&#34;#全局中断开关&#34; class=&#34;headerlink&#34; title=&#34;全局中断开关&#34;&gt;&lt;/a&gt;全局中断开关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;全局中断开关也称为&lt;/strong&gt;中断锁，是禁止多线程访问临界区最简单的一种方式，即通过关闭中断的方式，来保证当前线程不会被其他事件打断（因为整个系统已经不再响应那些可以触发线程重新调度的外部事件），也就是当前线程不会被抢占，除非这个线程主动放弃了处理器控制权。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;失能全局中断&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_base_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_interrupt_disable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;中断状态&lt;/td&gt;
&lt;td&gt;rt_hw_interrupt_disable 函数运行前的中断状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. 使能全局中断&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_hw_interrupt_enable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;rt_base_t&lt;/span&gt; level)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;前一次 rt_hw_interrupt_disable 返回的中断状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;中断通知&#34;&gt;&lt;a href=&#34;#中断通知&#34; class=&#34;headerlink&#34; title=&#34;中断通知&#34;&gt;&lt;/a&gt;中断通知&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_interrupt_enter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_interrupt_leave&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这两个接口分别用在中断前导程序和中断后续程序中，均会对 rt_interrupt_nest（中断嵌套深度）的值进行修改。&lt;/p&gt;
&lt;p&gt;使用 rt_interrupt_enter&amp;#x2F;leave() 的作用是，在中断中释放了一个信号量，唤醒了某线程，但通过判断发现当前系统处于中断上下文环境中，那么在进行线程切换时应该采取中断中线程切换的策略（等中断结束再切换），而不是立即进行切换（正常情况下立即进行切换）。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;（不建议）但如果中断服务程序不会调用内核相关的函数（释放信号量等操作），这个时候，也可以不调用 rt_interrupt_enter&amp;#x2F;leave() 函数。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在上层应用中，在内核需要知道当前已经进入到中断状态或当前&lt;strong&gt;嵌套的中断深度&lt;/strong&gt;时，可调用 rt_interrupt_get_nest() 接口，它会返回 rt_interrupt_nest。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;rt_uint8_t&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rt_interrupt_get_nest&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;返回&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;当前系统不处于中断上下文环境中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;当前系统处于中断上下文环境中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大于 1&lt;/td&gt;
&lt;td&gt;当前中断嵌套层次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;中断与轮询&#34;&gt;&lt;a href=&#34;#中断与轮询&#34; class=&#34;headerlink&#34; title=&#34;中断与轮询&#34;&gt;&lt;/a&gt;中断与轮询&lt;/h2&gt;&lt;p&gt;当驱动外设工作时，其编程模式到底采用中断模式触发还是轮询模式触发往往是驱动开发人员首先要考虑的问题，并且这个问题在实时操作系统与分时操作系统中差异还非常大。&lt;/p&gt;
&lt;p&gt;在实时系统中轮询模式可能会出现非常大问题，因为在实时操作系统中，当一个程序持续地执行时（轮询时），它所在的线程会一直运行，比它优先级低的线程都不会得到运行。而分时系统中，这点恰恰相反，几乎没有优先级之分，可以在一个时间片运行这个程序，然后在另外一段时间片上运行另外一段程序。&lt;/p&gt;
&lt;p&gt;所以通常情况下，实时系统中更多采用的是中断模式来驱动外设。当数据达到时，由中断唤醒相关的处理线程，再继续进行后续的动作。例如一些携带 FIFO（包含一定数据量的先进先出队列）的串口外设，其写入过程可以是这样的，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/42e53028/09interrupt_reque.png&#34; alt=&#34;中断模式驱动外设&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于低速设备来说，运用这种模式非常好，而对于高速设备，数据量又小的情况下，线程的切换时间（几个us）会很明显的影响数据吞吐量和带宽利用率。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送数据量越小，发送速度越快，对于数据吞吐量的影响也将越大。归根结底，取决于系统中产生中断的频度如何。当一个实时系统想要提升数据吞吐量时，可以考虑的几种方式：&lt;/p&gt;
&lt;p&gt;1）增加每次数据量发送的长度，每次尽量让外设尽量多地发送数据；&lt;/p&gt;
&lt;p&gt;2）必要情况下更改中断模式为轮询模式。同时为了解决轮询方式一直抢占处理机，其他低优先级线程得不到运行的情况，可以把轮询线程的优先级适当降低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;内核移植&#34;&gt;&lt;a href=&#34;#内核移植&#34; class=&#34;headerlink&#34; title=&#34;内核移植&#34;&gt;&lt;/a&gt;内核移植&lt;/h1&gt;&lt;p&gt;参考官方文档&lt;/p&gt;
&lt;h2 id=&#34;CPU架构移植&#34;&gt;&lt;a href=&#34;#CPU架构移植&#34; class=&#34;headerlink&#34; title=&#34;CPU架构移植&#34;&gt;&lt;/a&gt;CPU架构移植&lt;/h2&gt;&lt;h2 id=&#34;BSP移植&#34;&gt;&lt;a href=&#34;#BSP移植&#34; class=&#34;headerlink&#34; title=&#34;BSP移植&#34;&gt;&lt;/a&gt;BSP移植&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2020/2b1e625a/</guid>
            <title>RTX</title>
            <link>https://www.oikiou.top/2020/2b1e625a/</link>
            <category>rtx</category>
            <category>rtos</category>
            <category>keil</category>
            <pubDate>Fri, 21 Aug 2020 22:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;创建一个RTX项目&#34;&gt;&lt;a href=&#34;#创建一个RTX项目&#34; class=&#34;headerlink&#34; title=&#34;创建一个RTX项目&#34;&gt;&lt;/a&gt;创建一个RTX项目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Create an RTX5 Project&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个新的项目,并选择单片机设备。&lt;/p&gt;
&lt;p&gt;Create a new project and select a microcontroller device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置 &lt;strong&gt;CMSIS::CORE&lt;/strong&gt; 和 &lt;strong&gt;CMSIS::RTOS2 (API)::Keil RTX5&lt;/strong&gt;，在下拉框中你可以选择添加RTX库或者添加完整源代码。&lt;/p&gt;
&lt;p&gt;In the Manage Run-Time Environment window, select &lt;strong&gt;CMSIS::CORE&lt;/strong&gt; and &lt;strong&gt;CMSIS::RTOS2 (API)::Keil RTX5&lt;/strong&gt;. You can choose to either add RTX as a library (Variant: &lt;strong&gt;Library&lt;/strong&gt;) or to add the full source code (Variant: &lt;strong&gt;Source&lt;/strong&gt; - required if using the &lt;a href=&#34;http://www.keil.com/pack/doc/compiler/EventRecorder/html/index.html&#34;&gt;&lt;strong&gt;Event Recorder&lt;/strong&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加启动文件 &lt;strong&gt;Device::Startup&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个示例代码&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;osKernelInitialize();/ /初始化RTX&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;NVIC_SetPriorityGrouping&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;;/ /设置优先级分组&lt;br&gt;tread_id =osThreadNew(tread_func,空,空);/ /创建一些线程&lt;br&gt;osKernelStart();/ /开始RTX内核&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;注：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加RTX特定功能的支持&lt;/p&gt;
&lt;p&gt;如果你需要一些的&lt;a href=&#34;group__rtx5__specific.html&#34;&gt;RTX特定功能&lt;/a&gt;在您的应用程序代码中,# include&lt;a href=&#34;theory_of_operation.html#rtx_os_h&#34;&gt;头文件rtx_os.h&lt;/a&gt;。 如使能&lt;a href=&#34;theory_of_operation.html#lowPower&#34;&gt;低功耗&lt;/a&gt;和&lt;a href=&#34;theory_of_operation.html#TickLess&#34;&gt;tick-less&lt;/a&gt;操作模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加事件记录器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开MRTE(Manage Run-Time Environment)窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确保RTX5使用的是源代码(Source)模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开 &lt;strong&gt;Compiler::Event Recorder&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;中断-Cortex-M&#34;&gt;&lt;a href=&#34;#中断-Cortex-M&#34; class=&#34;headerlink&#34; title=&#34;中断 (Cortex-M)&#34;&gt;&lt;/a&gt;中断 (Cortex-M)&lt;/h1&gt;&lt;p&gt;Cortex-M处理器,RTX5内核使用以下异常中断。 下面的表格还列出了必须分配给这些中断的优先级。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;处理程序&lt;/th&gt;
&lt;th&gt;优先级&lt;/th&gt;
&lt;th&gt;中断&amp;#x2F;异常&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;SysTick&lt;/td&gt;
&lt;td&gt;最低&lt;/td&gt;
&lt;td&gt;内核系统定时器中断产生周期性的计时器滴答声&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PendSV&lt;/td&gt;
&lt;td&gt;最低&lt;/td&gt;
&lt;td&gt;PendSV(系统级服务请求)当调用某些RTX功能&lt;strong&gt;处理程序&lt;/strong&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVC&lt;/td&gt;
&lt;td&gt;最低+ 1&lt;/td&gt;
&lt;td&gt;主管叫用来输入RTOS内核&lt;strong&gt;线程&lt;/strong&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可以使用其他设备中断没有限制。 ARM Cortex-M3 &amp;#x2F; M4 &amp;#x2F; M7 &amp;#x2F; M23 &amp;#x2F; M33 &amp;#x2F; M35P处理器,从未被RTX禁用中断内核。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用中断的优先级分组&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在调用函数&lt;a href=&#34;group__CMSIS__RTOS__KernelCtrl.html#ga9ae2cc00f0d89d7b6a307bba942b5221&#34;&gt;osKernelStart（）&lt;/a&gt;之前，应使用CMSIS-Core函数NVIC_SetPriorityGrouping配置中断优先级分组。RTX内核使用优先级组值来设置SysTick和PendSV中断的优先级。&lt;/li&gt;
&lt;li&gt;RTX内核为上表中列出的中断&amp;#x2F;异常设置优先级，并使用最低的两个优先级。&lt;/li&gt;
&lt;li&gt;不要更改RTX内核使用的优先级。如果无法避免，请确保SysTick &amp;#x2F; PendSV的抢占优先级低于SVC。&lt;/li&gt;
&lt;li&gt;允许的优先级组值为0到6.优先级组值7将导致RTX失败，因为只有一个可用优先级。&lt;/li&gt;
&lt;li&gt;的&lt;strong&gt;main函数堆叠&lt;/strong&gt;被用于运行RTX功能。因此，需要为RTX内核执行配置足够的堆栈。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2020/2ac84091/</guid>
            <title>UCOS</title>
            <link>https://www.oikiou.top/2020/2ac84091/</link>
            <category>rtos</category>
            <category>ucos</category>
            <pubDate>Fri, 21 Aug 2020 22:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;序章&#34;&gt;&lt;a href=&#34;#序章&#34; class=&#34;headerlink&#34; title=&#34;序章&#34;&gt;&lt;/a&gt;序章&lt;/h2&gt;&lt;h3 id=&#34;延时函数&#34;&gt;&lt;a href=&#34;#延时函数&#34; class=&#34;headerlink&#34; title=&#34;延时函数&#34;&gt;&lt;/a&gt;延时函数&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSTimeDlyHMSM&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(CPU_INT16U   hours,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                     CPU_INT16U   minutes,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                     CPU_INT16U   seconds,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                     CPU_INT32U   milli,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                     OS_OPT       opt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                     OS_ERR      *p_err)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSTimeDlyHMSM&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,OS_OPT_TIME_HMSM_STRICT,&amp;amp;err)&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//延时1s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//strick   adj. 严格的；绝对的；精确的；详细的&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h2 id=&#34;任务管理&#34;&gt;&lt;a href=&#34;#任务管理&#34; class=&#34;headerlink&#34; title=&#34;任务管理&#34;&gt;&lt;/a&gt;任务管理&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建开始任务&lt;/span&gt;&lt;br&gt;	OSTaskCreate((OS_TCB 	* )&amp;amp;StartTaskTCB,		&lt;span class=&#34;hljs-comment&#34;&gt;//任务控制块&lt;/span&gt;&lt;br&gt;				 (CPU_CHAR	* )&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;start task&amp;quot;&lt;/span&gt;, 		&lt;span class=&#34;hljs-comment&#34;&gt;//任务名字&lt;/span&gt;&lt;br&gt;                 (OS_TASK_PTR )start_task, 			&lt;span class=&#34;hljs-comment&#34;&gt;//任务函数&lt;/span&gt;&lt;br&gt;                 (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;		* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//传递给任务函数的参数&lt;/span&gt;&lt;br&gt;                 (OS_PRIO	  )START_TASK_PRIO,     &lt;span class=&#34;hljs-comment&#34;&gt;//任务优先级&lt;/span&gt;&lt;br&gt;                 (CPU_STK   * )&amp;amp;START_TASK_STK[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],	&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈基地址&lt;/span&gt;&lt;br&gt;                 (CPU_STK_SIZE)START_STK_SIZE/&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,	&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈深度限位&lt;/span&gt;&lt;br&gt;                 (CPU_STK_SIZE)START_STK_SIZE,		&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈大小&lt;/span&gt;&lt;br&gt;                 (OS_MSG_QTY  )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//任务内部消息队列能够接收的最大消息数目,为0时禁止接收消息&lt;/span&gt;&lt;br&gt;                 (OS_TICK	  )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//当使能时间片轮转时的时间片长度，为0时为默认长度，&lt;/span&gt;&lt;br&gt;                 (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;   	* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//用户补充的存储区&lt;/span&gt;&lt;br&gt;                 (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR, &lt;span class=&#34;hljs-comment&#34;&gt;//任务选项&lt;/span&gt;&lt;br&gt;                 (OS_ERR 	* )&amp;amp;err);				&lt;span class=&#34;hljs-comment&#34;&gt;//存放该函数错误时的返回值&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;(CPU_STK_SIZE)START_STK_SIZE/10,	//任务堆栈深度限位&lt;/code&gt;    一般设定小于10%即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;(OS_TCB 	* )&amp;amp;StartTaskTCB,		//任务控制块&lt;/code&gt;   &lt;strong&gt;不要访问和更改其中的成员变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;优先级&#34;&gt;&lt;a href=&#34;#优先级&#34; class=&#34;headerlink&#34; title=&#34;优先级&#34;&gt;&lt;/a&gt;优先级&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数值越小优先级越高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;os_cfg.h line48   &lt;strong&gt;OS_CFG_PRIO_MAX&lt;/strong&gt;  最大优先级数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;就绪表&#34;&gt;&lt;a href=&#34;#就绪表&#34; class=&#34;headerlink&#34; title=&#34;就绪表&#34;&gt;&lt;/a&gt;就绪表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优先级位映射表**OSPrioTbl[]**：用来记录哪个优先级下有任务就绪&lt;/li&gt;
&lt;li&gt;就绪任务列表**OSRdyList[]**：用来记录每一个优先级下所有就绪的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前导零&#34;&gt;&lt;a href=&#34;#前导零&#34; class=&#34;headerlink&#34; title=&#34;前导零&#34;&gt;&lt;/a&gt;前导零&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;硬件计算  能计算一个值前面有多少零&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;任务调度&#34;&gt;&lt;a href=&#34;#任务调度&#34; class=&#34;headerlink&#34; title=&#34;任务调度&#34;&gt;&lt;/a&gt;任务调度&lt;/h2&gt;&lt;h4 id=&#34;任务调度-1&#34;&gt;&lt;a href=&#34;#任务调度-1&#34; class=&#34;headerlink&#34; title=&#34;任务调度&#34;&gt;&lt;/a&gt;任务调度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;任务调度器 进入中断   OSIntEnter();  &lt;/li&gt;
&lt;li&gt;任务调度器 退出中断   OSIntExit();&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;发生任务调度的调度点&#34;&gt;&lt;a href=&#34;#发生任务调度的调度点&#34; class=&#34;headerlink&#34; title=&#34;发生任务调度的调度点&#34;&gt;&lt;/a&gt;发生任务调度的调度点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;延时函数OSTimeDly()（按时间延时）或者OSTimeDlyHMSM()（按节拍延时）&lt;/li&gt;
&lt;li&gt;创建、删除任务&lt;/li&gt;
&lt;li&gt;改变优先级&lt;/li&gt;
&lt;li&gt;通过调用OSTaskSuspend()将自身挂起、或解除某个挂起的任务&lt;/li&gt;
&lt;li&gt;OSSched() 用户自行请求调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调度器上锁解锁&#34;&gt;&lt;a href=&#34;#调度器上锁解锁&#34; class=&#34;headerlink&#34; title=&#34;调度器上锁解锁&#34;&gt;&lt;/a&gt;调度器上锁解锁&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;OSSchedLock()加锁&lt;/li&gt;
&lt;li&gt;OSSchedUnlock()解锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间片轮转调度&#34;&gt;&lt;a href=&#34;#时间片轮转调度&#34; class=&#34;headerlink&#34; title=&#34;时间片轮转调度&#34;&gt;&lt;/a&gt;时间片轮转调度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;待补充&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;UCOS系统初始化&#34;&gt;&lt;a href=&#34;#UCOS系统初始化&#34; class=&#34;headerlink&#34; title=&#34;UCOS系统初始化&#34;&gt;&lt;/a&gt;UCOS系统初始化&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;   OS_ERR err;&lt;br&gt;   ……&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;//其他函数，一般为外设初始化函数&lt;/span&gt;&lt;br&gt;   ……&lt;br&gt;   OSInit(&amp;amp;err);&lt;br&gt;   ……&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;//其他函数，一般为创建任务函数&lt;/span&gt;&lt;br&gt;   ……&lt;br&gt;   OSStart(&amp;amp;err);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;OSInit()必须先于其他的UCOS函数调用包括OSStart()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;任务创建与管理&#34;&gt;&lt;a href=&#34;#任务创建与管理&#34; class=&#34;headerlink&#34; title=&#34;任务创建与管理&#34;&gt;&lt;/a&gt;任务创建与管理&lt;/h2&gt;&lt;h4 id=&#34;任务的创建&#34;&gt;&lt;a href=&#34;#任务的创建&#34; class=&#34;headerlink&#34; title=&#34;任务的创建&#34;&gt;&lt;/a&gt;任务的创建&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;OSTaskCreate((OS_TCB 	* )&amp;amp;StartTaskTCB,		&lt;span class=&#34;hljs-comment&#34;&gt;//任务控制块&lt;/span&gt;&lt;br&gt;             (CPU_CHAR	* )&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;start task&amp;quot;&lt;/span&gt;, 		&lt;span class=&#34;hljs-comment&#34;&gt;//任务名字&lt;/span&gt;&lt;br&gt;             (OS_TASK_PTR )start_task, 			&lt;span class=&#34;hljs-comment&#34;&gt;//任务函数&lt;/span&gt;&lt;br&gt;             (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;		* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//传递给任务函数的参数&lt;/span&gt;&lt;br&gt;             (OS_PRIO	  )START_TASK_PRIO,     &lt;span class=&#34;hljs-comment&#34;&gt;//任务优先级&lt;/span&gt;&lt;br&gt;             (CPU_STK   * )&amp;amp;START_TASK_STK[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],	&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈基地址&lt;/span&gt;&lt;br&gt;             (CPU_STK_SIZE)START_STK_SIZE/&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,	&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈深度限位&lt;/span&gt;&lt;br&gt;             (CPU_STK_SIZE)START_STK_SIZE,		&lt;span class=&#34;hljs-comment&#34;&gt;//任务堆栈大小&lt;/span&gt;&lt;br&gt;             (OS_MSG_QTY  )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//任务内部消息队列能够接收的最大消息数目,为0时禁止接收消息&lt;/span&gt;&lt;br&gt;             (OS_TICK	  )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//当使能时间片轮转时的时间片长度，为0时为默认长度，&lt;/span&gt;&lt;br&gt;             (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;   	* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;span class=&#34;hljs-comment&#34;&gt;//用户补充的存储区&lt;/span&gt;&lt;br&gt;             (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR, &lt;span class=&#34;hljs-comment&#34;&gt;//任务选项&lt;/span&gt;&lt;br&gt;             (OS_ERR 	* )&amp;amp;err);				&lt;span class=&#34;hljs-comment&#34;&gt;//存放该函数错误时的返回值&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;OS_ERR 错误代码&lt;/p&gt;
&lt;h4 id=&#34;任务的删除&#34;&gt;&lt;a href=&#34;#任务的删除&#34; class=&#34;headerlink&#34; title=&#34;任务的删除&#34;&gt;&lt;/a&gt;任务的删除&lt;/h4&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSTaskDel&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_TCB  *p_tcb,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                 OS_ERR  *p_err)&lt;/span&gt;;&lt;br&gt;    &lt;br&gt;OSTaskDel((OS_TCB*)&amp;amp;Task2_TaskTCB,&amp;amp;err);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;不建议在系统运行时删除任务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管UCOSIII允许在系统运行中删除任务，但是应该尽量避免这种操作，如果这个任务可能占有与其他任务共享的资源，在删除此任务之前这个被占有的资源没有被释放就有可能导致奇怪的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;任务的挂起与恢复&#34;&gt;&lt;a href=&#34;#任务的挂起与恢复&#34; class=&#34;headerlink&#34; title=&#34;任务的挂起与恢复&#34;&gt;&lt;/a&gt;任务的挂起与恢复&lt;/h2&gt;&lt;h3 id=&#34;挂起&#34;&gt;&lt;a href=&#34;#挂起&#34; class=&#34;headerlink&#34; title=&#34;挂起&#34;&gt;&lt;/a&gt;挂起&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;   &lt;span class=&#34;hljs-title function_&#34;&gt;OSTaskSuspend&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_TCB  *p_tcb,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                      OS_ERR  *p_err)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;OSTaskSuspend((OS_TCB*)&amp;amp;Task2_TaskTCB,&amp;amp;err);&lt;span class=&#34;hljs-comment&#34;&gt;//挂起任务2&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;挂起错误&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务被加锁&lt;/li&gt;
&lt;li&gt;任务空闲&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;恢复&#34;&gt;&lt;a href=&#34;#恢复&#34; class=&#34;headerlink&#34; title=&#34;恢复&#34;&gt;&lt;/a&gt;恢复&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSTaskResume&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_TCB  *p_tcb,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                    OS_ERR  *p_err)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSTaskResume&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((OS_TCB*)&amp;amp;Task2_TaskTCB,&amp;amp;err)&lt;/span&gt;;	&lt;span class=&#34;hljs-comment&#34;&gt;//恢复任务2&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;恢复错误&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务状态无效（错误的状态）、任务不是已经挂起的&lt;/li&gt;
&lt;li&gt;不能恢复自己&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时间片轮转调度-1&#34;&gt;&lt;a href=&#34;#时间片轮转调度-1&#34; class=&#34;headerlink&#34; title=&#34;时间片轮转调度&#34;&gt;&lt;/a&gt;时间片轮转调度&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSSchedRoundRobinCfg&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(CPU_BOOLEAN   en,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            OS_TICK       dflt_time_quanta,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                            OS_ERR       *p_err)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;	OS_CFG_SCHED_ROUND_ROBIN_EN  &lt;span class=&#34;hljs-comment&#34;&gt;//当使用时间片轮转的时候&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	 &lt;span class=&#34;hljs-comment&#34;&gt;//使能时间片轮转调度功能,时间片长度为1个系统时钟节拍，既1*5=5ms&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-title function_&#34;&gt;OSSchedRoundRobinCfg&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DEF_ENABLED,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&amp;amp;err)&lt;/span&gt;;  &lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;初始化&#34;&gt;&lt;a href=&#34;#初始化&#34; class=&#34;headerlink&#34; title=&#34;初始化&#34;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置宏  &lt;strong&gt;OS_CFG_SCHED_ROUND_ROBIN_EN&lt;/strong&gt;  为1&lt;/li&gt;
&lt;li&gt;调用函数  &lt;strong&gt;OSSchedRoundRobinCfg()&lt;/strong&gt;  开启时间片轮转调度功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时间片的放弃&#34;&gt;&lt;a href=&#34;#时间片的放弃&#34; class=&#34;headerlink&#34; title=&#34;时间片的放弃&#34;&gt;&lt;/a&gt;时间片的放弃&lt;/h3&gt;&lt;p&gt;&lt;code&gt;OSSchedRoundRobinYield(&amp;amp;err);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;注：&#34;&gt;&lt;a href=&#34;#注：&#34; class=&#34;headerlink&#34; title=&#34;注：&#34;&gt;&lt;/a&gt;注：&lt;/h3&gt;&lt;p&gt;时间片如果不够执行可能会产生奇怪的效果请注意&lt;/p&gt;
&lt;h2 id=&#34;系统内部任务&#34;&gt;&lt;a href=&#34;#系统内部任务&#34; class=&#34;headerlink&#34; title=&#34;系统内部任务&#34;&gt;&lt;/a&gt;系统内部任务&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中断服务管理任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟节拍任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定时任务（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计任务（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空闲任务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中断服务管理任务&#34;&gt;&lt;a href=&#34;#中断服务管理任务&#34; class=&#34;headerlink&#34; title=&#34;中断服务管理任务&#34;&gt;&lt;/a&gt;中断服务管理任务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;默认优先级最高，第一，不可更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时钟节拍任务&#34;&gt;&lt;a href=&#34;#时钟节拍任务&#34; class=&#34;headerlink&#34; title=&#34;时钟节拍任务&#34;&gt;&lt;/a&gt;时钟节拍任务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优先级较高，第二。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定时任务（可选）&#34;&gt;&lt;a href=&#34;#定时任务（可选）&#34; class=&#34;headerlink&#34; title=&#34;定时任务（可选）&#34;&gt;&lt;/a&gt;定时任务（可选）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认优先级，第三。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供软件定时功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将宏OS_CFG_TMR_EN设置为1就会使能定时任务，在OSInit()中将会调用函数OS_TmrInit()来创建定时任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;统计任务（可选）&#34;&gt;&lt;a href=&#34;#统计任务（可选）&#34; class=&#34;headerlink&#34; title=&#34;统计任务（可选）&#34;&gt;&lt;/a&gt;统计任务（可选）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般优先级，倒数第二。&lt;/li&gt;
&lt;li&gt;统计CPU使用率，堆栈使用率&lt;/li&gt;
&lt;li&gt;可选创建（将宏&lt;strong&gt;OS_CFG_STAT_TASK_EN&lt;/strong&gt;置1）&lt;/li&gt;
&lt;li&gt;必须在main函数创建的以一个任务也是唯一的一个应用任务里面调用函数**OSStatTaskCPUUsageInit()**查询使用情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空闲任务&#34;&gt;&lt;a href=&#34;#空闲任务&#34; class=&#34;headerlink&#34; title=&#34;空闲任务&#34;&gt;&lt;/a&gt;空闲任务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优先级最低，倒数第一。&lt;/li&gt;
&lt;li&gt;不能调用会使空闲任务进入等待态的函数。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;可统计CPU使用率&lt;/span&gt;（用处）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;钩子函数&#34;&gt;&lt;a href=&#34;#钩子函数&#34; class=&#34;headerlink&#34; title=&#34;钩子函数&#34;&gt;&lt;/a&gt;钩子函数&lt;/h2&gt;&lt;p&gt;共有8个&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OSIdleTaskHook()，		&lt;strong&gt;空闲任务&lt;/strong&gt;		调用这个函数，可以用来让CPU进入低功耗模式&lt;/li&gt;
&lt;li&gt;OSInitHook()，			&lt;strong&gt;系统初始化&lt;/strong&gt;		函数OSInit()调用此函数&lt;/li&gt;
&lt;li&gt;OSStatTaskHook(),		 &lt;strong&gt;统计任务每秒&lt;/strong&gt;		中都会调用这个函数，此函数允许你向统计任务中添加自己的应用函数。&lt;/li&gt;
&lt;li&gt;OSTaskCreateHook(),		&lt;strong&gt;任务创建&lt;/strong&gt;		的钩子函数。&lt;/li&gt;
&lt;li&gt;OSTaskDelHook(),		&lt;strong&gt;任务删除&lt;/strong&gt;		的钩子函数。&lt;/li&gt;
&lt;li&gt;OSTaskReturnHook(),		&lt;strong&gt;任务意外返回&lt;/strong&gt;		时调用的钩子函数，比如删除某个任务&lt;/li&gt;
&lt;li&gt;OSTaskSwHook(),		&lt;strong&gt;任务切换&lt;/strong&gt;		时候调用的钩子函数。&lt;/li&gt;
&lt;li&gt;OSTimeTickHook()，		&lt;strong&gt;滴答定时器&lt;/strong&gt;		调用的钩子函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;中断时间管理&#34;&gt;&lt;a href=&#34;#中断时间管理&#34; class=&#34;headerlink&#34; title=&#34;中断时间管理&#34;&gt;&lt;/a&gt;中断时间管理&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;USART1_IRQHandler&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;       OSIntEnter();&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;//中断服务程序&lt;/span&gt;&lt;br&gt;      OSIntExit();&lt;br&gt;&amp;#125;  &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;最大250级中断嵌套&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;临界区代码保护&#34;&gt;&lt;a href=&#34;#临界区代码保护&#34; class=&#34;headerlink&#34; title=&#34;临界区代码保护&#34;&gt;&lt;/a&gt;临界区代码保护&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;临界区：不可被打断的代码段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OS_CFG_ISR_POST_DEFERRED_EN   的值与临界段代码保护方式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;关中断&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;调度器上锁（可能会被其它中断打断）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入临界段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个进入函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;退出临界段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;退出后产生调度——-OS_CRITICAL_EXIT()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;退出后不产生调度—-OS_CRITICAL_EXIT_NO_SCHED()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;CPU-SR-ALLOC&#34;&gt;&lt;a href=&#34;#CPU-SR-ALLOC&#34; class=&#34;headerlink&#34; title=&#34;CPU_SR_ALLOC()&#34;&gt;&lt;/a&gt;CPU_SR_ALLOC()&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;函数CPU_SR_ALLOC()是为CPU_CRITICAL_ENTER()和CPU_CRITICAL_EXIT()申请一个变量：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;#define  CPU_SR_ALLOC()           CPU_SR  cpu_sr = (CPU_SR)0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个是临界代码段，在下面一个小节有详细讲解。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;这样做是为了防止编译器警告。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;任务延时&#34;&gt;&lt;a href=&#34;#任务延时&#34; class=&#34;headerlink&#34; title=&#34;任务延时&#34;&gt;&lt;/a&gt;任务延时&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;开始延时&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSTimeDly()&lt;/th&gt;
&lt;th&gt;相对延时&lt;/th&gt;
&lt;th&gt;基于时钟节拍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;绝对延时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;周期延时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTimeDlyHMSM()&lt;/td&gt;
&lt;td&gt;相对延时&lt;/td&gt;
&lt;td&gt;基于时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;取消延时&lt;/p&gt;
&lt;p&gt;延时任务任务可通过在其他任务中调用函数OSTimeDlyResume()取消延时而进入就绪状态，此函数最后会引发一次任务调度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取系统时间&#34;&gt;&lt;a href=&#34;#获取系统时间&#34; class=&#34;headerlink&#34; title=&#34;获取系统时间&#34;&gt;&lt;/a&gt;获取系统时间&lt;/h2&gt;&lt;p&gt;​	UCOSIII定义了一个 CPU_INT32U 类型的全局变量 OSTickCtr 来记录系统时钟节拍数，在调用 &lt;strong&gt;OSInit()&lt;/strong&gt; 时被初始化为 0，以后每发生1个时钟节拍，OSTickCtr加1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSTimeSet()允许用户改变当前时钟节拍计数器的值&lt;/li&gt;
&lt;li&gt;OSTimeGet()用来获取动迁时钟节拍计数器的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件定时器&#34;&gt;&lt;a href=&#34;#软件定时器&#34; class=&#34;headerlink&#34; title=&#34;软件定时器&#34;&gt;&lt;/a&gt;软件定时器&lt;/h2&gt;&lt;p&gt;​	定时器本质是递减计数器，当计数器减到零时可以执行回调函数。应用程序可以有任意数量的定时器，UCOSIII中定时器的时间分辨率由一个宏 &lt;strong&gt;OS_CFG_TMR_TASK_RATE_HZ&lt;/strong&gt; 确定，单位为HZ，默认为100Hz。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免在回调函数使用   &lt;strong&gt;阻塞&lt;/strong&gt;，&lt;strong&gt;删除&lt;/strong&gt;   定时器任务的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件定时器的API&#34;&gt;&lt;a href=&#34;#软件定时器的API&#34; class=&#34;headerlink&#34; title=&#34;软件定时器的API&#34;&gt;&lt;/a&gt;软件定时器的API&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;OSTmrCreate()&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;创建定时器并制定运行模式&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;OSTmrDel()&lt;/td&gt;
&lt;td&gt;删除定时器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTmrRemainGet()&lt;/td&gt;
&lt;td&gt;获取定时器的剩余时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSTmrStart()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;启动定时器计数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTmrStateGet()&lt;/td&gt;
&lt;td&gt;获取当前定时器状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSTmrStop()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;停止计数器倒计时&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;OSTmrCreate()有三种模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单次模式（通过OSTmrStart()触发）&lt;/li&gt;
&lt;li&gt;周期无延迟模式&lt;/li&gt;
&lt;li&gt;周期有延迟模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号量、互斥信号量、内嵌信号量&#34;&gt;&lt;a href=&#34;#信号量、互斥信号量、内嵌信号量&#34; class=&#34;headerlink&#34; title=&#34;信号量、互斥信号量、内嵌信号量&#34;&gt;&lt;/a&gt;信号量、互斥信号量、内嵌信号量&lt;/h2&gt;&lt;h3 id=&#34;信号量&#34;&gt;&lt;a href=&#34;#信号量&#34; class=&#34;headerlink&#34; title=&#34;信号量&#34;&gt;&lt;/a&gt;信号量&lt;/h3&gt;&lt;p&gt;信号量像是一种上锁机制，代码必须获得对应的钥匙才能继续执行，一旦获得了钥匙，也就意味着该任务具有进入被锁部分代码的权限。一旦执行至被锁代码段，则任务一直等待，直到对应被锁部分代码的钥匙被再次释放才能继续执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量用于控制对共享资源的保护，但是现在基本用来做任务同步用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;信号量API&#34;&gt;&lt;a href=&#34;#信号量API&#34; class=&#34;headerlink&#34; title=&#34;信号量API&#34;&gt;&lt;/a&gt;信号量API&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSSemCreate()&lt;/th&gt;
&lt;th&gt;建立一个信号量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;OSSemDel()&lt;/td&gt;
&lt;td&gt;删除一个信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSSemPend()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;等待一个信号量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSSemPendAbrot()&lt;/td&gt;
&lt;td&gt;取消等待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSSemPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;释放或者发出一个信号量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSSemSet()&lt;/td&gt;
&lt;td&gt;强制设置一个信号量的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSSemCreate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_SEM      *p_sem,		&lt;span class=&#34;hljs-comment&#34;&gt;//OS_SEM	MY_SEM;	定义一个信号量，用于访问共享资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   CPU_CHAR    *p_name,		&lt;span class=&#34;hljs-comment&#34;&gt;//&amp;quot;MY_SEM&amp;quot;	名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   OS_SEM_CTR   cnt,		&lt;span class=&#34;hljs-comment&#34;&gt;//如果设置成计数型信号量 此处设置成对应数字即可   如果设置成二进制信号量   此处设置成0即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                   OS_ERR      *p_err)&lt;/span&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSSemCreate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;((OS_SEM*	)&amp;amp;MY_SEM,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;             (CPU_CHAR*	)&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;MY_SEM&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;             (OS_SEM_CTR)&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;             (OS_ERR*	)&amp;amp;err)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;OS_SEM_CTR   cnt,		&lt;ul&gt;
&lt;li&gt;如果设置成计数型信号量   此处设置成对应数字即可   &lt;/li&gt;
&lt;li&gt;如果设置成二进制信号量   此处设置成0，指示事件的发生（同步）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;OS_SEM_CTR  &lt;span class=&#34;hljs-title function_&#34;&gt;OSSemPend&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_SEM   *p_sem,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       OS_TICK   timeout,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       OS_OPT    opt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       CPU_TS   *p_ts,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       OS_ERR   *p_err)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSSemPend&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&amp;amp;MY_SEM,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,OS_OPT_PEND_BLOCKING,&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&amp;amp;err)&lt;/span&gt;; 	&lt;span class=&#34;hljs-comment&#34;&gt;//请求信号量&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;OS_OPT    opt,&lt;ul&gt;
&lt;li&gt;OS_OPT_PEND_BLOCKING —————-&amp;gt;  阻塞式&lt;/li&gt;
&lt;li&gt;OS_OPT_PEND_NON_BLOCKING ——-&amp;gt; 非阻塞式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;OS_SEM_CTR  &lt;span class=&#34;hljs-title function_&#34;&gt;OSSemPost&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_SEM  *p_sem,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       OS_OPT   opt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                       OS_ERR  *p_err)&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSSemPost&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&amp;amp;MY_SEM,OS_OPT_POST_1,&amp;amp;err)&lt;/span&gt;;				&lt;span class=&#34;hljs-comment&#34;&gt;//发送 释放 信号量&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;OS_OPT    opt，&lt;ul&gt;
&lt;li&gt;OS_OPT_POST_1 —–&amp;gt;只使能等待信号量的最高优先级任务   (如果任务正在等待)。&lt;/li&gt;
&lt;li&gt;OS_OPT_POST_ALL  ——&amp;gt;发送到所有等待信号量的任务&lt;/li&gt;
&lt;li&gt;OS_OPT_POST_NO_SCHED  ———&amp;gt;不调用调度程序  可以与其他选项之一一起添加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;互斥信号量&#34;&gt;&lt;a href=&#34;#互斥信号量&#34; class=&#34;headerlink&#34; title=&#34;互斥信号量&#34;&gt;&lt;/a&gt;互斥信号量&lt;/h3&gt;&lt;h4 id=&#34;互斥信号量API&#34;&gt;&lt;a href=&#34;#互斥信号量API&#34; class=&#34;headerlink&#34; title=&#34;互斥信号量API&#34;&gt;&lt;/a&gt;互斥信号量API&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSMutexCreate()&lt;/th&gt;
&lt;th&gt;建立一个互斥信号量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;OSMutexDel()&lt;/td&gt;
&lt;td&gt;删除一个互斥信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSMutexPend()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;等待一个互斥信号量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSMutexPendAbrot()&lt;/td&gt;
&lt;td&gt;取消等待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSMutexPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;释放或者发布一个互斥信号量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;内嵌信号量&#34;&gt;&lt;a href=&#34;#内嵌信号量&#34; class=&#34;headerlink&#34; title=&#34;内嵌信号量&#34;&gt;&lt;/a&gt;内嵌信号量&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSTaskSemPend()&lt;/th&gt;
&lt;th&gt;等待一个任务信号量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;OSTaskSemPendAbort()&lt;/td&gt;
&lt;td&gt;取消等待任务信号量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSTaskSemPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;发布任务信号量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTaskSemSet()&lt;/td&gt;
&lt;td&gt;强行设置任务信号量计数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;消息队列&#34;&gt;&lt;a href=&#34;#消息队列&#34; class=&#34;headerlink&#34; title=&#34;消息队列&#34;&gt;&lt;/a&gt;消息队列&lt;/h2&gt;&lt;h3 id=&#34;消息队列-1&#34;&gt;&lt;a href=&#34;#消息队列-1&#34; class=&#34;headerlink&#34; title=&#34;消息队列&#34;&gt;&lt;/a&gt;消息队列&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSQCreate()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;创建一个消息   队列&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSQDel()&lt;/td&gt;
&lt;td&gt;删除一个消息队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSQFlush()&lt;/td&gt;
&lt;td&gt;清空消息队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSQPend()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;等待消息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSQPendAbort()&lt;/td&gt;
&lt;td&gt;取消等待消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSQPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;向消息队列发布一则消息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;OSQCreate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_Q        *p_q,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                 CPU_CHAR    *p_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                 OS_MSG_QTY   max_qty,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                 OS_ERR      *p_err)&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;OSQCreate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;((OS_Q*		)&amp;amp;KEY_Msg,	&lt;span class=&#34;hljs-comment&#34;&gt;//消息队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;           (CPU_CHAR*	)&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;KEY Msg&amp;quot;&lt;/span&gt;,	&lt;span class=&#34;hljs-comment&#34;&gt;//消息队列名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;           (OS_MSG_QTY	)KEYMSG_Q_NUM,	&lt;span class=&#34;hljs-comment&#34;&gt;//消息队列长度，这里设置为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;           (OS_ERR*	)&amp;amp;err)&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//错误码&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//发送消息&lt;/span&gt;&lt;br&gt;OSQPost((OS_Q*		)&amp;amp;DATA_Msg,		&lt;br&gt;        (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;*		)pbuf,&lt;br&gt;        (OS_MSG_SIZE)&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;br&gt;        (OS_OPT		)OS_OPT_POST_FIFO,&lt;br&gt;        (OS_ERR*	)&amp;amp;err);&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//请求消息&lt;/span&gt;&lt;br&gt;p=OSQPend((OS_Q*		)&amp;amp;DATA_Msg,   &lt;br&gt;          (OS_TICK		)&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;          (OS_OPT		)OS_OPT_PEND_BLOCKING,&lt;br&gt;          (OS_MSG_SIZE*	)&amp;amp;size,	&lt;br&gt;          (CPU_TS*		)&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;          (OS_ERR*		)&amp;amp;err);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;







&lt;h3 id=&#34;任务内建消息队列&#34;&gt;&lt;a href=&#34;#任务内建消息队列&#34; class=&#34;headerlink&#34; title=&#34;任务内建消息队列&#34;&gt;&lt;/a&gt;任务内建消息队列&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSTaskQPend()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;等待消息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTaskQPendAbort()&lt;/td&gt;
&lt;td&gt;取消等待消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSTaskQPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;向任务发布一则消息&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSTaskQFlush()&lt;/td&gt;
&lt;td&gt;清空任务的消息队列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建MSGDIS任务&lt;/span&gt;&lt;br&gt;OSTaskCreate((OS_TCB 	* )&amp;amp;Msgdis_TaskTCB,		&lt;br&gt;             (CPU_CHAR	* )&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Msgdis task&amp;quot;&lt;/span&gt;, 		&lt;br&gt;             (OS_TASK_PTR )msgdis_task, 			&lt;br&gt;             (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;		* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;br&gt;             (OS_PRIO	  )MSGDIS_TASK_PRIO,     &lt;br&gt;             (CPU_STK   * )&amp;amp;MSGDIS_TASK_STK[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],	&lt;br&gt;             (CPU_STK_SIZE)MSGDIS_STK_SIZE/&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,	&lt;br&gt;             (CPU_STK_SIZE)MSGDIS_STK_SIZE,		&lt;br&gt;             (OS_MSG_QTY  )TASK_Q_NUM,		&lt;span class=&#34;hljs-comment&#34;&gt;//任务Msgdis_task需要使用内建消息队列，消息队列长度为4					&lt;/span&gt;&lt;br&gt;             (OS_TICK	  )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,  					&lt;br&gt;             (&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;   	* )&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,					&lt;br&gt;             (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,&lt;br&gt;             (OS_ERR 	* )&amp;amp;err);&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;注意看 OS_MSG_QTY 正常时其设置为0  使用内建消息队列将之设置成对应的数量即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事件标志组&#34;&gt;&lt;a href=&#34;#事件标志组&#34; class=&#34;headerlink&#34; title=&#34;事件标志组&#34;&gt;&lt;/a&gt;事件标志组&lt;/h2&gt;&lt;p&gt;​       在UCOSIII中事件标志组为OS_FLAG_GRP，如果需要使用事件标志组的时候需要将宏OS_CFG_FLAG_EN置1，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;函数名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSFlagCreate()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;创建事件标志组&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSFlagDel()&lt;/td&gt;
&lt;td&gt;删除事件标志组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSFlagPend()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;等待事件标志组&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSFlagPendAbort()&lt;/td&gt;
&lt;td&gt;取消等待事件标志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OSFlagPendGetFlagsRdy()&lt;/td&gt;
&lt;td&gt;获取使任务就绪的事件标志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OSFlagPost()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;向事件标志组发布标志&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;同时等待多个内核对象&#34;&gt;&lt;a href=&#34;#同时等待多个内核对象&#34; class=&#34;headerlink&#34; title=&#34;同时等待多个内核对象&#34;&gt;&lt;/a&gt;同时等待多个内核对象&lt;/h2&gt;&lt;p&gt;​	在UCOSIII中允许任务同时等待多个&lt;strong&gt;信号量&lt;/strong&gt;和多个&lt;strong&gt;消息队列&lt;/strong&gt;，也就是说，UCOSIII不支持同时等待多个事件标志组或互斥信号量。&lt;/p&gt;
&lt;p&gt;​    一个任务可以等待任意数量的信号量和消息队列，第一个信号量或消息队列的发布会导致该任务进入就绪态。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;OS_OBJ_QTY  &lt;span class=&#34;hljs-title function_&#34;&gt;OSPendMulti&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(OS_PEND_DATA  *p_pend_data_tbl,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         OS_OBJ_QTY     tbl_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         OS_TICK        timeout,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         OS_OPT         opt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;                         OS_ERR        *p_err)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;OS_SEM	Test_Sem1;			&lt;span class=&#34;hljs-comment&#34;&gt;//信号量1		&lt;/span&gt;&lt;br&gt;OS_SEM	Test_Sem2;			&lt;span class=&#34;hljs-comment&#34;&gt;//信号量2&lt;/span&gt;&lt;br&gt;OS_Q	Test_Q;				&lt;span class=&#34;hljs-comment&#34;&gt;//消息队列&lt;/span&gt;&lt;br&gt;&lt;br&gt;OS_PEND_DATA pend_multi_tbl[CORE_OBJ_NUM];	&lt;br&gt;&lt;br&gt;pend_multi_tbl[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].PendObjPtr=(OS_PEND_OBJ*)&amp;amp;Test_Sem1;&lt;br&gt;pend_multi_tbl[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;].PendObjPtr=(OS_PEND_OBJ*)&amp;amp;Test_Sem2;&lt;br&gt;pend_multi_tbl[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;].PendObjPtr=(OS_PEND_OBJ*)&amp;amp;Test_Q;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;







&lt;h2 id=&#34;内存管理&#34;&gt;&lt;a href=&#34;#内存管理&#34; class=&#34;headerlink&#34; title=&#34;内存管理&#34;&gt;&lt;/a&gt;内存管理&lt;/h2&gt; ]]></description>
        </item>
    </channel>
</rss>
