<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Oikiou&#39;s Blog • Posts by &#34;数据结构&#34; tag</title>
        <link>https://www.oikiou.top</link>
        <description>Blog</description>
        <language>zh-CN</language>
        <pubDate>Wed, 21 Aug 2019 22:57:15 +0800</pubDate>
        <lastBuildDate>Wed, 21 Aug 2019 22:57:15 +0800</lastBuildDate>
        <category>123</category>
        <category>embedded</category>
        <category>cc2530</category>
        <category>zigbee</category>
        <category>hp</category>
        <category>chrome</category>
        <category>sscanf</category>
        <category>c/c++</category>
        <category>hex</category>
        <category>md5</category>
        <category>jpeg</category>
        <category>webp</category>
        <category>jpeg2000</category>
        <category>image</category>
        <category>osi</category>
        <category>ssl</category>
        <category>https</category>
        <category>markdown</category>
        <category>note</category>
        <category>tags</category>
        <category>label</category>
        <category>category</category>
        <category>iap</category>
        <category>bootloader</category>
        <category>stm32</category>
        <category>typora</category>
        <category>usart</category>
        <category>rts</category>
        <category>cts</category>
        <category>dtr</category>
        <category>dsr</category>
        <category>ws2812</category>
        <category>spi</category>
        <category>dma</category>
        <category>xip</category>
        <category>nor</category>
        <category>nand</category>
        <category>windows</category>
        <category>makefile</category>
        <category>android</category>
        <category>mtp</category>
        <category>pc</category>
        <category>driver</category>
        <category>ip</category>
        <category>location</category>
        <category>api</category>
        <category>zsh</category>
        <category>shell</category>
        <category>linux</category>
        <category>zip</category>
        <category>gzip</category>
        <category>bzip</category>
        <category>tar</category>
        <category>DS_Store</category>
        <category>rtf</category>
        <category>后缀</category>
        <category>character encoding</category>
        <category>gb2312</category>
        <category>utf-8</category>
        <category>机智云</category>
        <category>kms</category>
        <category>office</category>
        <category>volume</category>
        <category>蓝桥杯</category>
        <category>国赛</category>
        <category>ct117e</category>
        <category>超声波</category>
        <category>github</category>
        <category>hosts</category>
        <category>ct117e-ex</category>
        <category>c</category>
        <category>c++</category>
        <category>ms-dos</category>
        <category>pid</category>
        <category>micropython</category>
        <category>python</category>
        <category>qt</category>
        <category>pyqt</category>
        <category>正则表达式</category>
        <category>数据结构</category>
        <category>堆栈</category>
        <category>队列</category>
        <category>链表</category>
        <category>树</category>
        <category>二叉树</category>
        <category>life</category>
        <category>workflow</category>
        <category>人生</category>
        <category>cat_drive</category>
        <category>cad</category>
        <category>心理学</category>
        <category>switch</category>
        <category>nintendo</category>
        <category>game</category>
        <category>synology</category>
        <category>hardware</category>
        <category>lenovo</category>
        <category>disk</category>
        <category>software</category>
        <category>dslogic</category>
        <category>逻辑分析仪</category>
        <category>pyhton</category>
        <category>decoder</category>
        <category>摄影</category>
        <category>git</category>
        <category>docker</category>
        <category>dockerfile</category>
        <category>namespace</category>
        <category>cgroup</category>
        <category>dockerhub</category>
        <category>j-link</category>
        <category>rtt</category>
        <category>serial</category>
        <category>debug</category>
        <category>jlink</category>
        <category>rdpwrap</category>
        <category>rdp</category>
        <category>flash</category>
        <category>j-tag</category>
        <category>spacedesk</category>
        <category>投屏</category>
        <category>ps</category>
        <category>powershell</category>
        <category>vscode</category>
        <category>commenttranslate</category>
        <category>wsl</category>
        <category>sourceinsigh</category>
        <category>si</category>
        <category>ide</category>
        <category>wordpress</category>
        <category>web</category>
        <category>mysql</category>
        <category>nginx</category>
        <category>unit</category>
        <category>m</category>
        <category>cm</category>
        <category>mm</category>
        <category>s</category>
        <category>us</category>
        <category>tmux</category>
        <category>cortex-m3</category>
        <category>hexo</category>
        <category>jekyll</category>
        <category>fluid</category>
        <category>cusdis</category>
        <category>twikoo</category>
        <category>blog</category>
        <category>gravatar</category>
        <category>cravatar</category>
        <category>cortex-a7</category>
        <category>alpha_mini</category>
        <category>正点原子</category>
        <category>rtx</category>
        <category>rtos</category>
        <category>keil</category>
        <category>ucos</category>
        <category>rt-thread</category>
        <category>raspberry</category>
        <category>ap</category>
        <category>wifi</category>
        <category>wiringpi</category>
        <category>pwm</category>
        <category>bluetooth</category>
        <category>蓝牙</category>
        <category>modbus</category>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2019/79666db/</guid>
            <title>数据结构</title>
            <link>https://www.oikiou.top/2019/79666db/</link>
            <category>数据结构</category>
            <category>堆栈</category>
            <category>队列</category>
            <category>链表</category>
            <category>树</category>
            <category>二叉树</category>
            <pubDate>Wed, 21 Aug 2019 22:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&#34;C语言打印运行时间&#34;&gt;&lt;a href=&#34;#C语言打印运行时间&#34; class=&#34;headerlink&#34; title=&#34;C语言打印运行时间&#34;&gt;&lt;/a&gt;C语言打印运行时间&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;time_t&lt;/span&gt; start, stop;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    start = clock();&lt;span class=&#34;hljs-comment&#34;&gt;//滴答时钟&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//运行的函数&lt;/span&gt;&lt;br&gt;    stop = clock();&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%lf----%lf\r\n&amp;quot;&lt;/span&gt;, (&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt;)(stop-start),(&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt;)(stop-start)/CLK_TCK);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;尾递归可以优化成For&#34;&gt;&lt;a href=&#34;#尾递归可以优化成For&#34; class=&#34;headerlink&#34; title=&#34;尾递归可以优化成For&#34;&gt;&lt;/a&gt;尾递归可以优化成For&lt;/h2&gt;&lt;p&gt;尾递归：程序返回时才发生递归。&lt;/p&gt;
&lt;h1 id=&#34;第一章&#34;&gt;&lt;a href=&#34;#第一章&#34; class=&#34;headerlink&#34; title=&#34;第一章&#34;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;h2 id=&#34;1-3-应用实例：最大子列和问题&#34;&gt;&lt;a href=&#34;#1-3-应用实例：最大子列和问题&#34; class=&#34;headerlink&#34; title=&#34;1.3 应用实例：最大子列和问题&#34;&gt;&lt;/a&gt;1.3 应用实例：最大子列和问题&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Max3&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; A, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; B, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; C )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 返回3个整数中的最大值 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; A &amp;gt; B ? A &amp;gt; C ? A : C : B &amp;gt; C ? B : C;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;DivideAndConquer&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; List[], &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; left, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; right )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 分治法求List[left]到List[right]的最大子列和 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxLeftSum, MaxRightSum; &lt;span class=&#34;hljs-comment&#34;&gt;/* 存放左右子问题的解 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxLeftBorderSum, MaxRightBorderSum; &lt;span class=&#34;hljs-comment&#34;&gt;/*存放跨分界线的结果*/&lt;/span&gt;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; LeftBorderSum, RightBorderSum;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; center, i;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( left == right )  &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 递归的终止条件，子列只有1个数字 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( List[left] &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; )  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; List[left];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 下面是&amp;quot;分&amp;quot;的过程 */&lt;/span&gt;&lt;br&gt;    center = ( left + right ) / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;/* 找到中分点 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 递归求得两边子列的最大和 */&lt;/span&gt;&lt;br&gt;    MaxLeftSum = DivideAndConquer( List, left, center );&lt;br&gt;    MaxRightSum = DivideAndConquer( List, center+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, right );&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 下面求跨分界线的最大子列和 */&lt;/span&gt;&lt;br&gt;    MaxLeftBorderSum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; LeftBorderSum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=center; i&amp;gt;=left; i-- ) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 从中线向左扫描 */&lt;/span&gt;&lt;br&gt;        LeftBorderSum += List[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( LeftBorderSum &amp;gt; MaxLeftBorderSum )&lt;br&gt;            MaxLeftBorderSum = LeftBorderSum;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;/* 左边扫描结束 */&lt;/span&gt;&lt;br&gt; &lt;br&gt;    MaxRightBorderSum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; RightBorderSum = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=center+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=right; i++ ) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 从中线向右扫描 */&lt;/span&gt;&lt;br&gt;        RightBorderSum += List[i];&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( RightBorderSum &amp;gt; MaxRightBorderSum )&lt;br&gt;            MaxRightBorderSum = RightBorderSum;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;/* 右边扫描结束 */&lt;/span&gt;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 下面返回&amp;quot;治&amp;quot;的结果 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;MaxSubseqSum3&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; List[], &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; N )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 保持与前2种算法相同的函数接口 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; DivideAndConquer( List, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, N&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt; );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;第二章-线性结构&#34;&gt;&lt;a href=&#34;#第二章-线性结构&#34; class=&#34;headerlink&#34; title=&#34;第二章 线性结构&#34;&gt;&lt;/a&gt;第二章 线性结构&lt;/h1&gt;&lt;h2 id=&#34;2-1-线性表及其实现&#34;&gt;&lt;a href=&#34;#2-1-线性表及其实现&#34; class=&#34;headerlink&#34; title=&#34;2.1 线性表及其实现&#34;&gt;&lt;/a&gt;2.1 线性表及其实现&lt;/h2&gt;&lt;h3 id=&#34;数组实现&#34;&gt;&lt;a href=&#34;#数组实现&#34; class=&#34;headerlink&#34; title=&#34;数组实现&#34;&gt;&lt;/a&gt;数组实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; Position;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;List&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    ElementType Data[MAXSIZE];&lt;br&gt;    Position Last;&lt;br&gt;&amp;#125;;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 初始化 */&lt;/span&gt;&lt;br&gt;List &lt;span class=&#34;hljs-title function_&#34;&gt;MakeEmpty&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    List L;&lt;br&gt; &lt;br&gt;    L = (List)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; LNode));&lt;br&gt;    L-&amp;gt;Last = &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; L;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 查找 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ERROR -1&lt;/span&gt;&lt;br&gt; &lt;br&gt;Position &lt;span class=&#34;hljs-title function_&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, ElementType X )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Position i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;( i &amp;lt;= L-&amp;gt;Last &amp;amp;&amp;amp; L-&amp;gt;Data[i]!= X )&lt;br&gt;        i++;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( i &amp;gt; L-&amp;gt;Last )  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR; &lt;span class=&#34;hljs-comment&#34;&gt;/* 如果没找到，返回错误信息 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; i;  &lt;span class=&#34;hljs-comment&#34;&gt;/* 找到后返回的是存储位置 */&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 插入 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, ElementType X, Position P )&lt;/span&gt; &lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 在L的指定位置P前插入一个新元素X */&lt;/span&gt;&lt;br&gt;    Position i;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( L-&amp;gt;Last == MAXSIZE&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 表空间已满，不能插入 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;表满&amp;quot;&lt;/span&gt;); &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;; &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( P&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; || P&amp;gt;L-&amp;gt;Last+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 检查插入位置的合法性 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;位置不合法&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;; &lt;br&gt;    &amp;#125; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=L-&amp;gt;Last; i&amp;gt;=P; i-- )&lt;br&gt;        L-&amp;gt;Data[i+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = L-&amp;gt;Data[i]; &lt;span class=&#34;hljs-comment&#34;&gt;/* 将位置P及以后的元素顺序向后移动 */&lt;/span&gt;&lt;br&gt;    L-&amp;gt;Data[P] = X;  &lt;span class=&#34;hljs-comment&#34;&gt;/* 新元素插入 */&lt;/span&gt;&lt;br&gt;    L-&amp;gt;Last++;       &lt;span class=&#34;hljs-comment&#34;&gt;/* Last仍指向最后元素 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;; &lt;br&gt;&amp;#125; &lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 删除 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, Position P )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 从L中删除指定位置P的元素 */&lt;/span&gt;&lt;br&gt;    Position i;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( P&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; || P&amp;gt;L-&amp;gt;Last ) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 检查空表及删除位置的合法性 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;位置%d不存在元素&amp;quot;&lt;/span&gt;, P ); &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;; &lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;( i=P+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=L-&amp;gt;Last; i++ )&lt;br&gt;        L-&amp;gt;Data[i&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;] = L-&amp;gt;Data[i]; &lt;span class=&#34;hljs-comment&#34;&gt;/* 将位置P+1及以后的元素顺序向前移动 */&lt;/span&gt;&lt;br&gt;    L-&amp;gt;Last--; &lt;span class=&#34;hljs-comment&#34;&gt;/* Last仍指向最后元素 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;   &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;链表实现&#34;&gt;&lt;a href=&#34;#链表实现&#34; class=&#34;headerlink&#34; title=&#34;链表实现&#34;&gt;&lt;/a&gt;链表实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;PtrToLNode&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;LNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    ElementType Data;&lt;br&gt;    PtrToLNode Next;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; PtrToLNode Position;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; PtrToLNode List;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 查找 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ERROR NULL&lt;/span&gt;&lt;br&gt; &lt;br&gt;Position &lt;span class=&#34;hljs-title function_&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, ElementType X )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Position p = L; &lt;span class=&#34;hljs-comment&#34;&gt;/* p指向L的第1个结点 */&lt;/span&gt;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ( p &amp;amp;&amp;amp; p-&amp;gt;Data!=X )&lt;br&gt;        p = p-&amp;gt;Next;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 下列语句可以用 return p; 替换 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( p )&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; p;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 带头结点的插入 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, ElementType X, Position P )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 这里默认L有头结点 */&lt;/span&gt;&lt;br&gt;    Position tmp, pre;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 查找P的前一个结点 */&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( pre=L; pre&amp;amp;&amp;amp;pre-&amp;gt;Next!=P; pre=pre-&amp;gt;Next ) ;            &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( pre==&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; ) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* P所指的结点不在L中 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;插入位置参数错误\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 找到了P的前一个结点pre */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 在P前插入新结点 */&lt;/span&gt;&lt;br&gt;        tmp = (Position)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; LNode)); &lt;span class=&#34;hljs-comment&#34;&gt;/* 申请、填装结点 */&lt;/span&gt;&lt;br&gt;        tmp-&amp;gt;Data = X; &lt;br&gt;        tmp-&amp;gt;Next = P;&lt;br&gt;        pre-&amp;gt;Next = tmp;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 带头结点的删除 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Delete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( List L, Position P )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 这里默认L有头结点 */&lt;/span&gt;&lt;br&gt;    Position tmp, pre;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 查找P的前一个结点 */&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( pre=L; pre&amp;amp;&amp;amp;pre-&amp;gt;Next!=P; pre=pre-&amp;gt;Next ) ;            &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( pre==&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; || P==&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* P所指的结点不在L中 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;删除位置参数错误\n&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 找到了P的前一个结点pre */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 将P位置的结点删除 */&lt;/span&gt;&lt;br&gt;        pre-&amp;gt;Next = P-&amp;gt;Next;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(P);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;2-2-堆栈&#34;&gt;&lt;a href=&#34;#2-2-堆栈&#34; class=&#34;headerlink&#34; title=&#34;2.2 堆栈&#34;&gt;&lt;/a&gt;2.2 堆栈&lt;/h2&gt;&lt;h3 id=&#34;数组实现-1&#34;&gt;&lt;a href=&#34;#数组实现-1&#34; class=&#34;headerlink&#34; title=&#34;数组实现&#34;&gt;&lt;/a&gt;数组实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; Position;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    ElementType *Data; &lt;span class=&#34;hljs-comment&#34;&gt;/* 存储元素的数组 */&lt;/span&gt;&lt;br&gt;    Position Top;      &lt;span class=&#34;hljs-comment&#34;&gt;/* 栈顶指针 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxSize;       &lt;span class=&#34;hljs-comment&#34;&gt;/* 堆栈最大容量 */&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;Stack&lt;/span&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt;Stack &lt;span class=&#34;hljs-title function_&#34;&gt;CreateStack&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxSize )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Stack S = (Stack)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; SNode));&lt;br&gt;    S-&amp;gt;Data = (ElementType *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(MaxSize * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(ElementType));&lt;br&gt;    S-&amp;gt;Top = &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    S-&amp;gt;MaxSize = MaxSize;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; S;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsFull&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (S-&amp;gt;Top == S-&amp;gt;MaxSize&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Push&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S, ElementType X )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( IsFull(S) ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;堆栈满&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        S-&amp;gt;Data[++(S-&amp;gt;Top)] = X;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsEmpty&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (S-&amp;gt;Top == &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;ElementType &lt;span class=&#34;hljs-title function_&#34;&gt;Pop&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( IsEmpty(S) ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;堆栈空&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR; &lt;span class=&#34;hljs-comment&#34;&gt;/* ERROR是ElementType的特殊值，标志错误 */&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ( S-&amp;gt;Data[(S-&amp;gt;Top)--] );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;链表实现-1&#34;&gt;&lt;a href=&#34;#链表实现-1&#34; class=&#34;headerlink&#34; title=&#34;链表实现&#34;&gt;&lt;/a&gt;链表实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;PtrToSNode&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    ElementType Data;&lt;br&gt;    PtrToSNode Next;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; PtrToSNode Stack;&lt;br&gt; &lt;br&gt;Stack &lt;span class=&#34;hljs-title function_&#34;&gt;CreateStack&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( )&lt;/span&gt; &lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 构建一个堆栈的头结点，返回该结点指针 */&lt;/span&gt;&lt;br&gt;    Stack S;&lt;br&gt; &lt;br&gt;    S = (Stack)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; SNode));&lt;br&gt;    S-&amp;gt;Next = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; S;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsEmpty&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;( Stack S )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 判断堆栈S是否为空，若是返回true；否则返回false */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ( S-&amp;gt;Next == &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt; );&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Push&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S, ElementType X )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 将元素X压入堆栈S */&lt;/span&gt;&lt;br&gt;    PtrToSNode TmpCell;&lt;br&gt; &lt;br&gt;    TmpCell = (PtrToSNode)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; SNode));&lt;br&gt;    TmpCell-&amp;gt;Data = X;&lt;br&gt;    TmpCell-&amp;gt;Next = S-&amp;gt;Next;&lt;br&gt;    S-&amp;gt;Next = TmpCell;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;ElementType &lt;span class=&#34;hljs-title function_&#34;&gt;Pop&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Stack S )&lt;/span&gt;  &lt;br&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/* 删除并返回堆栈S的栈顶元素 */&lt;/span&gt;&lt;br&gt;    PtrToSNode FirstCell;&lt;br&gt;    ElementType TopElem;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( IsEmpty(S) ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;堆栈空&amp;quot;&lt;/span&gt;); &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        FirstCell = S-&amp;gt;Next; &lt;br&gt;        TopElem = FirstCell-&amp;gt;Data;&lt;br&gt;        S-&amp;gt;Next = FirstCell-&amp;gt;Next;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;(FirstCell);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; TopElem;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;2-3-队列&#34;&gt;&lt;a href=&#34;#2-3-队列&#34; class=&#34;headerlink&#34; title=&#34;2.3 队列&#34;&gt;&lt;/a&gt;2.3 队列&lt;/h2&gt;&lt;h3 id=&#34;数组实现-2&#34;&gt;&lt;a href=&#34;#数组实现-2&#34; class=&#34;headerlink&#34; title=&#34;数组实现&#34;&gt;&lt;/a&gt;数组实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; Position;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;QNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    ElementType *Data;     &lt;span class=&#34;hljs-comment&#34;&gt;/* 存储元素的数组 */&lt;/span&gt;&lt;br&gt;    Position Front, Rear;  &lt;span class=&#34;hljs-comment&#34;&gt;/* 队列的头、尾指针 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxSize;           &lt;span class=&#34;hljs-comment&#34;&gt;/* 队列最大容量 */&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;QNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;Queue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt;Queue &lt;span class=&#34;hljs-title function_&#34;&gt;CreateQueue&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxSize )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Queue Q = (Queue)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; QNode));&lt;br&gt;    Q-&amp;gt;Data = (ElementType *)&lt;span class=&#34;hljs-built_in&#34;&gt;malloc&lt;/span&gt;(MaxSize * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(ElementType));&lt;br&gt;    Q-&amp;gt;Front = Q-&amp;gt;Rear = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    Q-&amp;gt;MaxSize = MaxSize;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Q;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsFull&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ((Q-&amp;gt;Rear+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)%Q-&amp;gt;MaxSize == Q-&amp;gt;Front);&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;AddQ&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q, ElementType X )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( IsFull(Q) ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;队列满&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        Q-&amp;gt;Rear = (Q-&amp;gt;Rear+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)%Q-&amp;gt;MaxSize;&lt;br&gt;        Q-&amp;gt;Data[Q-&amp;gt;Rear] = X;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsEmpty&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Q-&amp;gt;Front == Q-&amp;gt;Rear);&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;ElementType &lt;span class=&#34;hljs-title function_&#34;&gt;DeleteQ&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( IsEmpty(Q) ) &amp;#123; &lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;队列空&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;  &amp;#123;&lt;br&gt;        Q-&amp;gt;Front =(Q-&amp;gt;Front+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)%Q-&amp;gt;MaxSize;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;  Q-&amp;gt;Data[Q-&amp;gt;Front];&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;链表实现-2&#34;&gt;&lt;a href=&#34;#链表实现-2&#34; class=&#34;headerlink&#34; title=&#34;链表实现&#34;&gt;&lt;/a&gt;链表实现&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Node&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;PtrToNode&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Node&lt;/span&gt; &amp;#123;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 队列中的结点 */&lt;/span&gt;&lt;br&gt;    ElementType Data;&lt;br&gt;    PtrToNode Next;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; PtrToNode Position;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;QNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    Position Front, Rear;  &lt;span class=&#34;hljs-comment&#34;&gt;/* 队列的头、尾指针 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; MaxSize;           &lt;span class=&#34;hljs-comment&#34;&gt;/* 队列最大容量 */&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;QNode&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;Queue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IsEmpty&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ( Q-&amp;gt;Front == &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;ElementType &lt;span class=&#34;hljs-title function_&#34;&gt;DeleteQ&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Queue Q )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Position FrontCell; &lt;br&gt;    ElementType FrontElem;&lt;br&gt;     &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;  ( IsEmpty(Q) ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;队列空&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ERROR;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        FrontCell = Q-&amp;gt;Front;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( Q-&amp;gt;Front == Q-&amp;gt;Rear ) &lt;span class=&#34;hljs-comment&#34;&gt;/* 若队列只有一个元素 */&lt;/span&gt;&lt;br&gt;            Q-&amp;gt;Front = Q-&amp;gt;Rear = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;/* 删除后队列置为空 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;                     &lt;br&gt;            Q-&amp;gt;Front = Q-&amp;gt;Front-&amp;gt;Next;&lt;br&gt;        FrontElem = FrontCell-&amp;gt;Data;&lt;br&gt; &lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;free&lt;/span&gt;( FrontCell );  &lt;span class=&#34;hljs-comment&#34;&gt;/* 释放被删除结点空间  */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;  FrontElem;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;第三章-树&#34;&gt;&lt;a href=&#34;#第三章-树&#34; class=&#34;headerlink&#34; title=&#34;第三章 树&#34;&gt;&lt;/a&gt;第三章 树&lt;/h1&gt;&lt;h2 id=&#34;3-3-二叉树的遍历&#34;&gt;&lt;a href=&#34;#3-3-二叉树的遍历&#34; class=&#34;headerlink&#34; title=&#34;3.3 二叉树的遍历&#34;&gt;&lt;/a&gt;3.3 二叉树的遍历&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;InorderTraversal&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( BinTree BT )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( BT ) &amp;#123;&lt;br&gt;        InorderTraversal( BT-&amp;gt;Left );&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;/* 此处假设对BT结点的访问就是打印数据 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;, BT-&amp;gt;Data); &lt;span class=&#34;hljs-comment&#34;&gt;/* 假设数据为整型 */&lt;/span&gt;&lt;br&gt;        InorderTraversal( BT-&amp;gt;Right );&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;PreorderTraversal&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( BinTree BT )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( BT ) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;, BT-&amp;gt;Data );&lt;br&gt;        PreorderTraversal( BT-&amp;gt;Left );&lt;br&gt;        PreorderTraversal( BT-&amp;gt;Right );&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;PostorderTraversal&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( BinTree BT )&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( BT ) &amp;#123;&lt;br&gt;        PostorderTraversal( BT-&amp;gt;Left );&lt;br&gt;        PostorderTraversal( BT-&amp;gt;Right );&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;, BT-&amp;gt;Data);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;LevelorderTraversal&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;( BinTree BT )&lt;/span&gt;&lt;br&gt;&amp;#123; &lt;br&gt;    Queue Q; &lt;br&gt;    BinTree T;&lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( !BT ) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;/* 若是空树则直接返回 */&lt;/span&gt;&lt;br&gt;     &lt;br&gt;    Q = CreatQueue(); &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建空队列Q */&lt;/span&gt;&lt;br&gt;    AddQ( Q, BT );&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ( !IsEmpty(Q) ) &amp;#123;&lt;br&gt;        T = DeleteQ( Q );&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;, T-&amp;gt;Data); &lt;span class=&#34;hljs-comment&#34;&gt;/* 访问取出队列的结点 */&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( T-&amp;gt;Left )   AddQ( Q, T-&amp;gt;Left );&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ( T-&amp;gt;Right )  AddQ( Q, T-&amp;gt;Right );&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

 ]]></description>
        </item>
    </channel>
</rss>
