{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"rtx\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2020/2b1e625a/",
            "url": "https://www.oikiou.top/2020/2b1e625a/",
            "title": "RTX",
            "date_published": "2020-08-21T14:57:15.000Z",
            "content_html": "<h1 id=\"创建一个RTX项目\"><a href=\"#创建一个RTX项目\" class=\"headerlink\" title=\"创建一个RTX项目\"></a>创建一个RTX项目</h1><p><strong>Create an RTX5 Project</strong></p>\n<ol>\n<li><p>创建一个新的项目,并选择单片机设备。</p>\n<p>Create a new project and select a microcontroller device.</p>\n</li>\n<li><p>设置 <strong>CMSIS::CORE</strong> 和 <strong>CMSIS::RTOS2 (API)::Keil RTX5</strong>，在下拉框中你可以选择添加RTX库或者添加完整源代码。</p>\n<p>In the Manage Run-Time Environment window, select <strong>CMSIS::CORE</strong> and <strong>CMSIS::RTOS2 (API)::Keil RTX5</strong>. You can choose to either add RTX as a library (Variant: <strong>Library</strong>) or to add the full source code (Variant: <strong>Source</strong> - required if using the <a href=\"http://www.keil.com/pack/doc/compiler/EventRecorder/html/index.html\"><strong>Event Recorder</strong></a>):</p>\n</li>\n<li><p>添加启动文件 <strong>Device::Startup</strong></p>\n</li>\n<li><p>一个示例代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">osKernelInitialize();/ /初始化RTX<br><span class=\"hljs-title function_\">NVIC_SetPriorityGrouping</span> <span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>;/ /设置优先级分组<br>tread_id =osThreadNew(tread_func,空,空);/ /创建一些线程<br>osKernelStart();/ /开始RTX内核<br></code></pre></td></tr></table></figure>\n\n\n\n<p>注：</p>\n<ol>\n<li><p>添加RTX特定功能的支持</p>\n<p>如果你需要一些的<a href=\"group__rtx5__specific.html\">RTX特定功能</a>在您的应用程序代码中,# include<a href=\"theory_of_operation.html#rtx_os_h\">头文件rtx_os.h</a>。 如使能<a href=\"theory_of_operation.html#lowPower\">低功耗</a>和<a href=\"theory_of_operation.html#TickLess\">tick-less</a>操作模式。</p>\n</li>\n<li><p>添加事件记录器</p>\n<ul>\n<li><p>打开MRTE(Manage Run-Time Environment)窗口</p>\n</li>\n<li><p>确保RTX5使用的是源代码(Source)模式</p>\n</li>\n<li><p>打开 <strong>Compiler::Event Recorder</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"中断-Cortex-M\"><a href=\"#中断-Cortex-M\" class=\"headerlink\" title=\"中断 (Cortex-M)\"></a>中断 (Cortex-M)</h1><p>Cortex-M处理器,RTX5内核使用以下异常中断。 下面的表格还列出了必须分配给这些中断的优先级。</p>\n<table>\n<thead>\n<tr>\n<th>处理程序</th>\n<th>优先级</th>\n<th>中断&#x2F;异常</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SysTick</td>\n<td>最低</td>\n<td>内核系统定时器中断产生周期性的计时器滴答声</td>\n</tr>\n<tr>\n<td>PendSV</td>\n<td>最低</td>\n<td>PendSV(系统级服务请求)当调用某些RTX功能<strong>处理程序</strong>模式</td>\n</tr>\n<tr>\n<td>SVC</td>\n<td>最低+ 1</td>\n<td>主管叫用来输入RTOS内核<strong>线程</strong>模式</td>\n</tr>\n</tbody></table>\n<p>可以使用其他设备中断没有限制。 ARM Cortex-M3 &#x2F; M4 &#x2F; M7 &#x2F; M23 &#x2F; M33 &#x2F; M35P处理器,从未被RTX禁用中断内核。</p>\n<p><strong>使用中断的优先级分组</strong></p>\n<ul>\n<li>在调用函数<a href=\"group__CMSIS__RTOS__KernelCtrl.html#ga9ae2cc00f0d89d7b6a307bba942b5221\">osKernelStart（）</a>之前，应使用CMSIS-Core函数NVIC_SetPriorityGrouping配置中断优先级分组。RTX内核使用优先级组值来设置SysTick和PendSV中断的优先级。</li>\n<li>RTX内核为上表中列出的中断&#x2F;异常设置优先级，并使用最低的两个优先级。</li>\n<li>不要更改RTX内核使用的优先级。如果无法避免，请确保SysTick &#x2F; PendSV的抢占优先级低于SVC。</li>\n<li>允许的优先级组值为0到6.优先级组值7将导致RTX失败，因为只有一个可用优先级。</li>\n<li>的<strong>main函数堆叠</strong>被用于运行RTX功能。因此，需要为RTX内核执行配置足够的堆栈。</li>\n</ul>\n",
            "tags": [
                "rtos",
                "rtx",
                "keil"
            ]
        }
    ]
}