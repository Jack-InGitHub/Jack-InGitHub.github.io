{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"stm32\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2019/b9b15cd2/",
            "url": "https://www.oikiou.top/2019/b9b15cd2/",
            "title": "蓝桥杯STM32国赛笔记",
            "date_published": "2019-06-04T09:23:05.000Z",
            "content_html": "<h1 id=\"CT117E-EX-扩展板笔记\"><a href=\"#CT117E-EX-扩展板笔记\" class=\"headerlink\" title=\"CT117E-EX 扩展板笔记\"></a>CT117E-EX 扩展板笔记</h1><h2 id=\"数码管（74HC595）\"><a href=\"#数码管（74HC595）\" class=\"headerlink\" title=\"数码管（74HC595）\"></a>数码管（74HC595）</h2><h3 id=\"RCLK-R-存储寄存器读取\"><a href=\"#RCLK-R-存储寄存器读取\" class=\"headerlink\" title=\"RCLK(R:存储寄存器读取)\"></a>RCLK(R:存储寄存器读取)</h3><ul>\n<li>上升沿    移位寄存器进入存储寄存器</li>\n<li>下降沿    数据保持不变</li>\n</ul>\n<h3 id=\"SCK-S-送入595\"><a href=\"#SCK-S-送入595\" class=\"headerlink\" title=\"SCK(S:送入595)\"></a>SCK(S:送入595)</h3><ul>\n<li>上升沿    数据寄存器数据移位。Q0–&gt;Q1–&gt;Q2–&gt;Q3–&gt;…–&gt;Q7;</li>\n<li>下降沿    移位寄存器数据不变</li>\n</ul>\n<h3 id=\"SER（数据脚）\"><a href=\"#SER（数据脚）\" class=\"headerlink\" title=\"SER（数据脚）\"></a>SER（数据脚）</h3><ul>\n<li>串行数据输入端</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">SEG_DisplayValue</span><span class=\"hljs-params\">(u8 Bit1,  u8 Bit2, u8 Bit3)</span><br>&#123;<br>\tu8 i = <span class=\"hljs-number\">0</span>;\t<span class=\"hljs-comment\">//</span><br>\tu8 code_tmp = <span class=\"hljs-number\">0</span>;<br><br>\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    *略过部分代码</span><br><span class=\"hljs-comment\">    */</span><br>\t<br>\tcode_tmp = Seg7[Bit1];<br>\t<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">8</span>;i++)&#123;<br><br>\t\t<span class=\"hljs-keyword\">if</span>(code_tmp &amp; <span class=\"hljs-number\">0x80</span>)&#123;<br>\t\t\tSER_H;<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\t\tSER_L;<br>\t\t&#125;<br>\t\tSCK_H;<span class=\"hljs-comment\">//数据移位</span><br>\t\tcode_tmp = code_tmp &lt;&lt; <span class=\"hljs-number\">1</span>;   <br>\t\tSCK_L;<br>\t&#125;\t\t<br>\tRCLK_H;\t<span class=\"hljs-comment\">//上升沿时移位寄存器进入存储寄存器</span><br>\tRCLK_L;\t<span class=\"hljs-comment\">//下降沿是数据保持不变</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数码管显示数组\"><a href=\"#数码管显示数组\" class=\"headerlink\" title=\"数码管显示数组\"></a>数码管显示数组</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">u8 code t_display[]=&#123;                       <span class=\"hljs-comment\">//标准字库</span><br><span class=\"hljs-comment\">//   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F</span><br><span class=\"hljs-number\">0x3F</span>,<span class=\"hljs-number\">0x06</span>,<span class=\"hljs-number\">0x5B</span>,<span class=\"hljs-number\">0x4F</span>,<span class=\"hljs-number\">0x66</span>,<span class=\"hljs-number\">0x6D</span>,<span class=\"hljs-number\">0x7D</span>,<span class=\"hljs-number\">0x07</span>,<span class=\"hljs-number\">0x7F</span>,<span class=\"hljs-number\">0x6F</span>,<span class=\"hljs-number\">0x77</span>,<span class=\"hljs-number\">0x7C</span>,<span class=\"hljs-number\">0x39</span>,<span class=\"hljs-number\">0x5E</span>,<span class=\"hljs-number\">0x79</span>,<span class=\"hljs-number\">0x71</span>,<br><br><span class=\"hljs-comment\">//black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y</span><br><span class=\"hljs-number\">0x00</span>,<span class=\"hljs-number\">0x40</span>,<span class=\"hljs-number\">0x76</span>,<span class=\"hljs-number\">0x1E</span>,<span class=\"hljs-number\">0x70</span>,<span class=\"hljs-number\">0x38</span>,<span class=\"hljs-number\">0x37</span>,<span class=\"hljs-number\">0x5C</span>,<span class=\"hljs-number\">0x73</span>,<span class=\"hljs-number\">0x3E</span>,<span class=\"hljs-number\">0x78</span>,<span class=\"hljs-number\">0x3d</span>,<span class=\"hljs-number\">0x67</span>,<span class=\"hljs-number\">0x50</span>,<span class=\"hljs-number\">0x37</span>,<span class=\"hljs-number\">0x6e</span>,<br>    <br> <span class=\"hljs-comment\">//0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1</span><br><span class=\"hljs-number\">0xBF</span>,<span class=\"hljs-number\">0x86</span>,<span class=\"hljs-number\">0xDB</span>,<span class=\"hljs-number\">0xCF</span>,<span class=\"hljs-number\">0xE6</span>,<span class=\"hljs-number\">0xED</span>,<span class=\"hljs-number\">0xFD</span>,<span class=\"hljs-number\">0x87</span>,<span class=\"hljs-number\">0xFF</span>,<span class=\"hljs-number\">0xEF</span>,<span class=\"hljs-number\">0x46</span>&#125;;    <br></code></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//   0    1    2    3    4    5    6    7    8    9</span><br><br><span class=\"hljs-number\">0x3F</span>,<span class=\"hljs-number\">0x06</span>,<span class=\"hljs-number\">0x5B</span>,<span class=\"hljs-number\">0x4F</span>,<span class=\"hljs-number\">0x66</span>,<span class=\"hljs-number\">0x6D</span>,<span class=\"hljs-number\">0x7D</span>,<span class=\"hljs-number\">0x07</span>,<span class=\"hljs-number\">0x7F</span>,<span class=\"hljs-number\">0x6F</span>,<span class=\"hljs-number\">0x77</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"ADC按键\"><a href=\"#ADC按键\" class=\"headerlink\" title=\"ADC按键\"></a>ADC按键</h2><h3 id=\"ADC-KEY-引脚\"><a href=\"#ADC-KEY-引脚\" class=\"headerlink\" title=\"ADC KEY 引脚\"></a>ADC KEY 引脚</h3><p> PA5      ADC_12_<strong>IN5</strong></p>\n<h3 id=\"按键值\"><a href=\"#按键值\" class=\"headerlink\" title=\"按键值\"></a>按键值</h3><table>\n<thead>\n<tr>\n<th align=\"left\">ADC值</th>\n<th>ADC按键区间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td>&lt;100</td>\n</tr>\n<tr>\n<td align=\"left\">200</td>\n<td>&lt;400</td>\n</tr>\n<tr>\n<td align=\"left\">600</td>\n<td>&lt;800</td>\n</tr>\n<tr>\n<td align=\"left\">1000</td>\n<td>&lt;1200</td>\n</tr>\n<tr>\n<td align=\"left\">1300-1400</td>\n<td>&lt;1600</td>\n</tr>\n<tr>\n<td align=\"left\">1700-1900</td>\n<td>&lt;2000</td>\n</tr>\n<tr>\n<td align=\"left\">2100-2400</td>\n<td>&lt;2600</td>\n</tr>\n<tr>\n<td align=\"left\">2800-3000</td>\n<td>&lt;3200</td>\n</tr>\n</tbody></table>\n<h2 id=\"DHT11模块\"><a href=\"#DHT11模块\" class=\"headerlink\" title=\"DHT11模块\"></a>DHT11模块</h2><h3 id=\"芯片性能\"><a href=\"#芯片性能\" class=\"headerlink\" title=\"芯片性能\"></a>芯片性能</h3><ul>\n<li>温度测量范围：0－50℃</li>\n<li>湿度测量范围：20－90％RH</li>\n<li>采样周期 ：1S</li>\n</ul>\n<h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><table>\n<thead>\n<tr>\n<th>Byte0</th>\n<th>Byte1</th>\n<th>Byte2</th>\n<th>Byte3</th>\n<th>Byte4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>湿度整数数据</td>\n<td>湿度小数数据</td>\n<td>温度整数数据</td>\n<td>温度小数数据</td>\n<td>校验和</td>\n</tr>\n</tbody></table>\n<h3 id=\"编程思路\"><a href=\"#编程思路\" class=\"headerlink\" title=\"编程思路\"></a>编程思路</h3><ul>\n<li>主机输出</li>\n<li>主机拉  <strong>低</strong>  至少 <font color=\"red\">18ms</font></li>\n<li>主机拉  <strong>高</strong>  <font color=\"red\">20-40us</font></li>\n<li>主机输入</li>\n<li>主机等待信号线拉 <strong>低</strong>   （DHT11发送持续  <strong>40-50us</strong> 的  <strong>低</strong>   响应信号）</li>\n<li>主机等待信号线拉 <strong>高</strong>   （DHT11发送持续  <strong>40-50us</strong> 的  <strong>高</strong>   拉高信号）</li>\n<li>for(){   &#x2F;&#x2F;40bit数据       5Byte<ul>\n<li>主机等待数据线拉<strong>低</strong>    （数据Bit开始）</li>\n<li>主机等待数据线拉<strong>高</strong>    </li>\n<li>主机延时 时间大于<strong>28us</strong>小于<strong>70us</strong>    （ <font color=\"red\">Type值 40us</font>）</li>\n<li>主机读取数据</li>\n</ul>\n</li>\n<li>}</li>\n<li>主机输出</li>\n<li>主机拉高</li>\n</ul>\n<h3 id=\"技巧-amp-TIP\"><a href=\"#技巧-amp-TIP\" class=\"headerlink\" title=\"技巧&amp;TIP\"></a>技巧&amp;TIP</h3><ul>\n<li><p>DHT11分辨率都是整数级别的<strong>读取小数的数据部分没有意义</strong>。（全为0）</p>\n</li>\n<li><p>读取间隔建议大于100ms（采样 1S 过高的读取频率没有意义）</p>\n</li>\n<li><p>在72MHz频率下 <strong>Delay_LCD</strong> 运行一次大约 <strong>375us</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay_LCD</span><span class=\"hljs-params\">(u16 n)</span><br>&#123;<br>\tu16 i,j;<br>\t<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>;i&lt;n;++i)<br>\t\t<span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">3000</span>;++j);<br>&#125;<br><span class=\"hljs-comment\">//将里面的 3000 改成 8 运行一次大概 1us </span><br><span class=\"hljs-comment\">//运行次数越少比1us越多</span><br><span class=\"hljs-comment\">//运行次数越多比1us越少</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"18B20模块\"><a href=\"#18B20模块\" class=\"headerlink\" title=\"18B20模块\"></a>18B20模块</h2><h3 id=\"芯片性能-1\"><a href=\"#芯片性能-1\" class=\"headerlink\" title=\"芯片性能\"></a>芯片性能</h3><ul>\n<li>±0.5°C accuracy from -10°C to +85°C</li>\n<li>Can be powered from data line. Power supply range is 3.0V to 5.5V</li>\n<li>Converts 12-bit temperature to digital word in 750 ms (max.)</li>\n</ul>\n<h3 id=\"数据格式-1\"><a href=\"#数据格式-1\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><h4 id=\"数据格式-2\"><a href=\"#数据格式-2\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h4><ul>\n<li><p>写Byte数据先写<strong>低位</strong></p>\n</li>\n<li><p>读Byte数据先读出的是<strong>低位</strong></p>\n</li>\n<li><p>读出来的温度先是  <strong>LSM 8bit</strong>  然后是 MSB 8bit</p>\n</li>\n</ul>\n<h4 id=\"总线协议-amp-时序\"><a href=\"#总线协议-amp-时序\" class=\"headerlink\" title=\"总线协议&amp;时序\"></a>总线协议&amp;时序</h4><p><img src=\"/2019/b9b15cd2/01-1557625836489.png\" alt=\"复位时序\"></p>\n<p><img src=\"/2019/b9b15cd2/02.png\" alt=\"读写时序\"></p>\n<h3 id=\"编程思路-1\"><a href=\"#编程思路-1\" class=\"headerlink\" title=\"编程思路\"></a>编程思路</h3><p>0xCC\tOW_SKIP_ROM</p>\n<p>0x44\tDS18B20_CONVERT</p>\n<p>0xCC\tOW_SKIP_ROM</p>\n<p>0xBE\tDS18B20_READ</p>\n<h2 id=\"LIS302DL\"><a href=\"#LIS302DL\" class=\"headerlink\" title=\"LIS302DL\"></a>LIS302DL</h2><p>NULL</p>\n<h2 id=\"光敏-D-amp-A\"><a href=\"#光敏-D-amp-A\" class=\"headerlink\" title=\"光敏 D&amp;A\"></a>光敏 D&amp;A</h2><h3 id=\"光敏D\"><a href=\"#光敏D\" class=\"headerlink\" title=\"光敏D\"></a>光敏D</h3><ul>\n<li>GPIOA_Pin_3 </li>\n<li>GPIO_Mode_IPU</li>\n</ul>\n<h3 id=\"光敏A\"><a href=\"#光敏A\" class=\"headerlink\" title=\"光敏A\"></a>光敏A</h3><ul>\n<li><p>GPIOA_Pin_4</p>\n</li>\n<li><p>ADC1</p>\n</li>\n<li><p>ADC_Channel_4</p>\n</li>\n</ul>\n<h2 id=\"电位器\"><a href=\"#电位器\" class=\"headerlink\" title=\"电位器\"></a>电位器</h2><p>NULL</p>\n<h2 id=\"PULS-amp-PWM\"><a href=\"#PULS-amp-PWM\" class=\"headerlink\" title=\"PULS&amp;PWM\"></a>PULS&amp;PWM</h2><p>PA1        TIM2_CH2</p>\n<p>PA2        TIM2_CH3</p>\n<p>PA6        TIM3_CH1</p>\n<p>PA7        TIM3_CH2</p>\n<h2 id=\"界面颜色搭配\"><a href=\"#界面颜色搭配\" class=\"headerlink\" title=\"界面颜色搭配\"></a>界面颜色搭配</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">LCD_SetBackColor(Blue);<br>LCD_SetTextColor(White);<br><span class=\"hljs-comment\">//Line0\t\t1</span><br>LCD_SetBackColor(White);<br>LCD_SetTextColor(Blue);<br><span class=\"hljs-comment\">//Line1-7\t7</span><br>LCD_SetBackColor(Blue);<br>LCD_SetTextColor(Black);<br><span class=\"hljs-comment\">//Line89\t2</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "stm32",
                "蓝桥杯",
                "国赛",
                "ct117e"
            ]
        },
        {
            "id": "https://www.oikiou.top/2018/2d20bb21/",
            "url": "https://www.oikiou.top/2018/2d20bb21/",
            "title": "STM32F070系列的IAP程序",
            "date_published": "2018-08-16T11:20:02.000Z",
            "content_html": "<h1 id=\"STM32F070系列的IAP程序\"><a href=\"#STM32F070系列的IAP程序\" class=\"headerlink\" title=\"STM32F070系列的IAP程序\"></a>STM32F070系列的IAP程序</h1><h1 id=\"总程序思路\"><a href=\"#总程序思路\" class=\"headerlink\" title=\"总程序思路\"></a>总程序思路</h1><p><img src=\"/2018/2d20bb21/70.png\" alt=\"bootloader\"></p>\n<p><img src=\"/2018/2d20bb21/70-16635087132592.png\" alt=\"app\"></p>\n<p>之所以不直接将接收到的BIN文件直接写入到APP区域是因为如果升级过程出现某些错误时，程序将会清除升级标志位，并跳转到APP运行程序减少产品变砖的概率。</p>\n<p><em><strong>注：如果在  将BacpupApp区域的BIN文件拷贝到App区域   这一步如果拷贝两次都校验失败将会导致程序停掉。</strong></em></p>\n<h1 id=\"STM32内Flash区域划分\"><a href=\"#STM32内Flash区域划分\" class=\"headerlink\" title=\"STM32内Flash区域划分\"></a>STM32内Flash区域划分</h1><p> <img src=\"/2018/2d20bb21/70-16635087883674.png\" alt=\"stm32\"></p>\n<p><img src=\"/2018/2d20bb21/70-16635087985376.png\" alt=\"flash\"></p>\n<p>此次使用的MCU型号是STM32F070CB，由其Flash组织特性可知其Flash一页为1KB（若总Flash大小，大于等于256KB则其一页大小为2KB），为了程序简单高效，所以使FLAG占用一页（1KB）的位置（Flag只使用了前2B的空间）。</p>\n<h1 id=\"STM32与上位机通信过程\"><a href=\"#STM32与上位机通信过程\" class=\"headerlink\" title=\"STM32与上位机通信过程\"></a>STM32与上位机通信过程</h1><h2 id=\"上位机发送给STM32\"><a href=\"#上位机发送给STM32\" class=\"headerlink\" title=\"上位机发送给STM32\"></a>上位机发送给STM32</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 16B 命令数据长度</span><br><span class=\"hljs-comment\"># 注：命令长度设置为 0x10  即16B大小</span><br>0x55  0xAA   0x01    命令长度    命令码   固件总包数   0x00   0x00   0x00   0x00   0x00   0x00   0x00  0x00   0x00    和校验<br><br><span class=\"hljs-comment\"># 1024+7B 固件数据长度</span><br>0x55  0xAA   0x01  包号  命令码     0xFF   BINData[1024]    和校验<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"STM32发送给上位机\"><a href=\"#STM32发送给上位机\" class=\"headerlink\" title=\"STM32发送给上位机\"></a>STM32发送给上位机</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 16B 命令数据长度</span><br><span class=\"hljs-comment\"># 注：命令长度设置为 0x10  即16B大小</span><br>0x55  0xAA   0x01  命令长度  命令码    0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00    和校验<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2018/2d20bb21/70-16635090195918.png\" alt=\"img\"></p>\n<h1 id=\"IAP应用说明\"><a href=\"#IAP应用说明\" class=\"headerlink\" title=\"IAP应用说明\"></a>IAP应用说明</h1><ul>\n<li>App区域和Bootloader区域都有IAP实现的程序段，所以要实现IAP就要要求App区域和Bootloader的程序都可以正常工作。</li>\n</ul>\n<p>App程序需要做的修改：</p>\n<ol>\n<li>添加 iap.c 文件，并在main函数最前面调用 iap.c 里的函数    iRemapIrqVector();   重映射中断向量</li>\n<li>用这种方法重映射中断向量，RAM的前0xC0个字节不能用，需要将RAM始地址修改到  0x2000 00C0 处，将Size大小减掉0xC0</li>\n<li>ROM起始地址修改到  0x0800 3000 处，将Size大小设置成0xE800（58KB）</li>\n<li>在程序的串口命令判断中添加IAP升级命令判断，满足条件则使能升级标志位，并重启MCU进入Bootloader</li>\n<li>刷入APP和Bootloader</li>\n</ol>\n<h1 id=\"关于移植到其他芯片\"><a href=\"#关于移植到其他芯片\" class=\"headerlink\" title=\"关于移植到其他芯片\"></a>关于移植到其他芯片</h1><ol>\n<li>如果移植到F103系列芯片的话重映射中断向量将变得非常简单，一行代码就搞定，也就无需修改RAM起始地址</li>\n<li>如果移植的芯片容量不一样需要查看其一个页的大小是多少，然后重新划分Flash区域</li>\n</ol>\n<p>Bootloader源码下载：<a href=\"https://download.csdn.net/download/weixin_42078116/10610445\">源码</a><br>App区源码：待加入<br>上位机程序和源码：<a href=\"https://download.csdn.net/download/weixin_42078116/10610490\">源码</a></p>\n<p>参考资料：</p>\n<p><a href=\"http://www.openedv.com/forum.php?mod=viewthread&tid=85906\">STM32实现IAP功能的学习笔记</a></p>\n<p><a href=\"http://www.openedv.com/forum.php?mod=viewthread&tid=85906\">STM32实现IAP功能的学习笔记</a> </p>\n<h1 id=\"扩展：STM32运行过程\"><a href=\"#扩展：STM32运行过程\" class=\"headerlink\" title=\"扩展：STM32运行过程\"></a>扩展：STM32运行过程</h1><blockquote>\n<p>  TIPS：STM32上电后先  <strong>执行复位中断 Reset_Handler</strong>  然后才会进入  main 函数。</p>\n<p>  STM32的程序运行过程在很多资料里也都有介绍，因为STM32F103的单片机是基于Cortex-M3核的，它的内部主要是通过中断向量表来响应各种中断，内部闪存的起始地址是0x08000000，中断向量表的起始地址是0x8000004，程序启动后，将首先从“中断向量表”取出复位中断向量执行复位中断程序完成启动，当中断来临时STM32 的内部硬件机制亦会自动将 PC 指针定位到“中断向量表”处，并根据中断源取出对应的中断向量执行相应的中断服务程序。</p>\n<p>  <img src=\"/2018/2d20bb21/70-166350916978910.png\" alt=\"img\"></p>\n<p>  如上图所示STM32的正常启动流程是：<br>  a. STM32上电后会从 0x8000004 处取出复位中断向量的地址，并跳转执行复位中断服务程序，如标号1所示；<br>  b. 复位中断复位程序执行完成之后就会跳转到我们的main函数如标号2所示；<br>  c. main函数一般为死循环，当其收到某一中断请求之后STM32会强制把PC指针指向中断向量表，如标号3所示；<br>  d. 查询中断向量表，根据中断源来跳转到相应的中断服务程序中执行响应的操作；如标号4、5所示；<br>  e. 执行完中断服务程序之后会再回到main函数中，如标号6所示。</p>\n<p>  以上是STM32的正常运行过程，而当加入IAP程序之后，运行流程就如下所示：</p>\n<p>  <img src=\"/2018/2d20bb21/70-166350918005812.png\" alt=\"img\"></p>\n<p>  加入IAP后程序运行如下：<br>  a. STM32复位之后还是从0x8000004处获取中断向量表的地址，并跳转执行复位中断服务程序，如标号1所示；<br>  b. 执行完复位中断服务程序之后回调转到IAP的main函数中，如标号2所示；<br>  c. IAP的过程就是通过某种选定的通信方式（如串口）来接收程序文件，并且存储在指定的FLASH空间里，随后会加载新的程序，而新程序<br>  的复位中断向量起始地址为0X08000004+N+M，取出新程序的复位中断向量的地址，并跳转执行新程序的复位中断服务程序，随后跳转<br>  至新程序的 main 函数，如标号3、4所示；<br>  d. 此时在STM32的FLASH里面会有两个中断向量表，在新程序 main 函数执行的过程中，当中断来临时PC指针仍会回跳转至地址为<br>  0x8000004 中断向量表处，而并不是新程序的中断向量表，这是由STM32的硬件机制决定的，如标号5所示；<br>  e. 查询中断向量表，根据中断源来跳转到新的中断服务程序中执行响应的操作，如标号6所示；<br>  f. 执行完中断服务程序之后会再回到main函数中，如标号7、8所示。</p>\n</blockquote>\n",
            "tags": [
                "iap",
                "bootloader",
                "stm32"
            ]
        }
    ]
}