{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"fluid\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2022/f96c3c41/",
            "url": "https://www.oikiou.top/2022/f96c3c41/",
            "title": "静态网页 静态博客",
            "date_published": "2022-08-21T14:57:15.000Z",
            "content_html": "<h1 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h1><h1 id=\"静态网页生成器\"><a href=\"#静态网页生成器\" class=\"headerlink\" title=\"静态网页生成器\"></a>静态网页生成器</h1><p><a href=\"https://jekyllrb.com/\">Jekyll</a>（由 Github 构建的用于为其 Github 页面提供支持的 Ruby 生成器）、</p>\n<p><a href=\"https://gohugo.io/\">Hugo</a>（构建在 Go 编程之上的极快静态生成器）语言）和</p>\n<p><a href=\"https://hexo.io/\">Hexo</a>（基于 Node.js 的快速网站生成器）。</p>\n<p><strong>参考</strong></p>\n<p><a href=\"https://www.techiediaries.com/jekyll-hugo-hexo/\">How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo</a></p>\n<p><a href=\"https://stackshare.io/stackups/hexo-vs-hugo-vs-jekyll\">StackShare</a></p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>TBD</p>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>TBD</p>\n<h2 id=\"Hugo\"><a href=\"#Hugo\" class=\"headerlink\" title=\"Hugo\"></a>Hugo</h2><p>TBD</p>\n<h1 id=\"Hexo-1\"><a href=\"#Hexo-1\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"Hexo-部署\"><a href=\"#Hexo-部署\" class=\"headerlink\" title=\"Hexo 部署\"></a>Hexo 部署</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">HEXO文档_参考链接</a></p>\n<p><strong>要求:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br>Git<br></code></pre></td></tr></table></figure>\n\n<p><strong>部署:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-cli -g<br>hexo init blog<br><span class=\"hljs-built_in\">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-CMD\"><a href=\"#Hexo-CMD\" class=\"headerlink\" title=\"Hexo CMD\"></a>Hexo CMD</h2><h3 id=\"Init-初始化\"><a href=\"#Init-初始化\" class=\"headerlink\" title=\"Init 初始化\"></a>Init 初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo init [folder]<br></code></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h3 id=\"new-新建\"><a href=\"#new-新建\" class=\"headerlink\" title=\"new 新建\"></a>new 新建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo new [layout] &lt;title&gt;<br>hexo new <span class=\"hljs-string\">&quot;post title with whitespace&quot;</span><br>hexo new page --path about/me <span class=\"hljs-string\">&quot;About me&quot;</span><br>hexo new page -p     about/me <span class=\"hljs-string\">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<h3 id=\"generate-生成\"><a href=\"#generate-生成\" class=\"headerlink\" title=\"generate 生成\"></a>generate 生成</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成静态文件。</span><br>hexo generate<br><span class=\"hljs-comment\"># 该命令可以简写为</span><br>hexo g<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th></th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-d</td>\n<td>–deploy</td>\n<td align=\"left\"><strong>文件生成后立即部署网站</strong></td>\n</tr>\n<tr>\n<td align=\"left\">-w</td>\n<td>–watch</td>\n<td align=\"left\"><strong>监视文件变动</strong></td>\n</tr>\n<tr>\n<td align=\"left\">-b</td>\n<td>–bail</td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\">-f</td>\n<td>–force</td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，<br>如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br/>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\">-c</td>\n<td>–concurrency</td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<h3 id=\"publish-草稿\"><a href=\"#publish-草稿\" class=\"headerlink\" title=\"publish 草稿\"></a>publish 草稿</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">hexo publish [layout] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filename</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h3 id=\"server-服务器\"><a href=\"#server-服务器\" class=\"headerlink\" title=\"server 服务器\"></a>server 服务器</h3><p>在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">hexo <span class=\"hljs-keyword\">server</span><br>hexo s<br></code></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件(不会更新)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-i</code></td>\n<td align=\"left\"><code>hexo server -i 192.168.1.1</code> 指定监听的IP</td>\n</tr>\n</tbody></table>\n<h3 id=\"deploy-部署\"><a href=\"#deploy-部署\" class=\"headerlink\" title=\"deploy 部署\"></a>deploy 部署</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-comment\"># 部署网站。</span><br>hexo <span class=\"hljs-keyword\">deploy</span><br><span class=\"hljs-comment\"># 该命令可以简写为：</span><br>hexo d<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h3 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h3><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">hexo</span> migrate &lt;<span class=\"hljs-keyword\">type</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\">迁移内容</a>。</p>\n<h3 id=\"clean-清理\"><a href=\"#clean-清理\" class=\"headerlink\" title=\"clean 清理\"></a>clean 清理</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean<br></code></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo list &lt;<span class=\"hljs-keyword\">type</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"Hexo-Config-yml\"><a href=\"#Hexo-Config-yml\" class=\"headerlink\" title=\"Hexo _Config.yml\"></a>Hexo _Config.yml</h2><blockquote>\n<h3 id=\"Home-page-setting\"><a href=\"#Home-page-setting\" class=\"headerlink\" title=\"Home page setting\"></a>Home page setting</h3><p>  <code>index_generator.order_by</code>  文章的顺序</p>\n<ul>\n<li><code>-date</code> 默认情况下按日期降序排序(从新到旧)。</li>\n<li><code>-update</code> 按更新时间排序(<code>-</code> &#x3D; 从新到旧)。</li>\n</ul>\n</blockquote>\n<h1 id=\"Hexo-Theme\"><a href=\"#Hexo-Theme\" class=\"headerlink\" title=\"Hexo Theme\"></a>Hexo Theme</h1><p>我是直接在github搜索 <code>hexo theme</code>看到了几个 star 比较多而且比较活跃的 repository </p>\n<ul>\n<li><p><strong><a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a></strong> 5.5K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f70706f66666963652e6769746875622e696f2f6865786f2d7468656d652d6963617275732f67616c6c6572792f707265766965772e706e673f31.png\" alt=\"img\"></p>\n</li>\n<li><p><strong><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">fluid</a></strong> 4.8K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f666c7569642d6465762f737461746963406d61737465722f6865786f2d7468656d652d666c7569642f73637265656e73686f74732f696e6465782e706e67.png\" alt=\"ScreenShot\"></p>\n</li>\n<li><p><a href=\"https://github.com/blinkfox/hexo-theme-matery\">matery</a>(blinkfox) 4.5K star</p>\n<p><img src=\"/2022/f96c3c41/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67.png\" alt=\"首页\"></p>\n<p><img src=\"/2022/f96c3c41/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67.png\" alt=\"首页文章列表\"></p>\n</li>\n<li><p><strong><a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a></strong> 4.3K star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6a65727279633132372f43444e406d322f696d672f7468656d652d627574746572666c792d726561646d652e706e67.png\" alt=\"img\"></p>\n</li>\n<li><p><a href=\"https://github.com/volantis-x/hexo-theme-volantis\">volantis</a> 1.5k star</p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30332f31382f663550516c576973766d397a62674b2e6a7067.jpeg\" alt=\"img\"></p>\n<p><img src=\"/2022/f96c3c41/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30332f31382f585742476639354532743162646e6c2e6a7067.jpeg\" alt=\"img\"></p>\n</li>\n</ul>\n<p>其中 <code>fluid</code> 和 <code>volantis</code> 最对我胃口, 最后选择的 <code>fluid</code>, 后期可能会改成<code>volantis</code>或者<code>icarus</code>试试看, 主要是喜欢简洁些, 又能有一定的观赏性的.</p>\n<h2 id=\"Fluid\"><a href=\"#Fluid\" class=\"headerlink\" title=\"Fluid\"></a>Fluid</h2><p>参考文档</p>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></p>\n<p>theme 的 Github</p>\n<p><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">https://github.com/fluid-dev/hexo-theme-fluid</a></p>\n<h3 id=\"自带的内置图标库\"><a href=\"#自带的内置图标库\" class=\"headerlink\" title=\"自带的内置图标库\"></a>自带的内置图标库</h3><p><a href=\"https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87\">内置社交图标</a> </p>\n<p><img src=\"/2022/f96c3c41/iconfont.f8319467.png\" alt=\"内置图标\"></p>\n<h1 id=\"Hexo-Note\"><a href=\"#Hexo-Note\" class=\"headerlink\" title=\"Hexo Note\"></a>Hexo Note</h1><h2 id=\"Hexo-Permalink简化\"><a href=\"#Hexo-Permalink简化\" class=\"headerlink\" title=\"Hexo Permalink简化\"></a>Hexo Permalink简化</h2><p>参考:</p>\n<p><a href=\"https://blog.csdn.net/Galahadzhou/article/details/105355733\">Hexo Permalink简化</a></p>\n<p>Note:</p>\n<p>使用<code>hexo-abbrlink</code>插件实现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># install</span><br>npm install hexo-abbrlink --save<br><span class=\"hljs-comment\"># setting edit _config.yml</span><br>permalink: posts/:abbrlink.html<br>abbrlink:<br>  alg: crc32  <span class=\"hljs-comment\"># 算法：crc16(default) and crc32</span><br>  rep: hex    <span class=\"hljs-comment\"># 进制：dec(default) and hex</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-图片链接问题\"><a href=\"#hexo-图片链接问题\" class=\"headerlink\" title=\"hexo 图片链接问题\"></a>hexo 图片链接问题</h2><p><strong><code>hexo</code>本地图片显示问题</strong></p>\n<p>使用<code>hexo</code>生成静态资源后,由于<code>url</code>的问题会出现图片加载的问题,现在网上的文章及官方的解决方案大概分为三种:</p>\n<ol>\n<li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,在使用相对或绝对路径进行引用</li>\n<li>配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径. </li>\n<li>使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code> </li>\n<li>!new!. <code>hexo init</code>的时候会自动copy一个插件 <code>hexo-renderer-marked</code> 这个插件可以开启相对路径的支持,但是需要改一些代码</li>\n</ol>\n<p>但是在配置过程中发现这三种方式都多多少少存在一些问题,前两中首页跟内容页会有一个加载失败的问题,而第三种则失去了<code>markdown</code>的意义.</p>\n<p><strong>方法四:</strong></p>\n<p>官方手册上提到过, <a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexo-renderer-marked</a> 3.1.0已经开始支持相对路径了.但是可以看到它支持的路径似乎并不合理, 其他的md阅读器是不能识别这样的路径的.</p>\n<p><img src=\"/2022/f96c3c41/image-20220815153651988.png\" alt=\"image-20220815153651988\"></p>\n<p>参考: <a href=\"https://github.com/hexojs/hexo-renderer-marked/issues/216\">https://github.com/hexojs/hexo-renderer-marked/issues/216</a></p>\n<ol>\n<li><p>修改<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">marked:</span><br>  <span class=\"hljs-attr\">prependRoot:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">postAsset:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件<code>node_modules\\hexo-renderer-marked\\lib\\renderer.js</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^(#|\\/\\/|http(s)?:)/</span>.<span class=\"hljs-title function_\">test</span>(href) &amp;&amp; !relative_link &amp;&amp; prependRoot) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!href.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>) &amp;&amp; !href.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;\\\\&#x27;</span>) &amp;&amp; postPath) &#123;<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PostAsset</span> = hexo.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">&#x27;PostAsset&#x27;</span>);<br>    <span class=\"hljs-comment\">// findById requires forward slash</span><br>    <span class=\"hljs-comment\">// ***************** Add the following code *******************</span><br>    <span class=\"hljs-keyword\">const</span> fixPostPath = <span class=\"hljs-title function_\">join</span>(postPath, <span class=\"hljs-string\">&#x27;../&#x27;</span>);<br>    <span class=\"hljs-keyword\">const</span> asset = <span class=\"hljs-title class_\">PostAsset</span>.<span class=\"hljs-title function_\">findById</span>(<span class=\"hljs-title function_\">join</span>(fixPostPath, href.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\\\/g</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>)));<br>    <span class=\"hljs-comment\">// const asset = PostAsset.findById(join(postPath, href.replace(/\\\\/g, &#x27;/&#x27;)));</span><br>    <span class=\"hljs-comment\">// ************************** End *****************************</span><br>    <span class=\"hljs-comment\">// asset.path is backward slash in Windows</span><br>    <span class=\"hljs-keyword\">if</span> (asset) href = asset.<span class=\"hljs-property\">path</span>.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\\\/g</span>, <span class=\"hljs-string\">&#x27;/&#x27;</span>);<br>  &#125;<br>  href = url_for.<span class=\"hljs-title function_\">call</span>(hexo, href);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>enjoy it</li>\n</ol>\n<p><strong>方法二:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># 设置<br><span class=\"hljs-attr\">post_asset_folder</span>:<span class=\"hljs-literal\">true</span><br># 安装插件 asset-image<br>npm install <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/CodeFalling/hexo-asset-image  --save</span><br># typora中设置图片为相对路径 看下图<br>./$&#123;filename&#125;<br># 运行查看<br>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/f96c3c41/image-20220815133503275.png\" alt=\"image-20220815133503275\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>   Env:使用方法四</p>\n<ul>\n<li>文件名不能带有空格, title 可以带空格 (<code>hexo new</code>的时候需要注意这一点)<ul>\n<li>修改 <code>node_modules\\hexo-renderer-marked\\lib\\renderer.js</code>文件可能可以改善这点. -&gt; TBD</li>\n</ul>\n</li>\n<li>md文件名要和图片等等资源文件夹同名 -&gt; 注定了不能使用 <code>./$&#123;filename&#125;.assets</code>这种方案, 一定要改成<code>./$&#123;filename&#125;</code>才行</li>\n</ul>\n</blockquote>\n<h2 id=\"Hexo-跳过一些文件-不渲染某些文件\"><a href=\"#Hexo-跳过一些文件-不渲染某些文件\" class=\"headerlink\" title=\"Hexo 跳过一些文件,不渲染某些文件\"></a>Hexo 跳过一些文件,不渲染某些文件</h2><p>搜索引擎确认网站所有权时往往会提供一个html文件来进行验证，要是这个文件被渲染了，验证自然就会失败了。或者，有时候会写一些简单的html示例页面或<code>README.md</code>，这也是不希望Hexo渲染的。因此有必要针对某个文件或者目录进行排除。</p>\n<p>Hexo博客的基本内容是一些Markdown文件，放在<code>source/_post</code>文件夹下，每个文件对应一篇文章。除此之外，放在<code>source</code>文件夹下的所有开头不是下划线的文件，在<code>hexo generate</code>的时候，都会被拷贝到<code>public</code>文件夹下。但是，Hexo默认会渲染所有的HTML和Markdown文件，导致我的README.md直接转成html格式了。。。</p>\n<p>怎么样避开这个坑呢？如果只有一个HTML文件的话，可以简单地在文件开头加上<code>layout: false</code>一行即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">layout:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-string\">&lt;html&gt;</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n\n<p>如果有多个要避开渲染的md文件，显然是不可能使用这种方法的。这时候需要使用<code>skip_render</code>配置。根据<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">Hexo文档</a>中的说明，通过在<code>_config.yml</code>配置文件中使用<code>skip_render</code>参数，可以跳过指定文件的渲染。使用方式如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">skip_render: [games<span class=\"hljs-regexp\">/**, depview/</span>**, knowledge/**]<br></code></pre></td></tr></table></figure>\n\n<p>这里的路径匹配可以使用正则表达式。</p>\n<p><strong>注意：<code>skip_render</code>参数设置的路径是相对于<code>source</code>目录的路径。</strong>例如，需要跳过渲染source&#x2F;README.md，只需要设置 <code>skip_render:README.md</code>。</p>\n<p>在设置了跳过渲染之后，最好使用<code>hexo clean</code>清除以前的编译结果，保证配置生效。</p>\n<h2 id=\"hexo-开启RSS订阅-feed-atom\"><a href=\"#hexo-开启RSS订阅-feed-atom\" class=\"headerlink\" title=\"hexo 开启RSS订阅 feed atom\"></a>hexo 开启RSS订阅 feed atom</h2><p>基于<code>hexo-generator-feed</code></p>\n<p>先安装这个包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-generator-feed<br></code></pre></td></tr></table></figure>\n\n<p>然后在在<code>_config.yml</code>文件中配置该插件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">feed:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">atom</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">atom.xml</span><br>    <span class=\"hljs-attr\">limit:</span> <span class=\"hljs-number\">20</span><br>    <span class=\"hljs-attr\">hub:</span><br>    <span class=\"hljs-attr\">content:</span><br>    <span class=\"hljs-attr\">content_limit:</span><br>    <span class=\"hljs-attr\">content_limit_delim:</span> <span class=\"hljs-string\">&#x27; &#x27;</span><br>    <span class=\"hljs-attr\">order_by:</span> <span class=\"hljs-string\">-date</span><br>    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">/images/favicon.png</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  参数的含义：</p>\n<ul>\n<li><code>type</code>: <code>RSS</code>的类型(<code>atom/rss2</code>)</li>\n<li><code>path</code>: 文件路径,默认是<code>atom.xml/rss2.xml</code></li>\n<li><code>limit</code>: 展示文章的数量,使用<strong>0</strong>或则<strong>false</strong>代表展示全部</li>\n<li><code>hub</code>:</li>\n<li><code>content</code>: 在<code>RSS</code>文件中是否包含内容 ,有3个值 <code>true/false</code>默认不填为<code>false</code></li>\n<li><code>content_limit</code>: 指定内容的长度作为摘要,仅仅在上面<code>content</code>设置为<code>false</code>和<code>没有自定义的描述出现</code></li>\n<li><code>content_limit_delim</code>: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</li>\n<li><code>order_by</code>: 顺序排列方式</li>\n<li><code>icon</code>: 图标路径</li>\n</ul>\n</blockquote>\n<p>配置好之后运行<code>hexo clean &amp; hexo g</code>就可以找到你博客的<code>pubilc</code> 文件夹下发现<code>atom.xml</code>文件了</p>\n<p>我们可以在<code>关于(about)</code>页面添加RSS源, 有些主题可以在头像下面自动开启, 这些都是后话了.</p>\n<p>配置RSS的时候发现还有一些其他的推送方式, 比如邮件推送, 浏览器通知推送等等.</p>\n<h3 id=\"RSS阅读器\"><a href=\"#RSS阅读器\" class=\"headerlink\" title=\"RSS阅读器\"></a>RSS阅读器</h3><p><a href=\"https://feedly.com/\">Feedly.com</a> 这个比较满意, 文章显示和界面都不错</p>\n<p><a href=\"https://www.inoreader.com/\">inoreader</a>: 订阅的文章展示效果也还不错(卡片形式).</p>\n<p><a href=\"https://theoldreader.com/\">the old reader</a>: 这个是比较老牌的RSS阅读器了</p>\n<p>参考链接:</p>\n<p><a href=\"https://segmentfault.com/a/1190000012647294\">为hexo博客添加RSS订阅功能</a></p>\n<p><a href=\"https://sean10.github.io/2020/06/27/hexo%E5%BC%80%E5%90%AFatom%E8%AE%A2%E9%98%85/\">hexo开启atom订阅</a></p>\n<h2 id=\"hexo-静态网页压缩\"><a href=\"#hexo-静态网页压缩\" class=\"headerlink\" title=\"hexo 静态网页压缩\"></a>hexo 静态网页压缩</h2><p>了解到有三个插件可以做到这个功能(<code>hexo-neat</code>, <code>gulp</code>, <code>Hexo-all-minifier</code>)</p>\n<p><code>gulp</code>存在各种乱七八糟的依赖关系, 推荐直接用<code>Hexo-all-minifier</code>一套走.</p>\n<h3 id=\"1-hexo-neat\"><a href=\"#1-hexo-neat\" class=\"headerlink\" title=\"1. hexo-neat\"></a>1. hexo-neat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-neat --save</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在 _config.yml 添加配置</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">博文压缩</span><br>neat_enable: true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩html</span><br>neat_html:<br>  enable: true<br>  exclude:<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩css</span><br>neat_css:<br>  enable: true<br>  exclude:<br>    - &#x27;**/*.min.css&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩js</span><br>neat_js:<br>  enable: true<br>  mangle: true<br>  output:<br>  compress:<br>  exclude:<br>    - &#x27;**/*.min.js&#x27;<br>    - &#x27;**/jquery.fancybox.pack.js&#x27;<br>    - &#x27;**/index.js&#x27;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-gulp\"><a href=\"#2-gulp\" class=\"headerlink\" title=\"2. gulp\"></a>2. gulp</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装gulp</span><br>npm install gulp --save<br><span class=\"hljs-comment\"># 安装gulp依赖</span><br>npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin --save<br></code></pre></td></tr></table></figure>\n<p><strong>创建 gulpfile.js 文件</strong></p>\n<p>在<code>Hexo</code>站点根目录下创建<code>gulpfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> minifycss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-minify-css&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> uglify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-uglify&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> htmlmin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlmin&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> htmlclean = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlclean&#x27;</span>);<br><span class=\"hljs-keyword\">var</span> imagemin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-imagemin&#x27;</span>);<br><span class=\"hljs-comment\">// 压缩css文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.css&#x27;</span>)<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">minifycss</span>())<br>  .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 压缩html文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.html&#x27;</span>)<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlclean</span>())<br>  .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlmin</span>(&#123;<br>    <span class=\"hljs-attr\">removeComments</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyJS</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyCSS</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">minifyURLs</span>: <span class=\"hljs-literal\">true</span>,<br>  &#125;))<br>  .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>))<br>&#125;);<br><span class=\"hljs-comment\">// 压缩js文件</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>([<span class=\"hljs-string\">&#x27;./public/**/.js&#x27;</span>,<span class=\"hljs-string\">&#x27;!./public/js/**/*min.js&#x27;</span>])<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">uglify</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 压缩 public/demo 目录内图片</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-images&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/demo/**/*.*&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">imagemin</span>(&#123;<br>           <span class=\"hljs-attr\">optimizationLevel</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span><br>           <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span><br>           <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br>           <span class=\"hljs-attr\">multipass</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span><br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public/uploads&#x27;</span>));<br>&#125;);<br><span class=\"hljs-comment\">// 默认任务 gulp 4.0 适用的方式</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;default&#x27;</span>, gulp.<span class=\"hljs-title function_\">parallel</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-js&#x27;</span><br> <span class=\"hljs-comment\">//build the website</span><br>));<br></code></pre></td></tr></table></figure>\n\n<p>只要每次在执行<code>hexo g</code>命令后执行<code>gulp</code>就可以进行静态资源压缩，压缩后再同步到github上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo cl &amp; hexo g &amp; gulp<br>hexo d<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"注意-这里部署的时候出了一个问题\"><a href=\"#注意-这里部署的时候出了一个问题\" class=\"headerlink\" title=\"注意: 这里部署的时候出了一个问题\"></a><strong>注意: 这里部署的时候出了一个问题</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Error [ERR_REQUIRE_ESM]: require() of ES Module xxx\\hexo\\node_modules\\gulp-imagemin\\index.js from xxx\\hexo\\gulpfile.js not supported.<br>Instead change the require of index.js <span class=\"hljs-keyword\">in</span> xxx\\hexo\\gulpfile.js to a dynamic import() <span class=\"hljs-built_in\">which</span> is available <span class=\"hljs-keyword\">in</span> all CommonJS modules.<br>    at Object.&lt;anonymous&gt; (xxx\\hexo\\gulpfile.js:6:16)<br>    at async Promise.all (index 0) &#123;<br>  code: <span class=\"hljs-string\">&#x27;ERR_REQUIRE_ESM&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  gulp-imagemin 8.0.0 and above are now ESM only. You can downgrade gulp-imagemin to 7.1.0 which is commonjs and it should work fine.</p>\n<blockquote>\n<p>  This package is now pure ESM. Please read this.</p>\n</blockquote>\n<p>  <a href=\"https://github.com/sindresorhus/gulp-imagemin/releases/tag/v8.0.0\">https://github.com/sindresorhus/gulp-imagemin/releases/tag/v8.0.0</a></p>\n</blockquote>\n<p><strong>最终找到说是包的版本太高导致的</strong></p>\n<p>重新安装特定版本的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 先卸载掉这些包</span><br>npm uninstall gulp<br>npm uninstall gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin<br>npm uninstall gulp-minify-css <br><br><span class=\"hljs-comment\"># 重新安装</span><br>npm install gulp@4.0.2 --save<br>npm install gulp-htmlclean@4.0.2 gulp-htmlmin@5.0.1 gulp-clean-css@4.2.0 gulp-uglify@3.0.2 gulp-imagemin@7.1.0 --save<br>npm install gulp-babel@8.0.0 babel-preset-env@1.7.0 babel-preset-mobx@2.0.0 --save<br>npm install gulp-miniify-css@1.2.4 -save<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  包的版本可以参考这个<br>  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;babel-preset-env&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^1.7.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;babel-preset-mobx&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.0.2&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-babel&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^8.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-clean-css&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.2.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-htmlclean&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.7.22&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-htmlmin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^5.0.1&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-imagemin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^7.1.0&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-uglify&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^3.0.2&quot;</span><span class=\"hljs-punctuation\">,</span><br><span class=\"hljs-attr\">&quot;gulp-minify-css&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^1.2.4&quot;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<p>把<code>gulpfile.js</code>也改动了一下, </p>\n<p>在<code>minify-images</code>项里面我的图片是随文章存放的, 并不是全部存放在<code>img</code>等文件夹下面, 所以只能用全文件匹配去做图片压缩, 代价就是速度很忙, 希望有大佬来指点一下如何更好的修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> gulp      = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> htmlmin   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlmin&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> htmlclean = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-htmlclean&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> uglify    = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-uglify&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> imagemin  = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-imagemin&#x27;</span>)<br><span class=\"hljs-keyword\">var</span> minifycss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;gulp-minify-css&#x27;</span>);<br><br><span class=\"hljs-comment\">// 压缩html</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// 匹配所有 .html结尾的文件</span><br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlclean</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">htmlmin</span>(&#123;<br>            <span class=\"hljs-attr\">removeComments</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyJS</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyCSS</span>: <span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">minifyURLs</span>: <span class=\"hljs-literal\">true</span>,<br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class=\"hljs-comment\">// 压缩css</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.css&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">minifycss</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class=\"hljs-comment\">// 压缩js</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>([<span class=\"hljs-string\">&#x27;./public/**/.js&#x27;</span>, <span class=\"hljs-string\">&#x27;!./public/js/**/*min.js&#x27;</span>])<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">uglify</span>())<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;)<br><br><span class=\"hljs-comment\">// 压缩图片</span><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;minify-images&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> gulp.<span class=\"hljs-title function_\">src</span>(<span class=\"hljs-string\">&#x27;./public/**/*.*&#x27;</span>)<br>        .<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">imagemin</span>(&#123;<br>            <span class=\"hljs-attr\">optimizationLevel</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span><br>            <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span><br>            <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br>            <span class=\"hljs-attr\">multipass</span>: <span class=\"hljs-literal\">false</span>,     <span class=\"hljs-comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span><br>        &#125;))<br>        .<span class=\"hljs-title function_\">pipe</span>(gulp.<span class=\"hljs-title function_\">dest</span>(<span class=\"hljs-string\">&#x27;./public&#x27;</span>));<br>&#125;)<br><br>gulp.<span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">&#x27;default&#x27;</span>, gulp.<span class=\"hljs-title function_\">series</span>(<span class=\"hljs-string\">&#x27;minify-html&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-css&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-js&#x27;</span>, <span class=\"hljs-string\">&#x27;minify-images&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-Hexo-all-minifier\"><a href=\"#3-Hexo-all-minifier\" class=\"headerlink\" title=\"3. Hexo-all-minifier\"></a>3. Hexo-all-minifier</h3><blockquote>\n<p>  <a href=\"https://github.com/chenzhutian/hexo-all-minifier\">https://github.com/chenzhutian/hexo-all-minifier</a></p>\n<p>  <a href=\"https://archive.vincent0700.com/2019/12/31/034_Usage_of_hexo-all-minifier_copy/\">Hexo 资源压缩 | hexo-all-minifier</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装</span><br>npm install hexo-all-minifier --save<br><br><span class=\"hljs-comment\"># 在_config.yml文件添加配置</span><br>all_minifier: <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># </span><br>hexo cl &amp; hexo g <br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Hexo-Sitemap\"><a href=\"#Hexo-Sitemap\" class=\"headerlink\" title=\"Hexo Sitemap\"></a>Hexo Sitemap</h2><blockquote>\n<p>   据网友所言: 谷歌就xx乱爬, 百度就xx乱删, 必应就xx不收录</p>\n</blockquote>\n<p>为了让博文能够被google或百度检索，需要先将网站收录到他们的库里面，我们可以在谷歌的站长平台里面提交我们的sitemap文件，告诉浏览器应该我们的站点有哪些页面，这样他就会去爬取收录了。</p>\n<blockquote>\n<p>  站点地图是一种文件，您可以在其中提供与您网站中的网页、视频或其他文件有关的信息，还可以说明这些内容之间的关系。Google 等搜索引擎会读取此文件，以便更高效地抓取您的网站。站点地图会告诉 Google 您认为网站中的哪些网页和文件比较重要，还会提供与这些文件有关的重要信息。例如，网页上次更新的时间和网页是否有任何备用的语言版本。</p>\n<p>  您可以使用站点地图提供与特定类型的网页内容（包括<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/video-sitemaps\">视频</a>、<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/image-sitemaps\">图片</a>和<a href=\"https://developers.google.com/search/docs/advanced/sitemaps/news-sitemap\">新闻</a>内容）有关的信息。例如：</p>\n<ul>\n<li>站点地图视频条目可以指定视频的时长、评分以及适合哪些年龄段的受众。</li>\n<li>站点地图图片条目中可包含网页中所含图片的位置。</li>\n<li>站点地图新闻条目中可包含报道标题和发布日期。</li>\n</ul>\n<p>  <strong>我需要站点地图吗？</strong></p>\n<p>  如果您网站上的网页链接得当，那么 Google 通常能够发现其中的大多数网页。链接得当是指您认为重要的所有网页都可以通过某些形式的导航（例如您网站的菜单，或您放入网页中的链接）抵达。即便如此，站点地图仍有助于我们更加高效地抓取规模更大、更复杂的网站或更特殊的文件。</p>\n</blockquote>\n<h3 id=\"生成sitemap-xml\"><a href=\"#生成sitemap-xml\" class=\"headerlink\" title=\"生成sitemap.xml\"></a>生成<code>sitemap.xml</code></h3><p>首先我们安装生成sitemao的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 谷歌的</span><br>npm install hexo-generator-sitemap --save<br><span class=\"hljs-comment\"># 百度的</span><br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure>\n\n<p>修改配置文件<code>_config.yml</code>增加下面这些内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Plugins:<br>- hexo-generator-sitemap<br>- hexo-generator-baidu-sitemap<br><br>baidusitemap:<br>  path: baidusitemap.xml<br>sitemap:<br>  path: sitemap.xml<br></code></pre></td></tr></table></figure>\n\n<p>生成<code>sitemap.xml</code>文件, 重新生成网站, 在网站根目录就可以看到<code>sitemap.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo cl &amp; hexo g <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交sitemap-xml\"><a href=\"#提交sitemap-xml\" class=\"headerlink\" title=\"提交sitemap.xml\"></a>提交<code>sitemap.xml</code></h3><p><a href=\"https://www.google.com/webmasters/tools\">GoogleSearchConsole</a></p>\n<p><a href=\"https://www.bing.com/webmasters/\">BingWebMaster</a></p>\n<p><a href=\"https://ziyuan.baidu.com/site/index\">百度资源平台</a></p>\n<p><strong>下面讲一下谷歌的</strong></p>\n<p>登录<a href=\"https://www.google.com/webmasters/tools\">GoogleSearchConsole</a>, 按照提示验证站点的所有权</p>\n<p>打开谷歌控制台选择-&gt;<strong>索引</strong>-&gt;<strong>站点地图</strong>，在添加新的站点地图中填入你的<code>sitemap.xml</code>的路径, 这里直接写<code>sitemap.xml</code>即可。</p>\n<p><img src=\"/2022/f96c3c41/image-20220918004138059.png\" alt=\"image-20220918004138059\"></p>\n<blockquote>\n<p>   这个谷歌真是让我大无语, 一直显示无法获取, 一直没法解决这个问题, 网址检查显示没什么问题, 但是一直显示无法获取真是麻了.</p>\n<p>  求助群友后他们推荐使用 Hexo-SEO-AutoPush</p>\n</blockquote>\n<h3 id=\"收录查询\"><a href=\"#收录查询\" class=\"headerlink\" title=\"收录查询\"></a>收录查询</h3><ol>\n<li><p>通过网站管理平台的控制台去看数据</p>\n</li>\n<li><p>搜索引擎直接搜索</p>\n</li>\n</ol>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">site:</span>oikiou.top<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"手动生成Sitemap文件\"><a href=\"#手动生成Sitemap文件\" class=\"headerlink\" title=\"手动生成Sitemap文件\"></a>手动生成Sitemap文件</h3><p><a href=\"https://www.xml-sitemaps.com/\">https://www.xml-sitemaps.com/</a></p>\n<h2 id=\"Hexo-SEO-AutoPush的使用\"><a href=\"#Hexo-SEO-AutoPush的使用\" class=\"headerlink\" title=\"Hexo-SEO-AutoPush的使用\"></a>Hexo-SEO-AutoPush的使用</h2><p><a href=\"https://github.com/Lete114/Hexo-SEO-AutoPush\">https://github.com/Lete114/Hexo-SEO-AutoPush</a></p>\n<blockquote>\n<p>  注意以下几点: </p>\n<ol>\n<li>由于生成的 actions 是在<code>.github/workflows/HexoSeoAutoPush.yml</code>，点开头的文件或文件夹都会被视为隐藏文件，所以 hexo 不会将隐藏文件部署到 pages，需要新增配置<code>ignore_hidden</code></li>\n</ol>\n<pre><code class=\"hljs\"> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">deploy:<br> ignore_hidden: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 忽略隐藏文件及文件夹(目录)</span><br></code></pre></td></tr></table></figure>\n \n</code></pre>\n<ol start=\"2\">\n<li><p>Bing的<code>API</code>在登录控制台后的<em>右上角齿轮上</em>可以找到, 如果找不到可能是界面更新导致的, 请参考官方文档</p>\n</li>\n<li><p>注意google的信息填写方式</p>\n<p><code>google_private_key</code>是填写Json内的 <code>private_key </code> 不是<code>private_key_id </code>注意区分. </p>\n<p>而且<code>google_private_key </code> 是带双引号的需要注意, 而<code>google_client_email</code>填写的时候是不带双引号的.</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>形似</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>google_client_email</td>\n<td><a href=\"mailto:&#120;&#x78;&#120;&#64;&#x78;&#120;&#x78;&#46;&#120;&#120;&#x78;&#46;&#103;&#x73;&#101;&#x72;&#118;&#105;&#x63;&#x65;&#97;&#99;&#99;&#111;&#x75;&#x6e;&#116;&#x2e;&#x63;&#111;&#109;\">&#120;&#x78;&#120;&#64;&#x78;&#120;&#x78;&#46;&#120;&#120;&#x78;&#46;&#103;&#x73;&#101;&#x72;&#118;&#105;&#x63;&#x65;&#97;&#99;&#99;&#111;&#x75;&#x6e;&#116;&#x2e;&#x63;&#111;&#109;</a></td>\n<td>【必填】Value 输入谷歌的 client_email</td>\n</tr>\n<tr>\n<td>google_private_key</td>\n<td>“—–BEGIN PRIVATE KEY—–\\nxxxxxx\\n—–END PRIVATE KEY—–\\n”</td>\n<td>【必填】Value 输入谷歌的 private_key （注意：填写的时候需要使用<strong>双引号</strong>包起来，如: <code>&quot;private_key&quot;</code>）</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</blockquote>\n<p>在Github内点击Action-&gt;Hexo SEO Auto Push -&gt; 查看执行情况 没有报错就是执行的没问题, 稍等片刻刷新控制台就可以看到提交的信息.</p>\n<p>打开<a href=\"https://www.bing.com/webmasters/\">Home - Bing Webmaster Tools</a>, <code>URL提交</code>标签</p>\n<p>在<a href=\"https://console.cloud.google.com/apis/dashboard\">Google Cloud Platform</a> 中查看.</p>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意:\"></a><strong>注意:</strong></h3><p>部署的时候报了下面这个错误, 当时弄这个东西的时候是半夜, 脑子不清醒(各位同学注意早睡早起, 熬夜效率是极其低下的), <code>private_key</code>填写错了发生了这个错误, 有相似错误的同学可以看看是不是<code>private_key</code>有问题.</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">Run npx hexoautopush *** ***<br>Error: error:<span class=\"hljs-number\">0909006</span>C:PEM routines:get_name:no start line<br>    at Sign.sign (internal<span class=\"hljs-regexp\">/crypto/</span>sig.js:<span class=\"hljs-number\">110</span>:<span class=\"hljs-number\">29</span>)<br>    at Object.sign (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/jwa/i</span>ndex.js:<span class=\"hljs-number\">152</span>:<span class=\"hljs-number\">45</span>)<br>    at Object.jwsSign [as sign] (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/jws/</span>lib/sign-stream.js:<span class=\"hljs-number\">32</span>:<span class=\"hljs-number\">24</span>)<br>    at GoogleToken.requestToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">225</span>:<span class=\"hljs-number\">31</span>)<br>    at GoogleToken.getTokenAsyncInner (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">163</span>:<span class=\"hljs-number\">21</span>)<br>    at GoogleToken.getTokenAsync (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">142</span>:<span class=\"hljs-number\">55</span>)<br>    at GoogleToken.getToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/gtoken/</span>build<span class=\"hljs-regexp\">/src/i</span>ndex.js:<span class=\"hljs-number\">94</span>:<span class=\"hljs-number\">21</span>)<br>    at JWT.refreshTokenNoCache (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/jwtclient.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">36</span>)<br>    at JWT.refreshToken (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/oauth2client.js:<span class=\"hljs-number\">145</span>:<span class=\"hljs-number\">25</span>)<br>    at JWT.authorizeAsync (<span class=\"hljs-regexp\">/xxx/</span>node_modules<span class=\"hljs-regexp\">/google-auth-library/</span>build<span class=\"hljs-regexp\">/src/</span>auth/jwtclient.js:<span class=\"hljs-number\">152</span>:<span class=\"hljs-number\">35</span>) &#123;<br>  library: <span class=\"hljs-string\">&#x27;PEM routines&#x27;</span>,<br>  <span class=\"hljs-keyword\">function</span>: <span class=\"hljs-string\">&#x27;get_name&#x27;</span>,<br>  reason: <span class=\"hljs-string\">&#x27;no start line&#x27;</span>,<br>  code: <span class=\"hljs-string\">&#x27;ERR_OSSL_PEM_NO_START_LINE&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Hexo博客修改Archive页面显示文章数量\"><a href=\"#Hexo博客修改Archive页面显示文章数量\" class=\"headerlink\" title=\"Hexo博客修改Archive页面显示文章数量\"></a>Hexo博客修改Archive页面显示文章数量</h2><p>默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置</p>\n<p>这里我们借助<code>hexo-generator-archive</code>来实现这个功能, 因为Archive分页的话看起来贼难受, 如果能将所有的文章全部显示那就舒服了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 先安装包</span><br>npm install hexo-generator-archive --save<br></code></pre></td></tr></table></figure>\n\n<p>编辑<code>_config.yml</code>新增以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Pagination</span><br><span class=\"hljs-comment\">## Set per_page to 0 to disable pagination</span><br><span class=\"hljs-attr\">index_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">32</span><br><br><span class=\"hljs-attr\">index_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-attr\">archive_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">20</span>  \t<span class=\"hljs-comment\">#为0时表示不分页全展示</span><br>  <span class=\"hljs-attr\">yearly:</span> <span class=\"hljs-literal\">false</span>  \t<span class=\"hljs-comment\">#按年生成归档</span><br>  <span class=\"hljs-attr\">monthly:</span> <span class=\"hljs-literal\">false</span> \t<span class=\"hljs-comment\">#按月生成归档</span><br><br><span class=\"hljs-attr\">tag_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">10</span><br><br><span class=\"hljs-attr\">category_generator:</span><br>  <span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">50</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p>\n</blockquote>\n<h1 id=\"Comment-评论系统\"><a href=\"#Comment-评论系统\" class=\"headerlink\" title=\"Comment 评论系统\"></a>Comment 评论系统</h1><h2 id=\"cusdis-系统\"><a href=\"#cusdis-系统\" class=\"headerlink\" title=\"cusdis 系统\"></a>cusdis 系统</h2><p>功能较少,看起来非常轻量, 也可以私有部署,正打算私有部署的时候看到了<code>twikoo</code>所以就转入<code>twikoo</code>了,因为cusdis现阶段功能确实有些少.</p>\n<h2 id=\"twikoo-系统\"><a href=\"#twikoo-系统\" class=\"headerlink\" title=\"twikoo 系统\"></a>twikoo 系统</h2><p>twikoo支持docker私有部署，这是它吸引我的一点，这也是我对比几个之后最终敲定下来选择的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>官网：<a href=\"https://twikoo.js.org/\">https://twikoo.js.org/</a></p>\n<p>Docker：<a href=\"https://hub.docker.com/r/imaegoo/twikoo\">https://hub.docker.com/r/imaegoo/twikoo</a></p>\n<p><del>私有docker部署部署半天还是不成功, 看起来像是需要HTTPS才行.</del></p>\n<p>功能挺丰富的,<del>就是半天没部署成功</del></p>\n<blockquote>\n<p>  部署后没有启用HTTPS<br>  fluid 配置里面又启动了强行使用HTTPS,<br>  F12,看consel发现,ERR_SSL_PROTOCOL_ERROR,被重定向到了HTTPS去了</p>\n</blockquote>\n<h3 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h3><p>安装好docker后直接运行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在当前文件夹下创建Data文件用于存放 twikoo 的评论数据</span><br>docker run --name=&quot;twikoo&quot; -p 8080:8080 -v $&#123;PWD&#125;/data:/app/data -d imaegoo/twikoo<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl http://localhost:8080/<br></code></pre></td></tr></table></figure>\n\n<p>看到有输出就表示正常部署了。</p>\n<h4 id=\"启用HTTPS\"><a href=\"#启用HTTPS\" class=\"headerlink\" title=\"启用HTTPS\"></a>启用HTTPS</h4><p>配置前置 Nginx 服务器或负载网关，以通过 HTTPS 访问 Twikoo，如下 Nginx 配置可供参考。</p>\n<p><code>service nginx status</code> 我们可以找到nginx的配置文件在哪。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">http &#123;<br>    server &#123;<br>        listen       80;<br>        listen       [::]:80;<br>        # 重定向到https<br>        return       301 https://$server_name$request_uri;<br>    &#125;<br>    server &#123;<br>        listen       443 ssl;<br>        listen       [::]:443 ssl;<br>        # 下面两就是证书文件<br>        ssl_certificate      cert/fullchain.pem;<br>        ssl_certificate_key  cert/privkey.pem;<br>        # 连接到docker twikoo的端口<br>        location / &#123;<br>            proxy_pass   http://127.0.0.1:8080;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"dockers-部署后升级\"><a href=\"#dockers-部署后升级\" class=\"headerlink\" title=\"dockers 部署后升级\"></a>dockers 部署后升级</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">　拉取新版本</span> <br>docker pull imaegoo/twikoo<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">停止旧版本容器</span> <br>docker stop twikoo<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">　删除旧版本容器</span> <br>docker rm twikoo<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动新版本容器</span><br>dockr run .......<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关于设置面板的头像风格类型\"><a href=\"#关于设置面板的头像风格类型\" class=\"headerlink\" title=\"关于设置面板的头像风格类型\"></a>关于设置面板的头像风格类型</h3><blockquote>\n<p>  头像风格类型<br>  404：如果没有任何图像与电子邮件哈希无关，则不加载任何图像，而是返回HTTP 404（找不到文件）响应<br>  mp：（神秘人物）一个人的简单卡通风格的轮廓（不随电子邮件哈希值而变化）<br>  identicon：基于电子邮件哈希的几何图案<br>  monsterid：生成的具有不同颜色，面孔等的“怪物”<br>  wavatar：生成的具有不同特征和背景的面孔<br>  retro：生成的令人敬畏的8位街机风格像素化面孔<br>  robohash：具有不同颜色，面部等的生成的机器人<br>  blank：透明的PNG图像（以下为演示目的添加到HTML的边框）</p>\n</blockquote>\n<ul>\n<li><p>Twikoo我是用的docker,nginx和ssl配置可以参考<a href=\"https://hub.docker.com/r/imaegoo/twikoo\">DockerHub</a>, https的端口是可以更改的, 默认的443占用了换成别的就好.</p>\n</li>\n<li><p>twikoo的即时推送尝试了几个譬如 Qmsq, server酱等等发现又一系列的问题 都不尽如人意  最后选择的是最简单的邮件通知.</p>\n</li>\n</ul>\n<h2 id=\"remark42\"><a href=\"#remark42\" class=\"headerlink\" title=\"remark42\"></a>remark42</h2><h1 id=\"部署平台-托管平台\"><a href=\"#部署平台-托管平台\" class=\"headerlink\" title=\"部署平台(托管平台)\"></a>部署平台(托管平台)</h1><p><a href=\"https://i.vince.pub/p/hexo-static/\">常见静态网站托管平台使用及多节点部署方案</a></p>\n<p><img src=\"/2022/f96c3c41/2fc062cb2.svg\" alt=\"节点\"></p>\n<p>现阶段比较好的方案是<code>coding</code>和<code>github+netlify</code>.</p>\n<h1 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h1><p><strong>字体族（<code>font-family</code>）</strong></p>\n<blockquote>\n<p>   <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family</a></p>\n</blockquote>\n<p><strong>调色板灵感</strong></p>\n<blockquote>\n<p>   <a href=\"https://www.webdesignrankings.com/resources/lolcolors/\">https://www.webdesignrankings.com/resources/lolcolors/</a></p>\n</blockquote>\n<p><strong>ISO-8601 日期</strong></p>\n<blockquote>\n<p>  <a href=\"http://momentjs.cn/docs/#/parsing/string-format/\">http://momentjs.cn/docs/#/parsing/string-format/</a></p>\n</blockquote>\n<p><strong>代码高亮风格</strong></p>\n<blockquote>\n<p>  highlightjs:  <a href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a></p>\n<p>  prismjs:  <a href=\"https://prismjs.com/\">https://prismjs.com/</a></p>\n</blockquote>\n<p><strong>Logo生成器</strong></p>\n<blockquote>\n<p>  adobe: <a href=\"https://www.adobe.com/express/create/logo\">https://www.adobe.com/express/create/logo</a></p>\n</blockquote>\n<p><strong>图床</strong></p>\n<blockquote>\n<p>  <a href=\"https://postimg.cc/\">https://postimg.cc/</a></p>\n</blockquote>\n<p><strong>壁纸</strong></p>\n<blockquote>\n<p>  <a href=\"https://wallpapercrafter.com/\">https://wallpapercrafter.com/</a></p>\n</blockquote>\n<p><strong>实时获取网站的<code>Favicon.ion</code>文件</strong></p>\n<blockquote>\n<p>  <a href=\"https://tools.ly522.com/ico/\">https://tools.ly522.com/ico/</a></p>\n<p>  远程实时获取并显示网站的Favicon.ico文件，美化网站外链显示效果。</p>\n</blockquote>\n<p><strong>bing壁纸接口</strong></p>\n<blockquote>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/uhd.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸UHD超高清原图&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/1920x1080.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸1080P高清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/1366x768.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸普清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/m.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Bing每日壁纸手机版1080P高清&quot;</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_uhd.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸UHD超高清原图&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸1080P高清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_1366x768.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸普清&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bing.img.run/rand_m.php&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;随机获取Bing历史壁纸手机版1080P高清&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h1 id=\"一些知识\"><a href=\"#一些知识\" class=\"headerlink\" title=\"一些知识\"></a>一些知识</h1><h2 id=\"Creative-Commons-licenses\"><a href=\"#Creative-Commons-licenses\" class=\"headerlink\" title=\"Creative Commons licenses\"></a>Creative Commons licenses</h2><p><a href=\"https://www.wur.nl/en/article/What-are-Creative-Commons-licenses.htm\">What are Creative Commons licenses?</a></p>\n<p><img src=\"/2022/f96c3c41/licences_3bf0e9af_670x502.jpg\" alt=\"知识共享许可.jpg\"></p>\n<h2 id=\"Gravatar-amp-Cravatar\"><a href=\"#Gravatar-amp-Cravatar\" class=\"headerlink\" title=\"Gravatar &amp; Cravatar\"></a>Gravatar &amp; Cravatar</h2><p><a href=\"https://en.gravatar.com/\">Gravatar</a> &amp; <a href=\"https://cravatar.cn/\">Cravatar</a>的差异</p>\n<h3 id=\"Gravatar\"><a href=\"#Gravatar\" class=\"headerlink\" title=\"Gravatar\"></a>Gravatar</h3><p>Gravatar是一项用于提供在全球范围内使用的头像服务。只要你在Gravatar的服务器上上传了你自己的头像，你便可以在其他任何支持Gravatar的博客、论坛等地方使用它。</p>\n<h3 id=\"Cravatar-cn\"><a href=\"#Cravatar-cn\" class=\"headerlink\" title=\"Cravatar  (cn)\"></a>Cravatar  (cn)</h3><p>Cravatar 是 Gravatar 在中国的完美替代方案,从此你可以自由的上传和分享头像。</p>\n<p><strong>与 Gravatar API 兼容</strong></p>\n<p>为了降低你的使用成本，我们的 API 规范始终保持与 Gravatar 100% 兼容</p>\n<p><strong>独有的三级头像匹配机制</strong></p>\n<p>当访客请求自己的头像时，我们会按此顺序分三级匹配头像：<strong>Cravatar-&gt;Gravatar-&gt;QQ 头像</strong>，对于博客站，这平均可以为 70% 的访客提供准确的头像</p>\n",
            "tags": [
                "hexo",
                "jekyll",
                "fluid",
                "cusdis",
                "twikoo",
                "blog",
                "gravatar",
                "cravatar"
            ]
        }
    ]
}