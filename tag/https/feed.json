{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"https\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2023/e7fefe87/",
            "url": "https://www.oikiou.top/2023/e7fefe87/",
            "title": "Let's Encrypt SSL 证书申请",
            "date_published": "2023-01-12T04:08:08.000Z",
            "content_html": "<h1 id=\"Let’s-Encrypt-SSL-证书申请\"><a href=\"#Let’s-Encrypt-SSL-证书申请\" class=\"headerlink\" title=\"Let’s Encrypt SSL 证书申请\"></a>Let’s Encrypt SSL 证书申请</h1><h1 id=\"为什么申请？\"><a href=\"#为什么申请？\" class=\"headerlink\" title=\"为什么申请？\"></a>为什么申请？</h1><blockquote>\n<h2 id=\"HTTP：未实施数据加密\"><a href=\"#HTTP：未实施数据加密\" class=\"headerlink\" title=\"HTTP：未实施数据加密\"></a>HTTP：未实施数据加密</h2><p>  每个以 HTTP 开头的 URL 链接都使用一种基本类型的“超文本传输协议”。由 Tim Berners-Lee 于 1990 年代初创建，当时互联网仍处于起步阶段，该网络协议标准允许 Web 浏览器和服务器通过数据交换进行通信。</p>\n<p>  HTTP 也被称为“无状态系统”，这意味着它可以按需连接。您单击一个链接，请求连接，您的 Web 浏览器将此请求发送到服务器，服务器通过打开页面进行响应。连接越快，数据呈现给您的速度就越快。</p>\n<p>  作为一种“应用层协议”，HTTP 仍然专注于呈现信息，但不太关心这些信息从一个地方传播到另一个地方的方式。不幸的是，这意味着 HTTP 可能会<a href=\"https://www.globalsign.com/en/blog/what-is-a-man-in-the-middle-attack\">被拦截并可能被更改</a>，从而使信息和信息接收者（即您）都容易受到攻击。</p>\n<h2 id=\"HTTPS：加密连接\"><a href=\"#HTTPS：加密连接\" class=\"headerlink\" title=\"HTTPS：加密连接\"></a>HTTPS：加密连接</h2><p>  HTTPS 不是 HTTP 的对立面，而是它的表弟。两者本质上是相同的，因为它们都指的是相同的“超文本传输协议”，该协议使请求的 Web 数据能够显示在您的屏幕上。但是，HTTPS 仍然略有不同，更先进，也更安全。</p>\n<p>  简单的说，HTTPS协议是HTTP的扩展。缩写中的“S”来自 Secure 一词，它由传输层安全性 (TLS) [<a href=\"https://www.globalsign.com/en/ssl-information-center/what-is-ssl/\">安全套接字层 (SSL)</a>的后继者] 提供支持，这是一种在 Web 服务器和服务器之间建立加密连接的标准安全技术。浏览器。</p>\n<p>  如果没有 HTTPS，您输入网站的任何数据（例如您的用户名&#x2F;密码、信用卡或银行详细信息、任何其他表单提交数据等）都将以明文形式发送，因此容易被拦截或窃听。因此，在输入任何信息之前，您应该始终检查站点是否使用 HTTPS。</p>\n<p>  除了加密服务器和您的浏览器之间传输的数据外，TLS 还验证您正在连接的服务器并保护传输的数据不被篡改。</p>\n<p>  这有助于我这样思考——HTTPS 中的 HTTP 相当于一个目的地，而 SSL 相当于一个旅程。第一个负责将数据显示到屏幕上，第二个负责管理数据到达那里的方式。通过联合力量，他们以安全的方式移动数据。  </p>\n<p>  <a href=\"https://www.globalsign.com/en/blog/the-difference-between-http-and-https\">What’s the difference between HTTP and HTTPS?</a></p>\n</blockquote>\n<p>HTTPS 有助于确保网络安全。毫无疑问，它是比 HTTP 更好的网络协议解决方案。</p>\n<p>将网站开启HTTPS的服务是需要SSL的证书的，我们来看一下如何在Let’s Encrypt上申请免费的SSL证书。</p>\n<blockquote>\n<p>  Let’s Encrypt 是免费、开放和自动化的证书颁发机构。由非盈利组织<a href=\"https://www.abetterinternet.org/\">互联网安全研究小组（ISRG）</a>运营。</p>\n</blockquote>\n<h1 id=\"申请的前提条件\"><a href=\"#申请的前提条件\" class=\"headerlink\" title=\"申请的前提条件\"></a>申请的前提条件</h1><p>我们申请SSL证书的前提条件有下面这几个</p>\n<ol>\n<li>拥有域名，能够自主配置DNS。或者提供Web服务器做验证，在网站目录下放一个文件。</li>\n<li>获取证书的环境要能访问DNS服务器，因为会需要做DNS解析校验。</li>\n<li>需要有远程主机的权限，会需要更新和安装组件。</li>\n<li>公网IP，保留地址无法申请SSL。</li>\n</ol>\n<h1 id=\"申请步骤\"><a href=\"#申请步骤\" class=\"headerlink\" title=\"申请步骤\"></a>申请步骤</h1><p>Let’s Encrypt 的证书申请除去手动申请常见的主要有下面这几种</p>\n<ul>\n<li><code>acme.sh</code>的方式<em>（我当时选取了这个方式）</em></li>\n<li>docker 镜像获取</li>\n<li><code>certbot</code>方式获取证书<em>（官网建议使用这种方式获取证书，可以在不下线的状态下自动执行证书颁发和安装）</em></li>\n</ul>\n<h2 id=\"acme-sh脚本\"><a href=\"#acme-sh脚本\" class=\"headerlink\" title=\"acme.sh脚本\"></a><code>acme.sh</code>脚本</h2><p><a href=\"https://github.com/acmesh-official/acme.sh\">Github链接：An ACME Shell script: acme.sh</a></p>\n<p>Github的README其实介绍的其实很全面，这里copy一下。</p>\n<blockquote>\n<p>  <strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书.</p>\n<p>  主要步骤:</p>\n<ol>\n<li>安装 <strong>acme.sh</strong></li>\n<li>生成证书</li>\n<li>copy 证书到 nginx&#x2F;apache 或者其他服务</li>\n<li>更新证书</li>\n<li>更新 <strong>acme.sh</strong></li>\n<li>出错怎么办, 如何调试</li>\n</ol>\n<p>  下面详细介绍.</p>\n<h1 id=\"1-安装-acme-sh\"><a href=\"#1-安装-acme-sh\" class=\"headerlink\" title=\"1. 安装 acme.sh\"></a>1. 安装 <strong>acme.sh</strong></h1><p>  安装很简单, 一个命令:</p>\n<blockquote>\n<p>  这里输入你的邮箱，这个邮箱有什么用倒是不太清楚</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl https://get.acme.sh | sh -s email=my@example.com<br></code></pre></td></tr></table></figure>\n\n<p>  普通用户和 root 用户都可以安装使用. 安装过程进行了以下几步:</p>\n<ol>\n<li>把 acme.sh 安装到你的 <strong>home</strong> 目录下:</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">~/.acme.sh/<br></code></pre></td></tr></table></figure>\n\n<p>  并创建 一个 shell 的 alias, 例如 .bashrc，方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code></p>\n<ol start=\"2\">\n<li>自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</li>\n</ol>\n<p>  更高级的安装选项请参考: <a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a></p>\n<p>  <strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p>\n<h1 id=\"2-生成证书\"><a href=\"#2-生成证书\" class=\"headerlink\" title=\"2. 生成证书\"></a>2. 生成证书</h1><p>  <strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p>\n<h3 id=\"1-http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了\"><a href=\"#1-http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了\" class=\"headerlink\" title=\"1. http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.\"></a>1. http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</h3>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/<br></code></pre></td></tr></table></figure>\n\n<p>  只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用.</p>\n<p>  如果你用的 <strong>apache</strong>服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> -d mydomain<span class=\"hljs-selector-class\">.com</span> <span class=\"hljs-attr\">--apache</span><br></code></pre></td></tr></table></figure>\n\n<p>  如果你用的 <strong>nginx</strong>服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> -d mydomain<span class=\"hljs-selector-class\">.com</span> <span class=\"hljs-attr\">--nginx</span><br></code></pre></td></tr></table></figure>\n\n<p>  <strong>注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.</strong></p>\n<p>  如果你还没有运行任何 web 服务, <strong>80</strong> 端口是空闲的, 那么 <strong>acme.sh</strong> 还能假装自己是一个webserver, 临时听在<strong>80</strong> 端口, 完成验证:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> -d mydomain<span class=\"hljs-selector-class\">.com</span> <span class=\"hljs-attr\">--standalone</span><br></code></pre></td></tr></table></figure>\n\n<p>  更高级的用法请参考: <a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert\">https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</a></p>\n<h3 id=\"2-手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权\"><a href=\"#2-手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权\" class=\"headerlink\" title=\"2. 手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.\"></a>2. 手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.</h3><p>  这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证. 坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> <span class=\"hljs-attr\">--dns</span> -d mydomain<span class=\"hljs-selector-class\">.com</span> \\<br> <span class=\"hljs-attr\">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></code></pre></td></tr></table></figure>\n\n<p>  然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p>\n<p>  等待解析完成之后, 重新生成证书:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--renew</span> -d mydomain<span class=\"hljs-selector-class\">.com</span> \\<br>  <span class=\"hljs-attr\">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></code></pre></td></tr></table></figure>\n\n<p>  注意第二次这里用的是 <code>--renew</code></p>\n<p>  dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p>\n<p>  <strong>acme.sh</strong> 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.</p>\n<p>  以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的. 然后:</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">DP_Id</span>=<span class=\"hljs-string\">&quot;1234&quot;</span><br><br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">DP_Key</span>=<span class=\"hljs-string\">&quot;sADDsdasdgdsf&quot;</span><br><br>acme.sh --issue --dns dns_dp -d aa.com -d www.aa.com<br></code></pre></td></tr></table></figure>\n\n<p>  证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了. 直接生成就好了:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> -d mydomain2<span class=\"hljs-selector-class\">.com</span> <span class=\"hljs-attr\">--dns</span>  dns_dp<br></code></pre></td></tr></table></figure>\n\n<p>  更详细的 api 用法: <a href=\"https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p>\n<h3 id=\"3-其他的激活方式\"><a href=\"#3-其他的激活方式\" class=\"headerlink\" title=\"3. 其他的激活方式\"></a>3. 其他的激活方式</h3><p>  <a href=\"https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\">https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert</a></p>\n<h1 id=\"3-copy-安装-证书\"><a href=\"#3-copy-安装-证书\" class=\"headerlink\" title=\"3. copy&#x2F;安装 证书\"></a>3. copy&#x2F;安装 证书</h1><p>  前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p>\n<p>  注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>, <strong>请不要直接使用此目录下的文件,</strong> 例如: 不要直接让 nginx&#x2F;apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p>\n<p>  正确的使用方法是使用 <code>--install-cert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如:</p>\n<h2 id=\"Apache-example\"><a href=\"#Apache-example\" class=\"headerlink\" title=\"Apache example:\"></a>Apache example:</h2>  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">acme.sh --install-cert -d example.com \\<br>--cert-<span class=\"hljs-keyword\">file</span>      <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/certfile/i</span>n<span class=\"hljs-regexp\">/apache/</span>cert.pem  \\<br>--key-<span class=\"hljs-keyword\">file</span>       <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/keyfile/i</span>n<span class=\"hljs-regexp\">/apache/</span>key.pem  \\<br>--fullchain-<span class=\"hljs-keyword\">file</span> <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/fullchain/</span>certfile<span class=\"hljs-regexp\">/apache/</span>fullchain.pem \\<br>--reloadcmd     <span class=\"hljs-string\">&quot;service apache2 force-reload&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-example\"><a href=\"#Nginx-example\" class=\"headerlink\" title=\"Nginx example:\"></a>Nginx example:</h2>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--install-cert</span> -d example<span class=\"hljs-selector-class\">.com</span> \\<br><span class=\"hljs-attr\">--key-file</span>       /path/to/keyfile/<span class=\"hljs-keyword\">in</span>/nginx/key<span class=\"hljs-selector-class\">.pem</span>  \\<br><span class=\"hljs-attr\">--fullchain-file</span> /path/to/fullchain/nginx/cert<span class=\"hljs-selector-class\">.pem</span> \\<br><span class=\"hljs-attr\">--reloadcmd</span>     <span class=\"hljs-string\">&quot;service nginx force-reload&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>  (一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p>\n<blockquote>\n<p>  我当时使用这个命令的时候发现用 <code>service nginx force-reload</code>  报没有权限，然后是将当前用户</p>\n</blockquote>\n<p>  Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href=\"https://www.ssllabs.com/ssltest/\">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p>\n<p>  <code>--install-cert</code>命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p>\n<p>  详细参数请参考: <a href=\"https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc\">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p>\n<p>  值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p>\n<h1 id=\"4-查看已安装证书信息\"><a href=\"#4-查看已安装证书信息\" class=\"headerlink\" title=\"4. 查看已安装证书信息\"></a>4. 查看已安装证书信息</h1>  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">acme.sh --<span class=\"hljs-built_in\">info</span> -d example.com<br><span class=\"hljs-comment\"># 会输出如下内容：</span><br><span class=\"hljs-attribute\">DOMAIN_CONF</span>=/root/.acme.sh/example.com/example.com.conf<br><span class=\"hljs-attribute\">Le_Domain</span>=example.com<br><span class=\"hljs-attribute\">Le_Alt</span>=<span class=\"hljs-literal\">no</span><br><span class=\"hljs-attribute\">Le_Webroot</span>=dns_ali<br>Le_PreHook=<br>Le_PostHook=<br>Le_RenewHook=<br><span class=\"hljs-attribute\">Le_API</span>=https://acme-v02.api.letsencrypt.org/directory<br>Le_Keylength=<br><span class=\"hljs-attribute\">Le_OrderFinalize</span>=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310<br><span class=\"hljs-attribute\">Le_LinkOrder</span>=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310<br><span class=\"hljs-attribute\">Le_LinkCert</span>=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07<br><span class=\"hljs-attribute\">Le_CertCreateTime</span>=1649358725<br><span class=\"hljs-attribute\">Le_CertCreateTimeStr</span>=Thu Apr  7 19:12:05 UTC 2022<br><span class=\"hljs-attribute\">Le_NextRenewTimeStr</span>=Mon Jun  6 19:12:05 UTC 2022<br><span class=\"hljs-attribute\">Le_NextRenewTime</span>=1654456325<br>Le_RealCertPath=<br>Le_RealCACertPath=<br><span class=\"hljs-attribute\">Le_RealKeyPath</span>=/etc/acme/example.com/privkey.pem<br><span class=\"hljs-attribute\">Le_ReloadCmd</span>=service nginx force-reload<br><span class=\"hljs-attribute\">Le_RealFullChainPath</span>=/etc/acme/example.com/chain.pem<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"5-更新证书\"><a href=\"#5-更新证书\" class=\"headerlink\" title=\"5. 更新证书\"></a>5. 更新证书</h1><p>  目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>\n<p>  请确保 cronjob 正确安装, 看起来是类似这样的:</p>\n  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">crontab  -l<br><br>56 * * * * <span class=\"hljs-string\">&quot;/root/.acme.sh&quot;</span><span class=\"hljs-string\">/acme.sh</span> <span class=\"hljs-params\">--cron</span> <span class=\"hljs-params\">--home</span> <span class=\"hljs-string\">&quot;/root/.acme.sh&quot;</span> &gt; <span class=\"hljs-string\">/dev/null</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"6-关于修改ReloadCmd\"><a href=\"#6-关于修改ReloadCmd\" class=\"headerlink\" title=\"6. 关于修改ReloadCmd\"></a>6. 关于修改ReloadCmd</h1><p>  目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来实现修改<code>reloadCmd</code>的目的。 此外，安装证书后，相关信息是保存在<code>~/.acme.sh/example.com/example.conf</code>文件下的，内容就是<code>acme.sh --info -d example.com</code>输出的信息，不过<code>ReloadCmd</code>在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改<code>ReloadCmd</code>，且修改时，无需Base64编码，直接写命令原文<code>acme.sh</code>也可以识别。 不过，<code>example.conf</code>文件的位置和内容格式以后可能会改变！<code>example.conf</code>一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。</p>\n<h1 id=\"7-更新-acme-sh\"><a href=\"#7-更新-acme-sh\" class=\"headerlink\" title=\"7. 更新 acme.sh\"></a>7. 更新 acme.sh</h1><p>  目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.</p>\n<p>  升级 acme.sh 到最新版 :</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--upgrade</span><br></code></pre></td></tr></table></figure>\n\n<p>  如果你不想手动升级, 可以开启自动升级:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--upgrade</span> <span class=\"hljs-attr\">--auto-upgrade</span><br></code></pre></td></tr></table></figure>\n\n<p>  之后, acme.sh 就会自动保持更新了.</p>\n<p>  你也可以随时关闭自动更新:</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--upgrade</span> <span class=\"hljs-attr\">--auto-upgrade</span>  <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"8-出错怎么办：\"><a href=\"#8-出错怎么办：\" class=\"headerlink\" title=\"8. 出错怎么办：\"></a>8. 出错怎么办：</h1><p>  如果出错, 请添加 debug log：</p>\n  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">acme.sh <span class=\"hljs-params\">--issue</span>  <span class=\"hljs-string\">.....</span>  <span class=\"hljs-params\">--debug</span> <br></code></pre></td></tr></table></figure>\n\n<p>  或者：</p>\n  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">acme.sh <span class=\"hljs-params\">--issue</span>  <span class=\"hljs-string\">.....</span>  <span class=\"hljs-params\">--debug</span>  2<br></code></pre></td></tr></table></figure>\n\n<p>  请参考： <a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh\">https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</a></p>\n<p>  最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.</p>\n<p>  <a href=\"https://github.com/Neilpang/acme.sh/wiki\">https://github.com/Neilpang/acme.sh/wiki</a></p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run --rm  -itd  \\<br>  -v &quot;$(pwd)/out&quot;:/acme.sh  \\<br>  -e Ali_Key=&quot;xxxxxx&quot; \\<br>  -e Ali_Secret=&quot;xxxx&quot; \\<br>  neilpang/acme.sh  --issue --dns dns_ali -d domain.cn -d *.domain.cn<br></code></pre></td></tr></table></figure>\n\n<p>详细用法，可以参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/Run-acme.sh-in-docker\">传送门</a></p>\n<blockquote>\n<h1 id=\"acme-sh-💕-docker\"><a href=\"#acme-sh-💕-docker\" class=\"headerlink\" title=\"acme.sh 💕 docker\"></a>acme.sh 💕 docker</h1><p>  作为 docker 的忠实粉丝之一，我知道我们讨厌在 docker 主机上安装任何东西，即使它只是复制一个 shell 脚本。</p>\n<p>  用于 letsencrypt ssl 证书的带有 acme.sh 的自动化 nginx 反向代理 docker 图像： https: <a href=\"https://github.com/Neilpang/letsproxy\">&#x2F;&#x2F;github.com&#x2F;Neilpang&#x2F;letsproxy</a></p>\n<p>  部署到 docker 容器并重新加载它：<a href=\"https://github.com/Neilpang/acme.sh/wiki/deploy-to-docker-containers\">https :&#x2F;&#x2F;github.com&#x2F;Neilpang&#x2F;acme.sh&#x2F;wiki&#x2F;deploy-to-docker-containers</a></p>\n<p>  所以，这里出现了“docker 中的 acme.sh”。</p>\n<ol>\n<li>基于<strong>alpine</strong>，只有 5MB 大小。</li>\n<li>作为可执行文件运行或作为守护进程运行</li>\n<li>支持所有命令行参数。</li>\n</ol>\n<h1 id=\"1-说“Hello-World”\"><a href=\"#1-说“Hello-World”\" class=\"headerlink\" title=\"1.说“Hello World”\"></a>1.说“Hello World”</h1>  <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">docker <span class=\"hljs-keyword\">run</span><span class=\"language-bash\"> --<span class=\"hljs-built_in\">rm</span> neilpang/acme.sh</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-用作可执行文件：\"><a href=\"#2-用作可执行文件：\" class=\"headerlink\" title=\"2.用作可执行文件：\"></a>2.用作可执行文件：</h1>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">docker run <span class=\"hljs-attr\">--rm</span>  -it  \\<br>  -v <span class=\"hljs-string\">&quot;$(pwd)/out&quot;</span>:/acme<span class=\"hljs-selector-class\">.sh</span>  \\<br>  <span class=\"hljs-attr\">--net</span>=host \\<br>  neilpang/acme<span class=\"hljs-selector-class\">.sh</span>  <span class=\"hljs-attr\">--issue</span> -d example<span class=\"hljs-selector-class\">.com</span>  <span class=\"hljs-attr\">--standalone</span><br></code></pre></td></tr></table></figure>\n\n<p>  您可以在此处使用<strong>acme.sh</strong>支持的<strong>任何命令</strong>，其他示例：</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-id\">#revoke</span> <span class=\"hljs-selector-tag\">a</span> cert<br>docker run <span class=\"hljs-attr\">--rm</span>  -it  \\<br>  -v <span class=\"hljs-string\">&quot;$(pwd)/out&quot;</span>:/acme<span class=\"hljs-selector-class\">.sh</span>  \\<br>  <span class=\"hljs-attr\">--net</span>=host \\<br>  neilpang/acme<span class=\"hljs-selector-class\">.sh</span>  <span class=\"hljs-attr\">--revoke</span> -d example<span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-id\">#use</span> dns mode<br>docker run <span class=\"hljs-attr\">--rm</span>  -it  \\<br>  -v <span class=\"hljs-string\">&quot;$(pwd)/out&quot;</span>:/acme<span class=\"hljs-selector-class\">.sh</span>  \\<br>  neilpang/acme<span class=\"hljs-selector-class\">.sh</span>  <span class=\"hljs-attr\">--issue</span> <span class=\"hljs-attr\">--dns</span> -d example<span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-id\">#run</span> cron job<br>docker run <span class=\"hljs-attr\">--rm</span>  -it  \\<br>  -v <span class=\"hljs-string\">&quot;$(pwd)/out&quot;</span>:/acme<span class=\"hljs-selector-class\">.sh</span>  \\<br>  <span class=\"hljs-attr\">--net</span>=host \\<br>  neilpang/acme<span class=\"hljs-selector-class\">.sh</span>  <span class=\"hljs-attr\">--cron</span><br></code></pre></td></tr></table></figure>\n\n<p>  无论如何，您可以像调用真正的 shell 脚本一样调用<strong>neilpang&#x2F;acme.sh。</strong></p>\n<h1 id=\"3-将-acme-sh-作为-docker-守护进程运行。\"><a href=\"#3-将-acme-sh-作为-docker-守护进程运行。\" class=\"headerlink\" title=\"3. 将 acme.sh 作为 docker 守护进程运行。\"></a>3. 将 acme.sh 作为 docker 守护进程运行。</h1><ol>\n<li>将 acme.sh 作为 docker 守护进程运行，以便它可以自动处理更新 cronjob。</li>\n</ol>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> --rm  -itd  \\<br>  -v <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(pwd)</span>/out&quot;</span>:/acme.sh  \\<br>  <span class=\"hljs-attribute\">--net</span>=host \\<br>  <span class=\"hljs-attribute\">--name</span>=acme.sh \\<br>  neilpang/acme.sh daemon<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后你就可以使用<code>docker exec</code>来执行任何acme.sh 命令了。</li>\n</ol>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">docker  exec  acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--help</span><br>docker  exec  acme<span class=\"hljs-selector-class\">.sh</span> <span class=\"hljs-attr\">--issue</span> -d example<span class=\"hljs-selector-class\">.com</span>  <span class=\"hljs-attr\">--standalone</span><br></code></pre></td></tr></table></figure>\n\n<p>  是的，再次强调，您可以在此处使用<strong>acme.sh</strong>支持的<strong>任何命令</strong>。</p>\n</blockquote>\n<h2 id=\"Certbot\"><a href=\"#Certbot\" class=\"headerlink\" title=\"Certbot\"></a>Certbot</h2><p><a href=\"https://certbot.eff.org/\">https://certbot.eff.org/</a></p>\n",
            "tags": [
                "ssl",
                "https"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/82aca4fc/",
            "url": "https://www.oikiou.top/2022/82aca4fc/",
            "title": "SSL证书的申请和自动续期",
            "date_published": "2022-07-21T14:57:15.000Z",
            "content_html": "<h1 id=\"SSL证书的申请和自动续期\"><a href=\"#SSL证书的申请和自动续期\" class=\"headerlink\" title=\"SSL证书的申请和自动续期\"></a>SSL证书的申请和自动续期</h1><p>Let’s Encrypt 证书续期</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/a2d0209fa3f5\">https://www.jianshu.com/p/a2d0209fa3f5</a></p>\n<p><a href=\"https://www.cnblogs.com/esofar/p/9291685.html\">快速签发 Let’s Encrypt 证书指南</a></p>\n<p><a href=\"https://certbot.eff.org/\">https://certbot.eff.org/</a></p>\n<h1 id=\"acme-sh-申请\"><a href=\"#acme-sh-申请\" class=\"headerlink\" title=\"acme.sh 申请\"></a>acme.sh 申请</h1><p>用 acme.sh申请来自动续期ssl证书<br> acme说明：<a href=\"https://links.jianshu.com/go?to=https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E\">https://github.com/Neilpang/acme.sh/wiki/说明</a></p>\n<h2 id=\"通过在网站根目录存放文件来验证域名\"><a href=\"#通过在网站根目录存放文件来验证域名\" class=\"headerlink\" title=\"通过在网站根目录存放文件来验证域名\"></a>通过在网站根目录存放文件来验证域名</h2><ol>\n<li><p>下载acme<code>curl https://get.acme.sh | sh</code>  安装完成后必须关闭当前终端，重新开启一个以使acme.sh命令生效</p>\n</li>\n<li><p>执行生成和自动更新命令：<code>acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /var/www/mydomain.com/</code></p>\n<blockquote>\n<h2 id=\"通过在网站根目录存放文件来验证域名-1\"><a href=\"#通过在网站根目录存放文件来验证域名-1\" class=\"headerlink\" title=\"通过在网站根目录存放文件来验证域名\"></a>通过在网站根目录存放文件来验证域名</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你用的 nginx服务器, 或者反代, acme.sh 还可以智能的从 nginx的配置中自动完成验证, 你不需要指定网站根目录:</span><br>acme.sh --issue -d mydomain.com --nginx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"通过DNS解析添加TXT解析记录验证\"><a href=\"#通过DNS解析添加TXT解析记录验证\" class=\"headerlink\" title=\"通过DNS解析添加TXT解析记录验证\"></a>通过DNS解析添加TXT解析记录验证</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">acme.sh --issue --dns -d mydomain.com \\<br> --yes-I-know-dns-manual-mode-enough-go-ahead-please<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后, acme.sh 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.等待解析完成之后, 重新生成证书:</span><br><br>acme.sh --renew -d mydomain.com \\<br>  --yes-I-know-dns-manual-mode-enough-go-ahead-please<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意第二次这里用的是 --renew</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>安装证书 <code>cd /etc/nginx; mkdir ssl</code></p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">acme.sh  --installcert  -d  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">domain</span>&gt;</span>.com   \\<br>        --key-file   /etc/nginx/ssl/<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">domain</span>&gt;</span>.key \\<br>        --fullchain-file /etc/nginx/ssl/fullchain.cer \\<br>        --reloadcmd  &quot;service nginx force-reload&quot;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置nginx使用ssl</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>    listen 80 default_server;<br>    listen 443 http2 ssl;<br>    listen [::]:80 default_server;<br><br>    ssl_certificate /etc/nginx/ssl/fullchain.cer;<br>    ssl_certificate_key /etc/nginx/ssl/domain.key;<br>    <span class=\"hljs-comment\">#http转https</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$scheme</span> = http ) &#123;<span class=\"hljs-built_in\">return</span> 301 https://$host<span class=\"hljs-variable\">$request_uri</span>;&#125;<br>    root /var/www/html;<br><br>    index index.html index.htm index.nginx-debian.html;<br>    server_name _;<br><br>    ssl_certificate /etc/nginx/ssl/fullchain.cer;<br>    ssl_certificate_key /etc/nginx/ssl/domain.key;<br><br>    location /test &#123;<br>          proxy_pass       http://127.0.0.1:3000;<br>          proxy_http_version 1.1;<br>          proxy_set_header Upgrade <span class=\"hljs-variable\">$http_upgrade</span>;<br>          proxy_set_header Connection <span class=\"hljs-string\">&quot;upgrade&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>前端的Upgrade请求发送给后端服务器，Upgrade和Connection的头信息必须被显式的设置。一旦我们完成以上设置，NGINX就可以处理WebSocket连接了。查看配置在哪里<code>ps -ef|grep nginx</code><br> 多个域名的话，配多个nginx.conf配置。</p>\n<ol start=\"5\">\n<li>查看是否有每日任务<br> <code>crontab -l #查看你的任务</code><br> 手动更新证书<code>acme.sh --renew -d domain.com</code></li>\n</ol>\n<h1 id=\"certbot\"><a href=\"#certbot\" class=\"headerlink\" title=\"certbot\"></a>certbot</h1><p><a href=\"https://certbot.eff.org/\">文档</a></p>\n<p>Ubuntu + nginx <a href=\"https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal\">https://certbot.eff.org/instructions?ws=nginx&amp;os=ubuntufocal</a></p>\n<p>用certbot来自动续期ssl证书</p>\n<ul>\n<li>需要注意的是安装证书的时候最好把nginx关掉先</li>\n</ul>\n",
            "tags": [
                "ssl",
                "https"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/aa858de8/",
            "url": "https://www.oikiou.top/2022/aa858de8/",
            "title": "Wordpress",
            "date_published": "2022-02-21T14:57:15.000Z",
            "content_html": "<h1 id=\"Wordpress\"><a href=\"#Wordpress\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h1><h2 id=\"LNMP安装\"><a href=\"#LNMP安装\" class=\"headerlink\" title=\"LNMP安装\"></a>LNMP安装</h2><p><a href=\"https://lnmp.org/\">https://lnmp.org/</a></p>\n<p><strong>LNMP一键安装包是什么?</strong></p>\n<p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS&#x2F;RHEL&#x2F;Fedora&#x2F;Aliyun&#x2F;Amazon、Debian&#x2F;Ubuntu&#x2F;Raspbian&#x2F;Deepin&#x2F;Mint Linux VPS或独立主机安装LNMP(Nginx&#x2F;MySQL&#x2F;PHP)、LNMPA(Nginx&#x2F;MySQL&#x2F;PHP&#x2F;Apache)、LAMP(Apache&#x2F;MySQL&#x2F;PHP)生产环境的Shell程序。</p>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 登录</span><br>mysql -u root -p<br><br><span class=\"hljs-comment\"># 如果报找不到命令 cd到对应目录去登录</span><br><span class=\"hljs-built_in\">cd</span> /usr/local/mariadb10/bin/<br>./mysql -u root -p<br><br><span class=\"hljs-comment\"># 切换到mysql数据库</span><br>use mysql<br><br><span class=\"hljs-comment\"># 执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。</span><br>CREATE DATABASE IF NOT EXISTS wordpress;<br><br><span class=\"hljs-comment\"># 执行以下命令，创建一个新用户。例如 “user”，登录密码为 123456。</span><br>CREATE USER <span class=\"hljs-string\">&#x27;user&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br><span class=\"hljs-comment\"># 执行以下命令，赋予用户对 “wordpress” 数据库的全部权限。</span><br>GRANT ALL PRIVILEGES ON wordpress.* TO <span class=\"hljs-string\">&#x27;user&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br><span class=\"hljs-comment\"># 执行以下命令，设置 root 帐户密码</span><br>ALTER USER root@localhost IDENTIFIED VIA mysql_native_password USING PASSWORD(<span class=\"hljs-string\">&#x27;输入您的密码&#x27;</span>);<br><br><span class=\"hljs-comment\"># 执行以下命令，使所有配置生效。</span><br>FLUSH PRIVILEGES;<br><br><span class=\"hljs-comment\"># 退出</span><br>\\q<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Wordpress-1\"><a href=\"#Wordpress-1\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h2><h4 id=\"修改-WordPress-配置文件\"><a href=\"#修改-WordPress-配置文件\" class=\"headerlink\" title=\"修改 WordPress 配置文件\"></a>修改 WordPress 配置文件</h4><ol>\n<li><p>依次执行以下命令，进入 WordPress 安装目录，将<code>wp-config-sample.php</code>文件复制到<code>wp-config.php</code>文件中，并将原先的示例配置文件保留作为备份。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> /home/wwwroot/wordpress<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">cp</span> <span class=\"hljs-keyword\">wp</span>-config-sample.php <span class=\"hljs-keyword\">wp</span>-config.php<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下命令，打开并编辑新创建的配置文件。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">vim</span> <span class=\"hljs-keyword\">wp</span>-config.php<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按 <strong>i</strong> 切换至编辑模式，找到文件中 MySQL 的部分，并将相关配置信息修改为 <a href=\"https://cloud.tencent.com/document/product/213/8044#database\">配置 WordPress 数据库</a> 中的内容。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-comment\">// ** MySQL settings - You can get this info from your web host ** //</span><br><span class=\"hljs-comment\">/** The name of the database for WordPress */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_NAME&#x27;</span>, <span class=\"hljs-string\">&#x27;wordpress&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL database username */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_USER&#x27;</span>, <span class=\"hljs-string\">&#x27;user&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL database password */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_PASSWORD&#x27;</span>, <span class=\"hljs-string\">&#x27;123456&#x27;</span>);<br>    <br><span class=\"hljs-comment\">/** MySQL hostname */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">define</span></span>(<span class=\"hljs-string\">&#x27;DB_HOST&#x27;</span>, <span class=\"hljs-string\">&#x27;localhost&#x27;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改完成后，按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p>\n</li>\n</ol>\n<h3 id=\"开启HTTPS支持\"><a href=\"#开启HTTPS支持\" class=\"headerlink\" title=\"开启HTTPS支持\"></a>开启HTTPS支持</h3><h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><h2 id=\"获取域名\"><a href=\"#获取域名\" class=\"headerlink\" title=\"获取域名\"></a>获取域名</h2><p>这里有一个免费的域名, 先凑合用着吧</p>\n<p><a href=\"https://www.freenom.com/\">https://www.freenom.com/</a></p>\n<blockquote>\n<p>  freenom 注册方法</p>\n<p>  <a href=\"https://zhuanlan.zhihu.com/p/115535965\">https://zhuanlan.zhihu.com/p/115535965</a></p>\n<p>  Freenom常见问题解决方法</p>\n<p>  <a href=\"http://www.360doc.com/content/21/0124/00/30583588_958609144.shtml\">http://www.360doc.com/content/21/0124/00/30583588_958609144.shtml</a></p>\n</blockquote>\n<ul>\n<li><p>注册的时候搜索要加上后缀不然会显示  不可用</p>\n</li>\n<li><p>checkout 到购物车改成 12月 free</p>\n</li>\n<li><p>谷歌邮箱直接登录 登录后要更改自己的个人信息里面的地址(改成ip所在地) 不然无法成功注册</p>\n</li>\n<li><p>菜单栏 servers -&gt; my domains 就可以看到地址了</p>\n</li>\n<li><p>最后再修改一下NS服务器</p>\n<ul>\n<li><p>Manage Domain -&gt; Management Tools -&gt; nameserver -&gt; Use custom nameservers (enter below)</p>\n</li>\n<li><p>这里填写cloudflare 或者 dnspod 给出来的 Nameservers 就好了</p>\n</li>\n<li><p>类似于</p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">NS</td>\n<td align=\"left\">katja.ns.cloudflare.com</td>\n</tr>\n<tr>\n<td align=\"left\">NS</td>\n<td align=\"left\">kirk.ns.cloudflare.com</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>域名的<a href=\"https://www.vpsgo.com/tag/ns%E8%AE%B0%E5%BD%95\">NS记录</a>（<a href=\"https://www.vpsgo.com/tag/name-server\">Name Server</a>）是指处理域名解析的服务器，说白点就是你的域名由谁家来解析。一般购买了域名后，默认的NS记录就是指向域名提供商的（例如NameSilo的默认就由它自己解析）。你可以修改域名的NS记录，让它由不同的解析服务商来解析，例如可以指向<a href=\"https://www.vpsgo.com/tag/cloudflare\">Cloudflare</a>或者<a href=\"https://www.vpsgo.com/tag/dnspod\">DNSPod</a>。</p>\n<p>之后DNS（Domain Name System），常用的<a href=\"https://www.vpsgo.com/tag/dns%E8%AE%B0%E5%BD%95\">DNS记录</a>包括域名解析中A记录、CNAME、MX记录。<a href=\"https://www.vpsgo.com/tag/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95\">域名A记录</a>又称为IP指向，就是说你这个域名代表什么IP；域名CNAME是指别名指向，就是说指向另一个域名，例如可以设置test.vpsgo.com指向<a href=\"http://www.vpsgo.com;域名的mx记录就是邮件交换记录,是做邮件服务器需要设置的.本文主要介绍域名a记录解析./\">www.vpsgo.com；域名的MX记录就是邮件交换记录，是做邮件服务器需要设置的。本文主要介绍域名A记录解析。</a></p>\n<blockquote>\n<p>  cloudflare 解析</p>\n<p>  <a href=\"https://zhuanlan.zhihu.com/p/56423186\">https://zhuanlan.zhihu.com/p/56423186</a></p>\n<p>  <a href=\"https://www.vpsgo.com/domain-ns-cloudflare-dnspod.html#NS\">https://www.vpsgo.com/domain-ns-cloudflare-dnspod.html#NS</a></p>\n</blockquote>\n<h1 id=\"HTTPS-SSL-TLS\"><a href=\"#HTTPS-SSL-TLS\" class=\"headerlink\" title=\"HTTPS SSL&#x2F;TLS\"></a>HTTPS SSL&#x2F;TLS</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><h3 id=\"acme-sh\"><a href=\"#acme-sh\" class=\"headerlink\" title=\"acme.sh\"></a>acme.sh</h3><p><a href=\"https://ruby-china.org/topics/31983\">https://ruby-china.org/topics/31983</a></p>\n<p><a href=\"https://ruby-china.org/topics/28471\">https://ruby-china.org/topics/28471</a></p>\n<p><a href=\"https://ruby-china.org/topics/25543\">https://ruby-china.org/topics/25543</a></p>\n<p><a href=\"https://ruby-china.org/topics/31942\">https://ruby-china.org/topics/31942</a></p>\n<h3 id=\"caddy\"><a href=\"#caddy\" class=\"headerlink\" title=\"caddy\"></a>caddy</h3><p><a href=\"https://caddyserver.com/docs/quick-starts/https\">https://caddyserver.com/docs/quick-starts/https</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 acme.sh</span><br>curl https://get.acme.sh | sh<br><br><span class=\"hljs-comment\"># 然后重新载入一下 .bashrc</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc <br><br><span class=\"hljs-comment\"># 至此acme安装完成</span><br>acme.sh<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 注册账号</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --register-account -m jackliuworkemail@gmail.com  --server zerossl<br><br><span class=\"hljs-comment\"># 为lager.cf创建密钥</span><br><span class=\"hljs-comment\"># -k 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --issue -d lager.cf --standalone -k ec-256<br><br><span class=\"hljs-comment\"># 由于 Let&#x27;s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。</span><br><span class=\"hljs-comment\"># 查看计划任务</span><br> crontab -l<br><span class=\"hljs-comment\"># 手动更新 ECC 证书，执行：</span><br><span class=\"hljs-built_in\">sudo</span> ~/.acme.sh/acme.sh --renew -d lager.cf --force --ecc<br><br><span class=\"hljs-comment\"># 请注意：reloadcmd非常重要。证书可以自动续订，但是，如果没有正确的“reloadcmd”，证书可能无法刷新到您的服务器（如nginx或apache），那么您的网站将无法在60天内显示续订证书。</span><br><span class=\"hljs-comment\"># 注意：无论什么情况，密钥(即上面的lager.cf.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</span><br>acme.sh --installcert -d lager.cf \\<br>--keypath       /usr/local/nginx/ssl/lager.cf.key \\<br>--fullchainpath /usr/local/nginx/ssl/lager.cf.cer \\<br>--reloadcmd     <span class=\"hljs-string\">&quot;sudo service nginx force-reload&quot;</span>  --force --ecc<br><br><span class=\"hljs-comment\"># 生成 dhparam.pem 文件</span><br>openssl dhparam -out /usr/local/nginx/ssl/lager.cf.pem 2048<br><br><br><span class=\"hljs-comment\"># 配置nginx 启用 https</span><br>vim /usr/local/nginx/conf/nginx.conf<br><br><span class=\"hljs-comment\"># 检查配置</span><br><span class=\"hljs-built_in\">sudo</span> service nginx configtest<br><span class=\"hljs-comment\"># 重启服务</span><br><span class=\"hljs-built_in\">sudo</span> service nginx restart<br><br><br><span class=\"hljs-comment\">#验证 SSL</span><br><span class=\"hljs-comment\">#访问 ssllabs.com 输入你的域名，检查 SSL 的配置是否都正常：</span><br>https://ssllabs.com/ssltest/analyze.html?d=ruby-china.org<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h3><ul>\n<li><code>ssl_dhparam</code> 未配置，将导致 ssllabs.com 的评分降到 B，并给 <code>This server supports weak Diffie-Hellman (DH) key exchange parameters. Grade capped to B.</code> 的警告。</li>\n<li><code>ssl_prefer_server_ciphers on</code> 也是一个必要的配置，否则会 A+ 变成 A-;</li>\n<li>如果你需要兼容老系统或老浏览器的话，你需要配置 <code>ssl_ciphers</code>，详见 <a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Mozilla Server_Side_TLS 的介绍</a>，Nginx 里面 <code>ssl_ciphers</code> 默认值是 <code>HIGH:!aNULL:!MD5;</code> <a href=\"https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers\">ref</a></li>\n</ul>\n<h2 id=\"acme-sh-1\"><a href=\"#acme-sh-1\" class=\"headerlink\" title=\"acme.sh\"></a>acme.sh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 查看证书列表</span><br>acme.sh --list<br><br><span class=\"hljs-comment\"># 删除证书</span><br>acme.sh remove Main_Domain (证书的主域名，上述证书列表中可看见)<br><br><span class=\"hljs-comment\"># 升级 acme.sh 到最新版 :</span><br>acme.sh --upgrade<br><br><span class=\"hljs-comment\"># 如果你不想手动升级, 可以开启自动升级:</span><br>acme.sh --upgrade --auto-upgrade<br><br><span class=\"hljs-comment\">#你也可以随时关闭自动更新:</span><br>acme.sh --upgrade --auto-upgrade 0 <br><br><span class=\"hljs-comment\"># 如果出错, 请添加 debug log：</span><br>acme.sh --issue ..... --debug <br><span class=\"hljs-comment\"># 或者：</span><br>acme.sh --issue ..... --debug 2<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"ngix\"><a href=\"#ngix\" class=\"headerlink\" title=\"ngix\"></a>ngix</h2><h3 id=\"nginx-config-1\"><a href=\"#nginx-config-1\" class=\"headerlink\" title=\"nginx config 1\"></a>nginx config 1</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>    listen 80; <span class=\"hljs-comment\">#如果硬性要求全部走https协议，这一行去除</span><br>    listen 443 ssl http2; <span class=\"hljs-comment\">#如果硬性要求全部走https协议，这里去除ssl</span><br>    server_name chandao.test.com;<br><br>    ssl_certificate /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer;<br>    ssl_certificate_key /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key;<br>    ssl_dhparam /usr/local/nginx/ssl/lager.cf.pem;<br><br>    <span class=\"hljs-comment\">#ssl性能调优</span><br>    <span class=\"hljs-comment\">#nginx 1.13.0支持了TLSv1.3,TLSv1.3相比之前的TLSv1.2、TLSv1.1等性能大幅提升</span><br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    <span class=\"hljs-comment\"># ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br>    <span class=\"hljs-comment\"># ssl_prefer_server_ciphers on|off 作用：是否由服务器决定采用哪种加密算法</span><br>    <span class=\"hljs-comment\"># 如果ssl协议支持tlsv1 tls1.1这种老协议，设置为 on ，并配合ssl_ciphers使用</span><br>    <span class=\"hljs-comment\"># 如果ssl协议只支持tlsv1.2 tlsv1.3新协议，设置为 off （nginx默认为off），因为新协议不再采纳此参数</span><br>    ssl_prefer_server_ciphers on;<br>    ssl_session_timeout 10m;<br>    <span class=\"hljs-comment\">#使用ssl_session_cache优化https下Nginx的性能</span><br>    ssl_session_cache <span class=\"hljs-built_in\">builtin</span>:1000 shared:SSL:10m;<br>    <span class=\"hljs-comment\">#OCSP Stapling 开启。OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度</span><br>    ssl_stapling on;<br>    <span class=\"hljs-comment\">#OCSP Stapling 验证开启</span><br>    ssl_stapling_verify on;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-config-2\"><a href=\"#nginx-config-2\" class=\"headerlink\" title=\"nginx config 2\"></a>nginx config 2</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>  <span class=\"hljs-comment\"># 新增</span><br>  <span class=\"hljs-attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"hljs-number\">1</span> TLSv1.<span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-attribute\">ssl_prefer_server_ciphers</span> <span class=\"hljs-literal\">on</span>;<br>  <span class=\"hljs-comment\"># 兼容其他老浏览器的 ssl_ciphers 设置请访问 https://wiki.mozilla.org/Security/Server_Side_TLS</span><br><br>  <span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-comment\"># 新增</span><br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">443</span> ssl;<br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /home/ubuntu/www/ssl/www.your-app.com.key.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /home/ubuntu/www/ssl/www.your-app.com.key;<br>    <span class=\"hljs-comment\"># ssl_dhparam </span><br>    <span class=\"hljs-attribute\">ssl_dhparam</span>             /home/ubuntu/www/ssl/dhparam.pem;<br><br>    <span class=\"hljs-comment\"># 其他省略</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>80 重定向到 443</p>\n<p>这些办法试了好多次都不太行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">server &#123;<br>  listen       80 default_server;<br>  server_name  www.lager.cf;<br>  <span class=\"hljs-built_in\">return</span> 301 https://$server_name<span class=\"hljs-variable\">$request_uri</span>;<br>&#125;<br><br><br>server &#123;<br>    listen      80;<br>    server_name    www.awesomes.cn,awesomes.cn;<br>    rewrite ^(.*)$  https://$host<span class=\"hljs-variable\">$1</span> permanent;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"v2ray-tls-websocket-流量伪装\"><a href=\"#v2ray-tls-websocket-流量伪装\" class=\"headerlink\" title=\"v2ray + tls + websocket 流量伪装\"></a>v2ray + tls + websocket 流量伪装</h1><p><a href=\"https://www.bwgss.org/616.html\">https://www.bwgss.org/616.html</a></p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ol>\n<li><p>证书(Certificate) – *.cer *.crt</p>\n</li>\n<li><p>私钥(Private Key) – *.key</p>\n</li>\n<li><p>证书签名请求(Certificate signing request) – *.csr</p>\n</li>\n<li><p>编码方式: 1. pem - base64编码 2. der - 二进制编码(少见), cer,key,csr 均可用这两种编码方式</p>\n</li>\n<li><p>证书吊销列表(Certificate Revocation List) – *.crl</p>\n</li>\n<li><p>jks（javakeystone）— 是JAVA的keytools证书工具支持的证书私钥格式，javakeystone 里面存放着key和信任的CA，key和CA可以有多个。</p>\n</li>\n</ol>\n<p><img src=\"/2022/aa858de8/1606053801673.png\" alt=\"Wordpress\"></p>\n",
            "tags": [
                "web",
                "ssl",
                "https",
                "wordpress",
                "mysql",
                "nginx"
            ]
        }
    ]
}