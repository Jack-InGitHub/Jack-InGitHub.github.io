<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Oikiou&#39;s Blog • Posts by &#34;alpha_mini&#34; tag</title>
        <link>https://www.oikiou.top</link>
        <description>Blog</description>
        <language>zh-CN</language>
        <pubDate>Wed, 07 Jul 2021 14:46:15 +0800</pubDate>
        <lastBuildDate>Wed, 07 Jul 2021 14:46:15 +0800</lastBuildDate>
        <category>autosar</category>
        <category>aes</category>
        <category>embedded</category>
        <category>cc2530</category>
        <category>zigbee</category>
        <category>hp</category>
        <category>chrome</category>
        <category>sscanf</category>
        <category>c/c++</category>
        <category>flash</category>
        <category>hex</category>
        <category>license</category>
        <category>ssl</category>
        <category>https</category>
        <category>jpeg</category>
        <category>webp</category>
        <category>jpeg2000</category>
        <category>image</category>
        <category>md5</category>
        <category>major</category>
        <category>markdown</category>
        <category>note</category>
        <category>osi</category>
        <category>RustDesk</category>
        <category>iap</category>
        <category>bootloader</category>
        <category>stm32</category>
        <category>tags</category>
        <category>label</category>
        <category>category</category>
        <category>usart</category>
        <category>rts</category>
        <category>cts</category>
        <category>dtr</category>
        <category>dsr</category>
        <category>typora</category>
        <category>ws2812</category>
        <category>spi</category>
        <category>dma</category>
        <category>windows</category>
        <category>makefile</category>
        <category>xip</category>
        <category>nor</category>
        <category>nand</category>
        <category>android</category>
        <category>mtp</category>
        <category>pc</category>
        <category>driver</category>
        <category>ip</category>
        <category>location</category>
        <category>api</category>
        <category>zip</category>
        <category>gzip</category>
        <category>bzip</category>
        <category>tar</category>
        <category>zsh</category>
        <category>shell</category>
        <category>linux</category>
        <category>character encoding</category>
        <category>gb2312</category>
        <category>utf-8</category>
        <category>words</category>
        <category>cortexm3</category>
        <category>kms</category>
        <category>office</category>
        <category>volume</category>
        <category>DS_Store</category>
        <category>rtf</category>
        <category>后缀</category>
        <category>机智云</category>
        <category>蓝桥杯</category>
        <category>国赛</category>
        <category>ct117e</category>
        <category>ct117e-ex</category>
        <category>apk</category>
        <category>java</category>
        <category>超声波</category>
        <category>github</category>
        <category>hosts</category>
        <category>audio</category>
        <category>video</category>
        <category>cad</category>
        <category>cat_drive</category>
        <category>switch</category>
        <category>nintendo</category>
        <category>game</category>
        <category>hardware</category>
        <category>lenovo</category>
        <category>disk</category>
        <category>pve</category>
        <category>virtual</category>
        <category>software</category>
        <category>摄影</category>
        <category>synology</category>
        <category>cmake</category>
        <category>dslogic</category>
        <category>逻辑分析仪</category>
        <category>pyhton</category>
        <category>decoder</category>
        <category>docker</category>
        <category>dockerfile</category>
        <category>namespace</category>
        <category>cgroup</category>
        <category>dockerhub</category>
        <category>frp</category>
        <category>hyperv</category>
        <category>git</category>
        <category>j-link</category>
        <category>rtt</category>
        <category>serial</category>
        <category>debug</category>
        <category>jlink</category>
        <category>j-tag</category>
        <category>ps</category>
        <category>powershell</category>
        <category>obsidian</category>
        <category>spacedesk</category>
        <category>投屏</category>
        <category>vscode</category>
        <category>ide</category>
        <category>sourceinsigh</category>
        <category>si</category>
        <category>commenttranslate</category>
        <category>wsl</category>
        <category>rdpwrap</category>
        <category>rdp</category>
        <category>speedtest</category>
        <category>tools</category>
        <category>wordpress</category>
        <category>web</category>
        <category>mysql</category>
        <category>nginx</category>
        <category>tmux</category>
        <category>unit</category>
        <category>m</category>
        <category>cm</category>
        <category>mm</category>
        <category>s</category>
        <category>us</category>
        <category>v2ray</category>
        <category>hexo</category>
        <category>jekyll</category>
        <category>fluid</category>
        <category>cusdis</category>
        <category>twikoo</category>
        <category>blog</category>
        <category>gravatar</category>
        <category>cravatar</category>
        <category>usb</category>
        <category>c++</category>
        <category>c</category>
        <category>ms-dos</category>
        <category>cmd</category>
        <category>micropython</category>
        <category>python</category>
        <category>pid</category>
        <category>qt</category>
        <category>pyqt</category>
        <category>css</category>
        <category>html</category>
        <category>js</category>
        <category>数据结构</category>
        <category>堆栈</category>
        <category>队列</category>
        <category>链表</category>
        <category>树</category>
        <category>二叉树</category>
        <category>正则表达式</category>
        <category>cortex-a7</category>
        <category>cortex-m3</category>
        <category>rtx</category>
        <category>rtos</category>
        <category>keil</category>
        <category>rt-thread</category>
        <category>ucos</category>
        <category>raspberry</category>
        <category>wiringpi</category>
        <category>bluetooth</category>
        <category>蓝牙</category>
        <category>pwm</category>
        <category>ap</category>
        <category>wifi</category>
        <category>modbus</category>
        <category>linuxapp</category>
        <category>curl</category>
        <category>libcurl</category>
        <category>zlib</category>
        <category>minizip</category>
        <category>alpha_mini</category>
        <category>正点原子</category>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2021/9b4105ad/</guid>
            <title>LinuxAlphaMini</title>
            <link>https://www.oikiou.top/2021/9b4105ad/</link>
            <category>linux</category>
            <category>alpha_mini</category>
            <category>正点原子</category>
            <pubDate>Wed, 07 Jul 2021 14:46:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Cortex-A7-MPCore架构&#34;&gt;&lt;a href=&#34;#Cortex-A7-MPCore架构&#34; class=&#34;headerlink&#34; title=&#34;Cortex-A7 MPCore架构&#34;&gt;&lt;/a&gt;Cortex-A7 MPCore架构&lt;/h1&gt;&lt;h1 id=&#34;汇编基础&#34;&gt;&lt;a href=&#34;#汇编基础&#34; class=&#34;headerlink&#34; title=&#34;汇编基础&#34;&gt;&lt;/a&gt;汇编基础&lt;/h1&gt;&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;label： instruction @ comment &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;label 即标号&lt;/strong&gt;，表示地址位置，有些指令前面可能会有标号，这样就可以通过这个标号得到指令的地址，标号也可以用来表示数据地址。注意 label 后面的“：”，任何以“：”结尾的标识符都会被识别为一个标号。&lt;br&gt;&lt;strong&gt;instruction 即指令&lt;/strong&gt;，也就是汇编指令或伪指令。&lt;br&gt;&lt;strong&gt;@符号&lt;/strong&gt;，表示后面的是注释&lt;br&gt;&lt;strong&gt;comment&lt;/strong&gt; 就是注释内容。&lt;/p&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;add:&lt;br&gt;MOVS R0, #0X12 @设置 R0=0X12&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;注意！ ARM 中的指令、伪指令、伪操作、寄存器名等可以全部使用大写，也可以全部使用小写，但是不能大小写混用。&lt;/strong&gt;  &lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;.section .testsection @定义一个 testsetcion 段 &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;.text 表示代码段。  &lt;/li&gt;
&lt;li&gt;.data 初始化的数据段。&lt;/li&gt;
&lt;li&gt;.bss 未初始化的数据段。&lt;/li&gt;
&lt;li&gt;.rodata 只读数据段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;伪操作:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.byte 定义单字节数据，比如.byte 0x12。&lt;/li&gt;
&lt;li&gt;.short 定义双字节数据，比如.short 0x1234。&lt;/li&gt;
&lt;li&gt;.long 定义一个 4 字节数据，比如.long 0x12345678。&lt;/li&gt;
&lt;li&gt;.equ 赋值语句，格式为： .equ 变量名，表达式，比如.equ num, 0x12，表示 num&amp;#x3D;0x12。&lt;/li&gt;
&lt;li&gt;.align 数据字节对齐，比如： .align 4 表示 4 字节对齐。&lt;/li&gt;
&lt;li&gt;.end 表示源文件结束。&lt;/li&gt;
&lt;li&gt;.global 定义一个全局符号，格式为： .global symbol，比如： .global _start(汇编程序的默认入口标号是_start  )。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;函数:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;函数名:&lt;br&gt; 函数体&lt;br&gt; 返回语句&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;/* SVC 中断 */&lt;br&gt;SVC_Handler:&lt;br&gt;    ldr r0, =SVC_Handler&lt;br&gt;    bx r0     @跳转&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;常用汇编指令&#34;&gt;&lt;a href=&#34;#常用汇编指令&#34; class=&#34;headerlink&#34; title=&#34;常用汇编指令&#34;&gt;&lt;/a&gt;常用汇编指令&lt;/h2&gt;&lt;h3 id=&#34;处理器内部数据传输指令-mov-mrs-msr&#34;&gt;&lt;a href=&#34;#处理器内部数据传输指令-mov-mrs-msr&#34; class=&#34;headerlink&#34; title=&#34;处理器内部数据传输指令 mov mrs msr&#34;&gt;&lt;/a&gt;处理器内部数据传输指令 mov mrs msr&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;源&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;MOV&lt;/td&gt;
&lt;td&gt;R0&lt;/td&gt;
&lt;td&gt;R1&lt;/td&gt;
&lt;td&gt;将 R1 里面的数据复制到 R0 中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MRS&lt;/td&gt;
&lt;td&gt;R0&lt;/td&gt;
&lt;td&gt;CPSR&lt;/td&gt;
&lt;td&gt;将特殊寄存器 CPSR 里面的数据复制到 R0 中。&lt;br/&gt;&lt;strong&gt;(特殊寄存器只能由这个指令 读 )&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MSR&lt;/td&gt;
&lt;td&gt;CPSR&lt;/td&gt;
&lt;td&gt;R1&lt;/td&gt;
&lt;td&gt;将 R1 里面的数据复制到特殊寄存器 CPSR 里中。&lt;br/&gt;&lt;strong&gt;(特殊寄存器只能由这个指令 写 )&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;存储器访问指令-ldr-str&#34;&gt;&lt;a href=&#34;#存储器访问指令-ldr-str&#34; class=&#34;headerlink&#34; title=&#34;存储器访问指令 ldr str&#34;&gt;&lt;/a&gt;存储器访问指令 ldr str&lt;/h3&gt;&lt;p&gt;I.MX6UL中的RAM,寄存器都需要这个指令访问。&lt;/p&gt;
&lt;p&gt;LDR和STR是按照字进行读取和写入的，LDRB和STRB是按字节，LDRH和STRH是按半字操作。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;LDR Rd, [Rn , #offset]&lt;/td&gt;
&lt;td&gt;从存储器 Rn+offset 的位置读取数据存放到 Rd 中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STR Rd, [Rn, #offset]&lt;/td&gt;
&lt;td&gt;将 Rd 中的数据写入到存储器中的 Rn+offset 位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;LDR&#34;&gt;&lt;a href=&#34;#LDR&#34; class=&#34;headerlink&#34; title=&#34;LDR&#34;&gt;&lt;/a&gt;LDR&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取寄存器值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载立即数到寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;@加载立即数&lt;br&gt;LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004&lt;br&gt;@读取寄存器值&lt;br&gt;LDR R1, [R0] @读取地址 0X0209C004 中的数据到 R1 寄存器中&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;STR&#34;&gt;&lt;a href=&#34;#STR&#34; class=&#34;headerlink&#34; title=&#34;STR&#34;&gt;&lt;/a&gt;STR&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004&lt;br&gt;LDR R1, =0X12345678 @R1 保存要写入到寄存器的值，即 R1=0X12345678&lt;br&gt;STR R1, [R0] @将 R1 中的值写入到 R0 中的地址上&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;压栈出栈指令-push-pop&#34;&gt;&lt;a href=&#34;#压栈出栈指令-push-pop&#34; class=&#34;headerlink&#34; title=&#34;压栈出栈指令 push pop&#34;&gt;&lt;/a&gt;压栈出栈指令 push pop&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;PUSH &amp;lt;reg list&amp;gt;&lt;/td&gt;
&lt;td&gt;将寄存器列表存入栈中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POP &amp;lt;reg list&amp;gt;&lt;/td&gt;
&lt;td&gt;从栈中恢复寄存器列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;@处理器的堆栈是向下增长的 见下图&lt;br&gt;PUSH &amp;#123;R0~R3, R12&amp;#125; @将 R0~R3 和 R12 压栈&lt;br&gt;PUSH &amp;#123;LR&amp;#125; @将 LR 进行压栈&lt;br&gt;&lt;br&gt;POP &amp;#123;LR&amp;#125; @先恢复 LR&lt;br&gt;POP &amp;#123;R0~R3,R12&amp;#125; @在恢复 R0~R3,R12&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/image-20210707144653945.png&#34; alt=&#34;image-20210707144653945&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;@这个和上面的是等同的&lt;br&gt;STMFD SP!,&amp;#123;R0~R3, R12&amp;#125; @R0~R3,R12 入栈&lt;br&gt;STMFD SP!,&amp;#123;LR&amp;#125; @LR 入栈&lt;br&gt;&lt;br&gt;LDMFD SP!, &amp;#123;LR&amp;#125; @先恢复 LR&lt;br&gt;LDMFD SP!, &amp;#123;R0~R3, R12&amp;#125; @再恢复 R0~R3, R12&lt;br&gt;&lt;br&gt;&lt;br&gt;LDMFD = LDM + FD&lt;br&gt;STMFD = STM + FD&lt;br&gt;LDM(多个) -&amp;gt; LDR(单个)&lt;br&gt;STM(多个) -&amp;gt; STR(单个)&lt;br&gt;FD = Full Descending 即满递减的意思(根据 ATPCS 规则,ARM 使用的 FD 类型的堆栈， SP 指向最后一个入栈的数值，堆栈是由高地址向下增长的，也就是前面说的向下增长的堆栈，)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;跳转指令-b-bx-bl-blx&#34;&gt;&lt;a href=&#34;#跳转指令-b-bx-bl-blx&#34; class=&#34;headerlink&#34; title=&#34;跳转指令 b bx bl blx&#34;&gt;&lt;/a&gt;跳转指令 b bx bl blx&lt;/h3&gt;&lt;p&gt;跳转操作的方法  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接使用跳转指令 B、 BL、 BX 等&lt;/li&gt;
&lt;li&gt;直接向 PC 寄存器里面写入数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;B &amp;lt;label&amp;gt;&lt;/td&gt;
&lt;td&gt;跳转到 label，如果跳转范围超过了+&amp;#x2F;-2KB，&lt;br/&gt;可以指定 B.W &amp;lt;label&amp;gt;使用 32 位版本的跳转指令， 这样可以得到较大范围的 跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BX &amp;lt;Rm&amp;gt;&lt;/td&gt;
&lt;td&gt;间接跳转，跳转到存放于 Rm 中的地址处，并且切换指令集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BL &amp;lt;label&amp;gt;&lt;/td&gt;
&lt;td&gt;跳转到标号地址，并将返回地址保存在 LR 中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLX &amp;lt;Rm&amp;gt;&lt;/td&gt;
&lt;td&gt;结合 BX 和 BL 的特点，跳转到 Rm 指定的地址，并将返回地 址保存在 LR 中，切换指令集。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;B指令&#34;&gt;&lt;a href=&#34;#B指令&#34; class=&#34;headerlink&#34; title=&#34;B指令&#34;&gt;&lt;/a&gt;B指令&lt;/h4&gt;&lt;p&gt;这是最简单的跳转指令， B 指令会将 PC 寄存器的值设置为跳转目标地址， 一旦执行 B 指令， ARM 处理器就会立即跳转到指定的目标地址。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;_start:&lt;br&gt;    ldr sp,=0X80200000 @设置栈指针&lt;br&gt;    b main @跳转到 main 函数&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述代码就是典型的在汇编中初始化 C 运行环境，然后跳转到 C 文件的 main 函数中运行 ，上述代码只是初始化了 SP 指针，有些处理器还需要做其他的初始化，比如初始化 DDR 等等。因为跳转到 C 文件以后再也不会回到汇编了，所以在第 4 行使用了 B 指令来完成跳转  。&lt;/p&gt;
&lt;h4 id=&#34;BL指令&#34;&gt;&lt;a href=&#34;#BL指令&#34; class=&#34;headerlink&#34; title=&#34;BL指令&#34;&gt;&lt;/a&gt;BL指令&lt;/h4&gt;&lt;p&gt;BL 指令相比 B 指令，在跳转之前会在寄存器 LR(R14)中保存当前 PC 寄存器值，所以可以通过将 LR 寄存器中的值重新加载到 PC 中来继续从跳转之前的代码处运行，这是子程序调用一个基本但常用的手段。  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asm&#34;&gt;push &amp;#123;r0, r1&amp;#125; 			@保存 r0,r1&lt;br&gt;cps #0x13 				@进入 SVC 模式，允许其他中断再次进去&lt;br&gt;&lt;br&gt;bl system_irqhandler	@加载 C 语言中断处理函数到 r2 寄存器中&lt;br&gt;&lt;br&gt;cps #0x12 				@进入 IRQ 模式&lt;br&gt;pop &amp;#123;r0, r1&amp;#125;&lt;br&gt;str r0, [r1, #0X10] 	@中断执行完成，写 EOIR&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述代码中第 5 行就是执行 C 语言版的中断处理函数，当处理完成以后是需要返回来继续执行下面的程序，所以使用了 BL 指令。  &lt;/p&gt;
&lt;h3 id=&#34;算术运算指令&#34;&gt;&lt;a href=&#34;#算术运算指令&#34; class=&#34;headerlink&#34; title=&#34;算术运算指令&#34;&gt;&lt;/a&gt;算术运算指令&lt;/h3&gt;&lt;p&gt;汇编中也可以进行算术运算， 比如加减乘除，常用的运算指令用法如表 7.2.5.1 所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;计算公式&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ADD Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn + Rm&lt;/td&gt;
&lt;td&gt;加法运算，指令为 ADD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADD Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn + #immed&lt;/td&gt;
&lt;td&gt;加法运算，指令为 ADD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADC Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn + Rm + 进位&lt;/td&gt;
&lt;td&gt;带进位的加法运算，指令为 ADC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADC Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn + #immed +进位&lt;/td&gt;
&lt;td&gt;带进位的加法运算，指令为 ADC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUB Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn – Rm&lt;/td&gt;
&lt;td&gt;减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUB Rd, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rd - #immed&lt;/td&gt;
&lt;td&gt;减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUB Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn - #immed&lt;/td&gt;
&lt;td&gt;减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SBC Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn - #immed – 借位&lt;/td&gt;
&lt;td&gt;带借位的减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SBC Rd, Rn ,Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn – Rm – 借位&lt;/td&gt;
&lt;td&gt;带借位的减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MUL Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn * Rm&lt;/td&gt;
&lt;td&gt;乘法(32 位)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UDIV Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;#x2F; Rm&lt;/td&gt;
&lt;td&gt;无符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDIV Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;#x2F; Rm&lt;/td&gt;
&lt;td&gt;有符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;逻辑运算指令&#34;&gt;&lt;a href=&#34;#逻辑运算指令&#34; class=&#34;headerlink&#34; title=&#34;逻辑运算指令&#34;&gt;&lt;/a&gt;逻辑运算指令&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;计算公式&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;AND Rd, Rn&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rd &amp;amp;Rn&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AND Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;amp;#immed&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AND Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;amp; Rm&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORR Rd, Rn&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rd | Rn&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORR Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn | #immed&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORR Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn | Rm&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIC Rd, Rn&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rd &amp;amp; (~Rn)&lt;/td&gt;
&lt;td&gt;位清除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIC Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;amp; (~#immed)&lt;/td&gt;
&lt;td&gt;位清除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIC Rd, Rn , Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn &amp;amp; (~Rm)&lt;/td&gt;
&lt;td&gt;位清除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORN Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn | (#immed)&lt;/td&gt;
&lt;td&gt;按位或非&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORN Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn | (Rm)&lt;/td&gt;
&lt;td&gt;按位或非&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EOR Rd, Rn&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rd ^ Rn&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EOR Rd, Rn, #immed&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn ^ #immed&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EOR Rd, Rn, Rm&lt;/td&gt;
&lt;td&gt;Rd &amp;#x3D; Rn ^ Rm&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;启动方式&#34;&gt;&lt;a href=&#34;#启动方式&#34; class=&#34;headerlink&#34; title=&#34;启动方式&#34;&gt;&lt;/a&gt;启动方式&lt;/h1&gt;&lt;h2 id=&#34;BOOT&#34;&gt;&lt;a href=&#34;#BOOT&#34; class=&#34;headerlink&#34; title=&#34;BOOT&#34;&gt;&lt;/a&gt;BOOT&lt;/h2&gt;&lt;p&gt;OOT_MODE[1:0]的值是可以改变的，有两种方式，一种是改写 eFUSE(熔丝)，一种是修改相应的 GPIO 高低电平。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BOOT_MODE1 和 BOOT_MODE0 在芯片内部是有 100KΩ下拉电阻的 ，所以默认是0。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BOOT_MODE[1:0]&lt;/th&gt;
&lt;th&gt;BOOT 类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;从 FUSE 启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;串行下载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;内部 BOOT 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;串行下载&#34;&gt;&lt;a href=&#34;#串行下载&#34; class=&#34;headerlink&#34; title=&#34;串行下载&#34;&gt;&lt;/a&gt;串行下载&lt;/h3&gt;&lt;p&gt;串行下载的意思就是可以通过 USB 或者 UART 将代码下载到板子上的外置存储设备中，我们可以使用 OTG1 这个 USB口向开发板上的 SD&amp;#x2F;EMMC、 NAND 等存储设备下载代码。  &lt;/p&gt;
&lt;h3 id=&#34;内部-BOOT-模式&#34;&gt;&lt;a href=&#34;#内部-BOOT-模式&#34; class=&#34;headerlink&#34; title=&#34;内部 BOOT 模式&#34;&gt;&lt;/a&gt;内部 BOOT 模式&lt;/h3&gt;&lt;p&gt;芯片会执行内部的 boot ROM 代码，代码会进行硬件初始化(一部分外设)，然后从 boot 设备(就是存放代码的设备、比如 SD&amp;#x2F;EMMC、 NAND)中&lt;strong&gt;将代码拷贝出来复制到指定的 RAM 中，一般是 DDR。&lt;/strong&gt;  &lt;/p&gt;
&lt;h2 id=&#34;BOOT模式-启动设备&#34;&gt;&lt;a href=&#34;#BOOT模式-启动设备&#34; class=&#34;headerlink&#34; title=&#34;BOOT模式 启动设备&#34;&gt;&lt;/a&gt;BOOT模式 启动设备&lt;/h2&gt;&lt;p&gt;当 BOOT_MODE 设置为内部 BOOT 模式以后，可以从以下设备中启动：&lt;br&gt;①、接到 EIM 接口的 CS0 上的 16 位 NOR Flash。&lt;br&gt;②、接到 EIM 接口的 CS0 上的 OneNAND Flash。&lt;br&gt;③、接到 GPMI 接口上的 MLC&amp;#x2F;SLC NAND Flash， NAND Flash 页大小支持 2KByte、 4KByte和 8KByte， 8 位宽。&lt;br&gt;④、 Quad SPI Flash。&lt;br&gt;⑤、接到 USDHC 接口上的 SD&amp;#x2F;MMC&amp;#x2F;eSD&amp;#x2F;SDXC&amp;#x2F;eMMC 等设备。&lt;br&gt;⑥、 SPI 接口的 EEPROM。  &lt;/p&gt;
&lt;p&gt;启动设备是通过  BOOT_CFG1[7:0]、 BOOT_CFG2[7:0]和 BOOT_CFG4[7:0]这 24 个配置 IO配置，这 24 个配置 IO 刚好对应着 LCD 的 24 根数据线 LCD_DATA0~LCDDATA23，&lt;strong&gt;当启动完成以后这 24 个 IO 就可以作为 LCD 的数据线使用。&lt;/strong&gt;  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;boot1&lt;/th&gt;
&lt;th&gt;boot0&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;启动设备&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;串行下载，可以通过 USB 烧写镜像文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;SD 卡启动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;EMMC 启动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;NAND FLASH 启动。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;烧写镜像&#34;&gt;&lt;a href=&#34;#烧写镜像&#34; class=&#34;headerlink&#34; title=&#34;烧写镜像&#34;&gt;&lt;/a&gt;烧写镜像&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;imxdownload 会在 led.bin前面添加一些头信息，重新生成一个叫做 load.imx 的文件，头部信息包含以下&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Image vector table，简称 IVT， IVT 里面包含了一系列的地址信息，这些地址信息在ROM 中按照固定的地址存放着。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boot data，启动数据，包含了镜像要拷贝到哪个地址，拷贝的大小是多少等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Device configuration data，简称 DCD，设备配置信息，重点是 DDR3 的初始化配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户代码可执行文件，比如 led.bin。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终烧写到 I.MX6U 中的程序其组成为： IVT+Boot data+DCD+.bin 。(3KByte 的 IVT+Boot Data+DCD)&lt;/p&gt;
&lt;p&gt;.bin是从0x87800000这个地方开始，往前推load.imx就是从0x877FF400开始的。&lt;/p&gt;
&lt;h1 id=&#34;点灯Makefile&#34;&gt;&lt;a href=&#34;#点灯Makefile&#34; class=&#34;headerlink&#34; title=&#34;点灯Makefile&#34;&gt;&lt;/a&gt;点灯Makefile&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 定义了一个变量 objs， objs 包含着要生成 ledc.bin 所需的材料： start.o 和 main.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 这里要注意 start.o 一定要放到最前面！因为在后面链接的时候 start.o 要在最前面，因为 start.o 是最先要执行的文件！&lt;/span&gt;&lt;br&gt;objs := start.o main.o&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 使用依赖文件(objs:=start.o main.o),生成目标可执行文件ledc.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;ledc.bin:&lt;span class=&#34;hljs-variable&#34;&gt;$(objs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 使用编译器 arm-linux-gnueabihf-ld 进行连接,-Ttext指定起始地址是0X87800000&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# $^ 是所有依赖文件的集合,也就是变量objs的值(start.o main.o)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 展开等价 arm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf start.o main.o&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf &lt;span class=&#34;hljs-variable&#34;&gt;$^&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 将ledc.elf转换成ledc.bin文件&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# $@ 的意思是目标集合，在这里就是 ledc.bin&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 展开等价 arm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-objcopy -O binary -S ledc.elf &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 反汇编，生成 ledc.dis 文件&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-objdump -D -m arm ledc.elf &amp;gt; ledc.dis&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 下面规则展开等价 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# start.o:start.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#	arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o start.o start.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# %匹配任意字符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.s&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# $@ 的意思是目标集合，在这里就是 %.o&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# $&amp;lt; 所有依赖文件的集合，在这就是 %.s&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.S&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.c&lt;/span&gt;&lt;br&gt;	arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;clean:&lt;/span&gt;&lt;br&gt;	rm -rf *.o ledc.bin ledc.elf ledc.dis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 类似于上面的只是用到了变量&lt;/span&gt;&lt;br&gt;CROSS_COMPILE	?= arm-linux-gnueabihf-&lt;br&gt;NAME 			?= ledc&lt;br&gt;&lt;br&gt;CC 				:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;gcc&lt;br&gt;LD 				:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;ld&lt;br&gt;OBJCOPY 		:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;objcopy&lt;br&gt;OBJDUMP 		:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;objdump&lt;br&gt;OBJS 			:= start.o main.o&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.bin:&lt;span class=&#34;hljs-variable&#34;&gt;$(OBJS)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(LD)&lt;/span&gt; -Timx6ul.lds -o &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$^&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(OBJCOPY)&lt;/span&gt; -O binary -S &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(OBJDUMP)&lt;/span&gt; -D -m arm &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.elf &amp;gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.dis&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.s&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(CC)&lt;/span&gt; -Wall -nostdlib -c -O2 -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.S&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(CC)&lt;/span&gt; -Wall -nostdlib -c -O2 -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;%.o:%.c&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(CC)&lt;/span&gt; -Wall -nostdlib -c -O2 -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;	&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;clean:&lt;/span&gt;&lt;br&gt;	rm -rf *.o &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.bin &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$(NAME)&lt;/span&gt;.dis&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;CROSS_COMPILE	?= arm-linux-gnueabihf-&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 编译后 目标名&lt;/span&gt;&lt;br&gt;TARGET			?= bsp&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 编译器相关&lt;/span&gt;&lt;br&gt;CC				:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;gcc&lt;br&gt;LD				:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;ld&lt;br&gt;OBJCOPY			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;objcopy&lt;br&gt;OBJDUMP			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(CROSS_COMPILE)&lt;/span&gt;objdump&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# include dir&lt;/span&gt;&lt;br&gt;INCDIRS			:=  imx6ul  \&lt;br&gt;					bsp/clk \&lt;br&gt;					bsp/led \&lt;br&gt;					bsp/delay&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# sourc dir&lt;/span&gt;&lt;br&gt;SRCDIRS 		:=  project \&lt;br&gt;					bsp/clk \&lt;br&gt;					bsp/led \&lt;br&gt;					bsp/delay&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 这里用到了 patsubst 函数 通过这个函数给 INCDIRS 前面加了一个 -I&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 INCLUDE := -I imx6ul -I bsp/clk -I bsp/led -I bsp/delay&lt;/span&gt;&lt;br&gt;INCLUDE 		:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;patsubst&lt;/span&gt; %, -I %, &lt;span class=&#34;hljs-variable&#34;&gt;$(INCDIRS)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 这里用到了 foreach 和 wildcard 函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 SFILES := project/start.S&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 CFILES := project/main.c bsp/clk/bsp_clk.c bsp/led/bsp_led.c bsp/delay/bsp_delay.c&lt;/span&gt;&lt;br&gt;SFILES 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;dir&lt;/span&gt;, &lt;span class=&#34;hljs-variable&#34;&gt;$(SRCDIRS)&lt;/span&gt;, $(&lt;span class=&#34;hljs-built_in&#34;&gt;wildcard&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(dir)&lt;/span&gt;/*.S)&lt;/span&gt;)&lt;br&gt;CFILES 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;dir&lt;/span&gt;, &lt;span class=&#34;hljs-variable&#34;&gt;$(SRCDIRS)&lt;/span&gt;, $(&lt;span class=&#34;hljs-built_in&#34;&gt;wildcard&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(dir)&lt;/span&gt;/*.c)&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 这里用到了 notdir 函数 除去路径函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 SFILENDIR := start.S&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 CFILENDIR := main.c bsp_clk.c bsp_led.c bsp_delay.c&lt;/span&gt;&lt;br&gt;SFILENDIR 		:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;notdir&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(SFILES)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;CFILENDIR 		:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;notdir&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(CFILES)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 SOBJS := obj/start.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 COBJS := obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 展开 OBJS  := obj/start.o obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o&lt;/span&gt;&lt;br&gt;SOBJS 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;patsubst&lt;/span&gt; %, obj/%, $(SFILENDIR:.S=.o)&lt;/span&gt;)&lt;br&gt;COBJS 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;patsubst&lt;/span&gt; %, obj/%, $(CFILENDIR:.c=.o)&lt;/span&gt;)&lt;br&gt;OBJS 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(SOBJS)&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(COBJS)&lt;/span&gt;&lt;br&gt;&lt;br&gt;VPATH 			:= &lt;span class=&#34;hljs-variable&#34;&gt;$(SRCDIRS)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;.PHONY&lt;/span&gt;: clean&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.bin : &lt;span class=&#34;hljs-variable&#34;&gt;$(OBJS)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(LD)&lt;/span&gt; -Timx6ul.lds -o &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$^&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(OBJCOPY)&lt;/span&gt; -O binary -S &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(OBJDUMP)&lt;/span&gt; -D -m arm &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.elf &amp;gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.dis&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;$(SOBJS)&lt;/span&gt; : obj/%.o : %.S&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(CC)&lt;/span&gt; -Wall -nostdlib -c -O2 &lt;span class=&#34;hljs-variable&#34;&gt;$(INCLUDE)&lt;/span&gt; -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;$(COBJS)&lt;/span&gt; : obj/%.o : %.c&lt;br&gt;	&lt;span class=&#34;hljs-variable&#34;&gt;$(CC)&lt;/span&gt; -Wall -nostdlib -c -O2 &lt;span class=&#34;hljs-variable&#34;&gt;$(INCLUDE)&lt;/span&gt; -o &lt;span class=&#34;hljs-variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;clean:&lt;/span&gt;&lt;br&gt;	rm -rf &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.elf &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.dis &lt;span class=&#34;hljs-variable&#34;&gt;$(TARGET)&lt;/span&gt;.bin &lt;span class=&#34;hljs-variable&#34;&gt;$(COBJS)&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$(SOBJS)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h1 id=&#34;Board-Support&#34;&gt;&lt;a href=&#34;#Board-Support&#34; class=&#34;headerlink&#34; title=&#34;Board Support&#34;&gt;&lt;/a&gt;Board Support&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;正点原子的 I.MX6ULL EMMC 核心板上 FSL_SDHC(0)接的 SD(TF)卡，FSL_SDHC(1)接的 EMMC。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;开发环境搭建&#34;&gt;&lt;a href=&#34;#开发环境搭建&#34; class=&#34;headerlink&#34; title=&#34;开发环境搭建&#34;&gt;&lt;/a&gt;开发环境搭建&lt;/h1&gt;&lt;h2 id=&#34;Ubuntu-交叉编译工具链安装&#34;&gt;&lt;a href=&#34;#Ubuntu-交叉编译工具链安装&#34; class=&#34;headerlink&#34; title=&#34;Ubuntu 交叉编译工具链安装&#34;&gt;&lt;/a&gt;Ubuntu 交叉编译工具链安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;交叉编译器有很多种，我们使用 Linaro 出品的交叉编译器，Linaro 是一间非营利性质的开放源代码软件工程公司，Linaro 开发了很多软件，最著名的就是 Linaro GCC 编译工具链(编译器)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linaro 编译器7.5.0下载&lt;a href=&#34;https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有很多种 GCC 交叉编译工具链，因为我们所使用的 I.MX6U-ALPHA 开发板是一个 Cortex-A7 内核的开发板，因此选择 arm-linux-gnueabihf&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aarch64-elf&lt;br&gt;aarch64-linux-gnu&lt;br&gt;aarch64_be-elf&lt;br&gt;aarch64_be-linux-gnu&lt;br&gt;arm-eabi&lt;br&gt;arm-linux-gnueabi&lt;br&gt;&lt;strong&gt;arm-linux-gnueabihf&lt;/strong&gt;&lt;br&gt;armeb-eabi&lt;br&gt;armeb-linux-gnueabihf&lt;br&gt;armv8l-linux-gnueabihf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz&lt;/code&gt; 这个文件就是7.5.0版本的GCC交叉编译器，用于X86——64位的linux上运行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;需要注意的是&lt;/strong&gt;，这个开发板用的是4.9.4版本的编译器，过高版本的编译器会有一些问题。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://releases.linaro.org/components/toolchain/binaries/4.9-2017.01/arm-linux-gnueabihf/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz&#34;&gt;Linaro 4.9.4 下载链接&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载好编译器之后需要做的就是将编译器添加到环境变量，使得可以在任何目录下调用编译器。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sudo mkdir /usr/local/arm&lt;br&gt;&lt;br&gt;sudo cp gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz /usr/local/arm/ -f&lt;br&gt;&lt;br&gt;sudo tar -vxf gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz&lt;br&gt;&lt;br&gt;sudo vi /etc/profile&lt;br&gt;&lt;br&gt;export PATH=$PATH:/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/bin&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搞定环境变量之后需要安装一些其他的编译库&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install lsb-core lib32stdc++6&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证编译器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意目录输入&lt;code&gt;arm-linux-gnueabihf-gcc -v&lt;/code&gt; 即可查看编译器版本号&lt;/li&gt;
&lt;li&gt;arm 表示这是编译 arm 架构代码的编译器。&lt;br&gt; linux 表示运行在 linux 环境下。&lt;br&gt; gnueabihf 表示嵌入式二进制接口。&lt;br&gt; gcc 表示是 gcc 工具&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;烧写程序&#34;&gt;&lt;a href=&#34;#烧写程序&#34; class=&#34;headerlink&#34; title=&#34;烧写程序&#34;&gt;&lt;/a&gt;烧写程序&lt;/h1&gt;&lt;h2 id=&#34;烧写Uboot&#34;&gt;&lt;a href=&#34;#烧写Uboot&#34; class=&#34;headerlink&#34; title=&#34;烧写Uboot&#34;&gt;&lt;/a&gt;烧写Uboot&lt;/h2&gt;&lt;h3 id=&#34;烧写到SD卡，通过ta启动uboot&#34;&gt;&lt;a href=&#34;#烧写到SD卡，通过ta启动uboot&#34; class=&#34;headerlink&#34; title=&#34;烧写到SD卡，通过ta启动uboot&#34;&gt;&lt;/a&gt;烧写到SD卡，通过ta启动uboot&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;chmod 777 imxdownload&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;烧写到 SD 卡，注意区别设备号 不能烧写到/dev/sda 或 sda1 设备里面！&lt;/span&gt;&lt;br&gt;./imxdownload u-boot.bin /dev/sdd&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;烧写uboot之后就可以通过网络的方式加载 linux kernel 和 rootfs 参考boot章节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;或者通过mfg工具将准备好的固件打包下载到特定存储介质上&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;烧写到EMMC-NAND，通过ta启动uboot&#34;&gt;&lt;a href=&#34;#烧写到EMMC-NAND，通过ta启动uboot&#34; class=&#34;headerlink&#34; title=&#34;烧写到EMMC&amp;#x2F;NAND，通过ta启动uboot&#34;&gt;&lt;/a&gt;烧写到EMMC&amp;#x2F;NAND，通过ta启动uboot&lt;/h3&gt;&lt;h1 id=&#34;U-Boot&#34;&gt;&lt;a href=&#34;#U-Boot&#34; class=&#34;headerlink&#34; title=&#34;U-Boot&#34;&gt;&lt;/a&gt;U-Boot&lt;/h1&gt;&lt;p&gt;uboot 的全称是 Universal Boot Loader。&lt;/p&gt;
&lt;p&gt;Linux 系统要启动就必须需要一个 bootloader 程序，也就说芯片上电以后先运行一段bootloader 程序。这段 bootloader程序会先初始化 DDR等外设，然后将Linux 内核从flash(NAND，NOR FLASH，SD，MMC 等)拷贝到 DDR 中，最后启动 Linux 内核。当然了，bootloader 的实际工作要复杂的多，但是它最主要的工作就是启动 Linux 内核，bootloader 和 Linux 内核的关系就跟 PC 上的 BIOS 和 Windows 的关系一样，bootloader 就相当于 BIOS。所以我们要先搞定bootloader，很庆幸，有很多现成的 bootloader 软件可以使用，比如 U-Boot、vivi、RedBoot 等等，其中以 U-Boot 使用最为广泛。&lt;/p&gt;
&lt;p&gt;U-Boot分为以下几种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种，uboot官方维护的uboot代码，更新最快，包含所有常用芯片。&lt;/li&gt;
&lt;li&gt;第二种，半导体厂商维护的uboot代码，例如NXP的uboot，针对性更强，对自己家芯片的支持性更好&lt;/li&gt;
&lt;li&gt;第三种，产品开发公司维护的uboot代码，使用芯片的公司自己添加了一些支持，boot移植就是讲的这个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nxp-imx/uboot-imx&#34;&gt;NXP uboot-imx 链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;！注意！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能在 uboot 中 ping 其他的机器，其他机器不能 ping uboot，因为 uboot 没有对 ping命令做处理，如果用其他的机器 ping uboot 的话会失败！&lt;/li&gt;
&lt;li&gt;uboot 命令中的数字都是十六进制的！不是十进制的！&lt;/li&gt;
&lt;li&gt;EMMC 核心板 uboot 环境变量的存储起始地址就是第1536(0x600)block。1536*512&amp;#x3D;786432&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u-boot.imx&lt;/code&gt;是从第0个分区的第2个block开始的。&lt;/li&gt;
&lt;li&gt;千万不要写 SD 卡或者 EMMC 的前两个块(扇区)，里面保存着分区表！&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Uboot的编译&#34;&gt;&lt;a href=&#34;#Uboot的编译&#34; class=&#34;headerlink&#34; title=&#34;Uboot的编译&#34;&gt;&lt;/a&gt;Uboot的编译&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装库 &lt;code&gt;sudo apt-get install libncurses5-dev&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压对应的uboot代码 &lt;code&gt;tar -vxjf uboot-imx-2016.03-2.1.0-g8b546e4.tar.bz2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用脚本编译uboot代码&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;使用了 make 命令，用于清理工程，也就是每次在编译 uboot 之前都清理一下工程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;这里的 make 命令带有三个参数，第一个是 ARCH，也就是指定架构，这里肯定是 arm；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第二个参数 CROSS_COMPILE 用于指定编译器，只需要指明编译器前缀就行了，比如 arm-linux-gnueabihf-gcc 编译器的前缀就是“arm-linux-gnueabihf-”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;最后一个参数 distclean 就是清除工程&lt;/span&gt;&lt;br&gt;make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;设定配置文件为 mx6ull_14x14_ddr512_emmc_defconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;这个配置文件在 uboot 源码的 configs 目录中&lt;/span&gt;&lt;br&gt;make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_alientek_emmc_defconfig&lt;br&gt;make V=1 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j16&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;　uboot 是 bootloader 的一种，可以用来引导Linux，但是 uboot 除了引导 Linux 以外还可以引导其它的系统，而且 uboot 还支持其它的架构和外设，比如 USB、网络、SD 卡等。这些都是可以配置的，需要什么功能就使能什么功能。所以在编译 uboot 之前，一定要根据自己的需求配置 uboot。而这个配置文件在上面的例子中就是&lt;code&gt;mx6ull_alientek_emmc_defconfig&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Uboot的启动&#34;&gt;&lt;a href=&#34;#Uboot的启动&#34; class=&#34;headerlink&#34; title=&#34;Uboot的启动&#34;&gt;&lt;/a&gt;Uboot的启动&lt;/h2&gt;&lt;p&gt;通过前面介绍过的烧写程序的方法将uboot烧写到设备，修改启动方式，启动对应设备内的uboot程序。&lt;/p&gt;
&lt;p&gt;接上串口，不出意外就会出现下面的提示。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;指示了uboot版本 和 编译时间&lt;/span&gt;&lt;br&gt;U-Boot 2016.03-g0ae7e33 (Aug 14 2022 - 19:42:45 +0800)&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;指示cpu型号 和 运行频率&lt;/span&gt;&lt;br&gt;CPU:   Freescale i.MX6ULL rev1.1 792 MHz (running at 396 MHz)&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;CPU温度范围 和 当前温度&lt;/span&gt;&lt;br&gt;CPU:   Industrial temperature grade (-40C to 105C) at 47C&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;复位原因 当前的复位原因是 POR。I.MX6ULL 芯片上有个 POR_B 引脚，将这个引脚拉低即可复位。&lt;/span&gt;&lt;br&gt;Reset cause: POR&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;board name&lt;/span&gt;&lt;br&gt;Board: I.MX6U ALPHA|MINI&lt;br&gt;I2C:   ready&lt;br&gt;DRAM:  512 MiB&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;当前有两个 MMC/SD 卡控制器：FSL_SDHC(0)和 FSL_SDHC(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;正点原子的 I.MX6ULL EMMC 核心板上 FSL_SDHC(0)接的 SD(TF)卡 FSL_SDHC(1)接的 EMMC。&lt;/span&gt;&lt;br&gt;MMC:   FSL_SDHC: 0, FSL_SDHC: 1&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;标准输入、标准输出和标准错误所使用的终端，这里都使用串口(serial)作为终端。&lt;/span&gt;&lt;br&gt;In:    serial&lt;br&gt;Out:   serial&lt;br&gt;Err:   serial&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;切换到 emmc 的第 0 个分区上，因为当前的 uboot 是 emmc 版本的，也就是从 emmc 启动的。&lt;/span&gt;&lt;br&gt;switch to partitions #0, OK&lt;br&gt;mmc1(part 0) is current device&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;网口信息，提示我们当前使用的 FEC1 这个网口，I.MX6ULL 支持两个网口。&lt;/span&gt;&lt;br&gt;Net:   FEC1&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;提示正常启动，也就是说 uboot 要从 emmc 里面读取环境变量和参数信息启动 Linux内核了。&lt;/span&gt;&lt;br&gt;Normal Boot&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;倒计时结束之前按下任意键就会进入Linux命令行模式。如果在倒计时结束以后没有按下，那么Linux内核就会启动，Linux内核一旦启动，uboot就会寿终正寝。&lt;/span&gt;&lt;br&gt;Hit any key to stop autoboot: 2&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果在 3 秒倒计时结束之前按下任意键，那么就会进入 uboot 的命令行模式。&lt;/p&gt;
&lt;h2 id=&#34;Uboot的命令及相关操作&#34;&gt;&lt;a href=&#34;#Uboot的命令及相关操作&#34; class=&#34;headerlink&#34; title=&#34;Uboot的命令及相关操作&#34;&gt;&lt;/a&gt;Uboot的命令及相关操作&lt;/h2&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;输入 &lt;span class=&#34;hljs-built_in&#34;&gt;help&lt;/span&gt; 或者 ? 即可查看当前uboot支持的命令&lt;/span&gt;&lt;br&gt;==&amp;gt; help&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;输入 ? &lt;span class=&#34;hljs-built_in&#34;&gt;env&lt;/span&gt; 或者 &lt;span class=&#34;hljs-built_in&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;help&lt;/span&gt; 即可查看 &lt;span class=&#34;hljs-built_in&#34;&gt;env&lt;/span&gt; 命令的使用方法&lt;/span&gt;&lt;br&gt;==&amp;gt; env help&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;bdinfo&#34;&gt;&lt;a href=&#34;#bdinfo&#34; class=&#34;headerlink&#34; title=&#34;bdinfo&#34;&gt;&lt;/a&gt;bdinfo&lt;/h4&gt;&lt;p&gt;DRAM 的起始地址和大小、启动参数保存起始地址、波特率、sp(堆栈指针)起始地址等信息。&lt;/p&gt;
&lt;h4 id=&#34;△-env&#34;&gt;&lt;a href=&#34;#△-env&#34; class=&#34;headerlink&#34; title=&#34;△ env&#34;&gt;&lt;/a&gt;△ env&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env print&lt;/code&gt; 输出环境变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;env set&lt;/code&gt; 设置环境变量，设置为空就是删除环境变量&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;示例 设置serverip &lt;code&gt;env set serverip 192.168.192.100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例 带空格的环境变量 &lt;code&gt;env set teest_args &amp;#39;xxx xxx xxx&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env save&lt;/code&gt; 用set设定的环境变量只是临时的，使用save命令将环境变量固化到非易失存储器内。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境变量名&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bootdelay&lt;/td&gt;
&lt;td&gt;boot的延迟等待时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bootcmd&lt;/td&gt;
&lt;td&gt;前面说过 uboot 倒计时结束以后就会启动 Linux 系统，其实就是执行的 bootcmd 中的启动命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipaddr&lt;/td&gt;
&lt;td&gt;开发板 ip 地址，可以不设置，使用 dhcp 命令来从路由器获取 IP 地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ethaddr&lt;/td&gt;
&lt;td&gt;开发板的 MAC 地址，一定要设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gatewayip&lt;/td&gt;
&lt;td&gt;网关地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netmask&lt;/td&gt;
&lt;td&gt;子网掩码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serverip&lt;/td&gt;
&lt;td&gt;服务器 IP 地址，也就是 Ubuntu 主机 IP 地址，用于调试代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;setenv ipaddr 192.168.192.120&lt;br&gt;setenv ethaddr b8:ae:1d:01:00:00&lt;br&gt;setenv gatewayip 192.168.192.1&lt;br&gt;setenv netmask 255.255.255.0&lt;br&gt;setenv serverip 192.168.192.100&lt;br&gt;saveenv&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;md-DRAM查看&#34;&gt;&lt;a href=&#34;#md-DRAM查看&#34; class=&#34;headerlink&#34; title=&#34;md DRAM查看&#34;&gt;&lt;/a&gt;md DRAM查看&lt;/h4&gt;&lt;p&gt;md 命令用于显示内存值。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;md[.b, .w, .l] address [# of objects]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[.b .w .l]对应 byte、word 和 long&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;address 就是要查看的内存起始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[# of objects]表示要查看的数据长度 16进制 单位是前面的bwl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;从0x80000000 查看 0x10 个 long 的数据&lt;/span&gt;&lt;br&gt;md.l 80000000 10&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;nm-DRAM修改&#34;&gt;&lt;a href=&#34;#nm-DRAM修改&#34; class=&#34;headerlink&#34; title=&#34;nm DRAM修改&#34;&gt;&lt;/a&gt;nm DRAM修改&lt;/h4&gt;&lt;p&gt;地址不自增&lt;/p&gt;
&lt;h4 id=&#34;mm-DRAM修改&#34;&gt;&lt;a href=&#34;#mm-DRAM修改&#34; class=&#34;headerlink&#34; title=&#34;mm DRAM修改&#34;&gt;&lt;/a&gt;mm DRAM修改&lt;/h4&gt;&lt;p&gt;mm 命令用于修改指定地址的内存值，地址自增。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mm[.b, .w, .l] address&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;修改 0x80000000 的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;输入 q 即可退出修改&lt;/span&gt;&lt;br&gt;=&amp;gt; mm.l 80000010&lt;br&gt;80000010: 00000000 ? _&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;mw-填充DRAM&#34;&gt;&lt;a href=&#34;#mw-填充DRAM&#34; class=&#34;headerlink&#34; title=&#34;mw 填充DRAM&#34;&gt;&lt;/a&gt;mw 填充DRAM&lt;/h4&gt;&lt;p&gt;命令 mw 用于使用一个指定的数据填充一段内存&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mw[.b, .w, .l] address value [count]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;=&amp;gt; mw.l 80000010 faaffaaf 4&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;cp-copy&#34;&gt;&lt;a href=&#34;#cp-copy&#34; class=&#34;headerlink&#34; title=&#34;cp copy&#34;&gt;&lt;/a&gt;cp copy&lt;/h4&gt;&lt;p&gt;cp 是数据拷贝命令，用于将 DRAM 中的数据从一段内存拷贝到另一段内存中，或者把 NorFlash 中的数据拷贝到 DRAM 中&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;cp[.b, .w, .l] source target count&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;source&lt;/span&gt; 为源地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;target 为目的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;count 为拷贝的数量 单位是前面的bwl&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;dhcp&#34;&gt;&lt;a href=&#34;#dhcp&#34; class=&#34;headerlink&#34; title=&#34;dhcp&#34;&gt;&lt;/a&gt;dhcp&lt;/h4&gt;&lt;p&gt;dhcp 用于从路由器获取 IP 地址&lt;/p&gt;
&lt;h4 id=&#34;△-nfs&#34;&gt;&lt;a href=&#34;#△-nfs&#34; class=&#34;headerlink&#34; title=&#34;△ nfs&#34;&gt;&lt;/a&gt;△ nfs&lt;/h4&gt;&lt;p&gt;nfs - boot image via network using NFS protocol&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nfs [loadAddress] [[hostIPaddr:]bootfilename]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;loadAddress 是要保存的 DRAM 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[[hostIPaddr:]bootfilename]是要下载的文件地址&lt;/span&gt;&lt;br&gt;&lt;br&gt;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/u-boot.imx&lt;br&gt;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage&lt;br&gt;nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;△-tftp-tftpboot&#34;&gt;&lt;a href=&#34;#△-tftp-tftpboot&#34; class=&#34;headerlink&#34; title=&#34;△ tftp &amp;amp; tftpboot&#34;&gt;&lt;/a&gt;△ tftp &amp;amp; tftpboot&lt;/h4&gt;&lt;p&gt;tftpboot - boot image via network using TFTP protocol&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;tftpboot [loadAddress] [[hostIPaddr:]bootfilename]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;loadAddress 是要保存的 DRAM 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[[hostIPaddr:]bootfilename]是要下载的文件地址&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;△-mmc&#34;&gt;&lt;a href=&#34;#△-mmc&#34; class=&#34;headerlink&#34; title=&#34;△ mmc&#34;&gt;&lt;/a&gt;△ mmc&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mmc info&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;△ 显示当前mmc的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- display info of the current MMC device&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc read addr blk# cnt&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;addr 是数据读取到 DRAM 中的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;blk 是要读取的块起始地址(十六进制)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;cnt 是块计数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;=&amp;gt; mmc &lt;span class=&#34;hljs-built_in&#34;&gt;read&lt;/span&gt; 80800000 600 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;从mmc的第0x600个block开始，读取0x10个block，到DRAM的0x80800000处&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;注意从mmc info可以看到一个block的大小是512Byte&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc write addr blk# cnt&lt;br&gt;mmc erase blk# cnt&lt;br&gt;mmc rescan&lt;br&gt;&lt;br&gt;mmc part&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;△ 显示分区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- lists available partition on current mmc device&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc dev [dev] [part]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;△ 显示或者切换当前的设备&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[dev] 设备号，mmc list可以查看&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[part] 分区号，mmc part可以查看&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- show or &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; current mmc device [partition]&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc list &lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- lists available devices&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc hwpartition [args...] &lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- does hardware partitioning&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; arguments (sizes &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; 512-byte blocks):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;   [user [enh start cnt] [wrrel &amp;#123;on|off&amp;#125;]] - sets user data area attributes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;   [gp1|gp2|gp3|gp4 cnt [enh] [wrrel &amp;#123;on|off&amp;#125;]] - general purpose partition&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;   [check|&lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;|complete] - mode, complete &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; partitioning completed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; WARNING: Partitioning is a write-once setting once it is &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; to complete.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; Power cycling is required to initialize partitions after &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; to complete.&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc bootbus dev boot_bus_width reset_boot_bus_width boot_mode&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- Set the BOOT_BUS_WIDTH field of the specified device&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc bootpart-resize &amp;lt;dev&amp;gt; &amp;lt;boot part size MB&amp;gt; &amp;lt;RPMB part size MB&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- Change sizes of boot and RPMB partitions of specified device&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc partconf dev boot_ack boot_partition partition_access&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- Change the bits of the PARTITION_CONFIG field of the specified device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;说明：设置启动分区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;dev：mmc设备编号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;boot_ack：是否应答&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;boot_partition：用户选择发送到主机的引导数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;partition_access：用户选择要访问的分区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;=&amp;gt; mmc partconf 1 1 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;将mmc dev 1 设置为启动分区&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc rst-function dev value&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- Change the RST_n_FUNCTION field of the specified device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;  WARNING: This is a write-once field and 0 / 1 / 2 are the only valid values.&lt;/span&gt;&lt;br&gt;&lt;br&gt;mmc setdsr &amp;lt;value&amp;gt; &lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;- &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; DSR register value&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;在Uboot中更新uboot程序&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路就是先通过网络把文件存在DRAM中（nfs、tftp），再将文件写入到特定位置（mmc write）。&lt;/p&gt;
&lt;p&gt;如果 EMMC 里面烧写了 Linux 系统的话，EMMC 是有 3 个分区的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 0 个分区存放 uboot，&lt;/li&gt;
&lt;li&gt;第 1 个分区存放Linux 镜像文件和设备树，&lt;/li&gt;
&lt;li&gt;第 2 个分区存放根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mmc dev 1 0              # 切换到 EMMC 分区 0&lt;br&gt;tftp 80800000 u-boot.imx # 下载 u-boot.imx 到 DRAM&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;或 nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/u-boot.imx&lt;/span&gt;&lt;br&gt;mmc write 80800000 2 32E # 烧写 u-boot.imx 到 EMMC 中 (注意这里是block的数量，xxx Byte/512Byte)&lt;br&gt;mmc partconf 1 1 0 0     # 分区配置，EMMC 需要这一步！ SD卡不需要。&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fatinfo&#34;&gt;&lt;a href=&#34;#fatinfo&#34; class=&#34;headerlink&#34; title=&#34;fatinfo&#34;&gt;&lt;/a&gt;fatinfo&lt;/h4&gt;&lt;p&gt;fatinfo 命令用于查询指定 MMC 设备分区的文件系统信息&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fatinfo &amp;lt;interface&amp;gt; [&amp;lt;dev[:part]&amp;gt;]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;interface 表示接口，比如 mmc，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;dev 是查询的设备号，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;part 是要查询的分区。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查询 EMMC 分区 1 的文件系统信息，命令如下：&lt;/span&gt;&lt;br&gt;=&amp;gt; fatinfo mmc 1:1&lt;br&gt;Interface:  MMC&lt;br&gt;  Device 1: Vendor: Man 000015 Snr 3ee65248 Rev: 0.6 Prod: 8GTF4R&lt;br&gt;            Type: Removable Hard Disk&lt;br&gt;            Capacity: 7456.0 MB = 7.2 GB (15269888 x 512)&lt;br&gt;Filesystem: FAT32 &amp;quot;NO NAME    &amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fstype-查看文件系统格式&#34;&gt;&lt;a href=&#34;#fstype-查看文件系统格式&#34; class=&#34;headerlink&#34; title=&#34;fstype 查看文件系统格式&#34;&gt;&lt;/a&gt;fstype 查看文件系统格式&lt;/h4&gt;&lt;p&gt;fstype 用于查看 MMC 设备某个分区的文件系统格式&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fstype &amp;lt;interface&amp;gt; &amp;lt;dev&amp;gt;:&amp;lt;part&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;正点原子 EMMC 核心板上的 EMMC 默认有 3 个分区，我们来查看一下这三个分区的文件系统格式&lt;/span&gt;&lt;br&gt;=&amp;gt; fstype mmc 1:0&lt;br&gt;Failed to mount ext2 filesystem...&lt;br&gt;** Unrecognized filesystem type **&lt;br&gt;=&amp;gt; fstype mmc 1:1&lt;br&gt;fat&lt;br&gt;=&amp;gt; fstype mmc 1:2&lt;br&gt;ext4&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;从上可以看出，分区 0 格式未知，因为分区 0 存放的 uboot，并且分区 0 没有格式化，所以文件系统格式未知。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;分区 1 的格式为 fat，分区 1 用于存放 linux 镜像和设备树。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;分区 2 的格式为 ext4，用于存放 Linux 的根文件系统(rootfs)。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fatls-fat列出文件&#34;&gt;&lt;a href=&#34;#fatls-fat列出文件&#34; class=&#34;headerlink&#34; title=&#34;fatls fat列出文件&#34;&gt;&lt;/a&gt;fatls fat列出文件&lt;/h4&gt;&lt;p&gt;fatls 命令用于查询 FAT 格式设备的目录和文件信息&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fatls &amp;lt;interface&amp;gt; [&amp;lt;dev[:part]&amp;gt;] [directory]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;interface 是要查询的接口，比如 mmc，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;dev 是要查询的设备号，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;part 是要查询的分区，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;directory是要查询的目录。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查询 EMMC 分区 1 中的所有的目录和文件，输入命令：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;分区1中存放着dts文件，通过这个命令可以查看到&lt;/span&gt;&lt;br&gt;=&amp;gt; fatls mmc 1:1 /&lt;br&gt;  6785480   zimage&lt;br&gt;    39459   imx6ull-14x14-emmc-4.3-480x272-c.dtb&lt;br&gt;    39459   imx6ull-14x14-emmc-4.3-800x480-c.dtb&lt;br&gt;    39459   imx6ull-14x14-emmc-7-800x480-c.dtb&lt;br&gt;    39459   imx6ull-14x14-emmc-7-1024x600-c.dtb&lt;br&gt;    39459   imx6ull-14x14-emmc-10.1-1280x800-c.dtb&lt;br&gt;    40295   imx6ull-14x14-emmc-hdmi.dtb&lt;br&gt;    40203   imx6ull-14x14-emmc-vga.dtb&lt;br&gt;&lt;br&gt;8 file(s), 0 dir(s)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fatload-设备文件load到DRAM&#34;&gt;&lt;a href=&#34;#fatload-设备文件load到DRAM&#34; class=&#34;headerlink&#34; title=&#34;fatload 设备文件load到DRAM&#34;&gt;&lt;/a&gt;fatload 设备文件load到DRAM&lt;/h4&gt;&lt;p&gt;fatload 命令用于将指定的文件读取到 DRAM 中&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fatload &amp;lt;interface&amp;gt; [&amp;lt;dev[:part]&amp;gt; [&amp;lt;addr&amp;gt; [&amp;lt;filename&amp;gt; [bytes [pos]]]]]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;interface 为接口，比如 mmc，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;dev 是设备号，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;part 是分区，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;addr 是保存在 DRAM 中的起始地址，filename 是要读取的文件名字。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;bytes 表示读取多少字节的数据，如果 bytes 为 0 或者省略的话表示读取整个文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;pos 是要读的文件相对于文件首地址的偏移，如果为 0 或者省略的话表示从文件首地址开始读取。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;我们将 EMMC 分区 1 中的 zImage 文件读取到 DRAM 中的 0X80800000 地址处，命令如下：&lt;/span&gt;&lt;br&gt;fatload mmc 1:1 80800000 zImage&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;fatwrite-文件写入设备&#34;&gt;&lt;a href=&#34;#fatwrite-文件写入设备&#34; class=&#34;headerlink&#34; title=&#34;fatwrite 文件写入设备&#34;&gt;&lt;/a&gt;fatwrite 文件写入设备&lt;/h4&gt;&lt;p&gt;fatwirte 命令用于将 DRAM 中的数据写入到 MMC 设备中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以通过 fatwrite 命令在 uboot 中更新 linux 镜像文件和设备树。&lt;/li&gt;
&lt;li&gt;注意！uboot 默认没有使能 fatwrite 命令，需要修改板子配置头文件。找到自己开发板对应的配置头文件然后添加如下一行宏定义来使能 fatwrite 命令：&lt;br&gt;  &lt;code&gt;#define CONFIG_FAT_WRITE /* 使能 fatwrite 命令 */&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;fatwrite &amp;lt;interface&amp;gt; &amp;lt;dev[:part]&amp;gt; &amp;lt;addr&amp;gt; &amp;lt;filename&amp;gt; &amp;lt;bytes&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;interface 为接口，比如 mmc，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;dev 是设备号，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;part 是分区，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;addr 是要写入的数据在 DRAM 中的起始地址，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;filename 是写入的数据文件名字，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;bytes 表示要写入多少字节的数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;把位于 0x80800000 的 0x6788f8 字节的 zimage 文件 写入到 mmc 1:1 中&lt;/span&gt;&lt;br&gt;fatwrite mmc 1:1 80800000 zImage 6788f8&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;ext4ls-ext4列出文件&#34;&gt;&lt;a href=&#34;#ext4ls-ext4列出文件&#34; class=&#34;headerlink&#34; title=&#34;ext4ls ext4列出文件&#34;&gt;&lt;/a&gt;ext4ls ext4列出文件&lt;/h4&gt;&lt;h4 id=&#34;ext4load&#34;&gt;&lt;a href=&#34;#ext4load&#34; class=&#34;headerlink&#34; title=&#34;ext4load&#34;&gt;&lt;/a&gt;ext4load&lt;/h4&gt;&lt;h4 id=&#34;ext4write&#34;&gt;&lt;a href=&#34;#ext4write&#34; class=&#34;headerlink&#34; title=&#34;ext4write&#34;&gt;&lt;/a&gt;ext4write&lt;/h4&gt;&lt;h4 id=&#34;reset-重启&#34;&gt;&lt;a href=&#34;#reset-重启&#34; class=&#34;headerlink&#34; title=&#34;reset 重启&#34;&gt;&lt;/a&gt;reset 重启&lt;/h4&gt;&lt;h4 id=&#34;go-执行指定地址的程序&#34;&gt;&lt;a href=&#34;#go-执行指定地址的程序&#34; class=&#34;headerlink&#34; title=&#34;go 执行指定地址的程序&#34;&gt;&lt;/a&gt;go 执行指定地址的程序&lt;/h4&gt;&lt;h4 id=&#34;△-run-运行环境变量中的脚本&#34;&gt;&lt;a href=&#34;#△-run-运行环境变量中的脚本&#34; class=&#34;headerlink&#34; title=&#34;△ run 运行环境变量中的脚本&#34;&gt;&lt;/a&gt;△ run 运行环境变量中的脚本&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;run bootcmd&lt;br&gt;&lt;br&gt;&lt;br&gt;setenv boot2nfs &amp;#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&amp;#x27;&lt;br&gt;setenv boot2nfs &amp;#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&amp;#x27;&lt;br&gt;run boot2nfs&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;mtest-DRAM-test&#34;&gt;&lt;a href=&#34;#mtest-DRAM-test&#34; class=&#34;headerlink&#34; title=&#34;mtest DRAM test&#34;&gt;&lt;/a&gt;mtest DRAM test&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mtest [start [end [pattern [iterations]]]]&lt;br&gt;&lt;br&gt;=&amp;gt; mtest 80000000 80001000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Uboot的BOOT操作&#34;&gt;&lt;a href=&#34;#Uboot的BOOT操作&#34; class=&#34;headerlink&#34; title=&#34;Uboot的BOOT操作&#34;&gt;&lt;/a&gt;Uboot的BOOT操作&lt;/h2&gt;&lt;p&gt;uboot 的本质工作是引导 Linux，所以 uboot 肯定有相关的 boot(引导)命令来启动 Linux。常用的跟 boot 有关的命令有：bootz、bootm 和 boot。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们也可以通过设置环境变量，通过run指令来执行环境变量的方式来启动预定义的linux系统&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;run bootcmd&lt;br&gt;&lt;br&gt;&lt;br&gt;setenv boot2nfs &amp;#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&amp;#x27;&lt;br&gt;run boot2nfs&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;setenv serverip &amp;quot;192.168.3.5’&lt;br&gt;setenv ipaddr &amp;#x27;192.168.3.135&amp;#x27;&lt;br&gt;setenv gatewayip &amp;#x27;192.168.3.1&amp;#x27;&lt;br&gt;setenv netmask &amp;#x27;255.255.255.0&amp;#x27;&lt;br&gt;setenv oikiou_zImage &amp;#x27;/home/frank/linuxMini/nfs_dir/oikiou_zImage&amp;#x27;&lt;br&gt;setenv oikiou_dtbp &amp;#x27;/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb&amp;#x27;&lt;br&gt;setenv oikiou_rootfs &amp;#x27;/home/frank/linuxMini/nfs_dir/rootfs_oikiou_buildroot&amp;#x27;&lt;br&gt;setenv oikiou_netargs &amp;#x27;setenv bootargs console=ttymxc0,115200 root=/dev/nfs nfsroot=$&amp;#123;serverip&amp;#125;:$&amp;#123;oikiou_rootfs&amp;#125;,proto=tcp rw ip=$&amp;#123;ipaddr&amp;#125;:$&amp;#123;serverip&amp;#125;:$&amp;#123;gatewayip&amp;#125;:$&amp;#123;netmask&amp;#125;::eth0:off&amp;#x27;&lt;br&gt;setenv onetboot &amp;#x27;echo Booting from net ...; run oikiou_netargs; nfs $&amp;#123;loadaddr&amp;#125; $&amp;#123;serverip&amp;#125;:$&amp;#123;oikiou_zImage&amp;#125;; nfs $&amp;#123;fdt_addr&amp;#125; $&amp;#123;serverip&amp;#125;:$&amp;#123;oikiou_dtbp&amp;#125;; bootz $&amp;#123;loadaddr&amp;#125; - $&amp;#123;fdt_addr&amp;#125;;&amp;#x27;&lt;br&gt;run onetboot&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;/blockquote&gt;
&lt;h4 id=&#34;bootz&#34;&gt;&lt;a href=&#34;#bootz&#34; class=&#34;headerlink&#34; title=&#34;bootz&#34;&gt;&lt;/a&gt;bootz&lt;/h4&gt;&lt;p&gt;要启动 Linux，需要先将 Linux 镜像文件拷贝到 DRAM 中，如果使用到设备树的话也需要将设备树拷贝到 DRAM 中。&lt;/p&gt;
&lt;p&gt;可以从 EMMC 或者 NAND 等存储设备中将 Linux 镜像和设备树文件拷贝到 DRAM，也可以通过 nfs 或者 tftp 将 Linux 镜像文件和设备树文件下载到 DRAM 中。&lt;br&gt;不管用那种方法，只要能将 Linux 镜像和设备树文件存到 DRAM 中就行，然后使用 bootz 命令来启动linux&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;bootz [addr [initrd[:size]] [fdt]]&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;addr 是 Linux 镜像文件在 DRAM 中的位置，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;initrd 是 initrd 文件在DRAM 中的地址，如果不使用 initrd 的话使用‘-’代替即可，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;fdt 就是设备树文件在 DRAM 中的地址。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;网络方式通过bootz启动&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage&lt;br&gt;nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb&lt;br&gt;bootz 80800000 - 83000000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;bootm&#34;&gt;&lt;a href=&#34;#bootm&#34; class=&#34;headerlink&#34; title=&#34;bootm&#34;&gt;&lt;/a&gt;bootm&lt;/h4&gt;&lt;p&gt;bootm 和 bootz 功能类似，但是 bootm 用于启动 uImage 镜像文件。&lt;/p&gt;
&lt;h4 id=&#34;boot&#34;&gt;&lt;a href=&#34;#boot&#34; class=&#34;headerlink&#34; title=&#34;boot&#34;&gt;&lt;/a&gt;boot&lt;/h4&gt;&lt;p&gt;boot 命令也是用来启动 Linux 系统的，只是 boot 是通过读取环境变量 bootcmd 来启动 Linux 系统。&lt;/p&gt;
&lt;p&gt;原始的&lt;code&gt;bootcmd&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;run findfdt;&lt;br&gt;mmc dev $&amp;#123;mmcdev&amp;#125;;&lt;br&gt;mmc dev $&amp;#123;mmcdev&amp;#125;;&lt;br&gt;if mmc rescan;&lt;br&gt;then if run loadbootscript;&lt;br&gt;then run bootscript;&lt;br&gt;else if run loadimage;&lt;br&gt;then run mmcboot;&lt;br&gt;else run netboot;&lt;br&gt;fi; &lt;br&gt;fi; &lt;br&gt;else run netboot; &lt;br&gt;fi&lt;br&gt;&lt;br&gt;&amp;#x27;run findfdt;mmc dev $&amp;#123;mmcdev&amp;#125;;mmc dev $&amp;#123;mmcdev&amp;#125;;if mmc rescan;then if run loadbootscript;then run bootscript;else if run loadimage;then run mmcboot;else run netboot;fi;fi;else run netboot;fi&amp;#x27;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Linux-Kernel-内核&#34;&gt;&lt;a href=&#34;#Linux-Kernel-内核&#34; class=&#34;headerlink&#34; title=&#34;Linux Kernel 内核&#34;&gt;&lt;/a&gt;Linux Kernel 内核&lt;/h1&gt;&lt;p&gt;Linux 由 Linux 基金会管理与发布，Linux 官网为 &lt;a href=&#34;https://www.kernel.org/&#34;&gt;https://www.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux内核和Uboot也是类似，有linux原生代码，和NXP维护测试ok的代码。&lt;/p&gt;
&lt;h2 id=&#34;Kernel的编译&#34;&gt;&lt;a href=&#34;#Kernel的编译&#34; class=&#34;headerlink&#34; title=&#34;Kernel的编译&#34;&gt;&lt;/a&gt;Kernel的编译&lt;/h2&gt;&lt;p&gt;编译内核之前需要先在 ubuntu 上安装 &lt;code&gt;lzop&lt;/code&gt; 库，否则内核编译会失败！&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sudo apt-get install lzop&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Kernel文件解析&#34;&gt;&lt;a href=&#34;#Kernel文件解析&#34; class=&#34;headerlink&#34; title=&#34;Kernel文件解析&#34;&gt;&lt;/a&gt;Kernel文件解析&lt;/h2&gt;&lt;h3 id=&#34;arch&#34;&gt;&lt;a href=&#34;#arch&#34; class=&#34;headerlink&#34; title=&#34;arch&#34;&gt;&lt;/a&gt;arch&lt;/h3&gt;&lt;p&gt;&lt;code&gt;arch/arm/configs&lt;/code&gt; 中就包含有 I.MX6U-ALPHA 开发板的默认配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arch/arm/boot/dts&lt;/code&gt; 目录里面是对应开发平台的设备树文件(.dtb文件)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;arch/arm/boot&lt;/code&gt; 目录下会保存编译出来的 Im age 和 zImage 镜像文件，而 zImage 就是我们要用的 linux 镜像文件。&lt;/strong&gt;&lt;br&gt;&lt;code&gt;arch/arm/mach-xxx&lt;/code&gt; 目录分别为相应平台的驱动和初始化文件，比如 mach-imx 目录里面就是 I.MX 系列 CPU 的驱动和初始化文件。&lt;/p&gt;
&lt;h3 id=&#34;drivers&#34;&gt;&lt;a href=&#34;#drivers&#34; class=&#34;headerlink&#34; title=&#34;drivers&#34;&gt;&lt;/a&gt;drivers&lt;/h3&gt;&lt;p&gt;驱动目录文件，此目录根据驱动类型的不同，分门别类进行整理，比如 drivers&amp;#x2F;i2c 就是 I2C相关驱动目录，&lt;code&gt;drivers/gpio&lt;/code&gt; 就是 GPIO 相关的驱动目录，这是我们学习的重点。&lt;/p&gt;
&lt;h1 id=&#34;Rootfs-根文件系统&#34;&gt;&lt;a href=&#34;#Rootfs-根文件系统&#34; class=&#34;headerlink&#34; title=&#34;Rootfs 根文件系统&#34;&gt;&lt;/a&gt;Rootfs 根文件系统&lt;/h1&gt;&lt;p&gt;Linux 中的根文件系统更像是一个文件夹或者叫做目录，在这个目录里面会有很多的子目录。根目录下和子目录中会有很多的文&lt;br&gt;件，这些文件是 Linux 运行所必须的，比如库、常用的软件和命令、设备文件、配置文件等等。&lt;/p&gt;
&lt;p&gt;根文件系统是内核启动时所mount的第一个文件系统，内核代码映像文件保存在根文件系统中，而系统引导启动程序会在根文件系统挂载之后从中把一些基本的初始化脚本和服务等加载到内存中去运行。&lt;/p&gt;
&lt;h2 id=&#34;rootfs的构建-busybox&#34;&gt;&lt;a href=&#34;#rootfs的构建-busybox&#34; class=&#34;headerlink&#34; title=&#34;rootfs的构建 (busybox)&#34;&gt;&lt;/a&gt;rootfs的构建 (busybox)&lt;/h2&gt;&lt;p&gt;usyBox 是一个集成了大量的 Linux 命令和工具的软件，像 ls、mv、ifconfig 等命令 BusyBox 都会提供。BusyBox 就是一&lt;br&gt;个大的工具箱，这个工具箱里面集成了 Linux 的许多工具和命令。一般下载 BusyBox 的源码，然后配置 BusyBox，选择自己想要的功能，最后编译即可。&lt;/p&gt;
&lt;p&gt;BusyBox 官网：&lt;a href=&#34;https://busybox.net/&#34;&gt;https://busybox.net/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我们自己下载对应版本的busybox，这里示例版本是&lt;code&gt;busybox-1.35.0&lt;/code&gt;。&lt;br&gt; 对于现在2023年7月25日来说&lt;code&gt;busybox-1.36.1&lt;/code&gt;这个版本太新了容易有一些问题，暂时不用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载对应版本的源码后我们先编辑顶层&lt;code&gt;Makefile&lt;/code&gt;，编辑&lt;code&gt;CROSS_COMPILE ?= arm-linux-gnueabihf-&lt;/code&gt;，指定编译器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;busybox&lt;/code&gt;的官方不支持中文，所以需要修改一些代码来完成对中文的支持。&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;diff -Nura a/libbb/printable_string.c b/libbb/printable_string.c&lt;br&gt;--- a/libbb/printable_string.c &lt;span class=&#34;hljs-number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;27&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;20.785120436&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-0500&lt;/span&gt;&lt;br&gt;+++ b/libbb/printable_string.c &lt;span class=&#34;hljs-number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;37.481954486&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-0500&lt;/span&gt;&lt;br&gt;@@ &lt;span class=&#34;hljs-number&#34;&gt;-28&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; +&lt;span class=&#34;hljs-number&#34;&gt;28&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; @@&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;-  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;)&lt;br&gt;+  &lt;span class=&#34;hljs-comment&#34;&gt;/*support chinese display*/&lt;/span&gt;&lt;br&gt;+  &lt;span class=&#34;hljs-comment&#34;&gt;/*if (c &amp;gt;= 0x7f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;+  */&lt;/span&gt;&lt;br&gt;s++;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;@@ &lt;span class=&#34;hljs-number&#34;&gt;-42&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;hljs-number&#34;&gt;44&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; @@&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c = *d;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;-   &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; || c &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;)&lt;br&gt;+   &lt;span class=&#34;hljs-comment&#34;&gt;/*support chinese display*/&lt;/span&gt;&lt;br&gt;+   &lt;span class=&#34;hljs-comment&#34;&gt;/*if (c &amp;lt; &amp;#x27; &amp;#x27; || c &amp;gt;= 0x7f)*/&lt;/span&gt;&lt;br&gt;+   &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; )&lt;br&gt;    *d = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;;&lt;br&gt;    d++;&lt;br&gt;&amp;#125;&lt;br&gt;diff -Nura a/libbb/unicode.c b/libbb/unicode.c&lt;br&gt;--- a/libbb/unicode.c &lt;span class=&#34;hljs-number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;28&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;37.601117822&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-0500&lt;/span&gt;&lt;br&gt;+++ b/libbb/unicode.c &lt;span class=&#34;hljs-number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;-12&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;06&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;44&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;05.502420078&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-0500&lt;/span&gt;&lt;br&gt;@@ &lt;span class=&#34;hljs-number&#34;&gt;-1019&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;hljs-number&#34;&gt;1019&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; @@&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)--width &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;-    *d++ = (c &amp;gt;= &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;) ? c : &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;;&lt;br&gt;+    &lt;span class=&#34;hljs-comment&#34;&gt;/*support chinese display*/&lt;/span&gt;&lt;br&gt;+    &lt;span class=&#34;hljs-comment&#34;&gt;/**d++ = (c &amp;gt;= &amp;#x27; &amp;#x27; &amp;amp;&amp;amp; c &amp;lt; 0x7f) ? c : &amp;#x27;?&amp;#x27;;*/&lt;/span&gt;&lt;br&gt;+    *d++ = (c &amp;gt;= &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;) ? c : &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;;&lt;br&gt;    src++;&lt;br&gt;    &amp;#125;&lt;br&gt;    *d = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;;&lt;br&gt;@@ &lt;span class=&#34;hljs-number&#34;&gt;-1027&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;hljs-number&#34;&gt;1029&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt; @@&lt;br&gt;    d = dst = xstrndup(src, width);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (*d) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c = *d;&lt;br&gt;-    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; || c &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;)&lt;br&gt;+    &lt;span class=&#34;hljs-comment&#34;&gt;/* support chinese display*/&lt;/span&gt;&lt;br&gt;+    &lt;span class=&#34;hljs-comment&#34;&gt;/*if (c &amp;lt; &amp;#x27; &amp;#x27; || c &amp;gt;= 0x7f)*/&lt;/span&gt;&lt;br&gt;+    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (c &amp;lt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;br&gt;    *d = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;;&lt;br&gt;    d++;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;busybox&lt;/code&gt;的配置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先对busybox进行默认选项配置，再在这个基础上进行微调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;make defconfig&lt;/code&gt;，进行默认选项配置。&lt;br&gt; busybox有以下几种配置选项。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;defconfig，缺省配置，也就是默认配置选项。&lt;/li&gt;
&lt;li&gt;allyesconfig，全选配置，也就是选中 busybox 的所有功能。&lt;/li&gt;
&lt;li&gt;allnoconfig，最小配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开图像界面进行微调，&lt;code&gt;make menuconfig&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选中 这些选项&lt;/p&gt;
 &lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;Settings-&amp;gt; [*] vi-style line editing commands&lt;br&gt;Settings-&amp;gt; [*] Support Unicode&lt;br&gt;Settings-&amp;gt; [*] Check $LC_ALL, $LC_CTYPE and $LANG environment variables&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置结束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;busybox&lt;/code&gt;的编译安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置好 busybox 以后就可以编译了，我们要将编译结果存储到前面创建的 rootfs 目录中，之后将这个目录作为nfs的server文件夹，用于开发板的rootfs挂载。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;make&lt;br&gt;make install CONFIG_PREFIX=/home/frank/linuxMini/nfs_dir/rootfs&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们查看rootfs的输出文件夹 &lt;code&gt;/home/frank/linuxMini/nfs_dir/rootfs&lt;/code&gt;。&lt;/p&gt;
   &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;bin  linuxrc  sbin  usr&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;rootfs 目录下有 bin、sbin 和 usr 这三个目录，以及 linuxrc 这个文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;前面说过 Linux 内核 init 进程最后会查找用户空间的 init 程序，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;找到以后就会运行这个用户空间的 init 程序，从而切换到用户态。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;如果 bootargs 设置 init=/linuxrc，那么 linuxrc 就是可以作为用户空间的 init 程序，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;所以用户态空间的 init 程序是 busybox 来生成的&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;busybox&lt;/code&gt;完善&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以看出来这个rootfs缺失很多文件，lib，ev、proc、mnt、sys、tmp 和 root 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建缺失的文件夹&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;mkdir dev proc mnt sys tmp root lib usr/lib -p&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先添加lib文件，为了方便直接将所有的库文件都拷贝进去，这块后续可以根据用到的库文件做优化。&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;拷贝 /lib&lt;/span&gt;&lt;br&gt;cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-&lt;br&gt;gnueabihf/libc/lib&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;“-d”表示拷贝符号链接&lt;/span&gt;&lt;br&gt;cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/lib/ -d&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ld-linux-armhf.so.3 会链接到 ld-2.19-2014.08-1-git.so 上我们将这个符号链接删掉，&lt;span class=&#34;hljs-built_in&#34;&gt;cp&lt;/span&gt;一份原来的文件代替&lt;/span&gt;&lt;br&gt;cd /home/frank/linuxMini/nfs_dir/rootfs/lib/&lt;br&gt;rm ld-linux-armhf.so.3&lt;br&gt;cp ld-2.19-2014.08-1-git.so ld-linux-armhf.so.3&lt;br&gt;&lt;br&gt;cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/lib&lt;br&gt;cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/lib/ -d&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;拷贝 /usr/lib&lt;/span&gt;&lt;br&gt;cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/lib&lt;br&gt;cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/usr/lib/ -d&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给rootfs添加&lt;code&gt;/etc/init.d/rcS&lt;/code&gt;文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建&lt;code&gt;/etc/init.d/rcS&lt;/code&gt;文件&lt;/p&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;br&gt;PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH&lt;br&gt;LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib:/usr/lib&lt;br&gt;export PATH LD_LIBRARY_PATH&lt;br&gt;mount -a&lt;br&gt;mkdir /dev/pts&lt;br&gt;mount -t devpts devpts /dev/pts&lt;br&gt;&lt;br&gt;echo /sbin/mdev &amp;gt; /proc/sys/kernel/hotplug&lt;br&gt;mdev -s&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;rcS 是个 shell 脚本，Linux 内核启动以后需要启动一些服务，而 rcS 就是规定启动哪些文件的脚本文件。&lt;/p&gt;
&lt;p&gt;第 1 行，表示这是一个 shell 脚本。&lt;br&gt;第 3 行，PATH 环境变量保存着可执行文件可能存在的目录，这样我们在执行一些命令或 者可执行文件的时候就不会提示找不到文件这样的错误。&lt;br&gt;第 4 行，LD_LIBRARY_PATH 环境变量保存着库文件所在的目录。&lt;br&gt;第 5 行，使用 export 来导出上面这些环境变量，相当于声明一些“全局变量”。&lt;br&gt;第 7 行，使用 mount 命令来挂载所有的文件系统，这些文件系统由文件&amp;#x2F;etc&amp;#x2F;fstab 来指定， 所以我们一会还要创建&amp;#x2F;etc&amp;#x2F;fstab 文件。&lt;br&gt;第 8 和 9 行，创建目录&amp;#x2F;dev&amp;#x2F;pts，然后将 devpts 挂载到&amp;#x2F;dev&amp;#x2F;pts 目录中。&lt;br&gt;第 11 和 12 行，使用 mdev 来管理热插拔设备，通过这两行，Linux 内核就可以在&amp;#x2F;dev 目录下自动创建设备节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将上面文件存储到&lt;code&gt;/etc/init.d/rcS&lt;/code&gt;文件中，并给它加上可执行权限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给rootfs添加&lt;code&gt;/etc/fstab&lt;/code&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fstab 在 Linux 开机以后自动配置哪些需要自动挂载的分区，格式如下：&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt;&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;&lt;/span&gt;&lt;br&gt;proc            /proc        proc    defaults   0      0&lt;br&gt;tmpfs           /tmp         tmpfs   defaults   0      0&lt;br&gt;sysfs           /sys         sysfs   defaults   0      0&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt;&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# &amp;lt;file system&amp;gt;：要挂载的特殊的设备，也可以是块设备，比如/dev/sda 等等。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;mount point&amp;gt;：挂载点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt;&amp;gt;：文件系统类型，比如 ext2、ext3、proc、romfs、tmpfs 等等。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;options&amp;gt;：挂载选项，在 Ubuntu 中输入“man mount”命令可以查看具体的选项。一般使用 defaults，也就是默认选项，defaults 包含了 rw、suid、 dev、 &lt;span class=&#34;hljs-built_in&#34;&gt;exec&lt;/span&gt;、 auto、 nouser 和 async。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;dump&amp;gt;：为 1 的话表示允许备份，为 0 不备份，一般不备份，因此设置为 0。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;pass&amp;gt;：磁盘检查设置，为 0 表示不检查。根目录‘/’设置为 1，其他的都不能设置为 1，其他的分区从 2 开始。一般不在 fstab 中挂载根目录，因此这里一般设置为 0。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给rootfs添加&lt;code&gt;/etc/inittab&lt;/code&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init 程序会读取&amp;#x2F;etc&amp;#x2F;inittab这个文件，inittab 由若干条指令组成。每条指令的结构都是一样的，由以“:”分隔的 4 个段组成&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;etc/inittab&lt;/span&gt;&lt;br&gt;::sysinit:/etc/init.d/rcS&lt;br&gt;console::askfirst:-/bin/sh&lt;br&gt;::restart:/sbin/init&lt;br&gt;::ctrlaltdel:/sbin/reboot&lt;br&gt;::shutdown:/bin/umount -a -r&lt;br&gt;::shutdown:/sbin/swapoff -a&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;&amp;gt;:&amp;lt;runlevels&amp;gt;:&amp;lt;action&amp;gt;:&amp;lt;process&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;&amp;gt;：每个指令的标识符，不能重复。但是对于 busybox 的 init 来说，&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;&amp;gt;有着特殊意义。对于 busybox 而言&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;&amp;gt;用来指定启动进程的控制 &lt;span class=&#34;hljs-built_in&#34;&gt;tty&lt;/span&gt;，一般我们将串口或者 LCD 屏幕设置为控制 &lt;span class=&#34;hljs-built_in&#34;&gt;tty&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;runlevels&amp;gt;：对 busybox 来说此项完全没用，所以空着。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;action&amp;gt;：动作，用于指定&amp;lt;process&amp;gt;可能用到的动作。&lt;/span&gt;&lt;br&gt;    sysinit&lt;br&gt;        在系统初始化的时候 process 才会执行一次。&lt;br&gt;    respawn&lt;br&gt;        当 process 终止以后马上启动一个新的。&lt;br&gt;    askfirst&lt;br&gt;        和 respawn 类似，在运行 process 之前在控制台上显示“Please press Enter to activate this console.”。只要用户按下“Enter”键以后才会执行 process。&lt;br&gt;    wait&lt;br&gt;        告诉 init，要等待相应的进程执行完以后才能继续执行。&lt;br&gt;    once&lt;br&gt;        仅执行一次，而且不会等待 process 执行完成。&lt;br&gt;    restart&lt;br&gt;        当 init 重启的时候才会执行 procee。&lt;br&gt;    ctrlaltdel&lt;br&gt;        当按下 ctrl+alt+del 组合键才会执行 process。&lt;br&gt;    shutdown&lt;br&gt;        关机的时候执行 process。&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;lt;process&amp;gt;：具体的动作，比如程序、脚本或命令等。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;busybox&lt;/code&gt;搭建完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;buildroot-配置-rootfs&#34;&gt;&lt;a href=&#34;#buildroot-配置-rootfs&#34; class=&#34;headerlink&#34; title=&#34;buildroot 配置 rootfs&#34;&gt;&lt;/a&gt;buildroot 配置 rootfs&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;《第三篇 系统移植篇》我们最后讲解了如何使用 busybox 构建文件系统，busybox 仅仅只是帮我们构建好了一些常用的命令和文件，像 lib 库、&amp;#x2F;etc 目录下的一些文件都需要我们自己手动创建，而且 busybox 构建的根文件系统默认没有用户名和密码设置。在后续的实验中，我们还要自己去移植一些第三方软件和库，比如 alsa、iperf、mplayer 等等。那么有没有一种傻瓜式的方法或软件，它不仅包含了 busybox 的功能，而且里面还集成了各种软件，需要什么软件就选择什么软件，不需要我们去移植。答案肯定是有的，buildroot 就是这样一种工具，buildroot 比 busybox 更上一层楼，buildroot 不仅集成了 busybox，而且还集成了各种常见的第三方库和软件，需要什么就选择什么，就跟我们去吃自助餐一样，想吃什么就拿什么。buildroot 极大的方便了我们嵌入式 Linux 开发人员构建实用的根文件系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载buildroot &lt;a href=&#34;https://buildroot.org/&#34;&gt;https://buildroot.org/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解压&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;make menuconfig&lt;/code&gt; 执行配置&lt;/p&gt;
&lt;p&gt; 1. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt; &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;这里主要是配置架构相关的内容&lt;/span&gt;&lt;br&gt;Target options&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Target Architecture = ARM (little endian)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Target Binary Format = ELF&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Target Architecture Variant = cortex-A7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Target ABI = EABIhf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Floating point strategy = NEON/VFPv4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ARM instruction &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt; = ARM&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 2. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt; &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain 这里主要是配置交叉编译链&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;这里设置为我们自己所使用的交叉编译器即可。buildroot 其实是可以自动下载交叉编译器的，但是都是从国外服务器下载的，鉴于国内的网络环境，强烈推荐大家设置成自己所使用的交叉编译器。&lt;/span&gt;&lt;br&gt;&lt;br&gt;Toolchain&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain &lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt; = External toolchain&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain = Custom toolchain &lt;span class=&#34;hljs-comment&#34;&gt;#用户自己的交叉编译器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain origin = Pre-installed toolchain &lt;span class=&#34;hljs-comment&#34;&gt;#预装的编译器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain path =/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf  &lt;span class=&#34;hljs-comment&#34;&gt;# 绝对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Toolchain prefix = $(ARCH)-linux-gnueabihf &lt;span class=&#34;hljs-comment&#34;&gt;#置交叉编译器前缀，要根据自己实际所使用的交叉编译器来设置，比如我们使用的是 arm-linux-gnueabihf-gcc，因此前缀就是$(ARCH)-linux-gnueabihf，其中 ARCH我们前面已经设置为了 arm。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;External toolchain gcc version = 4.9.x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;External toolchain kernel headers series = 4.1.x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;External toolchain C library = glibc/eglibc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] Toolchain has SSP support? (NEW) &lt;span class=&#34;hljs-comment&#34;&gt;#选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] Toolchain has RPC support? (NEW) &lt;span class=&#34;hljs-comment&#34;&gt;#选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] Toolchain has C++ support? &lt;span class=&#34;hljs-comment&#34;&gt;#选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] Enable MMU support (NEW) &lt;span class=&#34;hljs-comment&#34;&gt;#选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 3. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt; &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;系统配置&lt;/span&gt;&lt;br&gt;System configuration&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;System hostname = alpha_imx6ull &lt;span class=&#34;hljs-comment&#34;&gt;#平台名字，自行设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;System banner = Welcome to alpha i.mx6ull &lt;span class=&#34;hljs-comment&#34;&gt;#欢迎语&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Init system = BusyBox &lt;span class=&#34;hljs-comment&#34;&gt;#使用 busybox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;/dev management = Dynamic using devtmpfs + mdev &lt;span class=&#34;hljs-comment&#34;&gt;#使用 mdev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] Enable root login with password (NEW) &lt;span class=&#34;hljs-comment&#34;&gt;#使能登录密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Root password = 123456 &lt;span class=&#34;hljs-comment&#34;&gt;#登录密码为 123456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  4. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt; &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;此选项配置我们最终制作的根文件系统为什么格式的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Filesystem images&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] ext2/3/4 root filesystem &lt;span class=&#34;hljs-comment&#34;&gt;#如果是 EMMC 或 SD 卡的话就用 ext3/ext4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ext2/3/4 variant = ext4 &lt;span class=&#34;hljs-comment&#34;&gt;#选择 ext4 格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[*] ubi image containing an ubifs root filesystem &lt;span class=&#34;hljs-comment&#34;&gt;#如果使用 NAND 的话就用 ubifs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  5. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt; &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;buildroot 不仅仅能构建根文件系统，也可以编译 linux 内核和 uboot。当配置 buildroot，使能 linux 内核和 uboot 以后 buildroot 就会自动下载最新的 linux 内核和 uboot 源码并编译。但是我们一般都不会使用 buildroot 下载的 linux 内核和 uboot，因为 buildroot 下载的 linux 和 uboot官方源码，里面会缺少很多驱动文件，而且最新的 linux 内核和 uboot 会对编译器版本号有要求，可能导致编译失败。因此我们需要配置 buildroot，关闭 linux 内核和 uboot 的编译，只使用 buildroot 来构建根文件系统&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[ ] Linux Kernel &lt;span class=&#34;hljs-comment&#34;&gt;#不要选择编译 Linux Kernel 选项！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Bootloaders&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;[ ] U-Boot &lt;span class=&#34;hljs-comment&#34;&gt;#不要选择编译 U-Boot 选项！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;p&gt;接下来就是 Target packages 用来配置第三方库和软件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;iperf3&lt;br&gt;netools&lt;br&gt;Target packages-&amp;gt;Networking applications-&amp;gt;openssh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译 buildroot&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo make&lt;/code&gt; 注意，一定要加 sudo，而且不能通过-jx 来指定多核编译&lt;ol&gt;
&lt;li&gt;编译过程可能会下载很多组件，可以考虑给wget添加代理&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;编译完成后会在&lt;code&gt;output/images&lt;/code&gt;生成根文件系统&lt;ol&gt;
&lt;li&gt;其中 rootfs.tar 就是打包好的根文件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Yocto-构建-rootfs&#34;&gt;&lt;a href=&#34;#Yocto-构建-rootfs&#34; class=&#34;headerlink&#34; title=&#34;Yocto 构建 rootfs&#34;&gt;&lt;/a&gt;Yocto 构建 rootfs&lt;/h2&gt;&lt;h2 id=&#34;Yocto-和-buildroot-构建-rootfs-的差异&#34;&gt;&lt;a href=&#34;#Yocto-和-buildroot-构建-rootfs-的差异&#34; class=&#34;headerlink&#34; title=&#34;Yocto 和 buildroot 构建 rootfs 的差异&#34;&gt;&lt;/a&gt;Yocto 和 buildroot 构建 rootfs 的差异&lt;/h2&gt;&lt;p&gt;值得注意的是，Yocto 和 Buildroot 本身并不是 Linux 发行版，它们只是帮助开发人员构建基于 Linux 的嵌入式系统（选择 Yocto，您可以构建 Linux 发行版；选择 Buildroot，您可以开发用于构建发行版的根文件系统）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么应该选择 Yocto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管 Yocto 操作更复杂，但它也有很明显的优势。或许其中最大的优势就是 Yocto 拥有广泛的用户群体和支持，开发社区非常活跃，为其创建了各种新的工具、层级和特性。此外，它由 Linux 基金会出资扶持，因而也更得人心。&lt;/p&gt;
&lt;p&gt;Yocto 的另一大好处则是它可以实现层级，用于各种任务，从功能添加，到项目版本中不可用平台的定位等，都可以实现。此外，还可以添加特殊功能，例如自定义浏览器，以便实现 Yocto 本身进一步的功能定制化。&lt;/p&gt;
&lt;p&gt;Yocto 获得了多家半导体和电路板生产商的支持，在同类项目中，可以兼容的设备最多。也就是说，除了充满活力的 Yocto 生态系统之外，自定义 Yocto 构建还可以添加大量的 SDK、工具和功能。&lt;/p&gt;
&lt;p&gt;正是有了这些要素，Yocto 实现了高度可定制，同时还拥有强劲的支持，可供计划构建嵌入式系统的开发人员使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto 的缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即便如此，Yocto 也有一些缺点。一方面，入门时的学习曲线稍微有点陡峭。对于时间有限的小型单个项目或小型团队来说，使用这个工具可能根本没有意义。另一方面，众所周知，Yocto 的构建时间很长。这就降低了迭代频率，如用在时间紧迫的项目中，效果可能会不太理想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么应该选择 Buildroot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Buildroot 的构建很简单——从运行方式到输出，都非常简便快捷。它的核心构建系统采用 Make 语言编写而成，语言十分简短，开发人员不需要学习，就能轻松理解。正如上文所述，Buildroot 使用标准的 Makefiles 和 kconfig 进行配置。Makefiles 和 kconfig 是 Linux 内核社区制作的两个工具，它们获得了广泛应用和支持。&lt;/p&gt;
&lt;p&gt;Buildroot 要求的“企业”参与度较低，因此它也是开源社区的“宠儿”。这样就会实现更高的可定制性以及更多的能力，从而尽可能开发具有针对性的系统，满足开发团队的需求。&lt;/p&gt;
&lt;p&gt;最后，Buildroot 还有一项极其有用的功能——它禁用了可选的构建时间设置，选择以即开即用的方式，创建尽可能小的镜像。这样大幅缩短了构建时间，减少了所需的必要计算资源（不过无法实现更灵活的构建）。对于小型团队或资源有限的团队而言，这可能是一种理想的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot 的缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先必须要讨论的就是它最明显的缺点——缺乏公司支持。尽管对于许多开发人员来说，这可能是一个好处，但其实它也有一些明显的不足。即，社区较小，且生态系统不太活跃。也就是说，它没有那么多的支持。由于许多开发人员更愿意专注研究应用更广泛的工具，因此，如果您遇到问题，您可能必须自己处理或学习如何解决。&lt;/p&gt;
&lt;p&gt;Buildroot 的另一个主要缺点是它不支持增量构建。每当您需要进行更新，即使是很小的更新，您都必须从头开始重新制作镜像。这样必定会使开发周期延长，增加不必要的时间。&lt;/p&gt;
&lt;p&gt;此外，Buildroot 最大的亮点就是其注重简约，但这也意味着，相比 Yocto，Buildroot 定制和特殊系统搭建会困难得多。&lt;br&gt;&lt;strong&gt;Buildroot 和 yocto的对比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对比内容：&lt;/strong&gt;&lt;br&gt;（1） 嵌入式构建系统&lt;br&gt;目标是构建一个完整的，客制化的嵌入式Linux系统&lt;br&gt;包括root filesystem， toolchain， kernel， bootloader&lt;br&gt;（2） 从源代码开始&lt;br&gt;（3） 使用交叉编译工具链&lt;br&gt;（4） 非常活跃的维护和开发工程&lt;br&gt;（5） 工业界广泛使用&lt;br&gt;（6） 有文档和培训课程&lt;br&gt;（7） 自由软件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;buildroot的通用信条&lt;/strong&gt;&lt;br&gt;（1） 专注于简单化&lt;br&gt;（2） 使用简单，理解简单，扩展简单&lt;br&gt;（3） 通过扩展脚本而不是buildroot本身来处理特殊情况&lt;br&gt;（4） 使用现存的技术&amp;#x2F;语言：kconfig， make. (值得投入时间去学习)&lt;br&gt;（5） 默认小&lt;br&gt;（6） 目的无关的（Purpose-agnostic）&lt;br&gt;（7） 开放社区，没有供应商、官僚&amp;#x2F;公司的管理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yocto的通用信条&lt;/strong&gt;&lt;br&gt;（1） 支持主要的CPU架构&lt;br&gt;OpenEmbedded：仅qemu&lt;br&gt;Yocto Project：为一小部分机器增加支持&lt;br&gt;（2） 只提供核心方法，使用layers来支持更多的package和机器&lt;br&gt;（3） 客户的改动应该在一个单独的layer&lt;br&gt;（4） 多用途的构建系统：尽可能灵活的处理更多的使用情况&lt;br&gt;（5） 开放社区，但是该工程被公司赞助商发起的Yocto Project Advisory Board监管&lt;br&gt;（6） OpenEmbedded 是一个独立社区驱动的工程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;buildroot 输出&lt;/strong&gt;&lt;br&gt;（1） 主要是根文件系统镜像&lt;br&gt;同时包含：工具链， 内核镜像， bootloader等&lt;br&gt;（2） 支持多种格式：ext2&amp;#x2F;3&amp;#x2F;4， ubifs， iso9600等&lt;br&gt;（3） 没有二进制包， 没有包管理系统&lt;br&gt;一些人称之为一个firmware generator&lt;br&gt;通过包不可能更新&lt;br&gt;更新需要一个完整的系统更新，像Andorid一样&lt;br&gt;认为部分更新是有害的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto 输出&lt;/strong&gt;&lt;br&gt;（1） 构建distribution，主要的输出是一个package feed&lt;br&gt;包管理系统是可选的&lt;br&gt;装载和更新系统的一部分是可能的&lt;br&gt;（2） 通过安装一些包，也可以产生根文件系统镜像。支持ext2&amp;#x2F;3&amp;#x2F;4， ubifs， iso9600等，也支持VM镜像：vmdk，vdi，qcow2&lt;br&gt;（3） 最终，镜像类或者工具，wic可用来构建磁盘镜像&lt;br&gt;（4） 生成image时也可以生成SDK，可以让应用开发者编译和测试他们的应用（不用集成到build中）。但是SDK必须要和image匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot 配置&lt;/strong&gt;&lt;br&gt;（1） 和Linux kernel一样使用kconfig&lt;br&gt;（2） 简单的{menu，x，n，g}配置接口&lt;br&gt;（3） 整个配置保存在一个文件 .config&amp;#x2F;defconfig&lt;br&gt;（4） 定义系统的各个方面：架构，内核版本&amp;#x2F;内核配置，bootloader，用户空间package等等。&lt;br&gt;（5） make menuconfig， make&lt;br&gt;（6） 为不同的机器构建通用的系统：单独处理&lt;br&gt;一个可以从fragment中构建出defconfig的工具&lt;br&gt;可行的，但是并非超级简单&lt;br&gt;每台机器完全独立的构建&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto 配置&lt;/strong&gt;&lt;br&gt;（1） 配置分成几个部分：&lt;br&gt;Distribution 配置 （package配置，toolchain和libc选择…）&lt;br&gt;Machine Configuration （定义架构， CPU功能， BSP）&lt;br&gt;Image recipe （target安装什么package）&lt;br&gt;Local配置 （Distribution和默认machine选择， 编译时使用多少个线程， 是否删除build artifact）&lt;br&gt;（2） 有必要收集将要被使用的layers，并宣布它们。&lt;br&gt;（3） 允许为不同的机器构建相同的镜像，或者为同一个机器构建不同的distribution或镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot layers&lt;/strong&gt;&lt;br&gt;（1） 没有layer的概念&lt;br&gt;（2） 所有的包在官方repository中维护&lt;br&gt;（3） 添加BR2_EXTERNAL&lt;br&gt;允许存储包定义、配置和其他人工文件&lt;br&gt;一个BR2_EXTERNAL&lt;br&gt;通常用作专有的&amp;#x2F;客制化的包和配置&lt;br&gt;仅增加包，不覆盖buildroot中的包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yocto layers&lt;/strong&gt;&lt;br&gt;（1） layer机制允许修改和增加新package或image&lt;br&gt;（2） core build system， BSP和custome modifications之间明确分离&lt;br&gt;（3） 第三方提供为它们layers提供BSP，或者一套处理专用应用程序的方法&lt;br&gt;（4） Layers需要兼容和使用相同的OE branch base&lt;br&gt;（5） 谨防layer quality， 检查不是系统性的&lt;br&gt;（6） OpenEmbedded Metadata Index 列出了可用的layers，recipes，machines：&lt;a href=&#34;https://link.zhihu.com/?target=http://layers.openembedded.org/layerindex/&#34;&gt;http://layers.openembedded.org/layerindex/&lt;/a&gt;&lt;br&gt;（7） 此外，有一个强大的override机制，可以基于machine或者distribution调整recipe variables&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;buildroot&amp;#x2F;yocto toolchain&lt;/strong&gt;&lt;br&gt;相同的功能：&lt;br&gt;（1） 构建自己的toolchain，基于gcc、C库（glibc， uClibc， musl）&lt;br&gt;（2） 使用external toolchain， 对于buildroot更简单，因为内置有这个功能，对于yocto，只有在additional vendor layers正真完全支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;buildroot new package&lt;/strong&gt;&lt;br&gt;涉及三个文件 Config.in xxx.mk xxx.hash&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yocto new package&lt;/strong&gt;&lt;br&gt;涉及一个文件×××.bb&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;buildroot: complexity&lt;/strong&gt;&lt;br&gt;（1） 设计成简单使用&lt;br&gt;（2） 对于core，每个建议的功能以有用性&amp;#x2F;复杂度比来分析&lt;br&gt;（3） core逻辑完全使用make编写，少于1000行的code包含了230行注释：确实容易理解what、why、how；几乎和一个shell脚本一个接一个地下载、提取、构建、安装软件那样简单。&lt;br&gt;（4） 文档很充分，有很多资源可用&lt;br&gt;（5） 一个小时的talk足以描述所有内部实现（ELCE 2014）&lt;br&gt;（6） IRC上典型的反馈：来自Yocto，非常惊喜，使用起来这么简单。这是让我为难的第一件事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project: complexity&lt;/strong&gt;&lt;br&gt;（1） 有点陡峭的学习曲线&lt;br&gt;（2） 核心是bitbake， 一个用python编写的单独项目（60千行代码）&lt;br&gt;（3） 一套class定义common task&lt;br&gt;（4） recipe 使用 bitbake specific language， python 和 shell 混合编写&lt;br&gt;（5） 日志和调试可帮助理解每个task具体做了什么&lt;br&gt;（6） 详细的文档，但是有很多不同的配置变量&lt;br&gt;（7） 并不总是容易理解最佳实践（比如， Poky 不能用于 production， distro&amp;#x2F;image 修改不能在local.conf中做， 删除tmp&amp;#x2F;）&lt;br&gt;（8） 人们依然对一些术语感到疑惑（Yocto Project， Poky， OpenEmbedded， bitbake）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot packages&lt;/strong&gt;&lt;br&gt;（1） 1800+ packages&lt;br&gt;（2） Graphics: X.org, Wayland, Qt4&amp;#x2F;Qt5, Gtk2&amp;#x2F;Gtk3, EFL&lt;br&gt;（3） Multimedia: Gstreamer 0.10&amp;#x2F;1.x, ffmpeg, Kodi, OpenGL&lt;br&gt;（4） Languages: Python2&amp;#x2F;3, PHP, Lua, Perl, Erlang, Mono, Ruby, Node.js&lt;br&gt;（5） Networking: Apache, Samba, Dovecot, Exim, CUPS, lots of servers&amp;#x2F;tools&lt;br&gt;（6） Init systems: Busybox(default), initsysv, systemd&lt;br&gt;（7） No support for a toolchain on the target&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project packages&lt;/strong&gt;&lt;br&gt;（1） 几千个recipes: 对于oe-core， meta-openembedded， meta-qt5大约2200个。通过Metadata Index知道多余8400&lt;br&gt;（2） 大部分和buildroot一样&lt;br&gt;（3） 更多的语言: Java, Go, Rust, smalltalk&lt;br&gt;（4） 对于Qt3仍有一个起作用的layer&lt;br&gt;（5） meta-virtualization（Docker， KVM， LXC， Xen）和 meta-openstack layers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot 依赖方法&lt;/strong&gt;&lt;br&gt;（1） 极简依赖， 如果一个功能可以关闭，那么默认关闭&lt;br&gt;（2） 很多自动依赖，比如，如果你开启OpenSSL，将自动从其他可提供SSL支持的enabled的包中获得SSL支持&lt;br&gt;（3） 默认毫不费力的的得到小的根文件系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project 依赖方法&lt;/strong&gt;&lt;br&gt;（1） 在distribution级进行package 配置&lt;br&gt;开启OpenSSL将对所有package打开，但是可以对一些package关闭，相反，也可以对选定的pacakge开启一些功能。&lt;br&gt;（2） 可以在machine级进行修改，但是应该避免这样做&lt;br&gt;（3） 每个recipe可以定义自己的默认功能集，一个稳健的默认配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot 更新&amp;#x2F;安全&lt;/strong&gt;&lt;br&gt;（1） 每三个月release，两个月开发，一个月稳定&lt;br&gt;（2） release包含package版本更新：security 更新和major 更新&lt;br&gt;（3） 核心架构也可能潜在性的发生改变&lt;br&gt;（4） 没有LTS版本，用于需要自己处理&lt;br&gt;（5） 正在提供一个脚本来评估给定buildroot配置中未解决的CVE （Common Vulnerabilities &amp;amp; Exposures）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project 更新&amp;#x2F;安全&lt;/strong&gt;&lt;br&gt;（1） 每6个月release，一次在4月，一次在10月&lt;br&gt;（2） 可通过wiki: &lt;a href=&#34;https://link.zhihu.com/?target=https://wiki.yoctoproject.org/wiki/Yocto_Project_v2.1_Status&#34;&gt;https://wiki.yoctoproject.org/wiki/Yocto_Project_v2.1_Status&lt;/a&gt;了解planning和roadmap&lt;br&gt;（3） 在M1和最终release之间的三个月内包含4个milestone&lt;br&gt;（4） 至少先前和当前release的版本有指定维护者，他们获取安全和重要的解决方法，但是没有recipe更新&lt;br&gt;（5） 旧版本由社区维护&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot 检测配置修改&lt;/strong&gt;&lt;br&gt;（1） Buildroot不很智能&lt;br&gt;（2） 当修改配置是，它不尝试检测哪些需要rebuild&lt;br&gt;（3） 一旦build一个package，buildroot将不rebuild它，除非你强制&lt;br&gt;（4） 大的配置修改需要full rebuild&lt;br&gt;（5） 小的配置修改可以不需要full rebuild&lt;br&gt;（6） 一个配置，一个build，不能配置间不能分享&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project 检测配置修改&lt;/strong&gt;&lt;br&gt;（1） bitbake 维护一个shared State Cache允许增加的builds&lt;br&gt;（2） 它通过创建inputs的checksum检测task的input修改&lt;br&gt;（3） 该cache可在所有的builds间共享， 对于类似的machines，build很快&lt;br&gt;（4） 可以跨主机分享该cache，比如一个夜间服务器和一个开发机，大大加快full build&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot: architecture support&lt;/strong&gt;&lt;br&gt;（1） 支持很多架构&lt;br&gt;（2） ARM（64）， MIPS， PowerPC（64）， x86&amp;#x2F;x86-64&lt;br&gt;（3） 也支持很多更专用的架构：Xtensa, Blackfin, ARC, m68k, SPARC, Microblaze, NIOSII; ARM noMMU, especially ARMv7-M&lt;br&gt;（4） 架构供应商提供援助: Imagination Technologies的MIPS, IBM的PowerPC64， Synopsys的ARC， Analog Devices的Blackfin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yocto Project: architecture support&lt;/strong&gt;&lt;br&gt;（1） core中， ARM， MIPS， PowerPC， X86，以及它们64bit 系列&lt;br&gt;（2） separate layers：Microblaze， NIOSII&lt;br&gt;（3） 通常芯片厂商维护他们自己的BSP layer：meta-intell， meta-altera （ARM &amp;amp; NIOSII）， meta-atmel， meta-fsl， meta-ti， mtea-xilinx …&lt;br&gt;（4） 社区提供：meta-rockchip， meta-sunxi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot: minimal build&lt;/strong&gt;&lt;br&gt;最小的build花费15分25秒，image size 2.2MB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yocto project: minimal build&lt;/strong&gt;&lt;br&gt;最小build花费50分47秒， image size为4.9MB。如果有存在的sstate-cache，花费1分21秒&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;br&gt;（1） 都可以创建一个使用许可证的列表&lt;br&gt;（2） 都能够检测到许可证更改&lt;br&gt;（3） Yocto项目可以剔除GPLv3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildroot &amp;amp; Yocto 选择&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Buildroot&lt;/strong&gt;&lt;br&gt;（1） 非常专用的CPU架构&lt;br&gt;（2） 非常小的rootfs &amp;lt; 8M&lt;br&gt;（3） 对工程师没有很大的要求&lt;br&gt;（4） 不支持各种mechines或者类似的系统&lt;br&gt;（5） 不需要包&amp;#x2F;部分系统的更新&lt;br&gt;（6） 小系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yocto&lt;/strong&gt;&lt;br&gt;（1） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。&lt;br&gt;（2） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。支持几种类似的系统&lt;br&gt;（3） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。需要更新包和部分系统&lt;br&gt;（4） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。非常大的系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Ubuntu-Base-rootfs构建&#34;&gt;&lt;a href=&#34;#Ubuntu-Base-rootfs构建&#34; class=&#34;headerlink&#34; title=&#34;Ubuntu-Base rootfs构建&#34;&gt;&lt;/a&gt;Ubuntu-Base rootfs构建&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ubuntu是 Linux 系统的一种，可以简单的将 Ubuntu 理解为一个根文件系统，和我们用 busybox、buildroot制作的根文件系统一样。&lt;/p&gt;
&lt;p&gt;根文件系统下载地址 &lt;a href=&#34;http://cdimage.ubuntu.com/&#34;&gt;http://cdimage.ubuntu.com/&lt;/a&gt; (ubuntu-base)&lt;/p&gt;
&lt;p&gt;Ubuntu 针对不同的 CPU 架构提供相应的 ubuntu base 根文件系统，有 amd64(64 位 X86)、armhf、i386(32 位 X86)、powerpc、ppc64el 等系统的。I.MX6ULL 是 Cortex-A7 内核的 CPU，并且有硬件浮点运算单元，因此选择 &lt;strong&gt;armhf&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;解压&lt;/span&gt;&lt;br&gt;tar -vxf ubuntu-base-16.04.6-base-armhf.tar.gz -C rootfs_ubuntu_1604&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装qemu虚拟机&lt;/span&gt;&lt;br&gt;sudo apt-get install qemu-user-static&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;将 qemu-user-static 拷贝到ubuntu base目录下&lt;/span&gt;&lt;br&gt;cd rootfs_ubuntu_1604&lt;br&gt;sudo cp /usr/bin/qemu-arm-static ./usr/bin/&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;配置开发板用的rootfs&lt;/span&gt;&lt;br&gt;cd rootfs_ubuntu_1604&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;从主机复制 DNS配置文件&lt;/span&gt;&lt;br&gt;sudo cp /etc/resolv.conf ./etc/resolv.conf&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;换源 修改开发板 rootfs 的源&lt;/span&gt;&lt;br&gt;./etc/apt/sources.list&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;在主机(虚拟机(当前执行指令的设备))中挂载根文件系统(刚刚下载的，给开发板用的根文件系统)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;相当于把主机的根文件系统改成了开发板用的根文件系统&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;把下面的脚本保存下来并添加运行权限&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;挂载脚本 例如保存为 mount.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;!/bin/bash&lt;/span&gt;&lt;br&gt;sudo mount -t proc /proc /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/proc&lt;br&gt;sudo mount -t sysfs /sys /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/sys&lt;br&gt;sudo mount -o bind /dev /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev&lt;br&gt;sudo mount -o bind /dev/pts /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev/pts&lt;br&gt;sudo chroot /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;卸载脚本 unmount.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;!/bin/bash&lt;/span&gt;&lt;br&gt;sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/proc&lt;br&gt;sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/sys&lt;br&gt;sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev/pts&lt;br&gt;sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;挂载&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;执行脚本之后发现shell变了&lt;/span&gt;&lt;br&gt;./mount.sh&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装软件&lt;/span&gt;&lt;br&gt;apt update&lt;br&gt;apt install sudo&lt;br&gt;apt install vim&lt;br&gt;apt install net-tools&lt;br&gt;apt install ethtool&lt;br&gt;apt install net-tools&lt;br&gt;apt install openssh-server openssh-client&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;设置root密码&lt;/span&gt;&lt;br&gt;passwd root&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;设置 hostname&lt;/span&gt;&lt;br&gt;echo &amp;quot;ubuntu1604&amp;quot; &amp;gt; /etc/hostname&lt;br&gt;echo &amp;quot;127.0.0.1 localhost&amp;quot; &amp;gt;&amp;gt; /etc/hosts&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;配置串口终端&lt;/span&gt;&lt;br&gt;ln -s /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@ttymxc0.service&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;配置ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;注意一下这些配置项&lt;/span&gt;&lt;br&gt;PermitRootLogin yes&lt;br&gt;PubkeyAuthentication yes&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;退出&lt;/span&gt;&lt;br&gt;exit&lt;br&gt;./unmount.sh&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;至此 ubuntu 配置完成 在uboot内更改启动参数就可以对这个根文件系统进行测试了&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用NFS挂载rootfs&#34;&gt;&lt;a href=&#34;#使用NFS挂载rootfs&#34; class=&#34;headerlink&#34; title=&#34;使用NFS挂载rootfs&#34;&gt;&lt;/a&gt;使用NFS挂载rootfs&lt;/h2&gt;&lt;p&gt;uboot 里面的 bootargs 环境变量会设置“root”的值，所以我们将 root 的值改为 NFS 挂载即可。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;root=/dev/nfs nfsroot=[&amp;lt;server-ip&amp;gt;:]&amp;lt;root-dir&amp;gt;[,&amp;lt;nfs-options&amp;gt;] ip=&amp;lt;client-ip&amp;gt;:&amp;lt;server-ip&amp;gt;:&amp;lt;gw-ip&amp;gt;:&amp;lt;netmask&amp;gt;:&amp;lt;hostname&amp;gt;:&amp;lt;device&amp;gt;:&amp;lt;autoconf&amp;gt;:&amp;lt;dns0-ip&amp;gt;:&amp;lt;dns1-ip&amp;gt;&lt;br&gt;&lt;br&gt;&amp;lt;server-ip&amp;gt;：服务器 IP 地址，也就是存放根文件系统主机的 IP 地址，那就是 Ubuntu 的 IP地址，比如我的 Ubuntu 主机 IP 地址为 192.168.1.250。&lt;br&gt;&amp;lt;root-dir&amp;gt;：根文件系统的存放路径，比如我的就是/home/zuozhongkai/linux/nfs/rootfs。&lt;br&gt;&amp;lt;nfs-options&amp;gt;：NFS 的其他可选选项，一般不设置。&lt;br&gt;&amp;lt;client-ip&amp;gt;：客户端 IP 地址，也就是我们开发板的 IP 地址，Linux 内核启动以后就会使用此 IP 地址来配置开发板。此地址一定要和 Ubuntu 主机在同一个网段内，并且没有被其他的设备使用，在 Ubuntu 中使用 ping 命令 ping 一下就知道要设置的 IP 地址有没有被使用，如果不能ping 通就说明没有被使用，那么就可以设置为开发板的 IP 地址，比如我就可以设置为192.168.1.251。&lt;br&gt;&amp;lt;server-ip&amp;gt;：服务器 IP 地址，前面已经说了。&lt;br&gt;&amp;lt;gw-ip&amp;gt;：网关地址，我的就是 192.168.1.1。&lt;br&gt;&amp;lt;netmask&amp;gt;：子网掩码，我的就是 255.255.255.0。&lt;br&gt;&amp;lt;hostname&amp;gt;：客户机的名字，一般不设置，此值可以空着。&lt;br&gt;&amp;lt;device&amp;gt;：设备名，也就是网卡名，一般是 eth0，eth1….，正点原子的 I.MX6U-ALPHA 开发板的 ENET2 为 eth0，ENET1 为 eth1。如果你的电脑只有一个网卡，那么基本只能是 eth0。这里我们使用 ENET2，所以网卡名就是 eth0。&lt;br&gt;&amp;lt;autoconf&amp;gt;：自动配置，一般不使用，所以设置为 off。&lt;br&gt;&amp;lt;dns0-ip&amp;gt;：DNS0 服务器 IP 地址，不使用。&lt;br&gt;&amp;lt;dns1-ip&amp;gt;：DNS1 服务器 IP 地址，不使用。&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据上面的格式 bootargs 环境变量的值如下：&lt;/p&gt;
&lt;p&gt;“proto&amp;#x3D;tcp”表示使用 TCP 协议，“rw”表示 nfs 挂载的根文件系统为可读可写。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;设定 bootargs 环境变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;linux kernel是通过读取这个环境变量来启动rootfs的&lt;/span&gt;&lt;br&gt;=&amp;gt; env set bootargs &amp;#x27;console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.192.100:/home/frank/linuxMini/nfs_dir/rootfs,proto=tcp rw ip=192.168.192.80:192.168.192.100:192.168.192.100:255.255.255.0::eth0:off&amp;#x27;&lt;br&gt;&lt;br&gt;&lt;br&gt;=&amp;gt; env print boot2nfs&lt;br&gt;boot2nfs=nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;运行boot2nfs&lt;/span&gt;&lt;br&gt;=&amp;gt; run boot2nfs&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Drive-驱动&#34;&gt;&lt;a href=&#34;#Drive-驱动&#34; class=&#34;headerlink&#34; title=&#34;Drive 驱动&#34;&gt;&lt;/a&gt;Drive 驱动&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Linux 中的驱动分为三大类：&lt;strong&gt;字符设备驱动、块设备驱动、网络设备驱动&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个设备有可能属于多种设备类型&lt;/strong&gt;，比如 USB WIFI，其使用 USB 接口，所以属于字符设备，但是其又能上网，所以也属于网络设备驱动。&lt;/p&gt;
&lt;h3 id=&#34;字符设备驱动&#34;&gt;&lt;a href=&#34;#字符设备驱动&#34; class=&#34;headerlink&#34; title=&#34;字符设备驱动&#34;&gt;&lt;/a&gt;字符设备驱动&lt;/h3&gt;&lt;p&gt;是占用篇幅最大的一类驱动，因为字符设备最多，从最简单的点灯到 I2C、SPI、音频等都属于字符设备驱动的类型。&lt;/p&gt;
&lt;h3 id=&#34;块设备驱动&#34;&gt;&lt;a href=&#34;#块设备驱动&#34; class=&#34;headerlink&#34; title=&#34;块设备驱动&#34;&gt;&lt;/a&gt;块设备驱动&lt;/h3&gt;&lt;p&gt;所谓的块设备驱动就是存储器设备的驱动，比如 EMMC、NAND、SD 卡和 U 盘等存储设备，因为这些存储设备的特点是以&lt;strong&gt;存储块为基础&lt;/strong&gt;，因此叫做块设备&lt;/p&gt;
&lt;h3 id=&#34;网络设备驱动&#34;&gt;&lt;a href=&#34;#网络设备驱动&#34; class=&#34;headerlink&#34; title=&#34;网络设备驱动&#34;&gt;&lt;/a&gt;网络设备驱动&lt;/h3&gt;&lt;p&gt;网络设备驱动，不管是有线的还是无线的，都属于网络设备驱动的范畴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;字符设备驱动-1&#34;&gt;&lt;a href=&#34;#字符设备驱动-1&#34; class=&#34;headerlink&#34; title=&#34;字符设备驱动&#34;&gt;&lt;/a&gt;字符设备驱动&lt;/h2&gt;&lt;h3 id=&#34;驱动调用流程&#34;&gt;&lt;a href=&#34;#驱动调用流程&#34; class=&#34;headerlink&#34; title=&#34;驱动调用流程&#34;&gt;&lt;/a&gt;驱动调用流程&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/image-20231107151921777.png&#34; alt=&#34;字符设备的函数调用&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 中一切皆为文件，&lt;strong&gt;驱动加载成功以后&lt;/strong&gt;会在“&amp;#x2F;dev”目录下生成一个相应的文件，应用程序通过对这个名为“&amp;#x2F;dev&amp;#x2F;xxx”(xxx 是具体的驱动文件名字)的文件进行相应的操作即可实现对硬件的操作。&lt;/p&gt;
&lt;p&gt;应用程序运行在用户空间，而 Linux 驱动属于内核的一部分，驱动运行于内核空间。&lt;/p&gt;
&lt;p&gt;当我们在用户空间想要实现对内核的操作，比如使用 open 函数打开&amp;#x2F;dev&amp;#x2F;led 这个驱动，因为&lt;strong&gt;用户空间不能直接对内核进行操作&lt;/strong&gt;，因此必须使用一个叫做“&lt;strong&gt;系统调用&lt;/strong&gt;”的方法来实现从用户空间“陷入”到内核空间，这样才能实现对底层驱动的操作。&lt;/p&gt;
&lt;p&gt;open 函数调用流程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/image-20231107162628528.png&#34; alt=&#34;open 函数调用流程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;驱动API函数&#34;&gt;&lt;a href=&#34;#驱动API函数&#34; class=&#34;headerlink&#34; title=&#34;驱动API函数&#34;&gt;&lt;/a&gt;驱动API函数&lt;/h3&gt;&lt;p&gt;每一个系统调用，在驱动中都有与之对应的一个驱动函数，在 Linux 内核文件 &lt;code&gt;include/linux/fs.h&lt;/code&gt; 中有个叫做 &lt;strong&gt;&lt;code&gt;file_operations&lt;/code&gt;&lt;/strong&gt; 的结构体，此结构体就是 Linux 内核驱动操作函数集合，&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;file_operations&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;module&lt;/span&gt; *&lt;span class=&#34;hljs-title&#34;&gt;owner&lt;/span&gt;;&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; (*llseek) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*read) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; __user *, &lt;span class=&#34;hljs-type&#34;&gt;size_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*write) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; __user *, &lt;span class=&#34;hljs-type&#34;&gt;size_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*read_iter) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; iov_iter *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*write_iter) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; iov_iter *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*iterate) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; dir_context *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(*poll)&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; poll_table_struct *)&lt;/span&gt;;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; (*unlocked_ioctl) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; (*compat_ioctl) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*mmap) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; vm_area_struct *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*mremap)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; vm_area_struct *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*open) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; inode *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*flush) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;fl_owner_t&lt;/span&gt; id);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*release) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; inode *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*fsync) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; datasync);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*aio_fsync) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; datasync);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*fasync) (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*lock) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file_lock *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*sendpage) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; page *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;size_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(*get_unmapped_area)&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*check_flags)(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*flock) (&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file_lock *);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*splice_write)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; pipe_inode_info *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; *, &lt;span class=&#34;hljs-type&#34;&gt;size_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;ssize_t&lt;/span&gt; (*splice_read)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; *, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; pipe_inode_info *, &lt;span class=&#34;hljs-type&#34;&gt;size_t&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*setlease)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *, &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file_lock **, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; **);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; (*fallocate)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *file, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; mode, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; offset, &lt;span class=&#34;hljs-type&#34;&gt;loff_t&lt;/span&gt; len);&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*show_fdinfo)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; seq_file *m, &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *f);&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; CONFIG_MMU&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; (*mmap_capabilities)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file *);&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;简单介绍一下 file_operation 结构体中比较重要的、常用的函数：&lt;br&gt;&lt;strong&gt;owner 拥有该结构体的模块的指针，一般设置为 THIS_MODULE。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;llseek 函数&lt;/strong&gt;用于修改文件当前的读写位置。&lt;br&gt;&lt;strong&gt;read 函数用于读取设备文件。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;write 函数用于向设备文件写入(发送)数据。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;poll 函数&lt;/strong&gt;是个轮询函数，用于查询设备是否可以进行非阻塞的读写。&lt;br&gt;&lt;strong&gt;unlocked_ioctl 函数&lt;/strong&gt;提供对于设备的控制功能，与应用程序中的 ioctl 函数对应。&lt;br&gt;&lt;strong&gt;compat_ioctl 函数&lt;/strong&gt;与 unlocked_ioctl 函数功能一样，区别在于在 64 位系统上，32 位的应用程序调用将会使用此函数。在 32 位的系统上运行 32 位的应用程序调用的是unlocked_ioctl。&lt;br&gt;&lt;strong&gt;mmap 函数&lt;/strong&gt;用于将设备的内存映射到进程空间中(也就是用户空间)，一般帧缓冲设备会使用此函数，比如 LCD 驱动的显存，将帧缓冲(LCD 显存)映射到用户空间中以后应用程序就可以直接操作显存了，这样就不用在用户空间和内核空间之间来回复制。&lt;br&gt;&lt;strong&gt;open 函数用于打开设备文件。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;release 函数&lt;/strong&gt;用于释放(关闭)设备文件，与应用程序中的 close 函数对应。&lt;br&gt;&lt;strong&gt;fasync 函数&lt;/strong&gt;用于刷新待处理的数据，用于将缓冲区中的数据刷新到磁盘中。&lt;br&gt;&lt;strong&gt;aio_fsync 函数&lt;/strong&gt;与 fasync 函数的功能类似，只是 aio_fsync 是异步刷新待处理的数据。&lt;/p&gt;
&lt;p&gt;这些函数并不是全部都需要实现的，可以只实现需要的部分函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;驱动的加载卸载&#34;&gt;&lt;a href=&#34;#驱动的加载卸载&#34; class=&#34;headerlink&#34; title=&#34;驱动的加载卸载&#34;&gt;&lt;/a&gt;驱动的加载卸载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;驱动的加载和卸载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux 驱动有两种运行方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种是将驱动编译进 Linux 内核中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 Linux 内核启动的时候就会自动运行驱动程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种就是将驱动编译成模块(Linux 下模块扩展名为.ko)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Linux 内核启动以后使“insmod”命令加载驱动模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;在调试驱动的时候一般都选择将其编译为模块，这样我们修改驱动以后只需要编译一下驱动代码即可，不需要编译整个 Linux 代码。&lt;/p&gt;
&lt;p&gt;而且在调试的时候只需要加载或者卸载驱动模块即可，不需要重启整个系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将驱动编译为模块最大的好处就是方便开发，当驱动开发完成，确定没有问题以后就可以将驱动编译进 Linux 内核中，当然也可以不编译进 Linux 内核中，具体看自己的需求。&lt;/p&gt;
&lt;p&gt;模块有加载和卸载两种操作，我们在编写驱动的时候需要注册这两种操作函数，模块的加载和卸载注册函数如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;module_init(xxx_init);   &lt;span class=&#34;hljs-comment&#34;&gt;//注册模块加载函数&lt;/span&gt;&lt;br&gt;module_exit(xxx_exit);   &lt;span class=&#34;hljs-comment&#34;&gt;//注册模块卸载函数&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;module_init() 函数用来向 Linux 内核注册一个模块&lt;strong&gt;加载函数&lt;/strong&gt;，参数 xxx_init 就是需要注册的具体函数，当使用&lt;code&gt;insmod&lt;/code&gt;命令加载驱动的时候，xxx_init 这个函数就会被调用。&lt;/p&gt;
&lt;p&gt;module_exit()函数用来向 Linux 内核注册一个模块&lt;strong&gt;卸载函数&lt;/strong&gt;，参数 xxx_exit 就是需要注册的具体函数，当使用&lt;code&gt;rmmod&lt;/code&gt;命令卸载具体驱动的时候 xxx_exit 函数就会被调用。&lt;/p&gt;
&lt;p&gt;驱动加载函数和卸载函数的实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 驱动入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __init &lt;span class=&#34;hljs-title function_&#34;&gt;xxx_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 入口函数具体内容 */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 驱动出口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; __exit &lt;span class=&#34;hljs-title function_&#34;&gt;xxx_exit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 出口函数具体内容 */&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 将上面两个函数指定为驱动的入口和出口函数 */&lt;/span&gt;&lt;br&gt;module_init(xxx_init);&lt;br&gt;module_exit(xxx_exit);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;驱动编译完成后，编译出来的文件名为&lt;code&gt;.ko&lt;/code&gt;我们可以通过命令去将这个文件加载、卸载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;驱动加载命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;驱动的加载有两个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;insmod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;     insmod drv.ko
 &lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;&lt;br&gt;  - insmod 命令不能解决模块的依赖关系，比如 drv&lt;span class=&#34;hljs-selector-class&#34;&gt;.ko&lt;/span&gt; 依赖 first&lt;span class=&#34;hljs-selector-class&#34;&gt;.ko&lt;/span&gt; 这个模块，就必须先使用insmod 命令加载 first&lt;span class=&#34;hljs-selector-class&#34;&gt;.ko&lt;/span&gt; 这个模块，然后再加载 drv&lt;span class=&#34;hljs-selector-class&#34;&gt;.ko&lt;/span&gt; 这个模块。&lt;br&gt;&lt;br&gt;- modprobe&lt;br&gt;&lt;br&gt;  - ```shell&lt;br&gt;        modprobe drv.ko&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;modprobe 会分析模块的依赖关系，然后会将所有的依赖模块都加载到内核中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;modprobe 命令主要智能在提供了模块的依赖性分析、错误检查、错误报告等功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;驱动的卸载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对应的驱动的卸载有两个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rmmod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    rmmod drv.ko
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs markdown&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;  -&lt;/span&gt; 对应的 rmmod 也是卸载单一的驱动。&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; modprobe -r&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;  -&lt;/span&gt; &lt;span class=&#34;hljs-code&#34;&gt;```shell&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;        modprobe -r drv.ko&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 modprobe 命令可以卸载掉驱动模块所依赖的其他模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要注意的是这些被依赖的模块需要确保已经没有被其他模块所使用，否则就不能使用 modprobe 来卸载驱动模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;驱动-字符设备-的注册和注销&#34;&gt;&lt;a href=&#34;#驱动-字符设备-的注册和注销&#34; class=&#34;headerlink&#34; title=&#34;驱动(字符设备)的注册和注销&#34;&gt;&lt;/a&gt;驱动(字符设备)的注册和注销&lt;/h3&gt;&lt;p&gt;对于字符设备驱动而言，当驱动模块加载成功以后需要注册字符设备，同样，卸载驱动模块的时候也需要注销掉字符设备。&lt;/p&gt;
&lt;p&gt;驱动注册函数和注销函数的实现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// major：主设备号，Linux 下每个设备都有一个设备号，设备号分为主设备号和次设备号两部分，这里是主设备号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// name：设备名字，指向一串字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// fops：结构体 file_operations 类型指针，指向设备的操作函数集合变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;register_chrdev&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; major, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *name, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; file_operations *fops)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// major：要注销的设备对应的主设备号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// name：要注销的设备对应的设备名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;unregister_chrdev&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; major, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义 file_operations 结构的变量。这个就是操作函数集合。定义在linux内核的include/linux/fs.h中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;file_operations&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;test_fops&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 驱动入口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; __init &lt;span class=&#34;hljs-title function_&#34;&gt;xxx_init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 入口函数具体内容 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; retvalue = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 注册字符设备驱动 */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 注册设备号为 200 名为 &amp;quot;chrtest&amp;quot;&lt;/span&gt;&lt;br&gt;    retvalue = register_chrdev(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;chrtest&amp;quot;&lt;/span&gt;, &amp;amp;test_fops);&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(retvalue &amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* 字符设备注册失败,自行处理 */&lt;/span&gt;&lt;br&gt; &amp;#125;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 驱动出口函数 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; __exit &lt;span class=&#34;hljs-title function_&#34;&gt;xxx_exit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* 注销字符设备驱动 */&lt;/span&gt;&lt;br&gt;    unregister_chrdev(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;chrtest&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 将上面两个函数指定为驱动的入口和出口函数 */&lt;/span&gt;&lt;br&gt;module_init(xxx_init);&lt;br&gt;module_exit(xxx_exit);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;设备号的动态分配&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 申请设备号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// dev：保存申请到的设备号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// baseminor：次设备号起始地址，alloc_chrdev_region 可以申请一段连续的多个设备号，这些设备号的主设备号一样，但是次设备号不同，次设备号以 baseminor 为起始地址地址开始递增。一般 baseminor 为 0，也就是说次设备号从 0 开始。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// count：要申请的设备号数量（次设备号的差别）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// name：设备名字。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;alloc_chrdev_region&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;dev_t&lt;/span&gt; *dev, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; baseminor, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; count, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 释放掉设备&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// from：要释放的设备号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// count：表示从 from 开始，要释放的设备号数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;unregister_chrdev_region&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;dev_t&lt;/span&gt; from, &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; count)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;驱动文件的整体实现&#34;&gt;&lt;a href=&#34;#驱动文件的整体实现&#34; class=&#34;headerlink&#34; title=&#34;驱动文件的整体实现&#34;&gt;&lt;/a&gt;驱动文件的整体实现&lt;/h3&gt;&lt;p&gt;参考代码仓库&lt;/p&gt;
&lt;h3 id=&#34;驱动测试&#34;&gt;&lt;a href=&#34;#驱动测试&#34; class=&#34;headerlink&#34; title=&#34;驱动测试&#34;&gt;&lt;/a&gt;驱动测试&lt;/h3&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;输入如下命令加载 chrdev_demo.ko 驱动文件：&lt;/span&gt;&lt;br&gt;insmod chrdev_demo.ko&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;如果使用 modprobe 加载驱动&lt;/span&gt; &lt;br&gt;modprobe chrdev_demo.ko&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看当前系统中存在的模块&lt;/span&gt;&lt;br&gt;lsmod&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看系统中的设备 可以看到 chrdev_demo.ko 的主设备号和设备名&lt;/span&gt;&lt;br&gt;cat /proc/devices&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;创建设备节点文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;驱动加载成功需要在/dev 目录下创建一个与之对应的设备节点文件，应用程序就是通过操作这个设备节点文件来完成对具体设备的操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;其中 &lt;span class=&#34;hljs-built_in&#34;&gt;mknod&lt;/span&gt; 是创建节点命令，/dev/chrdev_demo 是要创建的节点文件，c 表示这是个字符设备，237 是设备的主设备号，0 是设备的次设备号&lt;/span&gt;&lt;br&gt;mknod /dev/chrdev_demo c 237 0&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;卸载驱动模块&lt;/span&gt;&lt;br&gt;rmmod chrdev_demo.ko&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Q-A&#34;&gt;&lt;a href=&#34;#Q-A&#34; class=&#34;headerlink&#34; title=&#34;Q&amp;amp;A&#34;&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;什么是设备号？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设备号是Linux系统用来管理设备的一种方式，它由**主设备号(Major Device Number)&lt;strong&gt;和&lt;/strong&gt;次设备号(Minor Device Number)**组成。&lt;/p&gt;
&lt;p&gt;主设备号用来区分不同种类的设备，如&lt;strong&gt;字符设备&lt;/strong&gt;、&lt;strong&gt;块设备&lt;/strong&gt;、&lt;strong&gt;网络设备&lt;/strong&gt;等，它用来表示一个特定的驱动程序。&lt;/p&gt;
&lt;p&gt;次设备号用来区分同一类型的多个设备，如不同的硬盘、串口、网卡等，它用来表示使用该驱动程序的特定设备。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以磁盘为例：在同一个系统中，磁盘设备的主设备号是唯一的。比如：scsi设备。次设备号只是在提供给scsi驱动程序内部使用，系统内核直接把次设备号传递给应用程序，scsi设备由驱动程序管理，我们可能有多个scsi设备，每个scsi设备都会分配一个次设备号。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;主设备对应一个特定的驱动程序，所以一个系统里面所有的scsi硬盘使用的都是scsi驱动，所以他们的主设备号是一致的。&lt;/p&gt;
&lt;p&gt;而不同的硬盘通过次设备号来做区分，保证它们的唯一性。&lt;/p&gt;
&lt;p&gt;主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;设备号可以用一个&lt;strong&gt;32位&lt;/strong&gt;的无符号整数表示，其中&lt;strong&gt;高12位&lt;/strong&gt;是主设备号，&lt;strong&gt;低20位&lt;/strong&gt;是次设备号。&lt;/p&gt;
&lt;p&gt;设备号可以通过&lt;code&gt;/dev&lt;/code&gt;目录下的设备文件来访问，也可以通过&lt;code&gt;/proc/devices&lt;/code&gt;文件来查看当前配置的设备号。&lt;code&gt;/proc/devices&lt;/code&gt;类似一个类别，而&lt;code&gt;/dev/&lt;/code&gt;下是某个类别下的项，由他们两个最终确定了一对多关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看主设备号&lt;/span&gt;&lt;br&gt;cat /proc/devices&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看次设备号&lt;/span&gt;&lt;br&gt;ll /dev/&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;c 代表 char 设备  89 主设备 0 次设备&lt;/span&gt;&lt;br&gt;crw------- 1 root root   89,   0 Nov  7 08:23 i2c-0&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;b 代表 block 设备  179 主设备 1 次设备&lt;/span&gt;&lt;br&gt;brw-rw---- 1 root disk  179,   1 Nov  7 08:23 mmcblk1p1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;设备号的分配和使用有一定的规则和约定，以保证设备的唯一性和通用性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态设备号：有一些常用的设备号已经被 Linux 内核开发者给分配掉了，具体分配的内容可以查看文档 Documentation&amp;#x2F;devices.txt。&lt;/li&gt;
&lt;li&gt;动态设备号：Linux 社区推荐使用动态分配设备号，在注册字符设备之前先申请一个设备号，系统会自动给你一个没有被使用的设备号，这样就避免了冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见设备名称：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fb::frame缓冲&lt;br&gt;fd:—–:软驱&lt;br&gt;hd:—–:IDE 硬盘&amp;#x2F;光驱&lt;br&gt;md:—–:RAID设备(Metadisk)&lt;br&gt;dm:—–:LVM设备(DeviceMapper)&lt;br&gt;xd:—–:虚拟机中的硬盘驱动器&lt;br&gt;tty:—–:终端设备&lt;br&gt;psaux:—–:PS&amp;#x2F;2 鼠标设备&lt;br&gt;lp:—–:打印机&lt;br&gt;par:—–:并口&lt;br&gt;pt:—–:伪终端&lt;/p&gt;
&lt;p&gt;s:—–:SCSI设备&lt;br&gt;scd:—–:SCSI音频光驱&lt;br&gt;sd:—–:SCSI硬盘&lt;br&gt;sg:—–:SCSI通用设备&lt;br&gt;sr:—–:SCSI数据光驱&lt;br&gt;st:—–:SCSI磁带&lt;br&gt;cdrom:—–:光驱的符号链接&lt;br&gt;mouse:—–:鼠标设备的符号链接&lt;br&gt;gpmdata:—–:伪设备&lt;br&gt;null:—–:写入消失&lt;br&gt;zero:—–:一直产生零&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/aozhejin/p/15874504.html&#34;&gt;linux设备管理之主设备号与次设备号 - jinzi - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;外设&#34;&gt;&lt;a href=&#34;#外设&#34; class=&#34;headerlink&#34; title=&#34;外设&#34;&gt;&lt;/a&gt;外设&lt;/h1&gt;&lt;h2 id=&#34;LCD&#34;&gt;&lt;a href=&#34;#LCD&#34; class=&#34;headerlink&#34; title=&#34;LCD&#34;&gt;&lt;/a&gt;LCD&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;VSYNC 垂直同步脉冲（Vertical synchronization, Vsync&lt;/strong&gt;）是加在两帧之间。跟水平同步脉冲类似，但它指示着前一帧的结束，和新一帧的开始。 垂直同步脉冲是一个持续时间比较长的脉冲。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HSYNC 水平同步脉冲（Horizontal synchronization pulse, Hsync）&lt;/strong&gt;加在两个扫描行之间。它是一个短小的脉冲，在一行扫描完成之后，它就会出现，指示着这一行扫描完成，同时它也指示着下一行将要开始。&lt;/p&gt;
&lt;h3 id=&#34;LCD屏幕的数据总线接口类型&#34;&gt;&lt;a href=&#34;#LCD屏幕的数据总线接口类型&#34; class=&#34;headerlink&#34; title=&#34;LCD屏幕的数据总线接口类型&#34;&gt;&lt;/a&gt;LCD屏幕的数据总线接口类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;MCU-LCD和RGB-LCD的主要差别&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;RGB-LCD的显存(GRAM)由系统RAM充当。而MCU-LCD的显存由驱动IC决定。&lt;/li&gt;
&lt;li&gt;显存的不一致直接导致了他们更新速率上的差异，MCU-LCD需要发送画点指令来修改驱动IC的显存，而RGB-LCD直接操作系统RAM，由DMA搬运到驱动IC。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;串口屏-UART-接口&#34;&gt;&lt;a href=&#34;#串口屏-UART-接口&#34; class=&#34;headerlink&#34; title=&#34;串口屏 UART 接口&#34;&gt;&lt;/a&gt;串口屏 UART 接口&lt;/h4&gt;&lt;h4 id=&#34;SPI-接口&#34;&gt;&lt;a href=&#34;#SPI-接口&#34; class=&#34;headerlink&#34; title=&#34;SPI 接口&#34;&gt;&lt;/a&gt;SPI 接口&lt;/h4&gt;&lt;h4 id=&#34;MCU-MPU接口&#34;&gt;&lt;a href=&#34;#MCU-MPU接口&#34; class=&#34;headerlink&#34; title=&#34;MCU MPU接口&#34;&gt;&lt;/a&gt;MCU MPU接口&lt;/h4&gt;&lt;p&gt;LCD液晶屏的MCU接口主要针对单片机的领域。&lt;/p&gt;
&lt;p&gt;MCU接口的标准是因特尔提出的8080总线标准，因此在很多文档中用&lt;strong&gt;I80&lt;/strong&gt;来指MCU接口屏。&lt;/p&gt;
&lt;p&gt;MCU接口模式分为&lt;strong&gt;I(intel) 8080模式&lt;/strong&gt;和&lt;strong&gt;M(Motorola) 6800&lt;/strong&gt;模式，主要是时序的区别。数据位传输有8位，16位，18位，24位。&lt;/p&gt;
&lt;p&gt;连线分为：CS&amp;#x2F;RS&amp;#x2F;RD&amp;#x2F;WR&amp;#x2F;。&lt;/p&gt;
&lt;p&gt;优点是控制简单方便，无需时钟和同步信号。&lt;/p&gt;
&lt;p&gt;缺点是要&lt;strong&gt;耗费GRAM&lt;/strong&gt;，所以难以做到大屏，一般都用在4寸以下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i80&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS 片选信号&lt;/li&gt;
&lt;li&gt;RS (D&amp;#x2F;I 数据&amp;#x2F;指令选择线, 置1为写数据, 置0为写命令)&lt;/li&gt;
&lt;li&gt;&amp;#x2F;WR (为0表示写数据)&lt;/li&gt;
&lt;li&gt;&amp;#x2F;RD (为0表示读数据)&lt;/li&gt;
&lt;li&gt;RESET 复位LCD(用固定命令系列 0 1 0来复位)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;m6800&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS 片选信号&lt;/li&gt;
&lt;li&gt;RS (D&amp;#x2F;I 数据&amp;#x2F;指令选择线, 置1为写数据, 置0为写命令)&lt;/li&gt;
&lt;li&gt;&amp;#x2F;WR (读写信号)&lt;/li&gt;
&lt;li&gt;E (锁存信号)&lt;/li&gt;
&lt;li&gt;RESET 复位LCD(用固定命令系列来复位)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;m6800其实际设计思想是与 I80 的思想是一样的，主要区别就是该模式的总线控制读写信号组合在一个引脚上（&amp;#x2F;WR），而增加了一个锁存信号(E)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/c8e0872247ff49de99539712b5b6237f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;RGB接口&#34;&gt;&lt;a href=&#34;#RGB接口&#34; class=&#34;headerlink&#34; title=&#34;RGB接口&#34;&gt;&lt;/a&gt;RGB接口&lt;/h4&gt;&lt;p&gt;LCD液晶屏的RGB接口通过对红(R)、绿(G)、蓝(B)三个颜色通道的变化以及三者组合来得到丰富多彩的颜色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RGB-LCD的显存“GRAM”是由系统内存充当的，因此其大小只受限于系统内存的大小&lt;/strong&gt;，这样RGB-LCD可以做出较大尺寸&lt;/p&gt;
&lt;p&gt;所以LCD液晶屏的RGB接口就是分三原色输入的视频接口 。&lt;/p&gt;
&lt;p&gt;通常一个颜色通道由8bit表示, 即每个颜色通道值得范围是0~255, 通常称&lt;strong&gt;RGB888&amp;#x2F;RGB24&lt;/strong&gt;。三个颜色通道总共能组合出约1678(256×256×256)万种色彩, 简称为1600万色或千万色, 也称为24位色。&lt;/p&gt;
&lt;p&gt;在实际的使用中, 除了&lt;strong&gt;RGB888&amp;#x2F;RGB24&lt;/strong&gt;, 还有**RGB555、RGB565、RGB32、RGB666、RGB16、RGB24、RGB32、ARGB32(A就是alpha，透明度通道)**等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/f5acc963e742489185cd4cf5d1bc774f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;LVDS接口&#34;&gt;&lt;a href=&#34;#LVDS接口&#34; class=&#34;headerlink&#34; title=&#34;LVDS接口&#34;&gt;&lt;/a&gt;LVDS接口&lt;/h4&gt;&lt;p&gt;LCD液晶屏的LVDS接口即Low Voltage Differential Signaling，是一种低压差分信号技术接口。&lt;/p&gt;
&lt;p&gt;克服以TTL电平方式传输宽带高码率数据时功耗大、EMI电磁干扰大等缺点而研制的一种数字视频信号传输方式。&lt;/p&gt;
&lt;p&gt;LVDS输出接口利用非常低的电压摆幅（约350mV）在两条PCB走线或一对平衡电缆上通过差分进行数据的传输，即低压差分信号传输。&lt;/p&gt;
&lt;p&gt;采用LVDS输出接口，可以使得信号在差分PCB线或平衡电缆上以几百Mbit／s的速率传输，由于采用低压和低电流驱动方式，因此，实现了低噪声和低功耗。&lt;/p&gt;
&lt;h4 id=&#34;MIPI接口&#34;&gt;&lt;a href=&#34;#MIPI接口&#34; class=&#34;headerlink&#34; title=&#34;MIPI接口&#34;&gt;&lt;/a&gt;MIPI接口&lt;/h4&gt;&lt;p&gt;LCD液晶屏的MIPI接口是Mobile Industry Processor Interface的缩写。&lt;/p&gt;
&lt;p&gt;MIPI（移动行业处理器接口）是MIPI联盟发起的为移动应用处理器制定的开放标准。&lt;/p&gt;
&lt;p&gt;MIPI是一个比较新的标准，其规范也在不断修改和改进，目前比较成熟的接口应用有DSI(显示接口)和CSI（摄像头接口）。CSI&amp;#x2F;DSI分别是指其承载的是针对Camera或Display应用，都有复杂的协议结构。&lt;/p&gt;
&lt;h3 id=&#34;RGB-驱动原理&#34;&gt;&lt;a href=&#34;#RGB-驱动原理&#34; class=&#34;headerlink&#34; title=&#34;RGB 驱动原理&#34;&gt;&lt;/a&gt;RGB 驱动原理&lt;/h3&gt;&lt;p&gt;主要信号线：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;信号线&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;R[7:0]&lt;/td&gt;
&lt;td&gt;8 根红色数据线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G[7:0]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B[7:0]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DE&lt;/td&gt;
&lt;td&gt;数据使能线 Data Enable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VSYNC&lt;/td&gt;
&lt;td&gt;垂直同步信号线 Vertical synchronization, Vsync&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSYNC&lt;/td&gt;
&lt;td&gt;水平同步信号线 Horizontal synchronization pulse, Hsync&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PCLK&lt;/td&gt;
&lt;td&gt;像素时钟信号线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RESET&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;同步信号示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/image-20230821122002797.png&#34; alt=&#34;image-20230821122002797&#34;&gt;&lt;/p&gt;
&lt;p&gt;Timing 示意图(摘录于GC9503V)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在很多情况下PCLK时钟是不停歇 持续产生的。&lt;/p&gt;
&lt;p&gt;The Pixel clock (PCLK) is running all the time without stopping, it is used for entering VS, HS, DE and DB [23:0] states when there is a rising edge of the PCLK.The PCLK can not be used as the internal clock for other functions of the display module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2021/9b4105ad/image-20230818180021537.png&#34; alt=&#34;image-20230818180021537&#34;&gt;&lt;img src=&#34;/2021/9b4105ad/image-20230818180129919.png&#34; alt=&#34;image-20230818180129919&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HSYNC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Horizontal synchronization pulse, Hsync&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;水平同步信号线&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HLW&amp;#x2F;HSPW&amp;#x2F;THP&lt;/td&gt;
&lt;td&gt;Horizontal Low Pulse width&lt;/td&gt;
&lt;td&gt;HSYNC 信号宽度，也就是 HSYNC 信号持续时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HBP&amp;#x2F;THB&lt;/td&gt;
&lt;td&gt;Horizontal Back Porch&lt;/td&gt;
&lt;td&gt;行同步信号后肩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HACT&amp;#x2F;HOZVAL&amp;#x2F;THD&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;显示一行数据所需的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HFP&amp;#x2F;THF&lt;/td&gt;
&lt;td&gt;Horizontal Front Porch&lt;/td&gt;
&lt;td&gt;行同步信号前肩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;VSYNC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Vertical synchronization, Vsync&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;垂直同步信号线&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VLW&amp;#x2F;VSPW&amp;#x2F;TVP&lt;/td&gt;
&lt;td&gt;Vertical Low Pulse width&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VBP&amp;#x2F;TVB&lt;/td&gt;
&lt;td&gt;Vertical Back Porch&lt;/td&gt;
&lt;td&gt;帧同步信号后肩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VACT&amp;#x2F;LINE&lt;/td&gt;
&lt;td&gt;Vertical&lt;/td&gt;
&lt;td&gt;显示一帧有效数据所需的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VFP&amp;#x2F;TVF&lt;/td&gt;
&lt;td&gt;Vertical Front Porch&lt;/td&gt;
&lt;td&gt;帧同步信号前肩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DCLK&lt;/td&gt;
&lt;td&gt;Data Clock&lt;/td&gt;
&lt;td&gt;像素时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;显示一行所需要的时间就是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HLW + HBP + HACT + HFP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示一帧所需要的时间就是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(HLW + HBP+ HACT + HFP)*(VLW + VBP + VACT + VFP)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DCLK时钟的计算：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据上面的公式计算出一帧数据的时钟数假定未Vclock，帧数为Vfps。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DCLK = Vclock * Vfps&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如一帧需要&lt;code&gt;853440&lt;/code&gt;个CLOCK，帧数设定为&lt;code&gt;60&lt;/code&gt;，那么PCLK时钟就要设置成为&lt;code&gt;853440*60=51206400=51.2064M&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最小显存的计算：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;853*480 分辨率   RGB888 模式&lt;/span&gt;&lt;br&gt;853*480*3 = 1,228,320 Byte = 1.1714 MByte&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1024*600 分辨率  ARGB8888 模式&lt;/span&gt;&lt;br&gt;1024*600*4 = 2457600Byte = 2.4 MByte&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
