{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"alpha_mini\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2021/9b4105ad/",
            "url": "https://www.oikiou.top/2021/9b4105ad/",
            "title": "LinuxAlphaMini",
            "date_published": "2021-07-07T06:46:15.000Z",
            "content_html": "<h1 id=\"汇编基础\"><a href=\"#汇编基础\" class=\"headerlink\" title=\"汇编基础\"></a>汇编基础</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">label</span>： instruction @ comment <br></code></pre></td></tr></table></figure>\n\n<p><strong>label 即标号</strong>，表示地址位置，有些指令前面可能会有标号，这样就可以通过这个标号得到指令的地址，标号也可以用来表示数据地址。注意 label 后面的“：”，任何以“：”结尾的标识符都会被识别为一个标号。<br><strong>instruction 即指令</strong>，也就是汇编指令或伪指令。<br><strong>@符号</strong>，表示后面的是注释<br><strong>comment</strong> 就是注释内容。</p>\n<p>例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">add:<br>MOVS R0, #0X12 @设置 R0=0X12<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意！ ARM 中的指令、伪指令、伪操作、寄存器名等可以全部使用大写，也可以全部使用小写，但是不能大小写混用。</strong>  </p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">.section</span> <span class=\"hljs-string\">.testsection</span> @定义一个 testsetcion 段 <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>.text 表示代码段。  </li>\n<li>.data 初始化的数据段。</li>\n<li>.bss 未初始化的数据段。</li>\n<li>.rodata 只读数据段。</li>\n</ul>\n<p><strong>伪操作:</strong></p>\n<ul>\n<li>.byte 定义单字节数据，比如.byte 0x12。</li>\n<li>.short 定义双字节数据，比如.short 0x1234。</li>\n<li>.long 定义一个 4 字节数据，比如.long 0x12345678。</li>\n<li>.equ 赋值语句，格式为： .equ 变量名，表达式，比如.equ num, 0x12，表示 num&#x3D;0x12。</li>\n<li>.align 数据字节对齐，比如： .align 4 表示 4 字节对齐。</li>\n<li>.end 表示源文件结束。</li>\n<li>.global 定义一个全局符号，格式为： .global symbol，比如： .global _start(汇编程序的默认入口标号是_start  )。</li>\n</ul>\n<p><strong>函数:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">函数名:</span><br>\t函数体<br>\t返回语句<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">/* SVC 中断 */<br>SVC_Handler:<br>    ldr r0, =SVC_Handler<br>    bx r0\t\t\t\t\t@跳转<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用汇编指令\"><a href=\"#常用汇编指令\" class=\"headerlink\" title=\"常用汇编指令\"></a>常用汇编指令</h2><h3 id=\"处理器内部数据传输指令-mov-mrs-msr\"><a href=\"#处理器内部数据传输指令-mov-mrs-msr\" class=\"headerlink\" title=\"处理器内部数据传输指令 mov mrs msr\"></a>处理器内部数据传输指令 mov mrs msr</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>目的</th>\n<th>源</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MOV</td>\n<td>R0</td>\n<td>R1</td>\n<td>将 R1 里面的数据复制到 R0 中。</td>\n</tr>\n<tr>\n<td>MRS</td>\n<td>R0</td>\n<td>CPSR</td>\n<td>将特殊寄存器 CPSR 里面的数据复制到 R0 中。<br/><strong>(特殊寄存器只能由这个指令 读 )</strong></td>\n</tr>\n<tr>\n<td>MSR</td>\n<td>CPSR</td>\n<td>R1</td>\n<td>将 R1 里面的数据复制到特殊寄存器 CPSR 里中。<br/><strong>(特殊寄存器只能由这个指令 写 )</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"存储器访问指令-ldr-str\"><a href=\"#存储器访问指令-ldr-str\" class=\"headerlink\" title=\"存储器访问指令 ldr str\"></a>存储器访问指令 ldr str</h3><p>I.MX6UL中的RAM,寄存器都需要这个指令访问。</p>\n<p>LDR和STR是按照字进行读取和写入的，LDRB和STRB是按字节，LDRH和STRH是按半字操作。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LDR Rd, [Rn , #offset]</td>\n<td>从存储器 Rn+offset 的位置读取数据存放到 Rd 中。</td>\n</tr>\n<tr>\n<td>STR Rd, [Rn, #offset]</td>\n<td>将 Rd 中的数据写入到存储器中的 Rn+offset 位置。</td>\n</tr>\n</tbody></table>\n<h4 id=\"LDR\"><a href=\"#LDR\" class=\"headerlink\" title=\"LDR\"></a>LDR</h4><ul>\n<li><p>读取寄存器值</p>\n</li>\n<li><p>加载立即数到寄存器</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@加载立即数<br>LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004<br>@读取寄存器值<br>LDR R1, [R0] @读取地址 0X0209C004 中的数据到 R1 寄存器中<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"STR\"><a href=\"#STR\" class=\"headerlink\" title=\"STR\"></a>STR</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004<br>LDR R1, =0X12345678 @R1 保存要写入到寄存器的值，即 R1=0X12345678<br>STR R1, [R0] @将 R1 中的值写入到 R0 中的地址上<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"压栈出栈指令-push-pop\"><a href=\"#压栈出栈指令-push-pop\" class=\"headerlink\" title=\"压栈出栈指令 push pop\"></a>压栈出栈指令 push pop</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PUSH &lt;reg list&gt;</td>\n<td>将寄存器列表存入栈中。</td>\n</tr>\n<tr>\n<td>POP &lt;reg list&gt;</td>\n<td>从栈中恢复寄存器列表。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@处理器的堆栈是向下增长的 见下图<br>PUSH &#123;R0~R3, R12&#125; @将 R0~R3 和 R12 压栈<br>PUSH &#123;LR&#125; @将 LR 进行压栈<br><br>POP &#123;LR&#125; @先恢复 LR<br>POP &#123;R0~R3,R12&#125; @在恢复 R0~R3,R12<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/9b4105ad/image-20210707144653945.png\" alt=\"image-20210707144653945\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@这个和上面的是等同的<br>STMFD SP!,&#123;R0~R3, R12&#125; @R0~R3,R12 入栈<br>STMFD SP!,&#123;LR&#125; @LR 入栈<br><br>LDMFD SP!, &#123;LR&#125; @先恢复 LR<br>LDMFD SP!, &#123;R0~R3, R12&#125; @再恢复 R0~R3, R12<br><br><br>LDMFD = LDM + FD<br>STMFD = STM + FD<br>LDM(多个) -&gt; LDR(单个)<br>STM(多个) -&gt; STR(单个)<br>FD = Full Descending 即满递减的意思(根据 ATPCS 规则,ARM 使用的 FD 类型的堆栈， SP 指向最后一个入栈的数值，堆栈是由高地址向下增长的，也就是前面说的向下增长的堆栈，)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"跳转指令-b-bx-bl-blx\"><a href=\"#跳转指令-b-bx-bl-blx\" class=\"headerlink\" title=\"跳转指令 b bx bl blx\"></a>跳转指令 b bx bl blx</h3><p>跳转操作的方法  </p>\n<ol>\n<li>直接使用跳转指令 B、 BL、 BX 等</li>\n<li>直接向 PC 寄存器里面写入数据。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B &lt;label&gt;</td>\n<td>跳转到 label，如果跳转范围超过了+&#x2F;-2KB，<br/>可以指定 B.W &lt;label&gt;使用 32 位版本的跳转指令， 这样可以得到较大范围的 跳转</td>\n</tr>\n<tr>\n<td>BX &lt;Rm&gt;</td>\n<td>间接跳转，跳转到存放于 Rm 中的地址处，并且切换指令集</td>\n</tr>\n<tr>\n<td>BL &lt;label&gt;</td>\n<td>跳转到标号地址，并将返回地址保存在 LR 中。</td>\n</tr>\n<tr>\n<td>BLX &lt;Rm&gt;</td>\n<td>结合 BX 和 BL 的特点，跳转到 Rm 指定的地址，并将返回地 址保存在 LR 中，切换指令集。</td>\n</tr>\n</tbody></table>\n<h4 id=\"B指令\"><a href=\"#B指令\" class=\"headerlink\" title=\"B指令\"></a>B指令</h4><p>这是最简单的跳转指令， B 指令会将 PC 寄存器的值设置为跳转目标地址， 一旦执行 B 指令， ARM 处理器就会立即跳转到指定的目标地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">_start:<br>    ldr sp,=0X80200000 @设置栈指针<br>    b main @跳转到 main 函数<br></code></pre></td></tr></table></figure>\n\n<p>上述代码就是典型的在汇编中初始化 C 运行环境，然后跳转到 C 文件的 main 函数中运行 ，上述代码只是初始化了 SP 指针，有些处理器还需要做其他的初始化，比如初始化 DDR 等等。因为跳转到 C 文件以后再也不会回到汇编了，所以在第 4 行使用了 B 指令来完成跳转  。</p>\n<h4 id=\"BL指令\"><a href=\"#BL指令\" class=\"headerlink\" title=\"BL指令\"></a>BL指令</h4><p>BL 指令相比 B 指令，在跳转之前会在寄存器 LR(R14)中保存当前 PC 寄存器值，所以可以通过将 LR 寄存器中的值重新加载到 PC 中来继续从跳转之前的代码处运行，这是子程序调用一个基本但常用的手段。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">push &#123;r0, r1&#125; \t\t\t@保存 r0,r1<br>cps #0x13 \t\t\t\t@进入 SVC 模式，允许其他中断再次进去<br><br>bl system_irqhandler\t@加载 C 语言中断处理函数到 r2 寄存器中<br><br>cps #0x12 \t\t\t\t@进入 IRQ 模式<br>pop &#123;r0, r1&#125;<br>str r0, [r1, #0X10] \t@中断执行完成，写 EOIR<br></code></pre></td></tr></table></figure>\n\n<p>上述代码中第 5 行就是执行 C 语言版的中断处理函数，当处理完成以后是需要返回来继续执行下面的程序，所以使用了 BL 指令。  </p>\n<h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a>算术运算指令</h3><p>汇编中也可以进行算术运算， 比如加减乘除，常用的运算指令用法如表 7.2.5.1 所示：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>计算公式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ADD Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn + Rm</td>\n<td>加法运算，指令为 ADD</td>\n</tr>\n<tr>\n<td>ADD Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn + #immed</td>\n<td>加法运算，指令为 ADD</td>\n</tr>\n<tr>\n<td>ADC Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn + Rm + 进位</td>\n<td>带进位的加法运算，指令为 ADC</td>\n</tr>\n<tr>\n<td>ADC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn + #immed +进位</td>\n<td>带进位的加法运算，指令为 ADC</td>\n</tr>\n<tr>\n<td>SUB Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn – Rm</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SUB Rd, #immed</td>\n<td>Rd &#x3D; Rd - #immed</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SUB Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn - #immed</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SBC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn - #immed – 借位</td>\n<td>带借位的减法</td>\n</tr>\n<tr>\n<td>SBC Rd, Rn ,Rm</td>\n<td>Rd &#x3D; Rn – Rm – 借位</td>\n<td>带借位的减法</td>\n</tr>\n<tr>\n<td>MUL Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn * Rm</td>\n<td>乘法(32 位)</td>\n</tr>\n<tr>\n<td>UDIV Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &#x2F; Rm</td>\n<td>无符号除法</td>\n</tr>\n<tr>\n<td>SDIV Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &#x2F; Rm</td>\n<td>有符号除法</td>\n</tr>\n</tbody></table>\n<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a>逻辑运算指令</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>计算公式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND Rd, Rn</td>\n<td>Rd &#x3D; Rd &amp;Rn</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>AND Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn &amp;#immed</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>AND Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &amp; Rm</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn</td>\n<td>Rd &#x3D; Rd | Rn</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn | #immed</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn | Rm</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn</td>\n<td>Rd &#x3D; Rd &amp; (~Rn)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn &amp; (~#immed)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn , Rm</td>\n<td>Rd &#x3D; Rn &amp; (~Rm)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>ORN Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn | (#immed)</td>\n<td>按位或非</td>\n</tr>\n<tr>\n<td>ORN Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn | (Rm)</td>\n<td>按位或非</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn</td>\n<td>Rd &#x3D; Rd ^ Rn</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn ^ #immed</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn ^ Rm</td>\n<td>按位异或</td>\n</tr>\n</tbody></table>\n<h1 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h1><h2 id=\"BOOT\"><a href=\"#BOOT\" class=\"headerlink\" title=\"BOOT\"></a>BOOT</h2><p>OOT_MODE[1:0]的值是可以改变的，有两种方式，一种是改写 eFUSE(熔丝)，一种是修改相应的 GPIO 高低电平。  </p>\n<ul>\n<li>BOOT_MODE1 和 BOOT_MODE0 在芯片内部是有 100KΩ下拉电阻的 ，所以默认是0。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>BOOT_MODE[1:0]</th>\n<th>BOOT 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>从 FUSE 启动</td>\n</tr>\n<tr>\n<td>01</td>\n<td>串行下载</td>\n</tr>\n<tr>\n<td>10</td>\n<td>内部 BOOT 模式</td>\n</tr>\n<tr>\n<td>11</td>\n<td>保留</td>\n</tr>\n</tbody></table>\n<h3 id=\"串行下载\"><a href=\"#串行下载\" class=\"headerlink\" title=\"串行下载\"></a>串行下载</h3><p>串行下载的意思就是可以通过 USB 或者 UART 将代码下载到板子上的外置存储设备中，我们可以使用 OTG1 这个 USB口向开发板上的 SD&#x2F;EMMC、 NAND 等存储设备下载代码。  </p>\n<h3 id=\"内部-BOOT-模式\"><a href=\"#内部-BOOT-模式\" class=\"headerlink\" title=\"内部 BOOT 模式\"></a>内部 BOOT 模式</h3><p>芯片会执行内部的 boot ROM 代码，代码会进行硬件初始化(一部分外设)，然后从 boot 设备(就是存放代码的设备、比如 SD&#x2F;EMMC、 NAND)中<strong>将代码拷贝出来复制到指定的 RAM 中，一般是 DDR。</strong>  </p>\n<h2 id=\"BOOT模式-启动设备\"><a href=\"#BOOT模式-启动设备\" class=\"headerlink\" title=\"BOOT模式 启动设备\"></a>BOOT模式 启动设备</h2><p>当 BOOT_MODE 设置为内部 BOOT 模式以后，可以从以下设备中启动：<br>①、接到 EIM 接口的 CS0 上的 16 位 NOR Flash。<br>②、接到 EIM 接口的 CS0 上的 OneNAND Flash。<br>③、接到 GPMI 接口上的 MLC&#x2F;SLC NAND Flash， NAND Flash 页大小支持 2KByte、 4KByte和 8KByte， 8 位宽。<br>④、 Quad SPI Flash。<br>⑤、接到 USDHC 接口上的 SD&#x2F;MMC&#x2F;eSD&#x2F;SDXC&#x2F;eMMC 等设备。<br>⑥、 SPI 接口的 EEPROM。  </p>\n<p>启动设备是通过  BOOT_CFG1[7:0]、 BOOT_CFG2[7:0]和 BOOT_CFG4[7:0]这 24 个配置 IO配置，这 24 个配置 IO 刚好对应着 LCD 的 24 根数据线 LCD_DATA0~LCDDATA23，<strong>当启动完成以后这 24 个 IO 就可以作为 LCD 的数据线使用。</strong>  </p>\n<table>\n<thead>\n<tr>\n<th>boot1</th>\n<th>boot0</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th>启动设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>1</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>串行下载，可以通过 USB 烧写镜像文件。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>SD 卡启动。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>EMMC 启动。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>NAND FLASH 启动。</td>\n</tr>\n</tbody></table>\n<h2 id=\"烧写镜像\"><a href=\"#烧写镜像\" class=\"headerlink\" title=\"烧写镜像\"></a>烧写镜像</h2><p><strong>imxdownload 会在 led.bin前面添加一些头信息，重新生成一个叫做 load.imx 的文件，头部信息包含以下</strong>  </p>\n<ul>\n<li><p>Image vector table，简称 IVT， IVT 里面包含了一系列的地址信息，这些地址信息在ROM 中按照固定的地址存放着。 </p>\n</li>\n<li><p>Boot data，启动数据，包含了镜像要拷贝到哪个地址，拷贝的大小是多少等等。</p>\n</li>\n<li><p>Device configuration data，简称 DCD，设备配置信息，重点是 DDR3 的初始化配置。</p>\n</li>\n<li><p>用户代码可执行文件，比如 led.bin。</p>\n</li>\n</ul>\n<p>最终烧写到 I.MX6U 中的程序其组成为： IVT+Boot data+DCD+.bin 。(3KByte 的 IVT+Boot Data+DCD)</p>\n<p>.bin是从0x87800000这个地方开始，往前推load.imx就是从0x877FF400开始的。</p>\n<h1 id=\"点灯\"><a href=\"#点灯\" class=\"headerlink\" title=\"点灯\"></a>点灯</h1><p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># 定义了一个变量 objs， objs 包含着要生成 ledc.bin 所需的材料： start.o 和 main.o</span><br><span class=\"hljs-comment\"># 这里要注意 start.o 一定要放到最前面！因为在后面链接的时候 start.o 要在最前面，因为 start.o 是最先要执行的文件！</span><br>objs := start.o main.o<br><br><span class=\"hljs-comment\"># 使用依赖文件(objs:=start.o main.o),生成目标可执行文件ledc.bin</span><br><span class=\"hljs-section\">ledc.bin:<span class=\"hljs-variable\">$(objs)</span></span><br>\t<span class=\"hljs-comment\"># 使用编译器 arm-linux-gnueabihf-ld 进行连接,-Ttext指定起始地址是0X87800000</span><br>\t<span class=\"hljs-comment\"># $^ 是所有依赖文件的集合,也就是变量objs的值(start.o main.o)</span><br>\t<span class=\"hljs-comment\"># 展开等价 arm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf start.o main.o</span><br>\tarm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-comment\"># 将ledc.elf转换成ledc.bin文件</span><br>\t<span class=\"hljs-comment\"># $@ 的意思是目标集合，在这里就是 ledc.bin</span><br>\t<span class=\"hljs-comment\"># 展开等价 arm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin</span><br>\tarm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-comment\"># 反汇编，生成 ledc.dis 文件</span><br>\tarm-linux-gnueabihf-objdump -D -m arm ledc.elf &gt; ledc.dis<br><br><span class=\"hljs-comment\"># 下面规则展开等价 </span><br><span class=\"hljs-comment\"># start.o:start.s</span><br><span class=\"hljs-comment\">#\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o start.o start.s</span><br><span class=\"hljs-comment\"># %匹配任意字符</span><br><span class=\"hljs-section\">%.o:%.s</span><br>\t<span class=\"hljs-comment\"># $@ 的意思是目标集合，在这里就是 %.o</span><br>\t<span class=\"hljs-comment\"># $&lt; 所有依赖文件的集合，在这就是 %.s</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.S</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.c</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><br><span class=\"hljs-section\">clean:</span><br>\trm -rf *.o ledc.bin ledc.elf ledc.dis<br></code></pre></td></tr></table></figure>\n\n<p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># 类似于上面的只是用到了变量</span><br>CROSS_COMPILE\t?= arm-linux-gnueabihf-<br>NAME \t\t\t?= ledc<br><br>CC \t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>gcc<br>LD \t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>ld<br>OBJCOPY \t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objcopy<br>OBJDUMP \t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objdump<br>OBJS \t\t\t:= start.o main.o<br><br><span class=\"hljs-variable\">$(NAME)</span>.bin:<span class=\"hljs-variable\">$(OBJS)</span><br>\t<span class=\"hljs-variable\">$(LD)</span> -Timx6ul.lds -o <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-variable\">$(OBJCOPY)</span> -O binary -S <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-variable\">$(OBJDUMP)</span> -D -m arm <span class=\"hljs-variable\">$(NAME)</span>.elf &gt; <span class=\"hljs-variable\">$(NAME)</span>.dis<br>    <br><span class=\"hljs-section\">%.o:%.s</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.S</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.c</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br>\t<br><span class=\"hljs-section\">clean:</span><br>\trm -rf *.o <span class=\"hljs-variable\">$(NAME)</span>.bin <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$(NAME)</span>.dis<br></code></pre></td></tr></table></figure>\n\n<p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">CROSS_COMPILE\t?= arm-linux-gnueabihf-<br><span class=\"hljs-comment\"># 编译后 目标名</span><br>TARGET\t\t\t?= bsp<br><br><span class=\"hljs-comment\"># 编译器相关</span><br>CC\t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>gcc<br>LD\t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>ld<br>OBJCOPY\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objcopy<br>OBJDUMP\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objdump<br><br><span class=\"hljs-comment\"># include dir</span><br>INCDIRS\t\t\t:=  imx6ul  \\<br>\t\t\t\t\tbsp/clk \\<br>\t\t\t\t\tbsp/led \\<br>\t\t\t\t\tbsp/delay<br><br><span class=\"hljs-comment\"># sourc dir</span><br>SRCDIRS \t\t:=  project \\<br>\t\t\t\t\tbsp/clk \\<br>\t\t\t\t\tbsp/led \\<br>\t\t\t\t\tbsp/delay<br><br><span class=\"hljs-comment\"># 这里用到了 patsubst 函数 通过这个函数给 INCDIRS 前面加了一个 -I</span><br><span class=\"hljs-comment\"># 展开 INCLUDE := -I imx6ul -I bsp/clk -I bsp/led -I bsp/delay</span><br>INCLUDE \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, -I %, <span class=\"hljs-variable\">$(INCDIRS)</span>)</span><br><br><span class=\"hljs-comment\"># 这里用到了 foreach 和 wildcard 函数</span><br><span class=\"hljs-comment\"># 展开 SFILES := project/start.S</span><br><span class=\"hljs-comment\"># 展开 CFILES := project/main.c bsp/clk/bsp_clk.c bsp/led/bsp_led.c bsp/delay/bsp_delay.c</span><br>SFILES \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">foreach</span> <span class=\"hljs-built_in\">dir</span>, <span class=\"hljs-variable\">$(SRCDIRS)</span>, $(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(dir)</span>/*.S)</span>)<br>CFILES \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">foreach</span> <span class=\"hljs-built_in\">dir</span>, <span class=\"hljs-variable\">$(SRCDIRS)</span>, $(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(dir)</span>/*.c)</span>)<br><br><span class=\"hljs-comment\"># 这里用到了 notdir 函数 除去路径函数</span><br><span class=\"hljs-comment\"># 展开 SFILENDIR := start.S</span><br><span class=\"hljs-comment\"># 展开 CFILENDIR := main.c bsp_clk.c bsp_led.c bsp_delay.c</span><br>SFILENDIR \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> <span class=\"hljs-variable\">$(SFILES)</span>)</span><br>CFILENDIR \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> <span class=\"hljs-variable\">$(CFILES)</span>)</span><br><br><span class=\"hljs-comment\"># 展开 SOBJS := obj/start.o</span><br><span class=\"hljs-comment\"># 展开 COBJS := obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o</span><br><span class=\"hljs-comment\"># 展开 OBJS  := obj/start.o obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o</span><br>SOBJS \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, obj/%, $(SFILENDIR:.S=.o)</span>)<br>COBJS \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, obj/%, $(CFILENDIR:.c=.o)</span>)<br>OBJS \t\t\t:= <span class=\"hljs-variable\">$(SOBJS)</span> <span class=\"hljs-variable\">$(COBJS)</span><br><br>VPATH \t\t\t:= <span class=\"hljs-variable\">$(SRCDIRS)</span><br><br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: clean</span><br><br><span class=\"hljs-variable\">$(TARGET)</span>.bin : <span class=\"hljs-variable\">$(OBJS)</span><br>\t<span class=\"hljs-variable\">$(LD)</span> -Timx6ul.lds -o <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-variable\">$(OBJCOPY)</span> -O binary -S <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-variable\">$(OBJDUMP)</span> -D -m arm <span class=\"hljs-variable\">$(TARGET)</span>.elf &gt; <span class=\"hljs-variable\">$(TARGET)</span>.dis<br><br><span class=\"hljs-variable\">$(SOBJS)</span> : obj/%.o : %.S<br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 <span class=\"hljs-variable\">$(INCLUDE)</span> -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-variable\">$(COBJS)</span> : obj/%.o : %.c<br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 <span class=\"hljs-variable\">$(INCLUDE)</span> -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><br><span class=\"hljs-section\">clean:</span><br>\trm -rf <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$(TARGET)</span>.dis <span class=\"hljs-variable\">$(TARGET)</span>.bin <span class=\"hljs-variable\">$(COBJS)</span> <span class=\"hljs-variable\">$(SOBJS)</span><br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "linux",
                "alpha_mini",
                "正点原子"
            ]
        }
    ]
}