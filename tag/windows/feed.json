{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"windows\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2022/3db44d04/",
            "url": "https://www.oikiou.top/2022/3db44d04/",
            "title": "Android 文件传输模式 电脑无法识别",
            "date_published": "2022-10-10T14:57:15.000Z",
            "content_html": "<h1 id=\"android-文件传输模式-电脑无法识别\"><a href=\"#android-文件传输模式-电脑无法识别\" class=\"headerlink\" title=\"android 文件传输模式 电脑无法识别\"></a>android 文件传输模式 电脑无法识别</h1><p>最近android手机连接电脑选择传输文件模式，电脑不再识别手机。选择照片模式就没有问题。</p>\n<p>手机选择文件传输模式后 选择自动搜索驱动程序 安装后会 提示“这个inf中的服务安装段落无效”。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>按“Win+X” 点击 “设备管理器”</p>\n</li>\n<li><p>在设备管理器中找到你的手机，名字可能是你的手机型号，可能是未知设备 ，</p>\n</li>\n<li><p>右键选择更新驱动程序.</p>\n</li>\n<li><p>选择 “浏览计算机以查找驱动程序软件”</p>\n</li>\n<li><p>选择 “让我从计算机上的可用驱动程序列表中选取”</p>\n</li>\n<li><p>在列表里面找到“便携设备” (可能没有这一步操作)</p>\n</li>\n<li><p>选择 “MTP USB 设备”</p>\n<p><img src=\"/2022/3db44d04/1636599848857.png\" alt=\"win10系统识别不了USB设备解决方法介绍-Win10系统识别不了USB设备怎么办-53系统之家\"></p>\n</li>\n<li><p>点击 “下一步”</p>\n</li>\n<li><p>回到设备管理器看到设备已经可用正确运作了</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.android.com/studio/run/oem-usb\">安装原始设备制造商 (OEM) USB 驱动程序</a></p>\n<p><a href=\"https://developer.android.com/studio/run/win-usb\">获取 Google USB 驱动程序</a></p>\n",
            "tags": [
                "pc",
                "windows",
                "android",
                "mtp",
                "driver"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/471570a6/",
            "url": "https://www.oikiou.top/2022/471570a6/",
            "title": "SpaceDesk手机用作电脑屏幕",
            "date_published": "2022-08-29T14:57:15.000Z",
            "content_html": "<h1 id=\"SpaceDesk\"><a href=\"#SpaceDesk\" class=\"headerlink\" title=\"SpaceDesk\"></a>SpaceDesk</h1><p>在windows主机上虚拟出一块屏幕, 通过网络传输到其他带屏设备上.</p>\n<ul>\n<li>投屏到手机支持触摸</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"https://www.spacedesk.net/\">https://www.spacedesk.net/</a></p>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"软件没有验证功能-不安全\"><a href=\"#软件没有验证功能-不安全\" class=\"headerlink\" title=\"软件没有验证功能(不安全)\"></a>软件没有验证功能(不安全)</h2><p>有一次在公司用手机客户端, 直接连接上了公司其他同事的电脑屏幕.</p>\n<p>公司的网络ip是dhcp的无法固定, 而且网络质量并不好, 所以我选择电脑开热点 手机连电脑热点.</p>\n<p>防火墙加规则,只允许热点网段的IP入站.</p>\n<p><img src=\"/2022/471570a6/image-20220811195054454.png\" alt=\"image-20220811195054454\"></p>\n<p><img src=\"/2022/471570a6/image-20220811194925793.png\" alt=\"image-20220811194925793\"></p>\n",
            "tags": [
                "windows",
                "spacedesk",
                "投屏"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/a8b000ae/",
            "url": "https://www.oikiou.top/2022/a8b000ae/",
            "title": "RDPWrap",
            "date_published": "2022-07-20T14:57:15.000Z",
            "content_html": "<h1 id=\"RDPWrap\"><a href=\"#RDPWrap\" class=\"headerlink\" title=\"RDPWrap\"></a>RDPWrap</h1><ul>\n<li>RDP程序源Github</li>\n</ul>\n<p><a href=\"https://github.com/stascorp/rdpwrap\">https://github.com/stascorp/rdpwrap</a></p>\n<ul>\n<li>新版RDP配置文件</li>\n</ul>\n<p><a href=\"https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini\">https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini</a></p>\n<p><a href=\"https://github.com/affinityv/INI-RDPWRAP\">https://github.com/affinityv/INI-RDPWRAP</a></p>\n<p>win11可用 <a href=\"https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini\">https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini</a></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li><p><code>install.bat</code>安装</p>\n</li>\n<li><p><code>RDPConf.exe</code>检查是否成功开启</p>\n<p><img src=\"/2022/a8b000ae/image-20211209105711309.png\" alt=\"image-20211209105711309\"></p>\n</li>\n<li><p>新的操作系统一般来说第三项是红色的,如果是绿色的就表示正常可以使用了</p>\n</li>\n<li><p>如果异常按以下进行操作</p>\n<ol>\n<li>管理员打开<code>PowerShell</code>运行<code>get-service termservice|stop-service -force</code>停掉RDP进程</li>\n<li>从<a href=\"https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini\">RDP配置文件</a>下载新的配置文件</li>\n<li>将下载的配置文件复制到<code>C:\\Program Files\\RDP Wrapper\\rdpwrap.ini</code>替换原文件</li>\n<li>管理员打开<code>PowerShell</code>运行<code>get-service termservice|start-service</code>重新运行RDP</li>\n<li><code>RDPConf.exe</code>检查已经成功开启</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "windows",
                "rdpwrap",
                "rdp"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/714f1d49/",
            "url": "https://www.oikiou.top/2022/714f1d49/",
            "title": "Windows下使用Makefile",
            "date_published": "2022-06-21T14:57:15.000Z",
            "content_html": "<h1 id=\"1-安装MinGW\"><a href=\"#1-安装MinGW\" class=\"headerlink\" title=\"1.安装MinGW\"></a>1.安装MinGW</h1><p>在MinGW的bin目录下有一个文件叫<code>mingw32-make.exe</code> 运行它就跟<code>make</code>指令类似</p>\n<p><img src=\"/2022/714f1d49/watermarkpic_center.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-CMD-终端运行Makefile-mingw32-make\"><a href=\"#2-CMD-终端运行Makefile-mingw32-make\" class=\"headerlink\" title=\"2. CMD 终端运行Makefile (mingw32-make)\"></a>2. CMD 终端运行Makefile (mingw32-make)</h1><p>在cmd终端下直接输入<code>mingw32-make</code>然后回车就可以进行编译了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Microsoft Windows [版本 10.0.16299.967]<br>(c) 2017 Microsoft Corporation。保留所有权利。<br><br>D:\\Project\\Code\\C++\\hello&gt; mingw32-make.exe<br>g++    -c -o main.o main.cpp<br>g++ -std=c++17 -o main main.o<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "windows",
                "makefile"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/ddff0c71/",
            "url": "https://www.oikiou.top/2022/ddff0c71/",
            "title": "MS-DOS",
            "date_published": "2022-06-21T14:57:15.000Z",
            "content_html": "<h1 id=\"MS-DOS\"><a href=\"#MS-DOS\" class=\"headerlink\" title=\"MS-DOS\"></a>MS-DOS</h1><p><strong>CMD(windows-commands)</strong></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands\">Windowscommands</a></p>\n<p>在cmd内<code>/?</code>即可获得帮助信息</p>\n<h2 id=\"FOR\"><a href=\"#FOR\" class=\"headerlink\" title=\"FOR\"></a>FOR</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">对一组文件中的每一个文件执行某个特定命令。<br><br>FOR <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>  <span class=\"hljs-comment\">%variable  指定一个单一字母可替换的参数。</span><br>  (set)      指定一个或一组文件。可以使用通配符。<br>  command    指定对每个文件执行的命令。<br>  command-parameters <br>             为特定命令指定参数或命令行开关。<br><br>在批处理程序中使用 FOR 命令时，指定变量请使用 <span class=\"hljs-comment\">%%variable</span><br>而不要用 <span class=\"hljs-comment\">%variable。变量名称是区分大小写的，所以 %i 不同于 %I.</span><br><br>如果启用命令扩展，则会支持下列 FOR 命令的其他格式:<br><br>FOR /D <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>    如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。<br><br>FOR /R [[drive:]path] <span class=\"hljs-comment\">%variable IN (set) DO command [command-parameters]</span><br><br>    检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。<br>    如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，<br>    则枚举该目录树。<br><br>FOR /L <span class=\"hljs-comment\">%variable IN (start,step,end) DO command [command-parameters]</span><br><br>    该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列<br>    1 2 3 4 5，(5,-1,1)将产生序列(5 4 3 2 1)<br><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (file-set) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&quot;string&quot;) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&#x27;command&#x27;) DO command [command-parameters]</span><br><br>    或者，如果有 usebackq 选项:<br><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (file-set) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&quot;string&quot;) DO command [command-parameters]</span><br>FOR /F [&quot;options&quot;] <span class=\"hljs-comment\">%variable IN (&#x27;command&#x27;) DO command [command-parameters]</span><br><br>    fileset 为一个或多个文件名。继续到 fileset 中的下一个文件之前，<br>    每份文件都被打开、读取并经过处理。处理包括读取文件，将其分成一行行的文字，<br>    然后将每行解析成零或更多的符号。然后用已找到的符号字符串变量值调用 For 循环。<br>    以默认方式，/F 通过每个文件的每一行中分开的第一个空白符号。跳过空白行。<br>    你可通过指定可选 &quot;options&quot; 参数替代默认解析操作。这个带引号的字符串包括一个<br>    或多个指定不同解析选项的关键字。这些关键字为:<br><br>        eol=c           - 指一个行注释字符的结尾(就一个)<br>        skip=n          - 指在文件开始时忽略的行数。<br>        delims=xxx      - 指分隔符集。这个替换了空格和制表符的<br>                          默认分隔符集。<br>        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代<br>                          的 for 本身。这会导致额外变量名称的分配。m-n<br>                          格式为一个范围。通过 nth 符号指定 mth。如果<br>                          符号字符串中的最后一个字符星号，<br>                          那么额外的变量将在最后一个符号解析之后<br>                          分配并接受行的保留文本。<br>        usebackq        - 指定新语法已在下类情况中使用:<br>                          在作为命令执行一个后引号的字符串并且一个单<br>                          引号字符为文字字符串命令并允许在 file-set<br>                          中使用双引号扩起文件名称。<br><br>    某些范例可能有助:<br><br>FOR /F &quot;eol=; tokens=2,3* delims=, &quot; <span class=\"hljs-comment\">%i in (myfile.txt) do @echo %i %j %k</span><br><br>    会分析 myfile.txt 中的每一行，忽略以分号打头的那些行，将<br>    每行中的第二个和第三个符号传递给 for 函数体，用逗号和/或<br>    空格分隔符号。请注意，此 for 函数体的语句引用 <span class=\"hljs-comment\">%i 来</span><br>    获得第二个符号，引用 <span class=\"hljs-comment\">%j 来获得第三个符号，引用 %k</span><br>    来获得第三个符号后的所有剩余符号。对于带有空格的文件<br>    名，你需要用双引号将文件名括起来。为了用这种方式来使<br>    用双引号，还需要使用 usebackq 选项，否则，双引号会<br>    被理解成是用作定义某个要分析的字符串的。<br><br>    <span class=\"hljs-comment\">%i 在 for 语句中显式声明，%j 和 %k 是通过</span><br>    tokens= 选项隐式声明的。可以通过 tokens= 一行<br>    指定最多 26 个符号，只要不试图声明一个高于字母 &quot;z&quot; 或<br>    &quot;Z&quot; 的变量。请记住，FOR 变量是单一字母、分大小写和全局的变量；<br>    而且，不能同时使用超过 52 个。<br><br>    还可以在相邻字符串上使用 FOR /F 分析逻辑，方法是，<br>    用单引号将括号之间的 file-set 括起来。这样，该字符<br>    串会被当作一个文件中的一个单一输入行进行解析。<br><br>    最后，可以用 FOR /F 命令来分析命令的输出。方法是，将<br>    括号之间的 file-set 变成一个反括字符串。该字符串会<br>    被当作命令行，传递到一个子 CMD.EXE，其输出会被捕获到<br>    内存中，并被当作文件分析。如以下例子所示:<br><br>      FOR /F &quot;usebackq delims==&quot; <span class=\"hljs-comment\">%i IN (`set`) DO @echo %i</span><br><br>    会枚举当前环境中的环境变量名称。<br><br>另外，FOR 变量参照的替换已被增强。你现在可以使用下列<br>选项语法:<br><br>     <span class=\"hljs-comment\">%~I          - 删除任何引号(&quot;)，扩展 %I</span><br>     <span class=\"hljs-comment\">%~fI        - 将 %I 扩展到一个完全合格的路径名</span><br>     <span class=\"hljs-comment\">%~dI        - 仅将 %I 扩展到一个驱动器号</span><br>     <span class=\"hljs-comment\">%~pI        - 仅将 %I 扩展到一个路径</span><br>     <span class=\"hljs-comment\">%~nI        - 仅将 %I 扩展到一个文件名</span><br>     <span class=\"hljs-comment\">%~xI        - 仅将 %I 扩展到一个文件扩展名</span><br>     <span class=\"hljs-comment\">%~sI        - 扩展的路径只含有短名</span><br>     <span class=\"hljs-comment\">%~aI        - 将 %I 扩展到文件的文件属性</span><br>     <span class=\"hljs-comment\">%~tI        - 将 %I 扩展到文件的日期/时间</span><br>     <span class=\"hljs-comment\">%~zI        - 将 %I 扩展到文件的大小</span><br>     <span class=\"hljs-comment\">%~$PATH:I   - 查找列在路径环境变量的目录，并将 %I 扩展</span><br>                   到找到的第一个完全合格的名称。如果环境变量名<br>                   未被定义，或者没有找到文件，此组合键会扩展到<br>                   空字符串<br><br>可以组合修饰符来得到多重结果:<br><br>     <span class=\"hljs-comment\">%~dpI       - 仅将 %I 扩展到一个驱动器号和路径</span><br>     <span class=\"hljs-comment\">%~nxI       - 仅将 %I 扩展到一个文件名和扩展名</span><br>     <span class=\"hljs-comment\">%~fsI       - 仅将 %I 扩展到一个带有短名的完整路径名</span><br>     <span class=\"hljs-comment\">%~dp$PATH:I - 搜索列在路径环境变量的目录，并将 %I 扩展</span><br>                   到找到的第一个驱动器号和路径。<br>     <span class=\"hljs-comment\">%~ftzaI     - 将 %I 扩展到类似输出线路的 DIR</span><br><br>在以上例子中，<span class=\"hljs-comment\">%I 和 PATH 可用其他有效数值代替。%~ 语法</span><br>用一个有效的 FOR 变量名终止。选取类似 <span class=\"hljs-comment\">%I 的大写变量名</span><br>比较易读，而且避免与不分大小写的组合键混淆。<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h2><p>列出文件</p>\n<h2 id=\"cls\"><a href=\"#cls\" class=\"headerlink\" title=\"cls\"></a>cls</h2><p>清屏</p>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><h2 id=\"mklinkC盘程序搬家\"><a href=\"#mklinkC盘程序搬家\" class=\"headerlink\" title=\"mklinkC盘程序搬家\"></a>mklinkC盘程序搬家</h2><p>命令参数</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">mklink<span class=\"hljs-string\">[[/d]|[/h]|[/j]]</span>&lt;Link&gt;&lt;Target&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;d</td>\n<td>创建目录符号链接。默认情况下，mklink会创建文件符号链接。</td>\n</tr>\n<tr>\n<td>&#x2F;H</td>\n<td>创建硬链接而不是符号链接。</td>\n</tr>\n<tr>\n<td>&#x2F;J</td>\n<td>创建目录连接。</td>\n</tr>\n<tr>\n<td>&lt;链接&gt;</td>\n<td>指定正在创建的符号链接的名称。</td>\n</tr>\n<tr>\n<td>&lt;目标&gt;</td>\n<td>指定新符号链接引用的路径（相对或绝对）。</td>\n</tr>\n<tr>\n<td>&#x2F;？</td>\n<td>在命令提示符下显示帮助。</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "windows",
                "ms-dos"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/fc18738/",
            "url": "https://www.oikiou.top/2022/fc18738/",
            "title": "PC Software",
            "date_published": "2022-01-21T14:57:15.000Z",
            "content_html": "<h1 id=\"PC-Windows\"><a href=\"#PC-Windows\" class=\"headerlink\" title=\"PC Windows\"></a>PC Windows</h1><h1 id=\"扫描修复系统\"><a href=\"#扫描修复系统\" class=\"headerlink\" title=\"扫描修复系统\"></a>扫描修复系统</h1><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">sfc <span class=\"hljs-string\">/SCANNOW</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h1><h3 id=\"刷新DNS\"><a href=\"#刷新DNS\" class=\"headerlink\" title=\"刷新DNS\"></a>刷新DNS</h3><p><code>ipconfig /flushdns</code></p>\n<h3 id=\"nslookup\"><a href=\"#nslookup\" class=\"headerlink\" title=\"nslookup\"></a>nslookup</h3><p><img src=\"/2022/fc18738/image-20220402175405670.png\" alt=\"image-20220402175405670\"></p>\n<p><img src=\"/2022/fc18738/image-20220402175432533.png\" alt=\"image-20220402175432533\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nslookup<br><br><span class=\"hljs-comment\"># 设置查询类型 name server</span><br><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=ns<br><br><span class=\"hljs-comment\"># 查询根服务器</span><br>.<br><br><span class=\"hljs-comment\"># Non-authoritative 代表非权威应答 一般是缓存来的</span><br><span class=\"hljs-comment\"># authoritative 表权威应答 根服务器直接返回的</span><br><br><span class=\"hljs-comment\"># 设置查询类型 a ipv4地址</span><br><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=a<br><br><span class=\"hljs-comment\"># 查询根服务器的ipv4地址</span><br>.<br><br><span class=\"hljs-comment\"># 设置dns服务器地址</span><br>server 198.41.0.4<br><br><span class=\"hljs-comment\"># 设置查询类型 name server</span><br><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=ns<br><br><span class=\"hljs-comment\"># 查询cf域名服务器</span><br>cf.<br><br><span class=\"hljs-comment\"># 设置查询类型 a ipv4地址</span><br><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">type</span>=a<br><br><span class=\"hljs-comment\"># 查询cf域名服务器的ipv4地址</span><br>cf.<br><br>..........<br><br><br>lager.cf.<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"硬链接-amp-符号链接\"><a href=\"#硬链接-amp-符号链接\" class=\"headerlink\" title=\"硬链接&amp;符号链接\"></a>硬链接&amp;符号链接</h1><blockquote>\n<p>  mklink<br>  创建符号链接。</p>\n<p>  MKLINK [[&#x2F;D] | [&#x2F;H] | [&#x2F;J]] Link Target</p>\n<pre><code class=\"hljs\">      /D      创建目录符号链接。默认为文件\n              符号链接。\n      /H      创建硬链接而非符号链接。\n      /J      创建目录联接。\n      Link    指定新的符号链接名称。\n      Target  指定新链接引用的路径\n              (相对或绝对)。\n</code></pre>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>硬链接（Hard Link）</th>\n<th>目录联接（Junction Point）</th>\n<th>符号链接（Symbolic Link）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令</td>\n<td><code>mklink /H Link Target</code></td>\n<td><code>mklink /J Link Target</code></td>\n<td><code>mklink /D Link Target</code></td>\n</tr>\n<tr>\n<td>作用</td>\n<td>为某文件创建别名，可让不同的路径对应同一个文件的数据。</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>链接到文件</td>\n<td>✔️</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>链接到文件夹</td>\n<td>❌</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>需要提升为管理员权限</td>\n<td>需要</td>\n<td>不需要</td>\n<td>通常需要 <code>[坑1]</code></td>\n</tr>\n<tr>\n<td>跨驱动器卷（盘符）</td>\n<td>❌</td>\n<td>✔️（仅本地计算机）</td>\n<td>✔️（包括 SMB 文件或路径）</td>\n</tr>\n<tr>\n<td>操作系统支持</td>\n<td>Windows NT 3.1 开始支持 Windows 2000 开始有 API <code>CreateHardLink()</code> Windows NT 6.0 开始能使用 <code>mklink /H</code></td>\n<td>Windows 2000+</td>\n<td>Windows Vista+</td>\n</tr>\n<tr>\n<td>可链接到不存在的目标</td>\n<td>❌</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>可链接到相对目录</td>\n<td>❌</td>\n<td>❌（可以使用相对路径创建，但创建完即变绝对路径）</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>删除方法</td>\n<td>del</td>\n<td>rd</td>\n<td>rd &#x2F; del</td>\n</tr>\n<tr>\n<td>当链接被单独删除后</td>\n<td>只有所有指向原始文件的硬链接和原始文件全部删除后文件数据才会被删除。</td>\n<td>Windows Vista 之后原始文件夹不受影响；Windows 2000&#x2F;XP&#x2F;2003 会导致原始子文件夹被删除。</td>\n<td>原始文件夹不受影响。</td>\n</tr>\n<tr>\n<td>当原始文件被单独删除后</td>\n<td>硬链接依然能正常访问到文件的数据。</td>\n<td>目录联接失效，指向不存在的目录。</td>\n<td>符号链接失效，指向不存在的目录</td>\n</tr>\n</tbody></table>\n<p>比较 Windows 上四种不同的文件（夹）链接方式（NTFS 的硬链接、目录联接、符号链接，和大家熟知的快捷方式）</p>\n<p><a href=\"https://blog.walterlv.com/post/ntfs-link-comparisons.html\">https://blog.walterlv.com/post/ntfs-link-comparisons.html</a></p>\n<p>Windows中的硬链接和软链接（hard link 和 Symbolic link）</p>\n<p><a href=\"https://www.cnblogs.com/Naylor/p/7597869.html\">https://www.cnblogs.com/Naylor/p/7597869.html</a></p>\n<p>Windows下mklink使用, 硬链接, 软链接和快捷方式的区别</p>\n<p><a href=\"https://blog.csdn.net/guyue35/article/details/49761347\">https://blog.csdn.net/guyue35/article/details/49761347</a></p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">创建链接:<br>mklink /j D:\\System\\Desktop\\Project  D:\\Project<br><br><br><br>删除的命令：<br><span class=\"hljs-built_in\">rmdir</span> 链接名称<br>例如：<span class=\"hljs-built_in\">rmdir</span> d:\\recivefiles <span class=\"hljs-built_in\">rmdir</span> d:\\develop<br>删除虚拟链接目录，并不会删除真实文件，注意，不能使用<span class=\"hljs-built_in\">del</span>命令，<span class=\"hljs-built_in\">del</span>命令会删除真实文件<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>拓展 :  linux下的软链接和硬链接</p>\n<blockquote>\n<p>  同样，在Windows下，链接的功能也是被实现了的（虽然我们不会经常发现）。在Linux下，我们都知道链接有两种形式：硬链接和软链接。所谓硬链接，我们可以理解为硬链接持有的是文件本身（而不是路径）的引用。也就是说，当我们给一个名为a.txt的文件建立硬链接（b.txt）后，那么b.txt指向的位置就是a.txt这个文件本身，而此时，a.txt和b.txt是同级平行的，这个文本文件此时同时拥有两个文件名。当我们删除a.txt时，只是删除了a.txt这个文件名，这个文件仍然被b.txt所引用，所以我们还能够通过b.txt访问。而软链接，持有的则是原链接路径。比如a.txt位于 <del>&#x2F;Document&#x2F;a.txt ，那么为其建立软链接b.txt的内容就是”</del>&#x2F;Document&#x2F;a.txt”，此时，我们访问b.txt，其实是在按照a.txt的路径去访问a.txt。如果我们这时删除a.txt这个文件，那么b.txt也会无效，因为路径已经断掉。</p>\n</blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><h2 id=\"窗口主题色-活动和非活动窗口\"><a href=\"#窗口主题色-活动和非活动窗口\" class=\"headerlink\" title=\"窗口主题色 活动和非活动窗口\"></a>窗口主题色 活动和非活动窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">regedit 编辑<br>计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\DWM<br><br><span class=\"hljs-comment\"># 活动窗口颜色 </span><br><span class=\"hljs-comment\"># 32位值就是 颜色的RGB 注意的是这里不知道是大小端的问题还是其他什么问题需要RGB数值转换成BGR样式</span><br>AccentColor <br><br><span class=\"hljs-comment\"># 非活动窗口颜色 </span><br>AccentColorInactive <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加永久路由\"><a href=\"#添加永久路由\" class=\"headerlink\" title=\"添加永久路由\"></a>添加永久路由</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">route -p add <br><br>route ADD 157.0.0.0 MASK 255.0.0.0  157.55.80.1 METRIC 3 IF 2<br>       destination^      ^mask      ^gateway     metric^    ^<br>                                                   Interface^<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"各类特定文件夹\"><a href=\"#各类特定文件夹\" class=\"headerlink\" title=\"各类特定文件夹\"></a>各类特定文件夹</h2><p><code>win+r</code>输入对应内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动文件夹</span><br>shell:startup<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">发送到右键菜单</span><br>shell:sendto<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改WIFI位置\"><a href=\"#修改WIFI位置\" class=\"headerlink\" title=\"修改WIFI位置\"></a>修改WIFI位置</h2><figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs moonscript\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Profiles<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>展开“Profiles”项，其下面的子项是都是一个网络连接，可以通过查看“ProfilesName”来分辨，双击打开“<code>Category</code>”，</li>\n<li>打开编辑窗口后，修改“数值数据”，这里数值0代表公用网络，1代表专用网络，2代表域网络，设置完后点击确定即可。</li>\n</ul>\n<h2 id=\"填加开机启动\"><a href=\"#填加开机启动\" class=\"headerlink\" title=\"填加开机启动\"></a>填加开机启动</h2><ol>\n<li>添加<code>Windows</code>开机自动执行<code>init-wsl.bat</code>脚本</li>\n</ol>\n<p><code>Windows</code>键+<code>R</code>，输入<code>regedit</code>打开注册列表，在地址栏输入<code>计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>定位到对应注册表位置，右键新建一个字符串值，键入<code>init-wsl.bat</code>脚本绝对路径即可，如下图！</p>\n<p><img src=\"/2022/fc18738/regedit-add-init-wsl.png\" alt=\"set regedit service\"></p>\n<p>重启计算机即可发现，<code>WSL</code>中的<code>Docker</code>服务已经被启动，通过<code>192.168.33.10</code>可以直接访问到<code>WSL</code>内部的网络！</p>\n",
            "tags": [
                "pc",
                "software",
                "windows"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/9f39ed86/",
            "url": "https://www.oikiou.top/2021/9f39ed86/",
            "title": "VSCode多行编辑被占用",
            "date_published": "2021-12-15T15:23:05.000Z",
            "content_html": "<p>关键词:</p>\n<p>查看 Windows 10 快捷键 占用 VSCode 多行编辑 ctrl alt uparrow</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>VSCode 的多行编辑 ctrl + alt +uparrow 失效.<br>电脑环境:win10 19042.1387</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li><p>检查VSCode的快捷键设置,<img src=\"https://img-blog.csdnimg.cn/c85c8402840543d4a4b7afcf26e04bc0.png\" alt=\"VSCode1\"><br>看起来是没有问题的,</p>\n</li>\n<li><p>以前也遇到过这个情况当时是把VSCode重装后就好了看,这次试了试似乎并不行.</p>\n</li>\n<li><p>检查是不是其他软件占用了全局快捷键,搜索发现很多相关软件都失效不能用.</p>\n<ul>\n<li>PChunter <strong>很久没更新了不支持我的电脑的当前版本</strong></li>\n<li>FindGlobalHotkey  <strong>无效</strong></li>\n<li>spy++ <strong>太复杂,可能我不太会用也是没找到是不是什么按键占用了</strong></li>\n<li><a href=\"https://www.zhihu.com/question/288316686/answer/1656650885\">win10怎么查看快捷键是被什么占用了？</a></li>\n<li><a href=\"https://github.com/BlackINT3/OpenArk\">OpenArk </a> <strong>(最终解决方案)</strong></li>\n</ul>\n</li>\n<li><p>github下载OpenArk后打开就能看到快捷键占用, 输入对应快捷键就可以筛选,<br><strong>最终找到万恶之源, 电脑插着耳机没有发现在播歌, 网易云关掉全局快捷键, 问题消失</strong><br><img src=\"/2021/9f39ed86/9b96c314b5994739a4db98c7d00c834b.png\" alt=\"VSCode2\"></p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/BlackINT3/OpenArk\">https://github.com/BlackINT3/OpenArk</a><br><img src=\"/2021/9f39ed86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Li05rW355qE5Z-O,size_20,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"VSCode3\"></p>\n<h1 id=\"其他冲突的快捷键\"><a href=\"#其他冲突的快捷键\" class=\"headerlink\" title=\"其他冲突的快捷键\"></a>其他冲突的快捷键</h1><p>ctrl + shift + f 和微软的拼音输入法有冲突</p>\n",
            "tags": [
                "windows",
                "vscode"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/784ee20b/",
            "url": "https://www.oikiou.top/2021/784ee20b/",
            "title": "WSL",
            "date_published": "2021-11-29T05:12:15.000Z",
            "content_html": "<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p><em><strong>IF</strong></em> (Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11)</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">一键自动安装 WSL</a></p>\n<p><em><strong>ELSE</strong></em></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual\">旧版 WSL 的手动安装步骤(可以更改WSL系统的存放位置)</a></p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><blockquote>\n<p>   手动安装的优点是避免Linux的镜像文件(<code>ext4.vhdx</code>)存放在C盘, 存放<code>ext4.vhdx</code>的位置可以自定义.</p>\n</blockquote>\n<p>以下指令需要在<strong>管理员</strong>下的 powershell 运行</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 1 开启Microsoft-Windows-Subsystem-Linux</span><br>dism.exe <span class=\"hljs-regexp\">/online /</span>enable-feature <span class=\"hljs-regexp\">/featurename:Microsoft-Windows-Subsystem-Linux /</span>all /norestart<br><br><span class=\"hljs-comment\"># 2 开启VirtualMachinePlatform</span><br>dism.exe <span class=\"hljs-regexp\">/online /</span>enable-feature <span class=\"hljs-regexp\">/featurename:VirtualMachinePlatform /</span>all /norestart<br><br><span class=\"hljs-comment\"># 3 重启</span><br><span class=\"hljs-comment\"># reboot</span><br><br><span class=\"hljs-comment\"># 4 安装WLS2内核更新包</span><br>https:<span class=\"hljs-regexp\">//</span>wslstorestorage.blob.core.windows.net<span class=\"hljs-regexp\">/wslblob/</span>wsl_update_x64.msi<br><br><span class=\"hljs-comment\"># 5 将WSL2设为默认</span><br>wsl --set-default-version <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># 6 下载离线包(可以避免将WSL的系统装在C盘)</span><br>https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/zh-cn/</span>windows<span class=\"hljs-regexp\">/wsl/i</span>nstall-manual<br><span class=\"hljs-comment\"># example</span><br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wslubuntu2004<br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wsl-ubuntu-<span class=\"hljs-number\">1804</span><br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wsl-debian-gnulinux<br><span class=\"hljs-comment\"># 离线包下载完成后解压缩 运行目录内的ubuntu.exe</span><br><span class=\"hljs-comment\"># 会提示输入用户名和密码</span><br><br><span class=\"hljs-comment\"># 7 (可选)安装 windows终端</span><br>https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/en-us/</span>windows<span class=\"hljs-regexp\">/terminal/g</span>et-started 可选 <br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"U盘挂载\"><a href=\"#U盘挂载\" class=\"headerlink\" title=\"U盘挂载\"></a>U盘挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1 新建文件夹g</span><br>sudo mkdir /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">2 挂载盘符g</span><br>sudo mount -t drvfs g: /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">大功告成。进入/mnt/g即可操作</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">弹出移动硬盘，这样才能在windows下正常弹出，否则是会一直占用的。</span><br>sudo umount /mnt/g<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"映射wsl文件系统\"><a href=\"#映射wsl文件系统\" class=\"headerlink\" title=\"映射wsl文件系统\"></a>映射wsl文件系统</h2><p><img src=\"/2021/784ee20b/image-20211129131237501.png\" alt=\"image-20211129131237501\"></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">\\\\wsl<span class=\"hljs-symbol\">$</span><br></code></pre></td></tr></table></figure>\n\n<p>通过 <code>\\\\wsl$</code> 访问 Linux 文件时将使用 WSL 分发版的默认用户。 因此，任何访问 Linux 文件的 Windows 应用都具有与默认用户相同的权限。</p>\n<h2 id=\"wsl关机\"><a href=\"#wsl关机\" class=\"headerlink\" title=\"wsl关机\"></a>wsl关机</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wsl --shutdown<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"wsl-配置文件\"><a href=\"#wsl-配置文件\" class=\"headerlink\" title=\"wsl 配置文件\"></a>wsl 配置文件</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"hljs-section\">[wsl2]</span><br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">4</span>GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br><span class=\"hljs-attr\">processors</span>=<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br><span class=\"hljs-attr\">kernel</span>=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br><span class=\"hljs-attr\">kernelCommandLine</span> = vsyscall=emulate<br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br><span class=\"hljs-comment\"># 虚拟内存</span><br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">8</span>GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br><span class=\"hljs-attr\">swapfile</span>=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br><span class=\"hljs-attr\">pageReporting</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br><span class=\"hljs-attr\">localhostforwarding</span>=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br><span class=\"hljs-attr\">nestedVirtualization</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br><span class=\"hljs-attr\">debugConsole</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>打开powershell输入<code>~</code>切换目录</p>\n<p><code>code .wslconfig</code>编辑配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[wsl2]</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">localhostForwarding</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"WSL-配置代理\"><a href=\"#WSL-配置代理\" class=\"headerlink\" title=\"WSL 配置代理\"></a>WSL 配置代理</h2><p><strong>获取主机 IP      主机 IP 保存在 &#x2F;etc&#x2F;resolv.conf 中</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> hostip=$(<span class=\"hljs-built_in\">cat</span> /etc/resolv.conf |grep -oP <span class=\"hljs-string\">&#x27;(?&lt;=nameserver\\ ).*&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10880&quot;</span><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>在wsl尝试用<code>export all_proxy</code>socks5做代理感觉总是调不通, 换成http就好了  不知道是为啥</li>\n</ul>\n<h2 id=\"wsl-conf-wslconfig配置文件\"><a href=\"#wsl-conf-wslconfig配置文件\" class=\"headerlink\" title=\"wsl.conf .wslconfig配置文件\"></a>wsl.conf .wslconfig配置文件</h2><p>参考文档:</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config\">WSL 中的高级设置配置</a></p>\n<blockquote>\n<h2 id=\"wsl-conf\"><a href=\"#wsl-conf\" class=\"headerlink\" title=\"wsl.conf\"></a>wsl.conf</h2><ul>\n<li>以 <code>/etc</code> unix 文件的形式存储在分发目录中。</li>\n<li>用于按分布配置设置。 此文件中配置的设置将仅应用于包含存储此文件的目录的特定 Linux 分发版。</li>\n<li>可用于版本、WSL 1 或 WSL 2 运行的分发版。</li>\n<li>若要访问已安装的发行版的 <code>/etc</code> 目录，请使用发行版的命令行和 <code>cd /</code> 访问根目录，然后使用 <code>ls</code> 列出文件或使用 <code>explorer.exe .</code> 在 Windows 文件资源管理器中查看。 目录路径应如下所示： <code>/etc/wsl.conf</code></li>\n</ul>\n<h2 id=\"wslconfig\"><a href=\"#wslconfig\" class=\"headerlink\" title=\".wslconfig\"></a>.wslconfig</h2><ul>\n<li>存储在目录中 <code>%UserProfile%</code> 。</li>\n<li>用于跨作为 WSL 2 版本运行的所有已安装 Linux 分发版全局配置设置。</li>\n<li><strong>只能用于 WSL 2 运行的分发</strong>版。 作为 WSL 1 运行的分发版不会受到此配置的影响，因为它们未作为虚拟机运行。</li>\n<li>要访问 <code>%UserProfile%</code> 目录，请在 PowerShell 中使用 <code>cd ~</code> 访问主目录（通常是用户配置文件 <code>C:\\Users\\&lt;UserName&gt;</code>），或者可以打开 Windows 文件资源管理器并在地址栏中输入 <code>%UserProfile%</code>。 目录路径应如下所示： <code>C:\\Users\\&lt;UserName&gt;\\.wslconfig</code></li>\n</ul>\n</blockquote>\n<h3 id=\"wsl-conf-的配置-unix\"><a href=\"#wsl-conf-的配置-unix\" class=\"headerlink\" title=\"wsl.conf 的配置 (unix )\"></a>wsl.conf 的配置 (unix )</h3><p>wsl.conf 文件支持四个部分：<code>automount</code>、<code>network</code>、<code>interop</code>、<code>user</code> 、<code>[boot]</code>。 </p>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Automatically mount Windows drive when the distribution is launched</span><br>[automount]<br><br><span class=\"hljs-comment\"># Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won&#x27;t be mounted automatically, but need to be mounted manually or with fstab.</span><br>enabled = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c. </span><br>root = /<br><br><span class=\"hljs-comment\"># DrvFs-specific options can be specified.  </span><br>options = <span class=\"hljs-string\">&quot;metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off&quot;</span><br><br><span class=\"hljs-comment\"># Sets the `/etc/fstab` file to be processed when a WSL distribution is launched.</span><br>mountFsTab = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Network host settings that enable the DNS server used by WSL 2. This example changes the hostname, sets generateHosts to false, preventing WSL from the default behavior of auto-generating /etc/hosts, and sets generateResolvConf to false, preventing WSL from auto-generating /etc/resolv.conf, so that you can create your own (ie. nameserver 1.1.1.1).</span><br>[network]<br>hostname = DemoHost<br>generateHosts = <span class=\"hljs-literal\">false</span><br>generateResolvConf = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set whether WSL supports interop process like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.</span><br>[interop]<br>enabled = <span class=\"hljs-literal\">false</span><br>appendWindowsPath = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set the user when launching a distribution with WSL.</span><br>[user]<br>default = DemoUser<br><br><span class=\"hljs-comment\"># Set a command to run when a new WSL instance launches. This example starts the Docker container service.</span><br>[boot]<br><span class=\"hljs-built_in\">command</span> = service docker start<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动装载设置-automount\"><a href=\"#自动装载设置-automount\" class=\"headerlink\" title=\"自动装载设置 automount\"></a>自动装载设置 automount</h4><p>节标签：<code>[automount]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 导致固定驱动器（即 <code>C:/</code> 或 <code>D:/</code>）自动装载到 DrvFs 中的 <code>/mnt</code> 下。 <code>false</code> 表示驱动器不会自动装载，但你仍可以手动或通过 <code>fstab</code> 装载驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">mountFsTab</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 设置启动 WSL 时要处理的 <code>/etc/fstab</code>。 &#x2F;etc&#x2F;fstab 是可在其中声明其他文件系统的文件，类似于 SMB 共享。 因此，在启动时，可以在 WSL 中自动装载这些文件系统。</td>\n</tr>\n<tr>\n<td align=\"left\">root</td>\n<td align=\"left\">string</td>\n<td align=\"left\"><code>/mnt/</code></td>\n<td align=\"left\">设置固定驱动器要自动装载到的目录。 默认情况下，此设置设置为 <code>/mnt/</code>，因此 Windows 文件系统 C 驱动器已装载到 <code>/mnt/c/</code>。 如果更改为<code>/mnt/``/windir/</code>，应会看到已装载到<code>/windir/c</code>的固定 C 驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">选项</td>\n<td align=\"left\">逗号分隔的值列表，例如 uid、gid 等，请参阅下面的自动装载选项</td>\n<td align=\"left\">空字符串</td>\n<td align=\"left\">下面列出了自动装载选项值，并追加到默认 DrvFs 装载选项字符串。 <strong>只能指定特定于 DrvFs 的选项。</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"网络设置-network\"><a href=\"#网络设置-network\" class=\"headerlink\" title=\"网络设置 network\"></a>网络设置 network</h4><p>节标签：<code>[network]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">generateHosts</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/hosts</code>。 <code>hosts</code> 文件包含主机名对应的 IP 地址的静态映射。</td>\n</tr>\n<tr>\n<td align=\"left\">generateResolvConf</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/resolv.conf</code>。 <code>resolv.conf</code> 包含能够将给定主机名解析为其 IP 地址的 DNS 列表。</td>\n</tr>\n<tr>\n<td align=\"left\">hostname</td>\n<td align=\"left\">string</td>\n<td align=\"left\">Windows 主机名</td>\n<td align=\"left\">设置要用于 WSL 分发的主机名。</td>\n</tr>\n</tbody></table>\n<h4 id=\"互操作设置-interop\"><a href=\"#互操作设置-interop\" class=\"headerlink\" title=\"互操作设置 interop\"></a>互操作设置 interop</h4><p>节标签：<code>[interop]</code></p>\n<p>这些选项在预览体验成员内部版本 17713 和更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否支持启动 Windows 进程。</td>\n</tr>\n<tr>\n<td align=\"left\">appendWindowsPath</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否会将 Windows 路径元素添加到 $PATH 环境变量。</td>\n</tr>\n</tbody></table>\n<h4 id=\"用户设置-user\"><a href=\"#用户设置-user\" class=\"headerlink\" title=\"用户设置 user\"></a>用户设置 user</h4><p>节标签：<code>[user]</code></p>\n<p>这些选项在版本 18980 及更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">default</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">首次运行时创建的初始用户名</td>\n<td align=\"left\">设置此键指定在首次启动 WSL 会话时以哪个用户身份运行。</td>\n</tr>\n</tbody></table>\n<h4 id=\"启动设置-boot\"><a href=\"#启动设置-boot\" class=\"headerlink\" title=\"启动设置 boot\"></a>启动设置 boot</h4><p>启动设置仅适用于 Windows 11 和 Server 2022。</p>\n<p>节标签：<code>[boot]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">命令</td>\n<td align=\"left\">string</td>\n<td align=\"left\">“”</td>\n<td align=\"left\">你希望在 WSL 实例启动时运行的命令字符串。 此命令以根用户身份运行。 例如： <code>service docker start</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"wslconfig-的配置-windows\"><a href=\"#wslconfig-的配置-windows\" class=\"headerlink\" title=\".wslconfig 的配置 (windows)\"></a>.wslconfig 的配置 (windows)</h3><blockquote>\n<p>  全局 <code>.wslconfig</code> 配置选项仅适用于在 Windows 内部版本 19041 及更高版本中作为 WSL 2 运行的分发版。 请记住，可能需要运行 <code>wsl --shutdown</code> 来关闭 WSL 2 VM，然后重启 WSL 实例以使这些更改生效。</p>\n</blockquote>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br>[wsl2]<br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br>memory=4GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br>processors=2<br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br>kernel=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br>kernelCommandLine = vsyscall=<span class=\"hljs-built_in\">emulate</span><br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br>swap=8GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br>swapfile=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br>pageReporting=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br>localhostforwarding=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br>nestedVirtualization=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br>debugConsole=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>节标签：<code>[wsl2]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">内核 (kernel)</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">Microsoft 内置内核提供的收件箱</td>\n<td align=\"left\">自定义 Linux 内核的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">内存</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上总内存的 50% 或 8GB，以较小者为准；在 20175 之前的版本上：Windows 上总内存的 80%</td>\n<td align=\"left\">要分配给 WSL 2 VM 的内存量。</td>\n</tr>\n<tr>\n<td align=\"left\">处理器</td>\n<td align=\"left\">数字</td>\n<td align=\"left\">Windows 上相同数量的处理器</td>\n<td align=\"left\">要分配给 WSL 2 VM 的处理器数量。</td>\n</tr>\n<tr>\n<td align=\"left\">localhostForwarding</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于指定绑定到 WSL 2 VM 中的通配符或 localhost 的端口是否应可通过 <code>localhost:port</code> 从主机连接。</td>\n</tr>\n<tr>\n<td align=\"left\">kernelCommandLine</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">空白</td>\n<td align=\"left\">其他内核命令行参数。</td>\n</tr>\n<tr>\n<td align=\"left\">swap</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上 25% 的内存大小四舍五入到最接近的 GB</td>\n<td align=\"left\">要向 WSL 2 VM 添加的交换空间量，0 表示无交换文件。 交换存储是基于磁盘的 RAM，当内存需求超过硬件设备的限制时使用。</td>\n</tr>\n<tr>\n<td align=\"left\">swapFile</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\"><code>%USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</code></td>\n<td align=\"left\">交换虚拟硬盘的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">pageReporting</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">默认设置 <code>true</code> 使 Windows 能够回收分配给 WSL 2 虚拟机的未使用的内存。</td>\n</tr>\n<tr>\n<td align=\"left\">guiApplications</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 中打开或关闭对 GUI 应用程序 (<a href=\"https://github.com/microsoft/wslg\">WSLg</a>) 的支持。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">debugConsole</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 2 发行版实例启动时打开显示 <code>dmesg</code> 内容的输出控制台窗口。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">nestedVirtualization</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">用于打开或关闭嵌套虚拟化的布尔值，使其他嵌套 VM 能够在 WSL 2 中运行。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">vmIdleTimeout</td>\n<td align=\"left\">number*</td>\n<td align=\"left\"><code>60000</code></td>\n<td align=\"left\">VM 在关闭之前处于空闲状态的毫秒数。 仅适用于Windows 11。</td>\n</tr>\n</tbody></table>\n<p>具有 <code>path</code> 值的条目必须是带有转义反斜杠的 Windows 路径，例如：<code>C:\\\\Temp\\\\myCustomKernel</code></p>\n<p>具有 <code>size</code> 值的条目必须是后跟单位的大小，例如 <code>8GB</code> 或 <code>512MB</code>。</p>\n<p>值类型后具有 * 的条目仅在Windows 11可用。</p>\n<h2 id=\"WSL导出与迁移\"><a href=\"#WSL导出与迁移\" class=\"headerlink\" title=\"WSL导出与迁移\"></a>WSL导出与迁移</h2><blockquote>\n<p>   我们可以选择手动安装wsl, 这样我们可以避免将wsl安装在c盘, 手动安装的时候, 将下载下来的<code>&lt;distro&gt;.appx</code>文件直接解压, 例如将<code>Ubuntu_1604.2019.523.0_x64.appx</code>解压, 解压出来的文件夹内就包含了<code>ubuntu1604.exe</code>, 运行他就可以启动wsl, 这样可以避免wsl的迁移.</p>\n</blockquote>\n<p><strong>查看WSL分发版本</strong></p>\n<p>在<code>Windows PowerShell</code>中输入如下命令, 查看当前子系统的状态和版本信息.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">wsl -l <span class=\"hljs-comment\">--all  -v</span><br></code></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">  NAME      STATE           <span class=\"hljs-keyword\">VERSION</span><br>* Ubuntu    Running         <span class=\"hljs-number\">2</span><br>  Debian    <span class=\"hljs-literal\">Stopped</span>         <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>导出分发版为tar文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">递归创建文件夹</span><br>mkdir -p d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入文件夹</span><br>cd d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">导出tar包 到当前目录</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">(如果显示的子系统的`NAME`是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如`Ubuntu-20.04`)</span><br>wsl --export Ubuntu .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--export &lt;发行版&gt; &lt;FileName&gt; [选项]<br>        将发行版导出为 tar 文件。<br>        对于标准输出，文件名可以为 -。<br><br>        选项:<br>            --vhd<br>                指定该发行版应导出为 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注销当前分发版</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --unregister Ubuntu<br></code></pre></td></tr></table></figure>\n\n<p><strong>重新导入并安装WSL</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --import Ubuntu .\\ .\\ubuntu20.04.tar --version 2<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--import &lt;发行版&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [选项]<br>        将指定的 tar 文件作为新发行版导入。<br>        对于标准输入，文件名可以为 -。<br><br>        选项:<br>            --version &lt;版本&gt;<br>                指定新发行版要使用的版本。<br><br>            --vhd<br>                指定提供的文件是 .vhdx 文件，而不是 tar 文件。<br>                此操作会在指定的安装位置复制 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>设置默认登陆用户为安装时用户名</strong></p>\n<blockquote>\n<p>  (如果显示的子系统的<code>NAME</code>是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如<code>Ubuntu-20.04</code>)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu config --default-user Username<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除tar文件(可选)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">rm .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"语言和缺字体\"><a href=\"#语言和缺字体\" class=\"headerlink\" title=\"语言和缺字体\"></a>语言和缺字体</h2><p>wsl是没有中文字体的，所以在安装使用Firefox等软件时，无法正常显示中文字体，所以我们可以通过使用Windows自带字体的方式，来实现快速安装中文字体（以Ubuntu为例）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo ln -s /mnt/c/Windows/Fonts /usr/share/fonts/font<br></code></pre></td></tr></table></figure>\n\n<p>我们只需要将Windows下的字体目录链接到WSL目录下即可然后再刷新一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fc-cache -fv<br></code></pre></td></tr></table></figure>\n\n<p>这样就可以正常显示中文字体了。</p>\n",
            "tags": [
                "windows",
                "linux",
                "wsl"
            ]
        }
    ]
}