{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"wsl\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2022/1d3ed0f3/",
            "url": "https://www.oikiou.top/2022/1d3ed0f3/",
            "title": "VScode插件CommentTranslate在WSL内无效",
            "date_published": "2022-08-10T14:57:15.000Z",
            "content_html": "<h1 id=\"VScode插件CommentTranslate在WSL内无效\"><a href=\"#VScode插件CommentTranslate在WSL内无效\" class=\"headerlink\" title=\"VScode插件CommentTranslate在WSL内无效\"></a>VScode插件CommentTranslate在WSL内无效</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/intellism/vscode-comment-translate/issues/64\">https://github.com/intellism/vscode-comment-translate/issues/64</a></p>\n<ol>\n<li><p>找到相关语言语法规则文件。如C&#x2F;CPP、bat、css、java、python，这些文件都是在Windows版本的VSCode中内置的，文件路径在 <code>C:\\Users\\ **userNmae** \\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions</code>改过安装路径的是<code>Microsoft VS Code\\resources\\app\\extensions</code></p>\n<p><img src=\"/2022/1d3ed0f3/image-20220811202401467.png\" alt=\"image-20220811202401467\"></p>\n</li>\n</ol>\n<p>​\t</p>\n<ol>\n<li><p>将语法规则的<strong>高亮规则</strong>文件夹拷贝到远程vscode的相关插件目录。以C语言为例，将<code>cpp</code>目录下的高亮规则文件夹<code>syntaxes</code>拷贝到远程C&#x2F;C++插件（<code>ms-vscode.cpptools-x.x.x</code>）目录下。如果你使用SSH远程，远程插件的目录在<code>~/.vscode-server/extensions/ms-vscode.cpptools-x.x.x</code>。</p>\n<p><img src=\"/2022/1d3ed0f3/image-20220811202845203.png\" alt=\"image-20220811202845203\"></p>\n</li>\n<li><p>修改远程插件，添加语法高亮规则。修改远程插件的<code>package.json</code>文件，如C&#x2F;C++插件（<code>ms-vscode.cpptools-x.x.x</code>）目录下的<code>package.json</code>文件，将刚才cpp语法规则文件夹中的<code>package.json</code>文件的”<code>grammars</code>“部分拷贝出来，粘贴到远程插件的<code>package.json</code>的<code>contributes</code>部分中去。</p>\n<p>如果遇到格式难以复制，可以全选内容然后按Shift+Alt+F格式化选定内容。<img src=\"/2022/1d3ed0f3/image-20220811202944334.png\" alt=\"image-20220811202944334\"></p>\n</li>\n</ol>\n<p><img src=\"/2022/1d3ed0f3/image-20220811203114753.png\" alt=\"image-20220811203114753\"></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\"><span class=\"hljs-string\">&quot;grammars&quot;</span>: [<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;c&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.c&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/c.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cpp.embedded.macro&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cpp.embedded.macro.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cpp.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.c.platform&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/platform.tmLanguage.json&quot;</span><br>          &#125;,<br>          &#123;<br>              <span class=\"hljs-string\">&quot;language&quot;</span>: <span class=\"hljs-string\">&quot;cuda-cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;scopeName&quot;</span>: <span class=\"hljs-string\">&quot;source.cuda-cpp&quot;</span>,<br>              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;./syntaxes/cuda-cpp.tmLanguage.json&quot;</span><br>          &#125;<br>      ],<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "vscode",
                "commenttranslate",
                "wsl"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/784ee20b/",
            "url": "https://www.oikiou.top/2021/784ee20b/",
            "title": "WSL",
            "date_published": "2021-11-29T05:12:15.000Z",
            "content_html": "<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p><em><strong>IF</strong></em> (Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11)</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">一键自动安装 WSL</a></p>\n<p><em><strong>ELSE</strong></em></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual\">旧版 WSL 的手动安装步骤(可以更改WSL系统的存放位置)</a></p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><blockquote>\n<p>   手动安装的优点是避免Linux的镜像文件(<code>ext4.vhdx</code>)存放在C盘, 存放<code>ext4.vhdx</code>的位置可以自定义.</p>\n</blockquote>\n<p>以下指令需要在<strong>管理员</strong>下的 powershell 运行</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 1 开启Microsoft-Windows-Subsystem-Linux</span><br>dism.exe <span class=\"hljs-regexp\">/online /</span>enable-feature <span class=\"hljs-regexp\">/featurename:Microsoft-Windows-Subsystem-Linux /</span>all /norestart<br><br><span class=\"hljs-comment\"># 2 开启VirtualMachinePlatform</span><br>dism.exe <span class=\"hljs-regexp\">/online /</span>enable-feature <span class=\"hljs-regexp\">/featurename:VirtualMachinePlatform /</span>all /norestart<br><br><span class=\"hljs-comment\"># 3 重启</span><br><span class=\"hljs-comment\"># reboot</span><br><br><span class=\"hljs-comment\"># 4 安装WLS2内核更新包</span><br>https:<span class=\"hljs-regexp\">//</span>wslstorestorage.blob.core.windows.net<span class=\"hljs-regexp\">/wslblob/</span>wsl_update_x64.msi<br><br><span class=\"hljs-comment\"># 5 将WSL2设为默认</span><br>wsl --set-default-version <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># 6 下载离线包(可以避免将WSL的系统装在C盘)</span><br>https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/zh-cn/</span>windows<span class=\"hljs-regexp\">/wsl/i</span>nstall-manual<br><span class=\"hljs-comment\"># example</span><br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wslubuntu2004<br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wsl-ubuntu-<span class=\"hljs-number\">1804</span><br>https:<span class=\"hljs-regexp\">//</span>aka.ms/wsl-debian-gnulinux<br><span class=\"hljs-comment\"># 离线包下载完成后解压缩 运行目录内的ubuntu.exe</span><br><span class=\"hljs-comment\"># 会提示输入用户名和密码</span><br><br><span class=\"hljs-comment\"># 7 (可选)安装 windows终端</span><br>https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/en-us/</span>windows<span class=\"hljs-regexp\">/terminal/g</span>et-started 可选 <br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"U盘挂载\"><a href=\"#U盘挂载\" class=\"headerlink\" title=\"U盘挂载\"></a>U盘挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1 新建文件夹g</span><br>sudo mkdir /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">2 挂载盘符g</span><br>sudo mount -t drvfs g: /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">大功告成。进入/mnt/g即可操作</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">弹出移动硬盘，这样才能在windows下正常弹出，否则是会一直占用的。</span><br>sudo umount /mnt/g<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"映射wsl文件系统\"><a href=\"#映射wsl文件系统\" class=\"headerlink\" title=\"映射wsl文件系统\"></a>映射wsl文件系统</h2><p><img src=\"/2021/784ee20b/image-20211129131237501.png\" alt=\"image-20211129131237501\"></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">\\\\wsl<span class=\"hljs-symbol\">$</span><br></code></pre></td></tr></table></figure>\n\n<p>通过 <code>\\\\wsl$</code> 访问 Linux 文件时将使用 WSL 分发版的默认用户。 因此，任何访问 Linux 文件的 Windows 应用都具有与默认用户相同的权限。</p>\n<h2 id=\"wsl关机\"><a href=\"#wsl关机\" class=\"headerlink\" title=\"wsl关机\"></a>wsl关机</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wsl --shutdown<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"wsl-配置文件\"><a href=\"#wsl-配置文件\" class=\"headerlink\" title=\"wsl 配置文件\"></a>wsl 配置文件</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"hljs-section\">[wsl2]</span><br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">4</span>GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br><span class=\"hljs-attr\">processors</span>=<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br><span class=\"hljs-attr\">kernel</span>=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br><span class=\"hljs-attr\">kernelCommandLine</span> = vsyscall=emulate<br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br><span class=\"hljs-comment\"># 虚拟内存</span><br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">8</span>GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br><span class=\"hljs-attr\">swapfile</span>=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br><span class=\"hljs-attr\">pageReporting</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br><span class=\"hljs-attr\">localhostforwarding</span>=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br><span class=\"hljs-attr\">nestedVirtualization</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br><span class=\"hljs-attr\">debugConsole</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>打开powershell输入<code>~</code>切换目录</p>\n<p><code>code .wslconfig</code>编辑配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[wsl2]</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">localhostForwarding</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"WSL-配置代理\"><a href=\"#WSL-配置代理\" class=\"headerlink\" title=\"WSL 配置代理\"></a>WSL 配置代理</h2><p><strong>获取主机 IP      主机 IP 保存在 &#x2F;etc&#x2F;resolv.conf 中</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> hostip=$(<span class=\"hljs-built_in\">cat</span> /etc/resolv.conf |grep -oP <span class=\"hljs-string\">&#x27;(?&lt;=nameserver\\ ).*&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10880&quot;</span><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>在wsl尝试用<code>export all_proxy</code>socks5做代理感觉总是调不通, 换成http就好了  不知道是为啥</li>\n</ul>\n<h2 id=\"wsl-conf-wslconfig配置文件\"><a href=\"#wsl-conf-wslconfig配置文件\" class=\"headerlink\" title=\"wsl.conf .wslconfig配置文件\"></a>wsl.conf .wslconfig配置文件</h2><p>参考文档:</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config\">WSL 中的高级设置配置</a></p>\n<blockquote>\n<h2 id=\"wsl-conf\"><a href=\"#wsl-conf\" class=\"headerlink\" title=\"wsl.conf\"></a>wsl.conf</h2><ul>\n<li>以 <code>/etc</code> unix 文件的形式存储在分发目录中。</li>\n<li>用于按分布配置设置。 此文件中配置的设置将仅应用于包含存储此文件的目录的特定 Linux 分发版。</li>\n<li>可用于版本、WSL 1 或 WSL 2 运行的分发版。</li>\n<li>若要访问已安装的发行版的 <code>/etc</code> 目录，请使用发行版的命令行和 <code>cd /</code> 访问根目录，然后使用 <code>ls</code> 列出文件或使用 <code>explorer.exe .</code> 在 Windows 文件资源管理器中查看。 目录路径应如下所示： <code>/etc/wsl.conf</code></li>\n</ul>\n<h2 id=\"wslconfig\"><a href=\"#wslconfig\" class=\"headerlink\" title=\".wslconfig\"></a>.wslconfig</h2><ul>\n<li>存储在目录中 <code>%UserProfile%</code> 。</li>\n<li>用于跨作为 WSL 2 版本运行的所有已安装 Linux 分发版全局配置设置。</li>\n<li><strong>只能用于 WSL 2 运行的分发</strong>版。 作为 WSL 1 运行的分发版不会受到此配置的影响，因为它们未作为虚拟机运行。</li>\n<li>要访问 <code>%UserProfile%</code> 目录，请在 PowerShell 中使用 <code>cd ~</code> 访问主目录（通常是用户配置文件 <code>C:\\Users\\&lt;UserName&gt;</code>），或者可以打开 Windows 文件资源管理器并在地址栏中输入 <code>%UserProfile%</code>。 目录路径应如下所示： <code>C:\\Users\\&lt;UserName&gt;\\.wslconfig</code></li>\n</ul>\n</blockquote>\n<h3 id=\"wsl-conf-的配置-unix\"><a href=\"#wsl-conf-的配置-unix\" class=\"headerlink\" title=\"wsl.conf 的配置 (unix )\"></a>wsl.conf 的配置 (unix )</h3><p>wsl.conf 文件支持四个部分：<code>automount</code>、<code>network</code>、<code>interop</code>、<code>user</code> 、<code>[boot]</code>。 </p>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Automatically mount Windows drive when the distribution is launched</span><br>[automount]<br><br><span class=\"hljs-comment\"># Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won&#x27;t be mounted automatically, but need to be mounted manually or with fstab.</span><br>enabled = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c. </span><br>root = /<br><br><span class=\"hljs-comment\"># DrvFs-specific options can be specified.  </span><br>options = <span class=\"hljs-string\">&quot;metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off&quot;</span><br><br><span class=\"hljs-comment\"># Sets the `/etc/fstab` file to be processed when a WSL distribution is launched.</span><br>mountFsTab = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Network host settings that enable the DNS server used by WSL 2. This example changes the hostname, sets generateHosts to false, preventing WSL from the default behavior of auto-generating /etc/hosts, and sets generateResolvConf to false, preventing WSL from auto-generating /etc/resolv.conf, so that you can create your own (ie. nameserver 1.1.1.1).</span><br>[network]<br>hostname = DemoHost<br>generateHosts = <span class=\"hljs-literal\">false</span><br>generateResolvConf = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set whether WSL supports interop process like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.</span><br>[interop]<br>enabled = <span class=\"hljs-literal\">false</span><br>appendWindowsPath = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set the user when launching a distribution with WSL.</span><br>[user]<br>default = DemoUser<br><br><span class=\"hljs-comment\"># Set a command to run when a new WSL instance launches. This example starts the Docker container service.</span><br>[boot]<br><span class=\"hljs-built_in\">command</span> = service docker start<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动装载设置-automount\"><a href=\"#自动装载设置-automount\" class=\"headerlink\" title=\"自动装载设置 automount\"></a>自动装载设置 automount</h4><p>节标签：<code>[automount]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 导致固定驱动器（即 <code>C:/</code> 或 <code>D:/</code>）自动装载到 DrvFs 中的 <code>/mnt</code> 下。 <code>false</code> 表示驱动器不会自动装载，但你仍可以手动或通过 <code>fstab</code> 装载驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">mountFsTab</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 设置启动 WSL 时要处理的 <code>/etc/fstab</code>。 &#x2F;etc&#x2F;fstab 是可在其中声明其他文件系统的文件，类似于 SMB 共享。 因此，在启动时，可以在 WSL 中自动装载这些文件系统。</td>\n</tr>\n<tr>\n<td align=\"left\">root</td>\n<td align=\"left\">string</td>\n<td align=\"left\"><code>/mnt/</code></td>\n<td align=\"left\">设置固定驱动器要自动装载到的目录。 默认情况下，此设置设置为 <code>/mnt/</code>，因此 Windows 文件系统 C 驱动器已装载到 <code>/mnt/c/</code>。 如果更改为<code>/mnt/``/windir/</code>，应会看到已装载到<code>/windir/c</code>的固定 C 驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">选项</td>\n<td align=\"left\">逗号分隔的值列表，例如 uid、gid 等，请参阅下面的自动装载选项</td>\n<td align=\"left\">空字符串</td>\n<td align=\"left\">下面列出了自动装载选项值，并追加到默认 DrvFs 装载选项字符串。 <strong>只能指定特定于 DrvFs 的选项。</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"网络设置-network\"><a href=\"#网络设置-network\" class=\"headerlink\" title=\"网络设置 network\"></a>网络设置 network</h4><p>节标签：<code>[network]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">generateHosts</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/hosts</code>。 <code>hosts</code> 文件包含主机名对应的 IP 地址的静态映射。</td>\n</tr>\n<tr>\n<td align=\"left\">generateResolvConf</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/resolv.conf</code>。 <code>resolv.conf</code> 包含能够将给定主机名解析为其 IP 地址的 DNS 列表。</td>\n</tr>\n<tr>\n<td align=\"left\">hostname</td>\n<td align=\"left\">string</td>\n<td align=\"left\">Windows 主机名</td>\n<td align=\"left\">设置要用于 WSL 分发的主机名。</td>\n</tr>\n</tbody></table>\n<h4 id=\"互操作设置-interop\"><a href=\"#互操作设置-interop\" class=\"headerlink\" title=\"互操作设置 interop\"></a>互操作设置 interop</h4><p>节标签：<code>[interop]</code></p>\n<p>这些选项在预览体验成员内部版本 17713 和更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否支持启动 Windows 进程。</td>\n</tr>\n<tr>\n<td align=\"left\">appendWindowsPath</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否会将 Windows 路径元素添加到 $PATH 环境变量。</td>\n</tr>\n</tbody></table>\n<h4 id=\"用户设置-user\"><a href=\"#用户设置-user\" class=\"headerlink\" title=\"用户设置 user\"></a>用户设置 user</h4><p>节标签：<code>[user]</code></p>\n<p>这些选项在版本 18980 及更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">default</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">首次运行时创建的初始用户名</td>\n<td align=\"left\">设置此键指定在首次启动 WSL 会话时以哪个用户身份运行。</td>\n</tr>\n</tbody></table>\n<h4 id=\"启动设置-boot\"><a href=\"#启动设置-boot\" class=\"headerlink\" title=\"启动设置 boot\"></a>启动设置 boot</h4><p>启动设置仅适用于 Windows 11 和 Server 2022。</p>\n<p>节标签：<code>[boot]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">命令</td>\n<td align=\"left\">string</td>\n<td align=\"left\">“”</td>\n<td align=\"left\">你希望在 WSL 实例启动时运行的命令字符串。 此命令以根用户身份运行。 例如： <code>service docker start</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"wslconfig-的配置-windows\"><a href=\"#wslconfig-的配置-windows\" class=\"headerlink\" title=\".wslconfig 的配置 (windows)\"></a>.wslconfig 的配置 (windows)</h3><blockquote>\n<p>  全局 <code>.wslconfig</code> 配置选项仅适用于在 Windows 内部版本 19041 及更高版本中作为 WSL 2 运行的分发版。 请记住，可能需要运行 <code>wsl --shutdown</code> 来关闭 WSL 2 VM，然后重启 WSL 实例以使这些更改生效。</p>\n</blockquote>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br>[wsl2]<br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br>memory=4GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br>processors=2<br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br>kernel=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br>kernelCommandLine = vsyscall=<span class=\"hljs-built_in\">emulate</span><br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br>swap=8GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br>swapfile=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br>pageReporting=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br>localhostforwarding=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br>nestedVirtualization=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br>debugConsole=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>节标签：<code>[wsl2]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">内核 (kernel)</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">Microsoft 内置内核提供的收件箱</td>\n<td align=\"left\">自定义 Linux 内核的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">内存</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上总内存的 50% 或 8GB，以较小者为准；在 20175 之前的版本上：Windows 上总内存的 80%</td>\n<td align=\"left\">要分配给 WSL 2 VM 的内存量。</td>\n</tr>\n<tr>\n<td align=\"left\">处理器</td>\n<td align=\"left\">数字</td>\n<td align=\"left\">Windows 上相同数量的处理器</td>\n<td align=\"left\">要分配给 WSL 2 VM 的处理器数量。</td>\n</tr>\n<tr>\n<td align=\"left\">localhostForwarding</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于指定绑定到 WSL 2 VM 中的通配符或 localhost 的端口是否应可通过 <code>localhost:port</code> 从主机连接。</td>\n</tr>\n<tr>\n<td align=\"left\">kernelCommandLine</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">空白</td>\n<td align=\"left\">其他内核命令行参数。</td>\n</tr>\n<tr>\n<td align=\"left\">swap</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上 25% 的内存大小四舍五入到最接近的 GB</td>\n<td align=\"left\">要向 WSL 2 VM 添加的交换空间量，0 表示无交换文件。 交换存储是基于磁盘的 RAM，当内存需求超过硬件设备的限制时使用。</td>\n</tr>\n<tr>\n<td align=\"left\">swapFile</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\"><code>%USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</code></td>\n<td align=\"left\">交换虚拟硬盘的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">pageReporting</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">默认设置 <code>true</code> 使 Windows 能够回收分配给 WSL 2 虚拟机的未使用的内存。</td>\n</tr>\n<tr>\n<td align=\"left\">guiApplications</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 中打开或关闭对 GUI 应用程序 (<a href=\"https://github.com/microsoft/wslg\">WSLg</a>) 的支持。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">debugConsole</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 2 发行版实例启动时打开显示 <code>dmesg</code> 内容的输出控制台窗口。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">nestedVirtualization</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">用于打开或关闭嵌套虚拟化的布尔值，使其他嵌套 VM 能够在 WSL 2 中运行。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">vmIdleTimeout</td>\n<td align=\"left\">number*</td>\n<td align=\"left\"><code>60000</code></td>\n<td align=\"left\">VM 在关闭之前处于空闲状态的毫秒数。 仅适用于Windows 11。</td>\n</tr>\n</tbody></table>\n<p>具有 <code>path</code> 值的条目必须是带有转义反斜杠的 Windows 路径，例如：<code>C:\\\\Temp\\\\myCustomKernel</code></p>\n<p>具有 <code>size</code> 值的条目必须是后跟单位的大小，例如 <code>8GB</code> 或 <code>512MB</code>。</p>\n<p>值类型后具有 * 的条目仅在Windows 11可用。</p>\n<h2 id=\"WSL导出与迁移\"><a href=\"#WSL导出与迁移\" class=\"headerlink\" title=\"WSL导出与迁移\"></a>WSL导出与迁移</h2><blockquote>\n<p>   我们可以选择手动安装wsl, 这样我们可以避免将wsl安装在c盘, 手动安装的时候, 将下载下来的<code>&lt;distro&gt;.appx</code>文件直接解压, 例如将<code>Ubuntu_1604.2019.523.0_x64.appx</code>解压, 解压出来的文件夹内就包含了<code>ubuntu1604.exe</code>, 运行他就可以启动wsl, 这样可以避免wsl的迁移.</p>\n</blockquote>\n<p><strong>查看WSL分发版本</strong></p>\n<p>在<code>Windows PowerShell</code>中输入如下命令, 查看当前子系统的状态和版本信息.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">wsl -l <span class=\"hljs-comment\">--all  -v</span><br></code></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">  NAME      STATE           <span class=\"hljs-keyword\">VERSION</span><br>* Ubuntu    Running         <span class=\"hljs-number\">2</span><br>  Debian    <span class=\"hljs-literal\">Stopped</span>         <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>导出分发版为tar文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">递归创建文件夹</span><br>mkdir -p d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入文件夹</span><br>cd d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">导出tar包 到当前目录</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">(如果显示的子系统的`NAME`是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如`Ubuntu-20.04`)</span><br>wsl --export Ubuntu .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--export &lt;发行版&gt; &lt;FileName&gt; [选项]<br>        将发行版导出为 tar 文件。<br>        对于标准输出，文件名可以为 -。<br><br>        选项:<br>            --vhd<br>                指定该发行版应导出为 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注销当前分发版</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --unregister Ubuntu<br></code></pre></td></tr></table></figure>\n\n<p><strong>重新导入并安装WSL</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --import Ubuntu .\\ .\\ubuntu20.04.tar --version 2<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--import &lt;发行版&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [选项]<br>        将指定的 tar 文件作为新发行版导入。<br>        对于标准输入，文件名可以为 -。<br><br>        选项:<br>            --version &lt;版本&gt;<br>                指定新发行版要使用的版本。<br><br>            --vhd<br>                指定提供的文件是 .vhdx 文件，而不是 tar 文件。<br>                此操作会在指定的安装位置复制 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>设置默认登陆用户为安装时用户名</strong></p>\n<blockquote>\n<p>  (如果显示的子系统的<code>NAME</code>是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如<code>Ubuntu-20.04</code>)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu config --default-user Username<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除tar文件(可选)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">rm .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "windows",
                "linux",
                "wsl"
            ]
        }
    ]
}