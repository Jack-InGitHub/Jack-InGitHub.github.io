{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"git\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2021/69c3279c/",
            "url": "https://www.oikiou.top/2021/69c3279c/",
            "title": "Git",
            "date_published": "2021-08-15T08:23:05.000Z",
            "content_html": "<h1 id=\"Git-Bref\"><a href=\"#Git-Bref\" class=\"headerlink\" title=\"Git Bref\"></a>Git Bref</h1><p><img src=\"/2021/69c3279c/1352126739_7909.jpg\" alt=\"img\"></p>\n<ul>\n<li><p><strong>工作区：</strong>就是你在电脑里能看到的目录。</p>\n</li>\n<li><p><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</p>\n</li>\n<li><p><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</p>\n</li>\n</ul>\n<p><img src=\"/2021/69c3279c/git-command.jpg\" alt=\"img\"></p>\n<ul>\n<li>workspace：工作区</li>\n<li>staging area：暂存区&#x2F;缓存区</li>\n<li>local repository：版本库或本地仓库</li>\n<li>remote repository：远程仓库</li>\n</ul>\n<h2 id=\"Git-Workflows\"><a href=\"#Git-Workflows\" class=\"headerlink\" title=\"Git Workflows\"></a>Git Workflows</h2><p><a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows\">https://www.atlassian.com/git/tutorials/comparing-workflows</a></p>\n<h3 id=\"Centralized-集中工作流\"><a href=\"#Centralized-集中工作流\" class=\"headerlink\" title=\"Centralized 集中工作流\"></a>Centralized 集中工作流</h3><p><img src=\"/2021/69c3279c/01.svg\" alt=\"git workflow | Central and local repositories\"></p>\n<h3 id=\"Feature-Branch-功能分支\"><a href=\"#Feature-Branch-功能分支\" class=\"headerlink\" title=\"Feature Branch 功能分支\"></a>Feature Branch 功能分支</h3><p><a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow\">https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow</a></p>\n<h3 id=\"Gitflow\"><a href=\"#Gitflow\" class=\"headerlink\" title=\"Gitflow\"></a>Gitflow</h3><p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">https://nvie.com/posts/a-successful-git-branching-model/</a></p>\n<p><img src=\"/2021/69c3279c/git-model@2x.png\" alt=\"img\"></p>\n<p><img src=\"/2021/69c3279c/04-Hotfix-branches.svg\" alt=\"Git 流程工作流 - 修补程序分支\"></p>\n<h3 id=\"Forking-分叉\"><a href=\"#Forking-分叉\" class=\"headerlink\" title=\"Forking 分叉\"></a>Forking 分叉</h3><p><a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Forking Workflow</a>通常遵循基于<a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Gitflow Workflow</a>的分支模型。这意味着完整的功能分支将用于合并到原始项目维护者的存储库中。结果是一个分布式工作流，它为大型有机团队（包括不受信任的第三方）安全地协作提供了一种灵活的方式。这也使其成为开源项目的理想工作流程。</p>\n<h2 id=\"基本命令list\"><a href=\"#基本命令list\" class=\"headerlink\" title=\"基本命令list\"></a>基本命令list</h2><h3 id=\"创建仓库命令\"><a href=\"#创建仓库命令\" class=\"headerlink\" title=\"创建仓库命令\"></a>创建仓库命令</h3><p>下表列出了 git 创建仓库的命令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>git init</code></td>\n<td align=\"left\">初始化仓库</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git clone</code></td>\n<td align=\"left\">拷贝一份远程仓库，也就是下载一个项目。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"提交与修改\"><a href=\"#提交与修改\" class=\"headerlink\" title=\"提交与修改\"></a>提交与修改</h3><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>\n<p>下表列出了有关创建与提交你的项目的快照的命令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>git add</code></td>\n<td align=\"left\">添加文件到仓库</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git status</code></td>\n<td align=\"left\">查看仓库当前的状态，显示有变更的文件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git diff</code></td>\n<td align=\"left\">比较文件的不同，即暂存区和工作区的差异。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git commit</code></td>\n<td align=\"left\">提交暂存区到本地仓库。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git reset</code></td>\n<td align=\"left\">回退版本。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git rm</code></td>\n<td align=\"left\">删除工作区文件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git mv</code></td>\n<td align=\"left\">移动或重命名工作区文件。</td>\n</tr>\n</tbody></table>\n<h3 id=\"提交日志\"><a href=\"#提交日志\" class=\"headerlink\" title=\"提交日志\"></a>提交日志</h3><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>git log</code></td>\n<td align=\"left\">查看历史提交记录</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git blame &lt;file&gt;</code></td>\n<td align=\"left\">以列表形式查看指定文件的历史修改记录</td>\n</tr>\n</tbody></table>\n<h3 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h3><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>git remote</code></td>\n<td align=\"left\">远程仓库操作</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git fetch</code></td>\n<td align=\"left\">从远程获取代码库</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git pull</code></td>\n<td align=\"left\">下载远程代码并合并</td>\n</tr>\n<tr>\n<td align=\"left\"><code>git push</code></td>\n<td align=\"left\">上传远程代码并合并</td>\n</tr>\n</tbody></table>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><p><img src=\"/2021/69c3279c/Honeyview_Ey7f6ftXIAEOd8M.jpg\" alt=\"Honeyview_Ey7f6ftXIAEOd8M\"></p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>–delete：删除</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>–delete –force的快捷键</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>–force：强制</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>–move：移动或重命名</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>–move –force的快捷键</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–remote：远程</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>–all：所有</td>\n</tr>\n</tbody></table>\n<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><h3 id=\"查看配置\"><a href=\"#查看配置\" class=\"headerlink\" title=\"查看配置\"></a>查看配置</h3><p>列出当前配置：<code>git config --list</code></p>\n<p>列出repository配置：<code>git config --local --list</code></p>\n<p>列出全局配置：<code>git config --global --list</code></p>\n<p>列出系统配置：<code>git config --system --list</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>配置用户名：<code>git config --global user.name &quot;your name&quot;</code></p>\n<p>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code></p>\n<p>修改默认branch名: <code>git config --global init.defaultBranch main</code></p>\n<p>git走代理: <code>git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;</code></p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs \\\">ssh-keygen -t rsa -C &quot;youremail@github.com&quot;<br></code></pre></td></tr></table></figure>\n\n<p>执行命令后需要进行3次或4次确认：</p>\n<ol>\n<li>确认秘钥的保存路径（如果不需要改路径则直接回车）；</li>\n<li>如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；</li>\n<li>创建密码（如果不需要密码则直接回车）；</li>\n<li>确认密码；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h2><h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><p>初始化版本库</p>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> [--template=&lt;template_directory&gt;]<br>          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]<br>          [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]<br>          [--dissociate] [--separate-git-dir &lt;git <span class=\"hljs-built_in\">dir</span>&gt;]<br>          [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]<br>          [--recurse-submodules[=&lt;pathspec&gt;]] [--[no-]shallow-submodules]<br>          [--[no-]remote-submodules] [--<span class=\"hljs-built_in\">jobs</span> &lt;n&gt;] [--sparse] [--[no-]reject-shallow]<br>          [--filter=&lt;filter&gt;] [--] &lt;repository&gt;<br>          [&lt;directory&gt;]<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git clone 后面接文件夹名可以修改clone到本地的文件夹名称</span><br>git <span class=\"hljs-built_in\">clone</span> &lt;url&gt; directory<br><br>git <span class=\"hljs-built_in\">clone</span> --single-branch --branch &lt;branch-name&gt; &lt;remote-repo-url&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><p><code>git log --graph --pretty=oneline --abbrev-commit</code>可以看到分支的合并情况，包括分支合并图(–graph)、一行显示(–pretty&#x3D;oneline)、提交校验码缩略(–abbrev-commit)显示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-&lt;n&gt;</code></td>\n<td align=\"left\">仅显示最近的 n 条提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--since</code>, <code>--after</code></td>\n<td align=\"left\">仅显示指定时间之后的提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--until</code>, <code>--before</code></td>\n<td align=\"left\">仅显示指定时间之前的提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--author</code></td>\n<td align=\"left\">仅显示作者匹配指定字符串的提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--committer</code></td>\n<td align=\"left\">仅显示提交者匹配指定字符串的提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--grep</code></td>\n<td align=\"left\">仅显示提交说明中包含指定字符串的提交。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-S</code></td>\n<td align=\"left\">仅显示添加或删除内容匹配指定字符串的提交。</td>\n</tr>\n</tbody></table>\n<h3 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h3><h3 id=\"git-blame\"><a href=\"#git-blame\" class=\"headerlink\" title=\"git blame\"></a>git blame</h3><p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">git blame &lt;<span class=\"hljs-built_in\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>git blame用来追溯一个指定文件的历史修改记录。它能显示任何文件中每行最后一次修改的提交记录。 所以，如果你在代码中看到一个有 bug 的方法，你可以使用 git blame 标注这个文件，查看哪一次提交引入了这行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">可以使用 -L 指定文件的行数范围：</span><br>git blame -L n1,n2 filename<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h3><p><strong>git pull</strong> 命令用于从远程获取代码并合并本地的版本。</p>\n<p><strong>git pull</strong> 其实就是 <strong>git fetch</strong> 和 <strong>git merge FETCH_HEAD</strong> 的简写。 命令格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git pull <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程主机名</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程分支名</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">本地分支名</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>更新操作：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git pull</span><br><span class=\"hljs-attribute\">git pull origin</span><br></code></pre></td></tr></table></figure>\n\n<p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git pull origin <span class=\"hljs-literal\">master</span>:brantest<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p><strong>git push</strong> 命用于从将本地的分支版本上传到远程并合并。</p>\n<p>命令格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git push <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程主机名</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">本地分支名</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果本地分支名与远程分支名相同，则可以省略冒号：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git push <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">远程主机名</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">本地分支名</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果本地版本与远程版本有差异，但又要强制推送可以使用 –force 参数：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">git <span class=\"hljs-built_in\">push</span> --force <span class=\"hljs-built_in\">origin</span> master<br></code></pre></td></tr></table></figure>\n\n<p>删除主机的分支可以使用 –delete 参数，以下命令表示删除 origin 主机的 master 分支，(慎用)：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">git <span class=\"hljs-built_in\">push</span> <span class=\"hljs-built_in\">origin</span> --<span class=\"hljs-built_in\">delete</span> master<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-v</code></td>\n<td><strong>verbose</strong>显示详细一些的内容</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git remote add origin your_first_git_address //将第一个git address命名为origin<br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\–-all</td>\n<td>把所有文件添加到版本控制里面</td>\n</tr>\n<tr>\n<td>.</td>\n<td>--all 同</td>\n</tr>\n</tbody></table>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>git commit </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>all</td>\n<td>受版本控制的所有文件<br>注意，新加的文件（即没有被git系统管理的文件）是不能被提交到本地仓库的</td>\n<td></td>\n</tr>\n<tr>\n<td>-m</td>\n<td>message</td>\n<td>提交的注释</td>\n<td>git commit -m “this first commit”</td>\n</tr>\n<tr>\n<td>- - amend</td>\n<td></td>\n<td>修改上次提交的注释</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git commit -m <span class=\"hljs-string\">&#x27;    // 在这里直接输入回车即可</span><br><span class=\"hljs-string\">1、第一项改动      // 以下的这些真正的comment可以在其他文本编辑器中写好粘贴过来</span><br><span class=\"hljs-string\">2、第二项</span><br><span class=\"hljs-string\">&#x27;</span>                // 输入这个结尾单引号后，再输入回车即可完成本次commit的提交<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><table>\n<thead>\n<tr>\n<th>argv</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-u</td>\n<td>mode</td>\n<td></td>\n</tr>\n<tr>\n<td>-uno</td>\n<td>- 不显示未跟踪的文件。</td>\n<td></td>\n</tr>\n<tr>\n<td>-unormal</td>\n<td>- 显示未跟踪的文件和目录。</td>\n<td></td>\n</tr>\n<tr>\n<td>-uall</td>\n<td>- 还显示未跟踪目录中的单个文件。</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>查看那些被修改那些没被修改</p>\n<h3 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h3><p>查看与版本差异</p>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git checkout &lt;branch&gt;</td>\n<td></td>\n<td>切换分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkou -b &lt;branch&gt;</td>\n<td>build</td>\n<td>创建并切换分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout –orphan &lt;branch&gt;</td>\n<td></td>\n<td>创建切换到孤立的分支</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout – &lt;file&gt;</td>\n<td></td>\n<td>从Staged恢复文件<br>重置全部文件用<code>-- .</code></td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout HEAD – &lt;file&gt;</td>\n<td></td>\n<td>从HEAD恢复文件<br>重置全部文件用<code>-- .</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git branch &lt;branch&gt;</td>\n<td></td>\n<td>创建分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch -d &lt;branch&gt;</td>\n<td>delete</td>\n<td>删除分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch -D &lt;branch&gt;</td>\n<td></td>\n<td>强制删除</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>git branch (-m | -M) &lt;oldbranch&gt; &lt;newbranch&gt;</td>\n<td></td>\n<td>重命名分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch</td>\n<td></td>\n<td>查看当前分支</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git tag</td>\n<td></td>\n<td>查看标签</td>\n<td></td>\n</tr>\n<tr>\n<td>git show</td>\n<td></td>\n<td>查看指定标签的信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git tag &lt;tag name&gt; &lt;commit id&gt;</td>\n<td></td>\n<td>创建 tag</td>\n<td></td>\n</tr>\n<tr>\n<td>-a</td>\n<td></td>\n<td>指定标签名</td>\n<td></td>\n</tr>\n<tr>\n<td>-m</td>\n<td></td>\n<td>指定说明文字</td>\n<td></td>\n</tr>\n<tr>\n<td>-l</td>\n<td></td>\n<td>列出特定版本 git tag -l “v1.4.2.*”</td>\n<td></td>\n</tr>\n<tr>\n<td>-d</td>\n<td></td>\n<td>删除</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin &lt;tag name&gt;</td>\n<td></td>\n<td>推送某个标签到远程</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin –tags</td>\n<td></td>\n<td>推送全部尚未推送到远程的本地标签</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h3><p>变基 </p>\n<p>注: 需要切换到分支的后面, 再完成变基</p>\n<p>git checkout &lt;branch&gt;</p>\n<p>git rebae -d &lt;master branch&gt;</p>\n<h3 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h3><p><img src=\"/2021/69c3279c/1102222-20171213190644254-2099705216.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git merge &lt;branch&gt;</td>\n<td>将分支合并到当前分支</td>\n</tr>\n<tr>\n<td>git merge –no-ff  &lt;branch&gt;</td>\n<td>禁用 快速合并模式（Fast forward）</td>\n</tr>\n<tr>\n<td>git merge –ff-only  &lt;branch&gt;</td>\n<td>快速合并(快进)</td>\n</tr>\n<tr>\n<td><code>git merge --abort</code></td>\n<td>中止这一次提交的合并(当遇到冲突时)</td>\n</tr>\n</tbody></table>\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git stash</td>\n<td></td>\n<td>将当前未提交内容藏匿</td>\n<td></td>\n</tr>\n<tr>\n<td>git stash list</td>\n<td></td>\n<td>藏匿 list</td>\n<td></td>\n</tr>\n<tr>\n<td>git stash drop</td>\n<td></td>\n<td>删除 藏匿</td>\n<td></td>\n</tr>\n<tr>\n<td>git stash apply</td>\n<td></td>\n<td>恢复 藏匿</td>\n<td></td>\n</tr>\n<tr>\n<td>git stash pop</td>\n<td></td>\n<td>恢复并删除 藏匿</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"git-restore-重置文件\"><a href=\"#git-restore-重置文件\" class=\"headerlink\" title=\"git restore 重置文件\"></a>git restore 重置文件</h3><p>类似 git checkout – &lt;file&gt;     重置文件</p>\n<p>git restore &lt;file&gt;撤销工作区的修改，从暂存区恢复至工作区，如果工作区没有则从版本库恢复至工作区。</p>\n<p>git restore –staged &lt;file&gt;用作清除暂存区的文件，不影响工作区以及版本库中的文件</p>\n<p><img src=\"/2021/69c3279c/542.png\" alt=\"img\"></p>\n<h3 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h3><p><strong>原理：</strong> git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们 commit 了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。如下图所示：</p>\n<p><img src=\"/2021/69c3279c/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwNDE0MjA1ODE2MTg4.png\" alt=\"这里写图片描述\"></p>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><p><strong>原理：</strong> git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本一</p>\n<p><img src=\"/2021/69c3279c/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwNDE0MjEyMjIxMDMz.png\" alt=\"这里写图片描述\"></p>\n<p>在Git中，用<code>HEAD</code>表示当前版本</p>\n<p>版本回退 HEAD往前回退一个版本(同理这里可以写对应的版本号) <code>git reset -–hard HEAD^</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–- hard</td>\n<td></td>\n<td>硬重置</td>\n<td></td>\n</tr>\n<tr>\n<td>–- soft</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>–- mixed</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>–- merge</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>–- keep</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"git-ignore\"><a href=\"#git-ignore\" class=\"headerlink\" title=\"git - .ignore\"></a>git - .ignore</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此为注释 – 将被 Git 忽略</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">忽略所有 .a 结尾的文件</span><br>*.a<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">但 lib.a 除外</span><br>!lib.a<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br>/TODO<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">忽略 build/ 目录下的所有文件</span><br>build/<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br>doc/*.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br>doc/**/*.txt<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"git-switch\"><a href=\"#git-switch\" class=\"headerlink\" title=\"git switch\"></a>git switch</h3><p>git switch 切换分支 远程有而本地没有的分支，而如果要从远程分支建一个同名的本地分支，并且关联远程分支</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">git <span class=\"hljs-keyword\">switch</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">branchName</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<p>git switch 创建一个新分支并切换到该新分支 </p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">git <span class=\"hljs-keyword\">switch</span> -<span class=\"hljs-keyword\">c</span> &lt;branchName&gt;<br></code></pre></td></tr></table></figure>\n<p>git switch 以一个提交commit来创建一个分支</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">git <span class=\"hljs-keyword\">switch</span> -<span class=\"hljs-keyword\">c</span> test<span class=\"hljs-number\">3</span> e<span class=\"hljs-number\">053</span>cf<span class=\"hljs-number\">128</span>d<span class=\"hljs-number\">2</span>ad<span class=\"hljs-number\">9</span>d<span class=\"hljs-number\">35e2</span>f<span class=\"hljs-number\">94878569596</span>fb<span class=\"hljs-number\">32</span>f<span class=\"hljs-number\">4306</span><br></code></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">2.23-</th>\n<th align=\"left\">2.23+</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">管理分支</td>\n<td align=\"left\">git branch</td>\n<td align=\"left\">git branch</td>\n</tr>\n<tr>\n<td align=\"left\">切换分支</td>\n<td align=\"left\">git checkout</td>\n<td align=\"left\">git switch</td>\n</tr>\n<tr>\n<td align=\"left\">新建+切换分支</td>\n<td align=\"left\">git checkout -b</td>\n<td align=\"left\">git switch -c</td>\n</tr>\n<tr>\n<td align=\"left\">切换到commit id</td>\n<td align=\"left\">git checkout</td>\n<td align=\"left\">git checkout</td>\n</tr>\n</tbody></table>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"修改分支指针\"><a href=\"#修改分支指针\" class=\"headerlink\" title=\"修改分支指针\"></a>修改分支指针</h2><p>git branch -f 分支名 commitID</p>\n<p>作用是将其他分支上的本地代码硬重置到某个commitId下，不能重置本分支。比如我dev分支上某个节点的commitId叫 devID1</p>\n<p>然后 git branch -f master devID1<br>那么master上的代码就会和dev一样，并且历史记录也会一样，只是dev分支上的代码可能会比master上的新一点，因为是重置的commitId</p>\n<h2 id=\"git-status-显示不了汉字\"><a href=\"#git-status-显示不了汉字\" class=\"headerlink\" title=\"git status 显示不了汉字\"></a>git status 显示不了汉字</h2><p>git bash 终端输入命令：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">git config --global core.quotepath <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n\n<p>在git仓库文件夹内打开git bash，在git branch的界面中右击空白处，弹出菜单，选择option，编码设定为 gb2312。</p>\n<h2 id=\"git-ssh-非标端口\"><a href=\"#git-ssh-非标端口\" class=\"headerlink\" title=\"git ssh 非标端口\"></a>git ssh 非标端口</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone ssh://git@hostname:port/…/xxx.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">e.g.</span><br>git clone ssh://git@192.168.1.220:10022/frank/tools.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证ssh链接\"><a href=\"#验证ssh链接\" class=\"headerlink\" title=\"验证ssh链接\"></a>验证ssh链接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ssh -T git@github.com<br>ssh -T ssh://git@192.168.1.220:10022<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git push origin --delete branch_name<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除全部历史提交记录\"><a href=\"#删除全部历史提交记录\" class=\"headerlink\" title=\"删除全部历史提交记录\"></a>删除全部历史提交记录</h2><ol>\n<li>尝试  运行 <code> git checkout --orphan latest_branch</code></li>\n<li>添加所有文件<code>git add -A</code></li>\n<li>提交更改<code>git commit -am &quot;commit message&quot;</code></li>\n<li>删除分支<code>git branch -D main</code></li>\n<li>将当前分支重命名<code>git branch -m main</code></li>\n<li>最后，强制更新存储库。<code>git push -f origin main</code></li>\n</ol>\n<h2 id=\"清理仓库\"><a href=\"#清理仓库\" class=\"headerlink\" title=\"!清理仓库!\"></a>!清理仓库!</h2><p>!谨慎操作! !谨慎操作! !谨慎操作! !谨慎操作! !谨慎操作!</p>\n<ol start=\"0\">\n<li>可以先查看一下本地仓库的大小</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">du</span> -sh .git<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>移除本地仓库中指向旧提交的剩余refs，<code>git for-each-ref</code> 会打印仓库中匹配<code>refs/original</code>的所有refs，并使用<code>delete</code>作为前缀，此命令通过管道传送到 <code>git update-ref</code> 命令，该命令会移除所有指向旧commit的引用。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git for-each-ref --format=<span class=\"hljs-string\">&#x27;delete %(refname)&#x27;</span> refs/original | git update-ref --stdin<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>以下命令会使reflog到期，因为它依然包含着对旧commit的引用。使用<code>--expire=now</code> 参数，确保它在目前为止到期了。如果没有该参数，只会移除超过90天的reflog。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git reflog expire --expire=now --all<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>现在本地仓库依然包含着所有旧commit的对象，但已经没有引用指向它们了，这些对象需要被删除掉。此时可以使用 <code>git gc</code> 命令，Git的垃圾回收器会删除这些没有引用指向的对象。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git gc --prune=now<br></code></pre></td></tr></table></figure>\n\n<p>​\t<code>gc</code>使用<code>--prune</code> 参数来清理特定时期的对象，默认情况下为2周，指定<code>now</code>将删除所有这些对象而没有时期限制。</p>\n<ol start=\"4\">\n<li><code>du -sh .git</code>此时，.git文件的大小只有104k了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">du</span> -sh .git<br><span class=\"hljs-comment\"># 104K    .git</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>如果确认所做的删除大文件操作没有问题，就可以提交到远程仓库了，一旦提交，再也没有办法恢复到原来的状态，一定要小心谨慎！一定要小心谨慎！一定要小心谨慎！</li>\n<li>先进行备份工作，以免出现问题：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/Desktop/<br><span class=\"hljs-built_in\">mkdir</span> gitthin_mirror &amp;&amp; <span class=\"hljs-built_in\">cd</span> gitthin_mirror<br>git <span class=\"hljs-built_in\">clone</span> --mirror git@gitee.com:coderhony/gitthin.git<br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>再回到刚才做的已经瘦身的Git仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/Desktop/gitthin/gitthin<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>把已瘦身的仓库同步到远程仓库，使用<code>—mirror</code>参数：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git push --mirror &lt;url&gt;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>为了确保都已同步，再执行以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git push --all --force<br><span class=\"hljs-comment\"># Everything up-to-date</span><br>git push --tags --force<br><span class=\"hljs-comment\"># Everything up-to-date</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一台电脑两个Github账号\"><a href=\"#一台电脑两个Github账号\" class=\"headerlink\" title=\"一台电脑两个Github账号\"></a>一台电脑两个Github账号</h2><ul>\n<li><p>生成两个ssh key</p>\n</li>\n<li><p>编辑config文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Default GitHub</span><br>Host github.com<br>HostName github.com<br>User git<br>IdentityFile ~/.ssh/id_rsa<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"> Jack-InGitHub!</span> <br>Host pq.github.com<br>HostName github.com<br>User git<br>IdentityFile ~/.ssh/id_rsa_a<br></code></pre></td></tr></table></figure>\n<ul>\n<li>github.com 用id_rsa密钥</li>\n<li>pq.github.com 用id_rsa_a密钥</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>原来<code>git@github.com:Jack-InGitHub/test.git</code></p>\n<p>现在<code>git@pq.github.com:Jack-InGitHub/test.git</code></p>\n</li>\n<li><p>记得再配置不同的邮箱名</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --<span class=\"hljs-built_in\">local</span> user.name <span class=\"hljs-string\">&quot;username&quot;</span><br>git config --<span class=\"hljs-built_in\">local</span> user.email user@email.com<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"利用管道删除全部本地分支\"><a href=\"#利用管道删除全部本地分支\" class=\"headerlink\" title=\"利用管道删除全部本地分支\"></a>利用管道删除全部本地分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git checkout master<br>git branch | grep -v <span class=\"hljs-string\">&#x27;master&#x27;</span> | xargs git branch -D<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-comment\"># 把旧仓库被分成本地git文件目录</span><br>git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">--mirror</span> 旧的git地址<br><br><span class=\"hljs-comment\"># 推动本地目录到新的地址</span><br>cd xxx.git<br>git push --mirror 新的git地址<br><br><span class=\"hljs-comment\"># 以上就完成了单个仓库的迁移</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除未追踪的文件\"><a href=\"#删除未追踪的文件\" class=\"headerlink\" title=\"删除未追踪的文件\"></a>删除未追踪的文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git clean -f -d<br><span class=\"hljs-comment\"># -d 递归清理</span><br><span class=\"hljs-comment\"># -f = --force 强制清理</span><br>-d<br>    Normally, when no &lt;path&gt; is specified, git clean will not recurse into untracked directories to avoid removing too much. Specify -d to have it recurse into such directories as well. If any paths are specified, -d is irrelevant; all untracked files matching the specified paths (with exceptions <span class=\"hljs-keyword\">for</span> nested git directories mentioned under --force) will be removed.<br><br>-f<br>    --force<br>    If the Git configuration variable clean.requireForce is not <span class=\"hljs-built_in\">set</span> to <span class=\"hljs-literal\">false</span>, git clean will refuse to delete files or directories unless given -f or -i. Git will refuse to modify untracked nested git repositories (directories with a .git subdirectory) unless a second -f is given.<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子模块-子仓库\"><a href=\"#子模块-子仓库\" class=\"headerlink\" title=\"子模块 子仓库\"></a>子模块 子仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git submodule <span class=\"hljs-built_in\">help</span><br>usage: git submodule [--quiet] [--cached]<br>   or: git submodule [--quiet] add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;] [--reference &lt;repository&gt;] [--] &lt;repository&gt; [&lt;path&gt;]<br>   or: git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]<br>   or: git submodule [--quiet] init [--] [&lt;path&gt;...]<br>   or: git submodule [--quiet] deinit [-f|--force] (--all| [--] &lt;path&gt;...)<br>   or: git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch] [-f|--force] [--checkout|--merge|--rebase] [--[no-]recommend-shallow] [--reference &lt;repository&gt;] [--recursive] [--[no-]single-branch] [--] [&lt;path&gt;...]<br>   or: git submodule [--quiet] set-branch (--default|--branch &lt;branch&gt;) [--] &lt;path&gt;<br>   or: git submodule [--quiet] set-url [--] &lt;path&gt; &lt;newurl&gt;<br>   or: git submodule [--quiet] summary [--cached|--files] [--summary-limit &lt;n&gt;] [commit] [--] [&lt;path&gt;...]<br>   or: git submodule [--quiet] foreach [--recursive] &lt;<span class=\"hljs-built_in\">command</span>&gt;<br>   or: git submodule [--quiet] <span class=\"hljs-built_in\">sync</span> [--recursive] [--] [&lt;path&gt;...]<br>   or: git submodule [--quiet] absorbgitdirs [--] [&lt;path&gt;...]<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 子模块的添加</span><br>git submodule add [-b branch] &lt;url&gt; &lt;path&gt;<br><span class=\"hljs-comment\"># 子模块的初始化&amp;更新下载</span><br>git submodule init<br>git submodule update<br><span class=\"hljs-comment\"># </span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>还有更简单一点的方式。 如果给 <code>git clone</code> 命令传递 <code>--recurse-submodules</code> 选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</li>\n</ul>\n<h2 id=\"合并没有相关历史的提交\"><a href=\"#合并没有相关历史的提交\" class=\"headerlink\" title=\"合并没有相关历史的提交\"></a>合并没有相关历史的提交</h2><p>将test2分支合并到master分支中 <code>git merge test2 --allow-unrelated-histories </code></p>\n<h4 id=\"合并两个没有相同历史的Git仓库\"><a href=\"#合并两个没有相同历史的Git仓库\" class=\"headerlink\" title=\"合并两个没有相同历史的Git仓库\"></a><a href=\"https://www.cnblogs.com/masahiro/p/12155758.html\">合并两个没有相同历史的Git仓库</a></h4><p>首先在需要合并的仓库中增加另外一个远程仓库 <code>git remote add test2 http://git.xxx.xxx/test2 </code></p>\n<p>然后将test2的仓库拉取到本地 <code>git fetch test2 </code></p>\n<p>创建本地分支 <code>git checkout -b test2 test2/master </code></p>\n<p>切换到目标分区 <code>git checkout master </code></p>\n<p>将test2分支合并到master分支中<code>git merge test2 --allow-unrelated-histories</code></p>\n<p>至此分支合并完成,只需将分支提交到服务器即可</p>\n<h2 id=\"将init后默认branch设定成为main\"><a href=\"#将init后默认branch设定成为main\" class=\"headerlink\" title=\"将init后默认branch设定成为main\"></a>将init后默认branch设定成为main</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --global init.defaultBranch main<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 把当前master分支改名为main 其中-M的意思是移动或者重命名当前分支</span><br>git branch -M main<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"让git流量走代理-SSH的代理\"><a href=\"#让git流量走代理-SSH的代理\" class=\"headerlink\" title=\"让git流量走代理 SSH的代理\"></a>让git流量走代理 SSH的代理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># socks代理</span><br>git config --global http.proxy <span class=\"hljs-string\">&#x27;socks5://127.0.0.1:1080&#x27;</span><br>git config --global https.proxy <span class=\"hljs-string\">&#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class=\"hljs-comment\"># http/https代理</span><br>git config --global http.proxy http://127.0.0.1:8080<br>git config --global https.proxy https://127.0.0.1:8080<br></code></pre></td></tr></table></figure>\n\n<p>也可以直接修改~&#x2F;.gitconfig文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vi ~/.gitconfig<br></code></pre></td></tr></table></figure>\n\n<p>新建或修改这两项配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[http]<br>proxy = socks5://127.0.0.1:1080<br><br>[https]<br>proxy = socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>\n\n<p>如果要取消代理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --global --<span class=\"hljs-built_in\">unset</span> http.proxy<br>git config --global --<span class=\"hljs-built_in\">unset</span> https.proxy<br></code></pre></td></tr></table></figure>\n\n<p>带参数是临时的，修改配置文件是永久变更，修改后最好重启git 设置生效。</p>\n<p>查看配置信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config -l --global<br></code></pre></td></tr></table></figure>\n\n<p>执行查看代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config -l<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SSH流量\"><a href=\"#SSH流量\" class=\"headerlink\" title=\"SSH流量\"></a>SSH流量</h3><p>上面的方法只代理了http和https的流量, 我们用ssh协议的较多这就需要去代理ssh流量了</p>\n<p>配置ssh走代理我们就需要去配置 ssh 程序(而不是git), 我们需要在 <code>~/.ssh/config</code> 文件中设置 <code>ProxyCommand</code> 选项。</p>\n<ul>\n<li><p>Linux 和 macOS 是通过 <code>nc</code> 来执行 <code>ProxyCommand</code> 的，</p>\n</li>\n<li><p>Windows 下则是通过 <code>connect</code>。</p>\n</li>\n</ul>\n<h4 id=\"Linux-SSH-配置\"><a href=\"#Linux-SSH-配置\" class=\"headerlink\" title=\"Linux SSH 配置\"></a>Linux SSH 配置</h4><p>编辑 <code>~/.ssh/config</code> 文件,给文件加上如下对应内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Host 后面 接的 github.com 是指定要走代理的仓库域名。</span><br><span class=\"hljs-comment\"># 在 ProxyCommand 中，Linux 和 macOS 用户用的是 nc。</span><br><span class=\"hljs-comment\"># -X 选项后面接的是 connect. 意思是 HTTPS 代理。</span><br><span class=\"hljs-comment\"># -x 选项后面加上代理地址和端口号。</span><br><span class=\"hljs-comment\"># 在调用 ProxyCommand 时，%h 和 %p 将会被自动替换为目标主机名和 SSH 命令指定的端口（%h 和 %p 不要修改，保留原样即可）。</span><br>Host github.com<br>    User git<br>    ProxyCommand nc -X connect -x 127.0.0.1:7890 %h %p<br><span class=\"hljs-comment\"># -X 选项后面接的是 5. 意思是 socks5 代理。</span><br>Host github.com<br>    User git<br>    ProxyCommand nc -X 5 -x 127.0.0.1:7891 %h %p<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Windows-SSH-配置\"><a href=\"#Windows-SSH-配置\" class=\"headerlink\" title=\"Windows SSH 配置\"></a>Windows SSH 配置</h4><p>编辑 <code>~/.ssh/config</code> 文件，然后增加如下内容：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\"><span class=\"hljs-comment\"># Host 后面 接的 github.com 是指定要走代理的仓库域名。</span><br><span class=\"hljs-comment\"># 在 ProxyCommand 中，Windows 用户用的是 connect。</span><br><span class=\"hljs-comment\"># -S代表的是socks5 -H 选项的意思是 HTTP 代理 </span><br><span class=\"hljs-comment\"># 在调用 ProxyCommand 时，%h 和 %p 将会被自动替换为目标主机名和 SSH 命令指定的端口（%h 和 %p 不要修改，保留原样即可）。</span><br>Host github.com<br>\tProxyCommand <span class=\"hljs-keyword\">connect</span> -S <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1080</span> %h %p<br>Host github.com<br>\tProxyCommand <span class=\"hljs-keyword\">connect</span> -H <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1080</span> %h %p<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"patch的使用\"><a href=\"#patch的使用\" class=\"headerlink\" title=\"patch的使用\"></a>patch的使用</h2><p>patch文件其实就是运行<code>git diff</code>控制台输出的信息并保存的文件.</p>\n<p><strong>patch的创建</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git diff &gt; my_custom_patch_file.patch<br></code></pre></td></tr></table></figure>\n\n<p><strong>patch的应用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git apply patch_file.patch <br></code></pre></td></tr></table></figure>\n\n<p><strong>patch出现一些提示, 这个提示的意思</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">patch:19: trailing whitespace.<br>warning: 1 line adds whitespace errors.<br><br><span class=\"hljs-comment\"># 告警的含义是提示有空格在行尾出现。</span><br><span class=\"hljs-comment\"># 不用太担心这个问题并不大</span><br><span class=\"hljs-comment\"># 可以使用 --no-verify 开关绕过此问题</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"git-branch-不单独输出在控制台-而是像新开页面一样\"><a href=\"#git-branch-不单独输出在控制台-而是像新开页面一样\" class=\"headerlink\" title=\"git branch 不单独输出在控制台 而是像新开页面一样\"></a>git branch 不单独输出在控制台 而是像新开页面一样</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --global pager.branch <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"一次推送多个远程仓库\"><a href=\"#一次推送多个远程仓库\" class=\"headerlink\" title=\"一次推送多个远程仓库\"></a>一次推送多个远程仓库</h2><hr>\n<p><strong>使用 <code>git remote set-url</code> 命令</strong></p>\n<p>2.1# 删除方法一的 <code>oschina</code> 远程仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git remote <span class=\"hljs-built_in\">rm</span> oschina<br></code></pre></td></tr></table></figure>\n\n<p>2.2# 使用如下命令添加远程仓库。</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-built_in\">--add</span> <span class=\"hljs-string\">github</span> <span class=\"hljs-string\">https</span>://<span class=\"hljs-string\">git</span>.<span class=\"hljs-string\">oschina</span>.<span class=\"hljs-string\">net</span>/<span class=\"hljs-string\">zxbetter</span>/<span class=\"hljs-string\">test</span>.<span class=\"hljs-string\">git</span><br></code></pre></td></tr></table></figure>\n\n<p>2.3# 查看远程仓库情况。可以看到 <code>github</code> 远程仓库有两个 <code>push</code> 地址。<em>这种方法的好处是每次只需要 <code>push</code> 一次就行了。</em></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git remote -v<br>github  https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/zxbetter/</span>test.git (fetch)<br>github  https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/zxbetter/</span>test.git (push)<br>github  https:<span class=\"hljs-regexp\">//gi</span>t.oschina.net<span class=\"hljs-regexp\">/zxbetter/</span>test.git (push)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>修改配置文件</strong></p>\n<p>打开 <code>.git/config</code> 找到 <code>[remote &quot;github&quot;]</code>，添加对应的 <code>url</code> 即可，效果如下。这种方法其实和方法二是一样的。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">[remote <span class=\"hljs-string\">&quot;github&quot;</span>]<br>    url = https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/zxbetter/</span>test.git<br>    fetch = +refs<span class=\"hljs-regexp\">/heads/</span>*:refs<span class=\"hljs-regexp\">/remotes/gi</span>thub/*<br>    url = https:<span class=\"hljs-regexp\">//gi</span>t.oschina.net<span class=\"hljs-regexp\">/zxbetter/</span>test.git<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "git"
            ]
        }
    ]
}