{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"synology\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2021/ee60585b/",
            "url": "https://www.oikiou.top/2021/ee60585b/",
            "title": "Synology 群晖",
            "date_published": "2021-10-18T14:57:15.000Z",
            "content_html": "<h1 id=\"群晖\"><a href=\"#群晖\" class=\"headerlink\" title=\"群晖\"></a>群晖</h1><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"资源及参考链接\"><a href=\"#资源及参考链接\" class=\"headerlink\" title=\"资源及参考链接\"></a>资源及参考链接</h2><p><a href=\"https://www.openos.org/threads/dsm-6-2-3-2020-12-27.29/\">https://www.openos.org/threads/dsm-6-2-3-2020-12-27.29/</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p><strong>引导系统装哪里？</strong><br>非常关键的问题，DSM采用系统和数据相分离的结构，也就是说引导系统需要独立安装在一个设备上，通常是U盘&#x2F;SD&#x2F;TF卡、或者SSD硬盘上。数据需要额外安装独立的硬盘上。</p>\n</li>\n<li><p><strong>引导系统安装盘 (U盘&#x2F;USB flash drive&#x2F;随身碟)</strong><br>无论是U盘还是TF卡，其实128MB或以上就足够了，USB 2.0&#x2F;3.0都可以。</p>\n</li>\n<li><p><strong>数据存储硬盘 (硬盘)</strong><br>机械硬盘或者固态硬盘都可以，这个没有限制，容量当然越大越好。</p>\n</li>\n<li><p>一般来说安装黑群晖至少需要两个文件, 一个是黑群晖的引导文件, 一个是群晖DSM的系统文件.</p>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><blockquote>\n<p>  黑群晖系统: DSM 6.2.0–6.2.3<br>  引导版本: 1.04b (首选推荐版本)<br>  针对机型: DS918+<br>  引导方式: 传统BIOS和UEFI<br>  引导下载地址<br>  <a href=\"https://www.openos.org/downloads/synology-dsm-6-2-1-loader-v1-04b.15/\">https://www.openos.org/downloads/synology-dsm-6-2-1-loader-v1-04b.15/</a></p>\n<p>  DS918+ DSM 6.2.3-25426 Update2 系统<br>  <a href=\"https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat\">https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat</a></p>\n<p>  其他DSM系统版本请看这里<br>  <a href=\"https://archive.synology.com/download\">https://archive.synology.com/download</a></p>\n</blockquote>\n<ol>\n<li><p>下载群晖的引导文件, 推荐下载<code>v1.04b.for.dms.6.2.1.synoboot-ds918.zip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">http://down.nas2x.com/synology/dsm/6.2/synoboot/<br><span class=\"hljs-comment\"># 里面有三个文件</span><br>dsm.6.2.synoboot_ds3615xs.1.03b.zip                02-Aug-2018 10:43     17M<br>dsm.6.2.synoboot_ds3617xs.1.03b.zip                02-Aug-2018 10:42     20M<br>v1.04b.for.dms.6.2.1.synoboot-ds918.zip            25-Jan-2019 18:30     21M<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>下载群晖的系统, 根据上面的引导下载系统, 上面选的是<code>DS918+</code>的话, 这里下载<code>DS918+</code>就好.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># DS918+</span><br>https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat<br><span class=\"hljs-comment\"># 其他DSM系统</span><br>https://archive.synology.com/download<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改引导程序配置文件,</p>\n<p>使用<code>ChipEasy</code>或者<code>ChipGenius</code>查找到U盘的VID和PID。</p>\n<p>以下图为例，这个U盘的VID是0930，PID是6544。</p>\n<p><strong>请记录好这两个值。下面修改配置文件需要用到。</strong></p>\n<p><img src=\"/2021/ee60585b/07.png\" alt=\"IMG\"></p>\n</li>\n<li><p>编辑配置文件grub.cfg.</p>\n<p>打开DiskGenius, 在顶部选择硬盘-打开虚拟硬盘文件, 选择刚刚下载的<code>.img</code>引导文件并打开.</p>\n<p><img src=\"/2021/ee60585b/kc6jjxmd.png\" alt=\"IMG\"></p>\n<p>在左边找到刚刚打开的img文件, 点击展开<code>ESP-&gt;grub</code>, 在右边找到<code>grub.cfg</code>, 选择复制到桌面.</p>\n<p><img src=\"/2021/ee60585b/kccTMt.md.png\" alt=\"IMG\"></p>\n<p>使用文本编辑器修改<code>line22-line25</code>的数据,</p>\n<p>需要注意的是<code>VID</code>和<code>PID</code>必须要和U盘的数值匹配好.</p>\n<p><code>SN</code>和<code>MAC1</code>是在洗半白的时候需要修改的数值, 是非必须修改的.</p>\n<blockquote>\n<p>set vid&#x3D;0x058f U盘的VID 实体机必须修改，虚拟机无需修改<br>set pid&#x3D;0x6387 U盘的PID 实体机必须修改，虚拟机无需修改<br>set sn&#x3D;A8ODN02468 序列号 可以不修改<br>set mac1&#x3D;0011322CA603 mac地址 可以不修改</p>\n</blockquote>\n<p>注意:vid和pid的0x是十六进制的意思是不要删除掉的，只需要修改后面的4位.</p>\n<p><img src=\"/2021/ee60585b/06.png\" alt=\"IMG\"></p>\n<p>回到DiskGenius内将原来的<code>grub.cfg</code>文件替换掉, 我这里是先将<code>img</code>镜像里面的<code>grub.cfg</code>文件删除, 再右键选择新增文件将编辑好的<code>grub.cfg</code>文件放入其中.</p>\n<p>关闭DiskGenius完成<code>img</code>引导的修改.</p>\n</li>\n<li><p><strong>制作引导U盘</strong></p>\n<p>使用<code>Win32 Disk Imager</code>磁盘映像工具将<code>img</code>引导文件写入U盘内.</p>\n<blockquote>\n<p>  下载地址:<a href=\"https://sourceforge.net/projects/win32diskimager/\">https://sourceforge.net/projects/win32diskimager/</a><br>  中文版:<a href=\"https://www.openos.org/downloads/win32-disk-imager.2/\">https://www.openos.org/downloads/win32-disk-imager.2/</a></p>\n</blockquote>\n<ul>\n<li><p>先在软件界面右侧设备(Device) 部分选择U盘的盘符。<br>（建议在操作前移除所有其他的USB存储设备，以防选择错误导致其他U盘或移动硬盘数据丢失）。</p>\n</li>\n<li><p>再点击软件界面 映像文件(Image File)右侧蓝色文件夹图标，选择之前下载的synoboot.img文件。</p>\n</li>\n<li><p>最后再点击写入(Write)。</p>\n</li>\n</ul>\n<p><img src=\"/2021/ee60585b/w11.png\" alt=\"IMG\"></p>\n</li>\n<li><p>安装群晖系统</p>\n<p>插入U盘，并且在主板上设置默认从U盘启动</p>\n<p>默认选择从U盘启动后选择第1个选项<code>DS3617xs 6.1 Baremetal with Jun&#39;s Mod v1.02-alpha</code>按回车。</p>\n<p><img src=\"/2021/ee60585b/2017041711.png\" alt=\"IMG\"></p>\n</li>\n<li><p>找到设备IP地址</p>\n<p>这里需要稍微等一等提示<code>Please open [http://find.synology.com](http://find.synology.com/) to continue</code>后等个1-2分钟在浏览器里面输入<a href=\"http://find.synology.com/\">http://find.synology.com/</a> ，搜索DSM，如果没有找到，那么使用SynologyAssistant查找. <a href=\"https://cndl.synology.cn/download/Tools/Assistant/6.1-15030/Windows/synology-assistant-6.1-15030.exe\">点击下载Windows版本</a> </p>\n<p>能进路由器管理页面的, 较好的方案是看一下群晖获取的IP是多少, 浏览器直接进去这个<code>IP:5000</code>的网页即可, 免去搜寻的麻烦.</p>\n<blockquote>\n<p>  若多次测试还是无法搜索到群晖，那可能是网卡不支持,<br>  详情请查看DSM黑群晖网卡支持列表<br>  <a href=\"https://www.openos.org/threads/dsm-6-1-supported-drivers.42/\">https://www.openos.org/threads/dsm-6-1-supported-drivers.42/</a></p>\n</blockquote>\n<p><img src=\"/2021/ee60585b/201704zoz.png\" alt=\"IMG\"></p>\n</li>\n<li><p>上传系统文件.</p>\n<p>根据提示继续，点击<code>手动安装</code>后选择之前下载的pat文件，然后再点击<code>立即安装</code>。</p>\n<p><img src=\"/2021/ee60585b/201704opo.png\" alt=\"IMG\"></p>\n<p><img src=\"/2021/ee60585b/201704ada.png\" alt=\"IMG\"></p>\n</li>\n<li><p>安装之后完成一些配置后就可以进入系统界面了.</p>\n</li>\n</ol>\n<h2 id=\"安装后的注意事项\"><a href=\"#安装后的注意事项\" class=\"headerlink\" title=\"安装后的注意事项\"></a>安装后的注意事项</h2><blockquote>\n<p>  <strong>安装完成后的基本设置和注意事项</strong><br>  1,不要升级，不要升级，不要升级。可以去控制面板下面的-更新和还原里面设置。<br>  2,还是不要升级，去计划任何里面关闭DSM自动更新选项。<br>  3,在存储空间管理员里面设置存储空间后才可以进行其他的操作，如共享文件夹或安装其他套件。<br>  4,DSM 6.x配置文件grub.cfg修改: <a href=\"https://www.openos.org/threads/dsm-6-x-grub-cfg-mac-sn.36/\">https://www.openos.org/threads/dsm-6-x-grub-cfg-mac-sn.36/</a></p>\n<p>  群辉Synology DSM 添加硬盘&#x2F;存储空间的方法<br>  <a href=\"https://www.openos.org/threads/synology-dsm-hdd.30/\">https://www.openos.org/threads/synology-dsm-hdd.30/</a></p>\n<p>  6.1驱动支持列表<br>  <a href=\"https://www.openos.org/threads/dsm-6-1-supported-drivers.42/\">https://www.openos.org/threads/dsm-6-1-supported-drivers.42/</a></p>\n<p>  经过测试，引导文件支持DSM 6.1.1-15101<br>  但是不支持从老版本升级升级，仅限全新安装<br>  安装后更新到update 2没有问题<br>  <a href=\"https://www.openos.org/downloads/xpenology-dsm-6-1-1.8/history\">https://www.openos.org/downloads/xpenology-dsm-6-1-1.8/history</a></p>\n</blockquote>\n<blockquote>\n<p>  安装完成后可以下载一些相关的手机端应用<br>  DS Finder<br>  DS File<br>  DS photo</p>\n</blockquote>\n<h1 id=\"编译引导安装群晖\"><a href=\"#编译引导安装群晖\" class=\"headerlink\" title=\"编译引导安装群晖\"></a>编译引导安装群晖</h1><p>Github： <a href=\"https://github.com/fbelavenuto/arpl/\">https://github.com/fbelavenuto/arpl/</a> （这个在2023年停更了）<br>Github：<a href=\"https://github.com/RROrg/rr/releases\">https://github.com/RROrg/rr/releases</a> （这个在更新，但是出现不久，据说是新的，也有说是arpl的迭代版本）</p>\n<ol>\n<li><p>到release页面下载<code>arpl-1.1-beta2a.img.zip</code>，解压后得到<code>arpl.img</code>文件。</p>\n<ol>\n<li>物理机安装群晖的，使用rufus吧<code>arpl.img</code>文件写入到U盘中</li>\n<li>虚拟机安装的，将这个文件导入虚拟机，并将其设置为启动盘</li>\n</ol>\n</li>\n<li><p>开机设为启动项</p>\n</li>\n<li><p>跳出显示画面，按默认选项走就好</p>\n</li>\n<li><p>如果设备连接的路由器打开了DHCP的话，屏幕可以看到已经显示了<code>IP:7601</code>这样的地址。</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230148188.png\" alt=\"image-20230828230148188\"></li>\n</ol>\n</li>\n<li><p>我们需要连接到设备进行一些配置</p>\n<ol>\n<li>方式一 通过终端<ol>\n<li>机器插上键盘</li>\n<li>从设备调用“menu.sh”命令。</li>\n</ol>\n</li>\n<li>方式二 通过网络配置<ol>\n<li>另外一台电脑，打开刚刚屏幕上显示的网址配置</li>\n</ol>\n</li>\n<li>方式三 通过ssh配置<ol>\n<li>使用ssh客户端，用户名： <code>root</code> 和密码： <code>Redp1lL-1s-4weSomE</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p><code>Choose a model</code>选择你喜欢的型号 （DS918+ 兼容性好）</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230737102.png\" alt=\"image-20230828230737102\"></li>\n<li>这里有个型号选择的参考 <a href=\"http://d.nas50.cn/?id=16\">网址</a><br> <img src=\"/%E7%BE%A4%E6%99%96.assets/image-20240626182531055.png\"></li>\n</ol>\n</li>\n<li><p><code>Choose a Build Number</code> 可以选最新的版本，这个版本对应群晖系统的版本</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230902591.png\" alt=\"image-20230828230902591\"></li>\n</ol>\n</li>\n<li><p><code>Choose a serial number</code> 序列号配置</p>\n<ol>\n<li><code>Generate a random serial number</code> 随机生成一个序列号</li>\n</ol>\n</li>\n<li><p><code>Addons</code> 是和十代cpu核显驱动相关的配置（这里根据CPU去配置）</p>\n</li>\n<li><p><code>build the loader</code> 编译loader程序</p>\n<ol>\n<li>这个需要一点时间稍微等一下</li>\n<li><img src=\"/2021/ee60585b/image-20230828231118050.png\" alt=\"image-20230828231118050\"></li>\n</ol>\n</li>\n<li><p><code>boot the loader</code> 启动编译好的boot</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828231334846.png\" alt=\"image-20230828231334846\"></li>\n</ol>\n</li>\n<li><p>boot引导到DSM之后，屏幕就不会再更新信息了</p>\n</li>\n<li><p>访问群晖的页面</p>\n<ol>\n<li>路由器找到群晖的IP，访问<code>IP:5000</code></li>\n<li>浏览器输入 <a href=\"https://finds.synology.com/\">https://finds.synology.com/</a> 寻找刚刚安装启动的NAS</li>\n</ol>\n</li>\n<li><p>DSM系统安装参照上篇，DSM系统安装就是一样的了。</p>\n</li>\n</ol>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"SSH访问启动盘\"><a href=\"#SSH访问启动盘\" class=\"headerlink\" title=\"SSH访问启动盘\"></a>SSH访问启动盘</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir /mnt/boot<br>cd /dev<br>sudo mount -t vfat synoboot1 /mnt/boot<br>cd /mnt/boot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"半洗白-SN\"><a href=\"#半洗白-SN\" class=\"headerlink\" title=\"半洗白 SN\"></a>半洗白 SN</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>全黑版本的群晖VideoStation不能离线转码，PhotoStation和Moments的略缩图和人像识别也会有问题</li>\n<li>半洗白就是转码和缩略图一类的可用</li>\n<li>全白就是多了QC，这个就没必要了(白嫖个系统就好了,就不要去嫖别人的服务器了)</li>\n<li>主要通过Docker+DDSM来获得SN</li>\n<li>群辉新版的Docker 18.09.0-0506已经关闭了DDSM安装，可下载17.05.0版本的Docker</li>\n</ul>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>下载17.05.0的Docker，可以在<a href=\"https://archive.synology.com/download/Package/Docker/17.05.0-0401\">群晖官网下载</a>。</p>\n</li>\n<li><p>下载DDSM，可在<a href=\"https://archive.synology.com/download/Os/DSM/6.2.3-25426\">群晖官网下载</a>，注意要对应自己DSM的版本。</p>\n</li>\n<li><p>首先在套件中心点手动安装把第一步下载的17.05.0的Docker放进去。</p>\n</li>\n<li><p>打开Docker-左侧DSM-点击新增-下一步-下一步-下一步-手动上传，把刚刚下载的DDSM放进去，等待他安装完成。</p>\n</li>\n<li><p>安装完成后，进入DDSM群晖的控制面板。</p>\n</li>\n<li><p>在信息栏可看到SN和MAC，复制DDSM的SN和MAC保存下来。</p>\n</li>\n<li><p>SSH接入DSM群晖，挂载启动盘BOOT，修改<code>/grub/grub.cfg</code>文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">挂载启动盘BOOT</span><br>mkdir /mnt/boot<br>cd /dev<br>sudo mount -t vfat synoboot1 /mnt/boot<br>cd /mnt/boot<br></code></pre></td></tr></table></figure></li>\n<li><p>重启。</p>\n</li>\n</ol>\n<p><img src=\"/2021/ee60585b/image-20211018141146176.png\" alt=\"image-20211018141146176\"></p>\n<h2 id=\"半洗白后moments人脸识别不出来\"><a href=\"#半洗白后moments人脸识别不出来\" class=\"headerlink\" title=\"半洗白后moments人脸识别不出来\"></a>半洗白后moments人脸识别不出来</h2><h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>当群晖系统升级到6.22-24922以后，Moments也升级到了1.3.X，新的bug也随着版本升级来了”人物或者主题经常识别不出来“，经查日志后发现是Moments1.3插件有bug引导的，有问题的插件为“<strong>libsynophoto-plugin-detection.so</strong>”，经测试该插件在Moments1.2版本中是正常的。</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>群晖上启用SSH，并将moments停用</p>\n</li>\n<li><p>MobaXterm连接群晖，启用root登录</p>\n<ol>\n<li><code>sudo -i</code></li>\n<li><code>vi /etc/ssh/sshd_config</code></li>\n<li>找到#PermitRootLogin prohibit password，这一行最后，按回车，然后输入 <code>PermitRootLogin yes</code></li>\n<li>修改root密码<code>synouser --setpw root 你的密码</code></li>\n<li>重启</li>\n</ol>\n</li>\n<li><p>用root重新登录，将libsynophoto-plugin-detection.so插件替换掉</p>\n<ol>\n<li>找到目录：&#x2F;var&#x2F;packages&#x2F;SynologyMoments&#x2F;target&#x2F;usr&#x2F;lib&#x2F;libsynophoto-plugin-detection.so</li>\n<li>将原文件先备份一下</li>\n<li>用现有新文件将他替换掉</li>\n<li>新文件权限修改一下</li>\n</ol>\n</li>\n<li><p>将moments启用，问题解决</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.zhihu.com/question/428454266/answer/1681110862?ivk_sa=1024320u\">https://www.zhihu.com/question/428454266/answer/1681110862?ivk_sa=1024320u</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_36059505/article/details/112766321\">https://blog.csdn.net/weixin_36059505/article/details/112766321</a></p>\n<h2 id=\"群晖安装-ipkg-包管理\"><a href=\"#群晖安装-ipkg-包管理\" class=\"headerlink\" title=\"群晖安装 ipkg 包管理\"></a>群晖安装 ipkg 包管理</h2><p><strong>仅适用于x86平台，ARM平台需要修改链接</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以 root 用户执行</span><br>sudo -i<br>cd /volume1/@tmp<br>wget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh<br>chmod +x syno-i686-bootstrap_1.2-7_i686.xsh<br>sh syno-i686-bootstrap_1.2-7_i686.xsh<br>rm syno-i686-bootstrap_1.2-7_i686.xsh<br>ipkg update<br>reboot<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CPU频率调整\"><a href=\"#CPU频率调整\" class=\"headerlink\" title=\"CPU频率调整\"></a>CPU频率调整</h2><ol>\n<li><p>Linux的&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpuxxx&#x2F;cpufreq目录存储着第xxx个CPU的一些参数，例如最小最大平均频率，bios限制频率。</p>\n</li>\n<li><p>使用如下命令可以查看支持的工作模式：</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cat <span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/system/</span>cpu<span class=\"hljs-regexp\">/cpu0/</span>cpufreq/scaling_available_governors<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>powersave</td>\n<td>只会保持最低频率，节能省电</td>\n</tr>\n<tr>\n<td>userspace</td>\n<td>自定义频率</td>\n</tr>\n<tr>\n<td>ondemand</td>\n<td>一有cpu计算量的任务，就会立即达到最大频率运行，等执行完毕就立即回到最低频率</td>\n</tr>\n<tr>\n<td>conservative</td>\n<td>根据负载状态自动在频率上下限调整</td>\n</tr>\n<tr>\n<td>performance</td>\n<td>保持以最大频率运行</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>通过下面指令可以看第*个CPU核心的工作状态，</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cat <span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/system/</span>cpu<span class=\"hljs-regexp\">/cpu*/</span>cpufreq/scaling_governor<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>安装cpufreq-info：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">ipkg update<br>ipkg <span class=\"hljs-keyword\">install</span> cpufrequtils<br></code></pre></td></tr></table></figure>\n\n<p>查看CPU频率和模式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cpufreq-info<br></code></pre></td></tr></table></figure>\n\n<p>修改模式：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">cpufreq-<span class=\"hljs-built_in\">set</span> -c * -g <span class=\"hljs-built_in\">MODE</span><br></code></pre></td></tr></table></figure>\n\n<p>例如将四个核心全部ondemand：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">cpufreq-<span class=\"hljs-keyword\">set</span> -c <span class=\"hljs-comment\">0 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 1 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 2 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 3 -g ondemand</span><br></code></pre></td></tr></table></figure>\n\n<p>为了下次开机也自动生效，可以手动添加启动脚本。将其存成.sh，开启启动即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#/bin/bash</span><br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">0</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">1</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">2</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">3</span> -g ondemand<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lm-sensors-风扇控制\"><a href=\"#lm-sensors-风扇控制\" class=\"headerlink\" title=\"lm-sensors 风扇控制\"></a>lm-sensors 风扇控制</h2><p>执行安装命令</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">ipkg <span class=\"hljs-keyword\">install</span> lm-sensors<br></code></pre></td></tr></table></figure>\n\n<p>查看温度</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sensors</span><br></code></pre></td></tr></table></figure>\n\n<p>配置风扇控制，这块主要的目的只检测风扇在那一路，一般主板会涉及到多个风扇，但不一定都会安装，所以通过pwmconfig来检测与测试风扇的转速控制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> pwmconfig<br></code></pre></td></tr></table></figure>\n\n<p>使用fancontrol自动控制风扇转速，他的原理就是定时执行脚本，监控CPU温度、根据不同的温度区间控制PWM值，从而改变风扇的转速。<br>当转速降低了后，噪音自然就解决了。</p>\n<p>fancontrol会依赖pwmconfig命令生成的配置文件。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">/etc/fancontrol<br><br>-----------配置内容如下--------------<br><span class=\"hljs-comment\"># Configuration file generated by pwmconfig, changes will be lost</span><br><span class=\"hljs-attribute\">INTERVAL</span>=10<br><span class=\"hljs-attribute\">DEVPATH</span>=hwmon0=devices/platform/coretemp.0 <span class=\"hljs-attribute\">hwmon1</span>=devices/platform/it87.2624<br><span class=\"hljs-attribute\">DEVNAME</span>=hwmon0=coretemp <span class=\"hljs-attribute\">hwmon1</span>=it8772<br><span class=\"hljs-attribute\">FCTEMPS</span>=hwmon1/device/pwm2=hwmon0/device/temp3_input<br>FCFANS= hwmon1/device/<span class=\"hljs-attribute\">pwm2</span>=hwmon1/device/fan2_input<br><span class=\"hljs-attribute\">MINTEMP</span>=hwmon1/device/pwm2=20<br><span class=\"hljs-attribute\">MAXTEMP</span>=hwmon1/device/pwm2=60<br><span class=\"hljs-attribute\">MINSTART</span>=hwmon1/device/pwm2=150<br><span class=\"hljs-attribute\">MINSTOP</span>=hwmon1/device/pwm2=100<br></code></pre></td></tr></table></figure>\n\n<p>默认生成的配置基本能够满足需求，经过测试风扇在2000转左右噪音相对能够接受。</p>\n<h2 id=\"VideoStation\"><a href=\"#VideoStation\" class=\"headerlink\" title=\"VideoStation\"></a>VideoStation</h2><p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/357332211\">关于群晖NAS video station TMDB连接测试失败及搜刮结果下载失败的解决方案</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/152351243\">（群晖）关于Video Station内电影及电视剧封面简介为空白的处理方法</a></p>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>TMDB的图片服务器被屏蔽需要修改hosts 加上 api.themoviedb.org 的ip</p>\n</li>\n<li><p>修改hosts后即可测试，已经连通</p>\n</li>\n<li><p>搜刮信息会出现下载失败，主要是下载图片的url需要切换一下</p>\n<p>  编辑 util_themoviedb.php 文件</p>\n  <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">cd /var/packages/VideoStation/target/plugins<br>vi util_themoviedb.php<br></code></pre></td></tr></table></figure>\n  <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\"># 找到下面的语句<br>define(&#x27;API_URL&#x27;, &#x27;https://api.themoviedb.org/3/&#x27;);<br>define(&#x27;BANNER_URL&#x27;, &#x27;https://image.tmdb.org/t/p/w500&#x27;);<br>define(&#x27;BACKDROUP_URL&#x27;, &#x27;https://image.tmdb.org/t/p/original&#x27;);<br><br># 我们只需要把改为<br>image.tmdb.org<br># 改为<br>www.themoviedb.org<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Gogs\"><a href=\"#Gogs\" class=\"headerlink\" title=\"Gogs\"></a>Gogs</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/cfan927/article/details/100862989\">【工具】群晖利用docker安装Gogs代码管理平台</a></p>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>打开“Docker”-&gt;”注册表”，搜索Gogs并“右键”-&gt;“下载此映像”</p>\n<p><img src=\"/2021/ee60585b/watermark.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>在”映像“页面中安装Gogs容器后，切换到”容器“页面，然后双击打开Gogs详情页</p>\n<ol>\n<li>设定容器的本地端口</li>\n<li>设定桌面快捷方式</li>\n</ol>\n</li>\n<li><p>Gogs配置</p>\n<ol>\n<li><p>数据库类型。</p>\n<p>这里我是个人用，所以就选<code>SQLite</code>，比较好备份，备份的时候可以整个打包走。</p>\n<p>如果选用mariaDB就按下面的步骤配置</p>\n<blockquote>\n<ol>\n<li><p>Windows中用ssh登录群晖服务器，cd到mariaDB目录下：</p>\n<p> <code>cd /volume1/@appstore/MariaDB10/usr/local/mariadb10/bin/</code></p>\n</li>\n<li><p>输入命令 <code>./mysql -u root -p</code>，然后输入密码，连接数据库</p>\n</li>\n<li><p>输入命令 <code>use mysql</code>切换到mysql数据库</p>\n</li>\n<li><p>创建数据库gogs<br> <code>CREATE DATABASE IF NOT EXISTS gogs;</code></p>\n</li>\n<li><p>输入下面的命令获取数据库远程访问权限 ：</p>\n<p> <code>GRANT ALL PRIVILEGES ON gogs.* TO &#39;user&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code><br> 其中user为用户名<br> password为用户密码</p>\n</li>\n<li><p>然后用<code>show databases;</code>命令查看一下结果</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>ssh建议使用内置ssh服务器，注意的是使用内置ssh服务器的时候就不能再使用22端口了，需要改掉</p>\n</li>\n<li><p>HTTP端口和应用URL这里需要注意，如果配置了bredge网络，这里是端口是gogs的端口，应用URL的端口是对外的配置网络时候配置的端口。</p>\n</li>\n</ol>\n</li>\n<li><p>gogs:port 设定相关参数即可</p>\n</li>\n<li><p>着重需要说明的是：</p>\n<ol>\n<li>NULL</li>\n</ol>\n</li>\n<li><p>tips</p>\n<ol>\n<li>删除数据库  <code>DROP DATABASE gogs;</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Note-1\"><a href=\"#Note-1\" class=\"headerlink\" title=\"Note\"></a>Note</h3><ul>\n<li>gogs 的配置保存在<code>/data/gogs/conf/app.ini</code> 参考下图</li>\n</ul>\n<p><img src=\"/2021/ee60585b/image-20211103161058734.png\" alt=\"image-20211103161058734\"></p>\n<ul>\n<li><strong>注意</strong> MariaDB的port默认是不开的，需要去套件里面打开。</li>\n</ul>\n<blockquote>\n<ol>\n<li><strong>Domain</strong> 填写Docker宿主机的物理IP地址，或者域名地址,注意这里是不带 http的 如： 192.168.137.140 或 git.mydomain.com</li>\n<li><strong>SSH port</strong> 假如Docker映射的端口是 10022:22 那么这里就填写宿主机开放的端口 10022</li>\n<li><strong>HTTP port</strong> 假如Docker映射的端口是 10080:3000 这里要填容器内的监听端口 3000</li>\n<li><strong>Application URL</strong> 这里要填写的格式为 http(s)?&#x2F; + Domain + HTTP port ，比如：<a href=\"http://git.mydomain.com/10080\">http://git.mydomain.com/10080</a> 。还需要注意的一点是，如果你用了nginx来映射宿主机的 10080 端口，这里要去掉后面的端口，即 <a href=\"http://git.mydomain.com/%EF%BC%8C%E8%AF%B4%E7%99%BD%E4%BA%86%E5%B0%B1%E6%98%AF%E4%BD%A0%E5%9C%A8%E5%A4%96%E9%83%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82\">http://git.mydomain.com/，说白了就是你在外部浏览器上访问的地址。</a></li>\n</ol>\n</blockquote>\n<ul>\n<li><strong>注意</strong>非标准port的ssh需要注意clone地址是否正确</li>\n</ul>\n<h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p><a href=\"https://github.com/gogs/gogs/discussions/6876\">https://github.com/gogs/gogs/discussions/6876</a></p>\n<ul>\n<li><strong>数据备份</strong></li>\n<li>因为容器内的 <code>/data</code> 目录是直接挂载到宿主机的，我们把容器内备份目录设置为 <code>/data</code> ， 方便宿主机将备份文件同步到远程备份服务器。</li>\n<li>这是直接在宿主机上执行的命令。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker container exec gogs su - git -s /bin/ash \\<br>-c &quot;/app/gogs/gogs backup \\<br>--config=/data/gogs/conf/app.ini \\<br>--target=/data&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意挂载目录的权限</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">也可以在docker命令行中手动执行命令来备份</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开命令交互窗口</span><br>docker exec -ti gogs bash<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">gogs是git用户运行的 需要 先切换到git用户</span><br>su - git <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看备份命令的格式</span><br>/app/gogs/gogs backup -h<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行备份  config自然就是配置文件了 target是输出的目录</span><br>/app/gogs/gogs backup --config=/data/gogs/conf/app.ini --target=/data/<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>数据恢复</strong></p>\n</li>\n<li><p>用docker<strong>完成gogs部署</strong>之后，执行下面命令</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker container exec -it gogs su - git -s /bin/ash \\<br>-c &quot;/app/gogs/gogs restore \\<br>--config=/data/gogs/conf/app.ini \\<br>--tempdir=/data \\<br>--from=/data/gogs-backup-20211230091744.zip&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">同样的这里如果手动执行的话就是这样的啦</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">记得先在docker部署好gogs</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开命令交互窗口</span><br>docker exec -ti gogs bash<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">gogs是git用户运行的 需要 先切换到git用户</span><br>su - git <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看恢复命令的格式</span><br>/app/gogs/gogs restore -h<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行恢复</span><br>/app/gogs/gogs restore --config=/data/gogs/conf/app.ini --tempdir=/data --from=/data/gogs-backup-xxx.zip<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>注意：</strong></p>\n</li>\n<li><p>备份和恢复时，使用的 gogs 版本必须是一致的</p>\n</li>\n<li><p>备份和恢复时，使用的 mysql 版本必须是一致的</p>\n</li>\n</ul>\n<h4 id=\"自述文档\"><a href=\"#自述文档\" class=\"headerlink\" title=\"自述文档\"></a>自述文档</h4><p>Create a plain text file then move to directory <code>custom/conf/readme/README</code> and <strong>restart Gogs.</strong></p>\n<ul>\n<li><code>&#123;Name&#125;</code>: Repository name</li>\n<li><code>&#123;Description&#125;</code>: Repository description</li>\n<li><code>&#123;CloneURL.SSH&#125;</code>: Repository SSH clone address</li>\n<li><code>&#123;CloneURL.HTTPS&#125;</code>: Repository HTTP&#x2F;HTTPS clone address</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&#123;Name&#125;</span><br>&#123;Name&#125; Repository<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Tip</span></span><br>You can get the development version of this repo via<br>**git clone &#123;CloneURL.SSH&#125;**<br>or<br>**git clone &#123;CloneURL.HTTPS&#125;**<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Bref</span></span><br>&#123;Description&#125;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Details</span></span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"zerotier\"><a href=\"#zerotier\" class=\"headerlink\" title=\"zerotier\"></a>zerotier</h2><table>\n<thead>\n<tr>\n<th>img name</th>\n<th>last version</th>\n<th>notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>henrist-zerotier-one1</td>\n<td>1.6.6</td>\n<td>没有自动配置路由</td>\n</tr>\n<tr>\n<td>bltavares zerotier</td>\n<td>1.6.6</td>\n<td>网络不通</td>\n</tr>\n<tr>\n<td>zyclonite&#x2F;zerotier&#x2F;</td>\n<td>1.8.4</td>\n<td>没有自动配置路由 配置路由后正常</td>\n</tr>\n<tr>\n<td>spikhalskiy-zerotier1</td>\n<td>1.8.2</td>\n<td>运行会报错<code>zerotier-cli: /usr/lib/libstdc++.so.6: no version information available (required by zerotier-cli)</code>, 没有自动配置路由 配置路由后正常</td>\n</tr>\n<tr>\n<td>zerotier-zerotier-synology</td>\n<td>1.8.4</td>\n<td>没有自动配置路由 配置路由后正常</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>  -d <span class=\"hljs-string\">\\</span><br>  --restart always <span class=\"hljs-string\">\\</span><br>  --name zerotier-one <span class=\"hljs-string\">\\</span><br>  --device /dev/net/tun <span class=\"hljs-string\">\\</span><br>  --net host <span class=\"hljs-string\">\\</span><br>  --cap-add NET_ADMIN <span class=\"hljs-string\">\\</span><br>  --cap-add SYS_ADMIN <span class=\"hljs-string\">\\</span><br>  -v /<span class=\"hljs-keyword\">var</span>/lib/zerotier-one:/<span class=\"hljs-keyword\">var</span>/lib/zerotier-one <span class=\"hljs-string\">\\</span><br>  zerotier/zerotier-synology<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第三方套件\"><a href=\"#第三方套件\" class=\"headerlink\" title=\"第三方套件\"></a>第三方套件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">矿神</span><br>https://spk.imnks.com/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"群晖的备份-还原\"><a href=\"#群晖的备份-还原\" class=\"headerlink\" title=\"群晖的备份 还原\"></a>群晖的备份 还原</h2><p>晖硬盘接到电脑上使用diskgenius查看，有三个分区：系统、swap交换分区、数据存储区，所有的硬盘都有这三个分区。</p>\n<blockquote>\n<p>  交换分区，英文是swap，意思是“交换”、“实物交易”。 它的功能就是在内存不够的情况下，操作系统先把内存中暂时不用的数据，存到硬盘的交换空间，腾出内存来让别的程序运行，和Windows的虚拟内存（pagefile.sys）的作用是一样的。</p>\n</blockquote>\n<p><img src=\"/2021/ee60585b/image-20220918161100014.png\" alt=\"image-20220918161100014\"></p>\n<p>弄清楚这三个分区是做什么的就很简单了, 我们备份和还原自然也就是备份和还原第一个系统分区了.</p>\n<p>需要注意的是群晖的系统存在于任何一块硬盘内, <strong>所以还原分区的时候需要将分区还原到每一块硬盘内才行</strong>.</p>\n<blockquote>\n<p>  如果只还原一块后，开机进入系统，系统会提示修复，虽然也能成功但是并不建议这么做</p>\n</blockquote>\n<h2 id=\"群晖-硬盘扩容-硬盘升级\"><a href=\"#群晖-硬盘扩容-硬盘升级\" class=\"headerlink\" title=\"群晖 硬盘扩容 硬盘升级\"></a>群晖 硬盘扩容 硬盘升级</h2><p>紧跟上面, 如果我们需要进行硬盘扩容, 比如原来的硬盘128G, 现在购入一块新硬盘256G, 我们需要用256去替换原来的硬盘, 但是现有设备上盘位已经插满了或者是属于单盘位的机器, 这时候就要把硬盘拆下来手动将数据进行转移.</p>\n<blockquote>\n<p>  我的大致思路是使用DG全盘拷贝到256G硬盘上(当时尝试的时候没有找到这方面的文章, 不知道该怎么样操作, 担心数据出问题所以就用了全盘拷贝), 然后上电开机SSH登录上去扩容一下分区就好.</p>\n</blockquote>\n<p><strong>克隆数据</strong></p>\n<p>首先打开<code>DiskGenius</code>软件 选择 -&gt; <code>工具</code> -&gt; <code>克隆磁盘</code> 我这里选的是按扇区全盘克隆.</p>\n<p>讲道理来说将<code>系统区</code>、<code>数据存储区</code>拷贝过去, 再划分出<code>swap交换分区</code>应该也是可以的.</p>\n<p>等待克隆完成.</p>\n<p><strong>扩容分区</strong></p>\n<p>磁盘克隆完成后, 旧的硬盘先不能格式化掉, 需要先留着以防万一.</p>\n<p>将新的硬盘安装回群晖, 并上电开机, 开机一切正常, 查看存储管理器会发现, 256的磁盘只显示了128G, 这个时候我们就需要登录SSH进行下一步操作了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 首先查看一下新放进去的盘的挂载位置</span><br>$ fdisk -l<br>Disk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel <span class=\"hljs-built_in\">type</span>: dos<br><br><span class=\"hljs-comment\"># 上面可以看到 设备在`/dev/sda` 这里的sda里面的a是按顺序来的 第二个第三个盘就是sdb sdc 类推</span><br><span class=\"hljs-comment\"># 输入命令后它会让我们输入结束地址, 我们这里直接回车, 设定地址为最末尾</span><br>$ parted /dev/sda resizepart 3<br>End?  [250GB]?<br>Information: You may need to update /etc/fstab.<br><br><span class=\"hljs-comment\"># 这里运行的时候报错了, 但是时间有点久没有记录下来给忘记了, 哎这些东西还是不能拖, 要立刻记录下来才行</span><br>$ resize2fs -f /dev/sda3 <br>resize2fs 1.42.6 (21-Sep-2012)<br>.....<br><br><span class=\"hljs-comment\"># 再次查看扩容完成</span><br>$ fdisk -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>参考:</strong></p>\n<p><a href=\"https://imnks.com/389.html\">群晖升级硬盘 磁盘克隆后的简单扩容教程</a></p>\n<h2 id=\"PVE-Exsi-硬盘扩容\"><a href=\"#PVE-Exsi-硬盘扩容\" class=\"headerlink\" title=\"PVE Exsi 硬盘扩容\"></a>PVE Exsi 硬盘扩容</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo fdisk /dev/sdb<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 p 查考分区情况</span><br>Command (m for help): p<br><br>Disk /dev/sdb: 64 GiB, 68719476736 bytes, 134217728 sectors<br>Disk model: HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0x6776aa49<br><br>Device     Boot    Start      End  Sectors  Size Id Type<br>/dev/sdb1           8192 16785407 16777216    8G fd Linux raid autodetect<br>/dev/sdb2       16785408 20979711  4194304    2G fd Linux raid autodetect<br>/dev/sdb3       21241856 66904063 45662208 21.8G fd Linux raid autodetect<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 q 退出</span><br>Command (m for help): q<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入命令，给存储池扩容（命令中的3，对应/dev/sdb3）</span><br>parted /dev/sdb resizepart 3 100%<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">再次使用此命令查看分区表是否正确</span><br>sudo fdisk /dev/sdb<br></code></pre></td></tr></table></figure>\n\n<p>shell操作完成后在群晖的存储管理器，就看到系统提示”<strong>检测到未使用的硬盘空间，请单击立即扩充以扩充此存储池</strong>“，点蓝色的”<strong>立即扩充</strong>“；</p>\n<h2 id=\"群晖安装USB网卡驱动-AX88179A-6-2-3\"><a href=\"#群晖安装USB网卡驱动-AX88179A-6-2-3\" class=\"headerlink\" title=\"群晖安装USB网卡驱动 AX88179A 6.2.3\"></a>群晖安装USB网卡驱动 AX88179A 6.2.3</h2><p><img src=\"/2021/ee60585b/image-20220926214605083.png\" alt=\"image-20220926214605083\"></p>\n<ol>\n<li><p>将USB网卡插入群晖</p>\n</li>\n<li><p>下载驱动程序 <a href=\"%E7%BE%A4%E6%99%96.assets/ax88179_178a.ko.zip\">ax88179_178a.ko.zip</a></p>\n</li>\n<li><p>解压后将<code>ax88179_178a.ko</code>文件复制到群晖的<code>/lib/modules/</code>目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cp</span> /volume......./ax88179_178a.ko /lib/modules<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用命令 <code>chmod 644 ax88179_178a.ko</code>修改文件权限为<code>-rw-r--r--</code></p>\n</li>\n<li><p>加载驱动<code>insmod /lib/modules/ax88179_178a.ko </code> </p>\n<ol>\n<li><p>我这里当时报错了, 但是似乎并没有什么影响</p>\n</li>\n<li><p><code>insmod: ERROR: could not insert module /lib/modules/ax88179_178a.ko: Invalid module format</code></p>\n</li>\n<li><p>拓展一下</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 获取已加载的驱动列表</span><br>lsmod<br><span class=\"hljs-comment\"># 卸载驱动</span><br><span class=\"hljs-comment\"># 参数为lsmod获取到的驱动名称，而不是路径</span><br>rmmod ax88179_178a<br></code></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n</li>\n<li><p>启用网卡 <code>ifconfig eth1 up</code></p>\n</li>\n<li><p>重新启动</p>\n</li>\n</ol>\n<blockquote>\n<p>  网上很多blog写需要添加启动项, 但是我这里并没有添加 看起来也没有什么问题.</p>\n<p>  添加启动项的操作是在群晖的<code>设置</code>里面 添加一个<code>任务计划</code>开机触发执行下面这个脚本</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">insmod /lib/modules/ax88179_178a.ko<br>ifconfig eth1 up<br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h2 id=\"PC通过群晖的网卡桥接上网\"><a href=\"#PC通过群晖的网卡桥接上网\" class=\"headerlink\" title=\"PC通过群晖的网卡桥接上网\"></a>PC通过群晖的网卡桥接上网</h2><p><strong>注意</strong>:首先需要确定Open vSwitch是开启的. 控制面板-&gt;网络-&gt;网络界面-&gt;管理，打开Open vSwitch（如果使用了VMM套件会自动开启，而且提示无法禁用）.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 路径图</span><br>网关(路由器) &lt;-eth0-&gt; 群晖 &lt;-eth1-&gt; PC<br></code></pre></td></tr></table></figure>\n\n<p>装了群晖的Virtual Machine Manager后一个接口会多出来一块网卡, 其中<code>eth0</code>是物理网卡, <code>ovs_eth0</code>是Open vSwitch这个网络管理工具虚拟出来的网卡.</p>\n<p>一般来说<code>eth0</code>会空闲, 流量都是通过<code>ovs_eth0</code>这个虚拟网卡, 其中<code>eth0</code>会被配置成与<code>ovs_eth0</code>桥接</p>\n<hr>\n<p><strong>修改配置文件</strong></p>\n<p>如你的电脑接在群晖的第一个网口<code>eth0</code>就修改<code>ifcfg-eth0</code>，接的是第二个网口<code>eth1</code>就修改<code>ifcfg-eth1</code>(本例)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 编辑</span><br>vim /etc/sysconfig/network-scripts/ifcfg-eth1<br><span class=\"hljs-comment\"># 将BRIDGE 改成ovs_eth0</span><br><span class=\"hljs-comment\"># 原BRIDGE=ovs_eth1</span><br>BRIDGE=ovs_eth0<br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   <code>/etc/sysconfig/network-scripts/ifcfg-eth1</code>文件参数简介</p>\n<p>  <img src=\"/2021/ee60585b/1841273-20191019215624473-1921771223.png\" alt=\"img\"></p>\n</blockquote>\n<p><strong>命令修改</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前网桥 可以看到有两个网桥 ovs_eth0 和 ovs_eth1</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl show</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">我们将网桥 ovs_eth1 删除, 并将 eth1 加入到 网桥ovs_eth0</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl del-br ovs_eth1</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl add-port ovs_eth0 eth1</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">再次查看网桥状态</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl show</span><br>Bridge &quot;ovs_eth0&quot;<br>        Port &quot;eth1&quot;<br>            Interface &quot;eth1&quot;<br>        Port &quot;eth0&quot;<br>            Interface &quot;eth0&quot;<br>        Port &quot;ovs_eth0&quot;<br>            Interface &quot;ovs_eth0&quot;<br>                type: internal<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此时eth0和eth1全部在ovs_eth0内，即两个网口处于同一个交换机内。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将eth1和电脑相连，发现电脑可以正常从路由器获取IP地址，并正常上网</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"PC通过群晖的网卡NAT上网\"><a href=\"#PC通过群晖的网卡NAT上网\" class=\"headerlink\" title=\"PC通过群晖的网卡NAT上网\"></a>PC通过群晖的网卡NAT上网</h2><p>这里主要是利用<code>iptable</code>路由流量.</p>\n<p>首先补个<code>iptable</code>的教程</p>\n<p><a href=\"https://wooyun.js.org/drops/Iptables%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html\">Iptables入门教程</a></p>\n<ol>\n<li>我们需要先给<code>局域网2 eth1</code>设置一个静态ip <code>192.168.88.1/24 gw 192.168.88.1</code></li>\n<li>然后在DHCP服务器端开启<code>局域网2 eth1</code>的DHCP服务, 网关填<code>192.168.88.1</code></li>\n<li>然后配置<code>iptable</code>开启网口转发</li>\n</ol>\n<p><img src=\"/2021/ee60585b/image-20221121215936519.png\" alt=\"image-20221121215936519\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">开启群晖的转发功能</span><br>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为PC添加 去往群晖的 路由表 群晖开了对应接口的DHCP就不需要了</span><br>route add -net 192.168.88.0/24 gw 192.168.88.1<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在群晖中添加iptable 策略</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置 NAT 服务器，执行命令</span><br>iptables -t nat -A POSTROUTING -s 192.168.88.0/24 -o ovs_eth0 -j MASQUERADE<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-t 表名</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-A 在指定链的末尾添加（--append）一条新的规则</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-s 指定数据包的源地址参数，可以使IP地址、网络地址、主机名</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   192.168.88.0 表示 192.168.88.x 的整个网络。</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-o 输出接口</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-j 目标动作或跳转</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   MASQUERADE 则表示从 NAT 服务器的网卡上自动获取当前的 IP 地址来做端口转发。否则，基于目标的网络地址转换模式（即 DNAT）需要在每次 NAT 服务器连接外网的 IP 地址变更的时候重新配置端口转发。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">也可以使用源地址目标转换模式（即 SNAT），命令是</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">** 这里和上面选其一即可 **</span><br>iptables -t nat -A POSTROUTING -s 192.168.88.0/24 -o ovs_eth0 -j SNAT --to-source 192.168.20.2<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显然这种方式也会依赖命令中指定的通向外网的 IP 地址，所以仍然不够灵活。推荐使用第一种方式。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">允许端口转发</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此命令将允许经过 eth1 网卡（连接内网）的所有数据包通向外网的转发。</span><br>iptables -A FORWARD -i eth1 -j ACCEPT<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者 仅允许转发192.168.88.0/24段的报文</span><br>iptables -A FORWARD -s 192.168.88.0/24 -j ACCEPT<br></code></pre></td></tr></table></figure>\n\n<p><strong>参考</strong></p>\n<p><a href=\"https://blog.csdn.net/liuzhanchun/article/details/106819839\">Linux 内部路由实现及网口转发之理论篇</a></p>\n<p><a href=\"https://blog.csdn.net/luozhen07/article/details/48051005\">Linux 系统双网卡实现内网端口转发</a></p>\n",
            "tags": [
                "linux",
                "synology"
            ]
        }
    ]
}