{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"cc2530\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2018/8d6db935/",
            "url": "https://www.oikiou.top/2018/8d6db935/",
            "title": "CC2530",
            "date_published": "2018-02-11T12:27:07.000Z",
            "content_html": "<blockquote>\n<p>CC2530是针对IEEE 802.15.4，Zigbee和RF4CE应用的真正片上系统（SoC）解决方案。 它能够以非常低的总物料成本构建强大的网络节点。 CC2530将领先的射频收发器的卓越性能与业界标准增强型8051 MCU，系统内可编程闪存，8 KB RAM以及许多其他强大功能相结合。 CC2530有四种不同的闪存版本：分别为CC2530F32 &#x2F; 64&#x2F;128&#x2F;256对应32&#x2F;64&#x2F;128&#x2F;256 KB的闪存。 CC2530具有多种工作模式，非常适合需要超低功耗的系统。 运行模式之间的短暂转换时间进一步确保了低能耗。</p>\n<p>•CC2530是TI公司推出的用来实现嵌入式ZigBee应用的低功耗片上系统。</p>\n<p>•在单个芯片上整合了ZigBee 射频(RF)前端、内存和微控制器。</p>\n<p>•8 位MCU（增强型、标准8051指令集）。</p>\n<p>•256 KB Flash和8 KB 的RAM，内部16MHz RC 和 32kHz RC 振荡器。</p>\n<p>•8路12位ADC；18个中断源；4个Timer；硬件支持的AES128 ；WDT(1.9ms-1s)；32 kHz晶振的休眠模式定时器、POR(上电复位)、BOD(掉电检测)，以及21 个通用I&#x2F;O 。</p>\n</blockquote>\n<h1 id=\"GPIO\"><a href=\"#GPIO\" class=\"headerlink\" title=\"GPIO\"></a>GPIO</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"/2018/8d6db935/20180211202707601.png\" alt=\"img\"></p>\n<p>I &#x2F; O端口具有以下主要功能：</p>\n<ul>\n<li>21个数字通用输入&#x2F;输出引脚</li>\n<li>通用I &#x2F; O或外设I &#x2F; O</li>\n<li>输入上拉或下拉功能</li>\n<li>外部中断功能</li>\n</ul>\n<blockquote>\n<p>所有21个I &#x2F; O引脚都具有外部中断功能。 因此，如果需要，外部设备可能会产生中断。 外部中断功能也可用于将器件从睡眠模式（电源模式PM1，PM2和PM3）中唤醒</p>\n</blockquote>\n<blockquote>\n<p>通用IO：共21个，分成3组，<strong>P0组、P1组、P2组</strong>，其中P0\\P1组各8个IO，P2组5个（P2_0、P2_1、 P2_2、P2_3、 P2_4）。其中P1_0、P1_1有20mA的输出驱动能力，其余的只有4mA。</p>\n</blockquote>\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2><ol>\n<li><p>GPIO<strong>功能</strong>选择寄存器——<strong>PxSEL</strong></p>\n<p> 寄存器PxSEL（其中x是端口号0-2）用于将端口中的每个引脚配置为<strong>通用I&#x2F;O引脚</strong>或<strong>外设I&#x2F;O引脚</strong>，可位寻址。 默认情况下，复位后，所有数字输入&#x2F;输出引脚都配置为<strong>通用上拉输入引脚</strong>。</p>\n<blockquote>\n<p>其中，P2SEL只有第0位至第2位是端口2的功能选择控制位，第3位至第6位是端口1的外设优先级控制位。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>0&#x3D;通用</li>\n<li>1&#x3D;外设I&#x2F;O</li>\n</ul>\n<ol>\n<li><p>GPIO<strong>输入输出方向</strong>选择寄存器——<strong>PxDIR</strong></p>\n<p>寄存器PxDIR用于将每个端口的引脚方向设置为<strong>输入方向</strong>或<strong>输出方向</strong>。 因此，将PxDIR中的相应位设置为1，相应的引脚就变成输出方向，可位寻址。复位后为<strong>输入引脚</strong>。</p>\n<blockquote>\n<p>其中，P2DIR只有第0位至第4位是端口2的方向选择控制位，第6位和第7位是端口0外设优先级控制位。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>0&#x3D;输入</p>\n</li>\n<li><p>1&#x3D;输出</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>GPIO<strong>输入模式</strong>寄存器——<strong>PxINP</strong></p>\n<p>寄存器PxINP用于设置IO端口的<strong>输入模式</strong>，通用I &#x2F; O端口引脚可配置为具有<strong>上拉</strong>，<strong>下拉</strong>或<strong>三态</strong>操作模式。 默认情况下，复位后，输入配置为带有上拉的输入。如果要取消输入端口的上拉或下拉功能，必须将PxINP中的相应位设置为1。</p>\n<ul>\n<li>请注意，即使IO端口是外设功能输入，配置为外设I &#x2F; O信号的引脚也不具有上拉或下拉功能。</li>\n</ul>\n<blockquote>\n<p>其中，P2INP中，第0位至第4位是端口2的输入模式选择位</p>\n<p><strong>第5位至第7位是端口0、端口1、端口2的上下拉选择位。</strong></p>\n<ul>\n<li>0&#x3D;PullUp</li>\n<li>1&#x3D;PullDown</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>0&#x3D;上拉或下拉</li>\n<li>1&#x3D;三态</li>\n</ul>\n<h1 id=\"Z-Stack\"><a href=\"#Z-Stack\" class=\"headerlink\" title=\"Z-Stack\"></a>Z-Stack</h1><h2 id=\"创建一个任务-Create-Task\"><a href=\"#创建一个任务-Create-Task\" class=\"headerlink\" title=\"创建一个任务 Create Task\"></a>创建一个任务 Create Task</h2><ul>\n<li>&#x2F;&#x2F; 任务列表<br>const pTaskEventHandlerFn tasksArr[] &#x3D; {…..}</li>\n<li>&#x2F;&#x2F; 初始化任务<br>void osalInitTasks( void )<br>{…..}</li>\n<li>&#x2F;&#x2F; 任务处理函数<br>uint16 Hello_ProcessEvent(uint8 task_id, uint16 events)<br>{…}</li>\n</ul>\n<h2 id=\"HAL库之LED\"><a href=\"#HAL库之LED\" class=\"headerlink\" title=\"HAL库之LED\"></a>HAL库之LED</h2><ol>\n<li>uint8 HalLedSet (uint8 leds, uint8 mode)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>ModeName</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HAL_LED_MODE_BLINK</td>\n<td>闪烁  (一次)</td>\n</tr>\n<tr>\n<td>HAL_LED_MODE_FLASH</td>\n<td>闪烁</td>\n</tr>\n<tr>\n<td>HAL_LED_MODE_ON</td>\n<td></td>\n</tr>\n<tr>\n<td>HAL_LED_MODE_OFF</td>\n<td></td>\n</tr>\n<tr>\n<td>HAL_LED_MODE_TOGGLE</td>\n<td>触发</td>\n</tr>\n</tbody></table>\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><ol>\n<li><p>uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//为指定的任务设置定时器</span><br><br>osal_start_timerEx(task_id, <span class=\"hljs-number\">0x0001</span>, <span class=\"hljs-number\">10000</span>);<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li></li>\n</ol>\n<h2 id=\"PAN-ID\"><a href=\"#PAN-ID\" class=\"headerlink\" title=\"PAN_ID\"></a>PAN_ID</h2><ul>\n<li><p>全称 Personal Area Network (网络标识符)</p>\n</li>\n<li><p>相当于网络号，网段。</p>\n</li>\n</ul>\n<p>Tools\\f8Config.cfg\tLine59</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* Define the default PAN ID.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * Setting this to a value other than 0xFFFF causes</span><br><span class=\"hljs-comment\"> * ZDO_COORD to use this value as its PAN ID and</span><br><span class=\"hljs-comment\"> * Routers and end devices to join PAN with this ID</span><br><span class=\"hljs-comment\"> */</span><br>-DZDAPP_CONFIG_PAN_ID=<span class=\"hljs-number\">0x0010</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Z-Stack开发步骤\"><a href=\"#Z-Stack开发步骤\" class=\"headerlink\" title=\"Z-Stack开发步骤\"></a>Z-Stack开发步骤</h2><h3 id=\"功能类型定义\"><a href=\"#功能类型定义\" class=\"headerlink\" title=\"功能类型定义\"></a>功能类型定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 功能类型值定义</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> &#123;</span><br>    DevTemp = <span class=\"hljs-number\">1</span>,<br>    DevHumm,<br><span class=\"hljs-comment\">//略---------------------</span><br>    DevMaxNum<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>枚举功能类型值，需要时添加即可。</p>\n<h3 id=\"定义节点功能列表\"><a href=\"#定义节点功能列表\" class=\"headerlink\" title=\"定义节点功能列表\"></a>定义节点功能列表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/***************************************************/</span><br><span class=\"hljs-comment\">/* 节点功能列表                                    */</span><br><span class=\"hljs-comment\">/***************************************************/</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ep_info_t</span> <span class=\"hljs-title\">funcList</span>[] =</span> &#123;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> defined(HAS_GAS)</span><br>    &#123;<br>        <span class=\"hljs-comment\">//stat,income,timeout,resource</span><br>        <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>, sensorGasTimeout, sensorGasResAvailable,<br>        &#123; DevGas, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span> &#125;,                   <span class=\"hljs-comment\">// type, id, refresh cycle</span><br>    &#125;,<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br>    <span class=\"hljs-comment\">//略----------------</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> defined(ZDO_COORDINATOR)</span><br>    &#123;   <span class=\"hljs-comment\">// 协调器</span><br>        CoordinatorNwkStateChangeRoutine,<br>        CoordinatorIncomingRoutine,<br>        CoordinatorTimeoutRoutine,<br>        CoordinatorResAvailableRoutine,<br>        &#123; DevCoordinator, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> &#125;,<br>    &#125;,<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">elif</span> defined(RTR_NWK)</span><br>    &#123;   <span class=\"hljs-comment\">// 路由器</span><br>        RouterNwkStateChangeRoutine,<br>        RouterIncomingRoutine,<br>        RouterTimeoutRoutine,<br>        RouterResAvailableRoutine,<br>        &#123; DevRouter, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">30</span> &#125;,<br>    &#125;,<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>功能列表</p>\n</li>\n<li><p>参考下面的 <strong>ep_info_t</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 不能修改下面的内容!!!</span><br><span class=\"hljs-type\">const</span> uint8 funcCount = <span class=\"hljs-keyword\">sizeof</span>(funcList) / <span class=\"hljs-keyword\">sizeof</span>(funcList[<span class=\"hljs-number\">0</span>]);<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>功能数量</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"ep-info-t\"><a href=\"#ep-info-t\" class=\"headerlink\" title=\"ep_info_t\"></a>ep_info_t</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ep_info_t</span> &#123;</span><br>    <span class=\"hljs-comment\">// 网络状态发生变化时会调用该函数</span><br>    <span class=\"hljs-type\">void</span> (*nwk_stat_change)(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep);<br>    <span class=\"hljs-comment\">// 接收到数据时会调用该函数</span><br>    <span class=\"hljs-type\">void</span> (*incoming_data)(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg);<br>    <span class=\"hljs-comment\">// 周期性调用的函数</span><br>    <span class=\"hljs-type\">void</span> (*time_out)(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep);<br>    <span class=\"hljs-comment\">// 系统资源可用时调用该函数,系统资源指的是:串口接收到数据/中断等等</span><br>    <span class=\"hljs-type\">void</span> (*res_available)(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, RES_TYPE type, <span class=\"hljs-type\">void</span> *res);<br>    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> cycle成员会被用来计数,并周期性调用time_out函数</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">func_info_t</span> <span class=\"hljs-title\">function</span>;</span><br>    <br><span class=\"hljs-comment\">//以下数据用户不能进行更改！！！！！</span><br>    <br>    <span class=\"hljs-comment\">// 当前端点号</span><br>    uint8 ep;<br>    <span class=\"hljs-comment\">// 与此端点绑定的任务ID</span><br>    uint8 task_id;<br>    <span class=\"hljs-comment\">// 递减计数,为0时调用time_out函数,并重载初值=cycle</span><br>    uint8 timerTick;<br>    uint8 userTimer;<br>    endPointDesc_t SampleApp_epDesc;<br>    SimpleDescriptionFormat_t simpleDesc;<br>&#125;;<br><br><span class=\"hljs-comment\">//一个典型的初始化</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> defined(ZDO_COORDINATOR)</span><br>    &#123;   <span class=\"hljs-comment\">// 协调器</span><br>        CoordinatorNwkStateChangeRoutine,<span class=\"hljs-comment\">//节点加入网络完成后调用</span><br>        CoordinatorIncomingRoutine,<span class=\"hljs-comment\">//端点接收到数据后会调用</span><br>        CoordinatorTimeoutRoutine,<span class=\"hljs-comment\">//周期调用</span><br>        CoordinatorResAvailableRoutine,<span class=\"hljs-comment\">//系统初始化、串口收到数据、用户定时器到时 会调用</span><br>        &#123; DevCoordinator, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> &#125;,<span class=\"hljs-comment\">//功能类型、功能编号、刷新周期</span><br>    &#125;,<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"nwk-stat-change\"><a href=\"#nwk-stat-change\" class=\"headerlink\" title=\"nwk_stat_change\"></a>nwk_stat_change</h4><p><strong>节点加入网络完成后调用</strong></p>\n<ul>\n<li>可用于读取当前  端点  信息</li>\n<li></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">xxNwkStateChange</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep)</span><br>    <br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sensorVoiceNwkStateChange</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep)</span><br>&#123;<br>    voiceEndPoint = ep;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"incoming-data\"><a href=\"#incoming-data\" class=\"headerlink\" title=\"incoming_data\"></a>incoming_data</h4><p><strong>端点接收到数据后会调用</strong></p>\n<ul>\n<li>下发的指令的处理</li>\n<li></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">xxReceiveData</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)</span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">testReceiveData</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)</span><br>&#123;<br>    <span class=\"hljs-comment\">//msg-&gt;Data[0] 是接受到的总  比特   数 </span><br>\t<span class=\"hljs-keyword\">if</span>( (msg-&gt;Data[<span class=\"hljs-number\">1</span>]==<span class=\"hljs-string\">&#x27;L&#x27;</span>)&amp;&amp;(msg-&gt;Data[<span class=\"hljs-number\">2</span>]==<span class=\"hljs-string\">&#x27;E&#x27;</span>)&amp;&amp;(msg-&gt;Data[<span class=\"hljs-number\">3</span>]==<span class=\"hljs-string\">&#x27;D&#x27;</span>) )<br>    &#123;<br>\t\t<span class=\"hljs-keyword\">if</span>( msg-&gt;Data[<span class=\"hljs-number\">4</span>]==<span class=\"hljs-string\">&#x27;1&#x27;</span> )<br>\t\t&#123;<br>\t\t\tHalUARTWrite(HAL_UART_PORT_0, <span class=\"hljs-string\">&quot;LED_1\\r\\n&quot;</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-string\">&quot;LED_1\\r\\n&quot;</span>) - <span class=\"hljs-number\">1</span>);<br>\t\t\t<span class=\"hljs-comment\">//HalLedBlink(HAL_LED_1, 2, 50, 100);</span><br>\t\t&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"time-out\"><a href=\"#time-out\" class=\"headerlink\" title=\"time_out\"></a>time_out</h4><p><strong>周期调用</strong></p>\n<ul>\n<li>读取传感器数据</li>\n<li></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">xxTimeout</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep)</span><br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sensorFireTimeout</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep)</span><br>&#123;<br>    uint8 value = FireInfo();<br>    SendData(ep-&gt;ep, &amp;value, <span class=\"hljs-number\">0x0000</span>, TRANSFER_ENDPOINT, <span class=\"hljs-keyword\">sizeof</span>(value));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"res-available\"><a href=\"#res-available\" class=\"headerlink\" title=\"res_available\"></a>res_available</h4><p><strong>系统初始化、串口收到数据、用户定时器到时 会调用</strong></p>\n<ul>\n<li>初始化端口、</li>\n<li></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">xxResAvailable</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, RES_TYPE type, <span class=\"hljs-type\">void</span> *res)</span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sensorRainResAvailable</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">ep_info_t</span> *ep, RES_TYPE type, <span class=\"hljs-type\">void</span> *res)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(type == ResInit)<br>    &#123;<br>        RainInit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"IAR学习笔记\"><a href=\"#IAR学习笔记\" class=\"headerlink\" title=\"IAR学习笔记\"></a>IAR学习笔记</h1><h2 id=\"无法观察局部变量\"><a href=\"#无法观察局部变量\" class=\"headerlink\" title=\"无法观察局部变量\"></a>无法观察局部变量</h2><p>在软件调试的时候发现Watch窗口中无法观察局部变量的值，总是显示<unavailable><br>　　设置IAR中的”<strong>Options — c&#x2F;c++ compiler — Optimization — Level</strong>“ 选项：<br>　　Level的缺省值为Low，当我把Level选为None之后，即不执行任何优化时，全局变量、静态局部变量、局部变量的值都可以看到。</p>\n",
            "tags": [
                "embedded",
                "cc2530",
                "zigbee"
            ]
        }
    ]
}