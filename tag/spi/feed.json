{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"spi\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2022/fd90dc4c/",
            "url": "https://www.oikiou.top/2022/fd90dc4c/",
            "title": "使用Jlink 烧写SPI Flash存储芯片",
            "date_published": "2022-08-26T15:23:05.000Z",
            "content_html": "<h1 id=\"使用Jlink-烧写SPI-Flash存储芯片\"><a href=\"#使用Jlink-烧写SPI-Flash存储芯片\" class=\"headerlink\" title=\"使用Jlink 烧写SPI Flash存储芯片\"></a>使用Jlink 烧写SPI Flash存储芯片</h1><p>参考:</p>\n<p><a href=\"https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/\">https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/</a></p>\n<h1 id=\"硬件连接\"><a href=\"#硬件连接\" class=\"headerlink\" title=\"硬件连接\"></a>硬件连接</h1><h2 id=\"SPI-amp-Single\"><a href=\"#SPI-amp-Single\" class=\"headerlink\" title=\"SPI &amp; Single\"></a>SPI &amp; Single</h2><p><img src=\"/2022/fd90dc4c/formatpng.png\" alt=\"img\"></p>\n<p><img src=\"/2022/fd90dc4c/pinout-spi-20-pin.gif\" alt=\"引出线 spi 20 针\"></p>\n<h2 id=\"QSPI-amp-Quad\"><a href=\"#QSPI-amp-Quad\" class=\"headerlink\" title=\"QSPI &amp; Quad\"></a>QSPI &amp; Quad</h2><p><img src=\"/2022/fd90dc4c/pinout-qspi-20-pin.png\" alt=\"img\"></p>\n<blockquote>\n<p>  注意:</p>\n<p>  这里要注意的一点，正版的Jlink仿真器1脚是输入引脚，是外部提供参考电平的，但由于现在大部分的JLink仿真器都是学习(dao)版的，1脚不是输入，而是3.3v的输出(并不确定也有可能是5V的, 盗版的Jlink真的是什么乱七八糟的都有)，所以正常情况下可以直接用这个管教来给SPI Flash供电。</p>\n<p>  <strong>关于 nRESET 的注意事项</strong>：如果有另一个设备&#x2F;外围设备也控制 SPI 闪存（例如闪存连接到的 CPU），则 J-Link 的 nRESET 应连接到目标系统的复位或 CPU 的复位引脚确保 J-Link 可以在对 SPI 闪存进行编程时保持 CPU 处于复位状态。</p>\n<p>  <strong>一开始没注意到这个功能, 现在回过头来再看, 有这个功能之后烧芯片简直不要太简单, 根本不需要拆芯片了, 直接用芯片夹就可以烧录了.</strong></p>\n</blockquote>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>安装Jlink套件的时候会自带<code>JFlashSPI.exe</code>在开始菜单名称应该类似<code>J-Flash SPI</code>, 这是J-Flash的GUI程序,还有一个命令行的不多做介绍.</p>\n<blockquote>\n<p>  如果没有找到自带的, 请更新Jlink套件, 旧版确实不带这个东西.</p>\n<p>  Segger Jlink套件下载链接 <a href=\"https://www.segger.com/downloads/jlink/\">https://www.segger.com/downloads/jlink/</a></p>\n</blockquote>\n<p><img src=\"/2022/fd90dc4c/image-20220826224742256.png\" alt=\"image-20220826224742256\"></p>\n<p>点击<code>target -&gt; connet</code>连接到Jlink, 它会自动检测大部分SPI闪存, </p>\n<blockquote>\n<p>  有时候识别的具体型号并不准确, 但是这不重要他们参数类似, 可以正常完成编程的工作.</p>\n<p>  Jlink支持的SPI Flash型号可以在<a href=\"https://www.segger.com/products/debug-probes/j-link/technology/cpus-and-devices/supported-spi-flashes/\">点击这里</a>找到.</p>\n</blockquote>\n<p>点击<code>file -&gt; open data file </code>我们打开要烧录的文件.</p>\n<blockquote>\n<p>  bin 文件需要设定起始地址</p>\n<p>  hex文件自带了位置信息</p>\n</blockquote>\n<p>点击<code>target -&gt; auto</code>可以自动将文件烧录进去 还会进行读回校验.</p>\n<p>至此烧录完成.</p>\n<p><strong>Tips:</strong></p>\n<blockquote>\n<p>  点击<code>target -&gt; read back</code> 可以将SPI Flash内的数据读取出来<br>  点击<code>options -&gt; settings -&gt; setup -&gt; interface speed</code>可以修改时钟速度. </p>\n</blockquote>\n<p><strong>Other:</strong></p>\n<p>Jlink真的是超级牛的工具, J-Scope, RTT这些都很好用, 还有很多高级功能我还没用上.<br>我前面有写过RTT的笔记, 在调试一个项目的时候没法使用串口, 当时就是用RTT搭建了一个log平台.</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"winbood-W25Q128封装\"><a href=\"#winbood-W25Q128封装\" class=\"headerlink\" title=\"winbood W25Q128封装\"></a>winbood W25Q128封装</h2><p><img src=\"/2022/fd90dc4c/image-20220826104542006.png\" alt=\"image-20220826104542006\"></p>\n<p><img src=\"/2022/fd90dc4c/20210622091839750557.png\" alt=\"img\"></p>\n",
            "tags": [
                "spi",
                "j-link",
                "jlink",
                "flash",
                "j-tag"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/aaef73f3/",
            "url": "https://www.oikiou.top/2021/aaef73f3/",
            "title": "WS2812驱动 SPI+DMA 无需降频 一个灯占用9Byte的RAM",
            "date_published": "2021-01-31T06:23:05.000Z",
            "content_html": "<h1 id=\"WS2812驱动-STM32F103-SPI-DMA-无需降频-一个灯占用9Byte的RAM\"><a href=\"#WS2812驱动-STM32F103-SPI-DMA-无需降频-一个灯占用9Byte的RAM\" class=\"headerlink\" title=\"WS2812驱动 STM32F103 SPI+DMA 无需降频 一个灯占用9Byte的RAM\"></a>WS2812驱动 STM32F103 SPI+DMA 无需降频 一个灯占用9Byte的RAM</h1><p>对于WS2812不了解的朋友可以先看一下这些<br>​<a href=\"https://www.cnblogs.com/PureHeart/p/11349495.html\">【STM32】WS2812介绍、使用SPI+DMA发送数据</a><br><img src=\"/2021/aaef73f3/pic_center.png\" alt=\"ws812\"></p>\n<p>WS2812的驱动我想到的主要有三种</p>\n<ul>\n<li>延时</li>\n<li>SPI</li>\n<li>UART<br><strong>三者区分：</strong></li>\n</ul>\n<ol>\n<li>延时，占用资源，需要用到ASM nop不然容易被优化，需要用示波器抓时间。</li>\n<li>UART 起始位低，结束位高，如果要强行实现也是可以但是实现起来过于复杂，不够优美。</li>\n<li>没有片选的功能，会占用一整个硬件SPI，觉得较为优美。</li>\n</ol>\n<p>在网上看了很多SPI例子都是使用 SPI的8bit数据来模拟WS2812的一个bit颜色的数据，但是由于STM32F103主频72M，要凑出来这个SPI的频率我看某些做法是进行降频，吾不喜，要么还有就是和协议时序差异挺大但是有些WS2812能运行，但是考虑到可能有些ws2812会不能兼容，吾不喜。</p>\n<p>STM32F103 设主频72M，SPI分频数设置为32，则SPI的通信频率为2.25M，传输一位数据的时间约为444纳秒（ns）444ns 888ns 符合WS281X芯片的通信时序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//  __</span><br><span class=\"hljs-comment\">// |  |_|   0b110  high level</span><br><span class=\"hljs-comment\">//  _   </span><br><span class=\"hljs-comment\">// | |__|   0b100  low level</span><br></code></pre></td></tr></table></figure>\n<p><strong>这个方式和协议时序更加接近，占用RAM应该是笔者认为最小的了</strong><br>一个灯24bit颜色，只需要24*3&#x2F;8 &#x3D; 9Byte的Buff。</p>\n<p><strong>写代码的时候需要注意一下大小端的问题，尽量保持大小端的兼容性</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @brief 设置某一个WS2812</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * @param num </span><br><span class=\"hljs-comment\"> * @param RGB </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">WS2812_OneSet</span><span class=\"hljs-params\">( <span class=\"hljs-type\">uint8_t</span> num, <span class=\"hljs-type\">uint32_t</span> RGB )</span><br>&#123;<br>    <span class=\"hljs-type\">uint8_t</span> i;<br>    <span class=\"hljs-type\">uint32_t</span> TempR = <span class=\"hljs-number\">0</span>, TempG = <span class=\"hljs-number\">0</span>, TempB = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">//MSB First</span><br>    <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; ++i,RGB&gt;&gt;=<span class=\"hljs-number\">1</span> )<br>    &#123;<br>        (RGB &amp; <span class=\"hljs-number\">0x00010000</span>) != <span class=\"hljs-number\">0</span> ? (TempR |= (WS2812_HIG&lt;&lt;(i*<span class=\"hljs-number\">3</span>))) : (TempR |= (WS2812_LOW&lt;&lt;(i*<span class=\"hljs-number\">3</span>)));<br>        (RGB &amp; <span class=\"hljs-number\">0x00000100</span>) != <span class=\"hljs-number\">0</span> ? (TempG |= (WS2812_HIG&lt;&lt;(i*<span class=\"hljs-number\">3</span>))) : (TempG |= (WS2812_LOW&lt;&lt;(i*<span class=\"hljs-number\">3</span>)));<br>        (RGB &amp; <span class=\"hljs-number\">0x00000001</span>) != <span class=\"hljs-number\">0</span> ? (TempB |= (WS2812_HIG&lt;&lt;(i*<span class=\"hljs-number\">3</span>))) : (TempB |= (WS2812_LOW&lt;&lt;(i*<span class=\"hljs-number\">3</span>)));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; ++i )<br>    &#123;<br>        g_ws2812.Col[num].RGB.R[i] = TempR &gt;&gt; (<span class=\"hljs-number\">16</span><span class=\"hljs-number\">-8</span>*i);<br>        g_ws2812.Col[num].RGB.G[i] = TempG &gt;&gt; (<span class=\"hljs-number\">16</span><span class=\"hljs-number\">-8</span>*i);<br>        g_ws2812.Col[num].RGB.B[i] = TempB &gt;&gt; (<span class=\"hljs-number\">16</span><span class=\"hljs-number\">-8</span>*i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里有参考的代码，有积分的给点积分用吧，没积分的可以去Github下。<br><a href=\"https://github.com/Jack-InGitHub/WS2812\">Github</a><br><a href=\"https://download.csdn.net/download/weixin_42078116/14975868\">CSDN下载</a></p>\n<p>参考资料<br><a href=\"https://www.amobbs.com/thread-5697122-1-1.html?_dsign=01c8809d\">stm32和ws2812B相对较好的方案。SPI和UART </a></p>\n",
            "tags": [
                "ws2812",
                "spi",
                "dma"
            ]
        }
    ]
}