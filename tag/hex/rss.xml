<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Oikiou&#39;s Blog • Posts by &#34;hex&#34; tag</title>
        <link>https://www.oikiou.top</link>
        <description>Blog</description>
        <language>zh-CN</language>
        <pubDate>Fri, 24 Sep 2021 20:27:40 +0800</pubDate>
        <lastBuildDate>Fri, 24 Sep 2021 20:27:40 +0800</lastBuildDate>
        <category>autosar</category>
        <category>aes</category>
        <category>embedded</category>
        <category>cc2530</category>
        <category>zigbee</category>
        <category>hp</category>
        <category>chrome</category>
        <category>sscanf</category>
        <category>c/c++</category>
        <category>flash</category>
        <category>hex</category>
        <category>license</category>
        <category>ssl</category>
        <category>https</category>
        <category>jpeg</category>
        <category>webp</category>
        <category>jpeg2000</category>
        <category>image</category>
        <category>md5</category>
        <category>major</category>
        <category>markdown</category>
        <category>note</category>
        <category>osi</category>
        <category>RustDesk</category>
        <category>iap</category>
        <category>bootloader</category>
        <category>stm32</category>
        <category>tags</category>
        <category>label</category>
        <category>category</category>
        <category>usart</category>
        <category>rts</category>
        <category>cts</category>
        <category>dtr</category>
        <category>dsr</category>
        <category>typora</category>
        <category>ws2812</category>
        <category>spi</category>
        <category>dma</category>
        <category>windows</category>
        <category>makefile</category>
        <category>xip</category>
        <category>nor</category>
        <category>nand</category>
        <category>android</category>
        <category>mtp</category>
        <category>pc</category>
        <category>driver</category>
        <category>ip</category>
        <category>location</category>
        <category>api</category>
        <category>zip</category>
        <category>gzip</category>
        <category>bzip</category>
        <category>tar</category>
        <category>zsh</category>
        <category>shell</category>
        <category>linux</category>
        <category>character encoding</category>
        <category>gb2312</category>
        <category>utf-8</category>
        <category>words</category>
        <category>cortexm3</category>
        <category>kms</category>
        <category>office</category>
        <category>volume</category>
        <category>DS_Store</category>
        <category>rtf</category>
        <category>后缀</category>
        <category>机智云</category>
        <category>蓝桥杯</category>
        <category>国赛</category>
        <category>ct117e</category>
        <category>ct117e-ex</category>
        <category>apk</category>
        <category>java</category>
        <category>超声波</category>
        <category>github</category>
        <category>hosts</category>
        <category>audio</category>
        <category>video</category>
        <category>cad</category>
        <category>cat_drive</category>
        <category>switch</category>
        <category>nintendo</category>
        <category>game</category>
        <category>hardware</category>
        <category>lenovo</category>
        <category>disk</category>
        <category>pve</category>
        <category>virtual</category>
        <category>software</category>
        <category>摄影</category>
        <category>synology</category>
        <category>cmake</category>
        <category>dslogic</category>
        <category>逻辑分析仪</category>
        <category>pyhton</category>
        <category>decoder</category>
        <category>docker</category>
        <category>dockerfile</category>
        <category>namespace</category>
        <category>cgroup</category>
        <category>dockerhub</category>
        <category>frp</category>
        <category>hyperv</category>
        <category>git</category>
        <category>j-link</category>
        <category>rtt</category>
        <category>serial</category>
        <category>debug</category>
        <category>jlink</category>
        <category>j-tag</category>
        <category>ps</category>
        <category>powershell</category>
        <category>obsidian</category>
        <category>spacedesk</category>
        <category>投屏</category>
        <category>vscode</category>
        <category>ide</category>
        <category>sourceinsigh</category>
        <category>si</category>
        <category>commenttranslate</category>
        <category>wsl</category>
        <category>rdpwrap</category>
        <category>rdp</category>
        <category>speedtest</category>
        <category>tools</category>
        <category>wordpress</category>
        <category>web</category>
        <category>mysql</category>
        <category>nginx</category>
        <category>tmux</category>
        <category>unit</category>
        <category>m</category>
        <category>cm</category>
        <category>mm</category>
        <category>s</category>
        <category>us</category>
        <category>v2ray</category>
        <category>hexo</category>
        <category>jekyll</category>
        <category>fluid</category>
        <category>cusdis</category>
        <category>twikoo</category>
        <category>blog</category>
        <category>gravatar</category>
        <category>cravatar</category>
        <category>usb</category>
        <category>c++</category>
        <category>c</category>
        <category>ms-dos</category>
        <category>cmd</category>
        <category>micropython</category>
        <category>python</category>
        <category>pid</category>
        <category>qt</category>
        <category>pyqt</category>
        <category>css</category>
        <category>html</category>
        <category>js</category>
        <category>数据结构</category>
        <category>堆栈</category>
        <category>队列</category>
        <category>链表</category>
        <category>树</category>
        <category>二叉树</category>
        <category>正则表达式</category>
        <category>cortex-a7</category>
        <category>cortex-m3</category>
        <category>rtx</category>
        <category>rtos</category>
        <category>keil</category>
        <category>rt-thread</category>
        <category>ucos</category>
        <category>raspberry</category>
        <category>wiringpi</category>
        <category>bluetooth</category>
        <category>蓝牙</category>
        <category>pwm</category>
        <category>ap</category>
        <category>wifi</category>
        <category>modbus</category>
        <category>linuxapp</category>
        <category>curl</category>
        <category>libcurl</category>
        <category>zlib</category>
        <category>minizip</category>
        <category>alpha_mini</category>
        <category>正点原子</category>
        <item>
            <guid isPermalink="true">https://www.oikiou.top/2021/d3f98b78/</guid>
            <title>Hex 文件格式解析</title>
            <link>https://www.oikiou.top/2021/d3f98b78/</link>
            <category>hex</category>
            <pubDate>Fri, 24 Sep 2021 20:27:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Hex-文件格式解析&#34;&gt;&lt;a href=&#34;#Hex-文件格式解析&#34; class=&#34;headerlink&#34; title=&#34;Hex 文件格式解析&#34;&gt;&lt;/a&gt;Hex 文件格式解析&lt;/h1&gt;&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://developer.arm.com/documentation/ka003292/1-0&#34;&gt;Intel HEX File Format Keil&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Intel_HEX&#34;&gt;Intel HEX Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;格式&#34;&gt;&lt;a href=&#34;#格式&#34; class=&#34;headerlink&#34; title=&#34;格式&#34;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以行为单位，每行以冒号开头，内容全部为16进制码（以ASCII码形式显示）&lt;/li&gt;
&lt;li&gt;在HEX文件里面，每一行代表一个记录。记录的基本格式为如表所示&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;冒号&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;本行数据长度&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;本行数据起始地址&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;校验码&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;2 bytes&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;n byte&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;/2021/d3f98b78/hex_format.jpg&#34; alt=&#34;Hex文件格式解析&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Start code&lt;/td&gt;
&lt;td&gt;one character, an ASCII colon ‘:’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Byte count&lt;/td&gt;
&lt;td&gt;两个十六进制数字（一个十六进制数字对），表示数据字段中的字节数（十六进制数字对）。最大字节数为 255 (0xFF)。16 (0x10) 和 32 (0x20) 是常用的字节数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address&lt;/td&gt;
&lt;td&gt;四位十六进制数字，表示数据的 16 位起始内存地址偏移量。数据的物理地址是通过将此偏移量添加到先前建立的基地址来计算的，从而允许内存寻址超出 16 位地址的 64 KB 限制。默认为零的基地址可以通过各种类型的记录进行更改。基地址和地址偏移量始终表示为&lt;a href=&#34;https://en.wikipedia.org/wiki/Big_endian&#34;&gt;大端&lt;/a&gt;值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Record type&lt;/td&gt;
&lt;td&gt;两个十六进制数字，&lt;em&gt;00&lt;/em&gt;到&lt;em&gt;05&lt;/em&gt;，定义数据字段的含义。参考下文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;一个由&lt;em&gt;n&lt;/em&gt;个字节组成的数据序列，由 &lt;em&gt;2n&lt;/em&gt; 个十六进制数字表示。一些记录省略了这个字段（&lt;em&gt;n&lt;/em&gt;等于零）。数据字节的含义和解释取决于应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Checksum&lt;/td&gt;
&lt;td&gt;two hex digits, a computed value that can be used to verify the record has no errors.计算校验和前所有16进制码的累加和。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;指令类型-Record-type&#34;&gt;&lt;a href=&#34;#指令类型-Record-type&#34; class=&#34;headerlink&#34; title=&#34;指令类型 Record type&#34;&gt;&lt;/a&gt;指令类型 Record type&lt;/h3&gt;&lt;p&gt;指令类型&lt;code&gt;Record type&lt;/code&gt;的值一般是&lt;code&gt;00~05&lt;/code&gt;，这表示了，当前这行&lt;code&gt;hex&lt;/code&gt;格式的数据，所代表的含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;十六进制代码&lt;/th&gt;
&lt;th&gt;记录类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;00&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;包含数据和该数据的16位起始地址。字节计数指定记录中的数据字节数。右侧显示的示例为0B （十一）个数据字节（61， 64， 64， 72， 65， 73， 73， 20， 67， 61， 70）位于以地址开头的连续地址 0010。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:0B 0010 00 6164647265737320676170 A7&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;文件结束&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;每个文件在文件的最后一行必须恰好发生一次。数据字段为空（因此字节数为00），并且地址字段通常为 0000。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:00 0000 01 FF&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;扩展段地址&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据字段包含一个16位的段基址（因此字节数始终为02）与80x86实模式寻址兼容。地址字段（通常为0000）被忽略。最近的段地址02记录乘以16，然后加到每个后续数据记录地址，以形成数据的物理起始地址。这允许寻址多达1 MB的地址空间。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:02 0000 02 1200 EA&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;起始段地址&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对于80x86处理器，请指定CS：IP寄存器的初始内容（即起始执行地址）。地址字段是0000，字节数始终为04，前两个数据字节是CS值，后两个是IP值。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:04 0000 03 00003800 C1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;扩展线性地址&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;允许32位寻址（最大4GiB）。记录的地址字段将被忽略（通常是0000），其字节数始终为02。两个数据字节（大字节序）为所有后续类型指定32位绝对地址的高16位00记录; 这些高位地址位适用于下一个04记录。类型的绝对地址00 通过组合最近的高16位地址位形成记录 04 用低16位的地址记录 00记录。如果是类型00 记录之前没有任何类型 04 记录，然后其高16位地址位默认为0000。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:02 0000 04 FFFF FC&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;起始线性地址&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;地址字段是 0000（未使用），字节数始终为04。四个数据字节代表一个32位地址值（big-endian）。对于80386和更高版本的CPU，此地址将加载到EIP寄存器中。&lt;br/&gt;&lt;strong&gt;（仅限 MDK-ARM）&lt;/strong&gt;起始线性地址记录指定应用程序的起始地址。这些记录包含完整的线性 32 位地址。&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;:04 0000 05 000000CD 2A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;扩展线性地址记录-HEX386&#34;&gt;&lt;a href=&#34;#扩展线性地址记录-HEX386&#34; class=&#34;headerlink&#34; title=&#34;扩展线性地址记录 (HEX386)&#34;&gt;&lt;/a&gt;扩展线性地址记录 (HEX386)&lt;/h5&gt;&lt;p&gt;扩展线性地址记录也称为 32 位地址记录和 HEX386 记录。这些记录包含数据地址的高 16 位（位 16-31）。扩展线性地址记录总是有两个数据字节，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;:02000004FFFFFC&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;02&lt;/strong&gt;是记录中的数据字节数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0000&lt;/strong&gt;是地址字段。对于扩展线性地址记录，此字段始终为 0000。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;04&lt;/strong&gt;是记录类型 04（扩展的线性地址记录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FFFF&lt;/strong&gt;是地址的高 16 位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FC&lt;/strong&gt;是记录的校验和，计算方式为&lt;br&gt;01h + NOT(02h + 00h + 00h + 04h + FFh + FFh)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取扩展线性地址记录时，存储在数据字段中的扩展线性地址将被保存并应用于从 Intel HEX 文件读取的后续记录。线性地址保持有效，直到被另一个扩展地址记录改变。&lt;/p&gt;
&lt;p&gt;数据记录的绝对内存地址是通过将记录中的地址字段与扩展线性地址记录的移位地址数据相加得到的。下面的例子说明了这个过程。&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs haskell&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Address&lt;/span&gt; from the &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;data&lt;/span&gt; record&amp;#x27;s address field      2462&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Extended&lt;/span&gt; linear address record &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;data&lt;/span&gt; field     &lt;span class=&#34;hljs-type&#34;&gt;FFFF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&#34;hljs-comment&#34;&gt;--------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Absolute&lt;/span&gt;-memory address                       &lt;span class=&#34;hljs-type&#34;&gt;FFFF2462&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h5 id=&#34;扩展段地址记录-HEX86&#34;&gt;&lt;a href=&#34;#扩展段地址记录-HEX86&#34; class=&#34;headerlink&#34; title=&#34;扩展段地址记录 (HEX86)&#34;&gt;&lt;/a&gt;扩展段地址记录 (HEX86)&lt;/h5&gt;&lt;p&gt;扩展段地址记录（也称为 HEX86 记录）包含数据地址段的第 4-19 位。扩展段地址记录总是有两个数据字节，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;:020000021200EA&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;02&lt;/strong&gt;是记录中的数据字节数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0000&lt;/strong&gt;是地址字段。对于扩展段地址记录，该字段始终为 0000。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;02&lt;/strong&gt;是记录类型 02（扩展段地址记录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1200&lt;/strong&gt;是地址段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EA&lt;/strong&gt;是记录的校验和，计算方式为&lt;br&gt;01h + NOT(02h + 00h + 00h + 02h + 12h + 00h)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当读取扩展段地址记录时，存储在数据字段中的扩展段地址被保存并应用于从 Intel HEX 文件读取的后续记录。段地址保持有效，直到被另一个扩展地址记录改变。&lt;/p&gt;
&lt;p&gt;数据记录的绝对内存地址是通过将记录中的地址字段添加到来自扩展段地址记录的移位地址数据中获得的。以下示例说明了此过程。&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs haskell&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Address&lt;/span&gt; from the &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;data&lt;/span&gt; record&amp;#x27;s address field     2462&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Extended&lt;/span&gt; segment address record &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;data&lt;/span&gt; field      1200&lt;/span&gt;&lt;br&gt;                                             &lt;span class=&#34;hljs-comment&#34;&gt;--------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Absolute&lt;/span&gt; memory address                      &lt;span class=&#34;hljs-number&#34;&gt;00014462&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h5 id=&#34;起始线性地址记录（仅限-MDK-ARM）&#34;&gt;&lt;a href=&#34;#起始线性地址记录（仅限-MDK-ARM）&#34; class=&#34;headerlink&#34; title=&#34;起始线性地址记录（仅限 MDK-ARM）&#34;&gt;&lt;/a&gt;起始线性地址记录（仅限 MDK-ARM）&lt;/h5&gt;&lt;p&gt;起始线性地址记录指定应用程序的起始地址。这些记录包含完整的线性 32 位地址。起始线性地址记录总是有四个数据字节，如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;:04000005000000CD2A&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;04&lt;/strong&gt;是记录中的数据字节数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0000&lt;/strong&gt;是地址字段。对于起始线性地址记录，该字段始终为 0000。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;05&lt;/strong&gt;是记录类型 05（起始线性地址记录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;000000CD&lt;/strong&gt;是应用程序的 4 字节线性起始地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2A&lt;/strong&gt;是记录的校验和，计算方式为&lt;br&gt;01h + NOT(04h + 00h + 00h + 05h + 00h + 00h + 00h + CDh)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start Linear Address 指定了 __main（pre-main）函数的地址，而不是通常在调用 SystemInit() 之后调用 __main 的启动代码的地址。奇数线性起始地址指定 __main 是为 Thumb 指令集编译的。&lt;/p&gt;
&lt;p&gt;起始线性地址记录可以出现在 hex 文件中的任何位置。在大多数情况下，可以忽略此记录，因为它不包含对闪存进行编程所需的信息。&lt;/p&gt;
&lt;h5 id=&#34;文件结束-EOF-记录&#34;&gt;&lt;a href=&#34;#文件结束-EOF-记录&#34; class=&#34;headerlink&#34; title=&#34;文件结束 (EOF) 记录&#34;&gt;&lt;/a&gt;文件结束 (EOF) 记录&lt;/h5&gt;&lt;p&gt;英特尔 HEX 文件必须以文件结束 (EOF) 记录结尾。此记录在记录类型字段中必须具有值 01。EOF 记录始终如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;:00000001FF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在哪里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;00&lt;/strong&gt;是记录中的数据字节数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0000&lt;/strong&gt;是数据在内存中的位置。文件尾记录中的地址是无意义的并且被忽略。地址 0000h 是典型的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;01&lt;/strong&gt;是记录类型 01（文件结束记录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FF&lt;/strong&gt;是记录的校验和，计算方式为&lt;br&gt;01h + NOT(00h + 00h + 00h + 01h)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tip&#34;&gt;&lt;a href=&#34;#tip&#34; class=&#34;headerlink&#34; title=&#34;tip&#34;&gt;&lt;/a&gt;tip&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用Notepad++打开hex文件，会自动上色、换行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
