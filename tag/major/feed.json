{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"major\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2024/f0099803/",
            "url": "https://www.oikiou.top/2024/f0099803/",
            "title": "语义化版本编号 Major、Minor、Patch",
            "date_published": "2024-01-19T14:57:15.000Z",
            "content_html": "<h2 id=\"语义化版本（Semantic-Versioning）：Major、Minor-和-Patch-版本号解析\"><a href=\"#语义化版本（Semantic-Versioning）：Major、Minor-和-Patch-版本号解析\" class=\"headerlink\" title=\"语义化版本（Semantic Versioning）：Major、Minor 和 Patch 版本号解析\"></a>语义化版本（Semantic Versioning）：Major、Minor 和 Patch 版本号解析</h2><p>语义化版本，通常简称为SemVer，是一种软件版本号的标准化方案，旨在使软件版本号的管理更加透明和可预测。它主要由三个部分组成：Major（主版本号）、Minor（次版本号）和Patch（修订版本号）。在这篇文章中，我们将深入解释这三个部分的含义，并提供详细的示例来说明它们的用途和变更规则。</p>\n<p>在RT-Thread内有如下代码段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* RT-Thread version information */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RT_VERSION_MAJOR                5               <span class=\"hljs-comment\">/**&lt; Major version number (X.x.x) */</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RT_VERSION_MINOR                1               <span class=\"hljs-comment\">/**&lt; Minor version number (x.X.x) */</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RT_VERSION_PATCH                0               <span class=\"hljs-comment\">/**&lt; Patch version number (x.x.X) */</span></span><br><br><span class=\"hljs-comment\">/* e.g. #if (RTTHREAD_VERSION &gt;= RT_VERSION_CHECK(4, 1, 0) */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RT_VERSION_CHECK(major, minor, revise)          ((major * 10000) + (minor * 100) + revise)</span><br><br><span class=\"hljs-comment\">/* RT-Thread version */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTTHREAD_VERSION                RT_VERSION_CHECK(RT_VERSION_MAJOR, RT_VERSION_MINOR, RT_VERSION_PATCH)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Major（主版本号）\"><a href=\"#Major（主版本号）\" class=\"headerlink\" title=\"Major（主版本号）\"></a>Major（主版本号）</h3><p>Major版本号是语义化版本中的第一个数字，用于表示软件的主要版本变更。当进行大规模的、不兼容的变更时，应该增加Major版本号。主要变更包括：</p>\n<ol>\n<li><strong>不兼容的API更改</strong>：当你修改了软件的API，以至于旧版本的代码无法与新版本一起正常工作时，应该升级Major版本号。这可能包括删除、更改或添加API端点、参数或行为。</li>\n<li><strong>重大功能新增</strong>：如果你引入了重要的新功能，这可能会改变用户的工作流程或提供新的能力，也应该升级Major版本号。</li>\n<li><strong>废弃旧功能</strong>：当你计划废弃或删除旧的功能时，通常需要增加Major版本号，以提醒用户进行迁移。</li>\n</ol>\n<p>示例： 假设有一个虚构的图形处理库，当前版本号为1.0.0。如果开发团队决定删除现有API中的一个核心功能，这将导致现有的用户无法升级到新版本而不修改其代码，那么新版本的版本号应该升级到2.0.0。</p>\n<h3 id=\"Minor（次版本号）\"><a href=\"#Minor（次版本号）\" class=\"headerlink\" title=\"Minor（次版本号）\"></a>Minor（次版本号）</h3><p>Minor版本号是语义化版本中的第二个数字，用于表示向后兼容的新功能添加。Minor版本号的变更包括：</p>\n<ol>\n<li><strong>新增功能</strong>：当你向软件添加新的功能，但这些功能不会破坏现有的API或功能，应该增加Minor版本号。</li>\n<li><strong>改进现有功能</strong>：如果你对现有功能进行了改进，但这些改进不会导致现有用户的代码无法工作，也应该升级Minor版本号。</li>\n<li><strong>向后兼容的API增强</strong>：如果你增加了现有API的参数、选项或能力，而这不会破坏已有的使用方式，也应该升级Minor版本号。</li>\n</ol>\n<p>示例： 继续以图形处理库为例，当前版本号为1.2.0。开发团队决定在库中添加一个全新的图像滤镜功能，但这不会破坏任何现有功能或API。在这种情况下，版本号应升级到1.3.0。</p>\n<h3 id=\"Patch（修订版本号）\"><a href=\"#Patch（修订版本号）\" class=\"headerlink\" title=\"Patch（修订版本号）\"></a>Patch（修订版本号）</h3><p>Patch版本号是语义化版本中的第三个数字，用于表示向后兼容的错误修复或小的改进。Patch版本号的变更包括：</p>\n<ol>\n<li><strong>错误修复</strong>：当你解决现有功能或API中的错误时，应该升级Patch版本号。这些修复不应引入新的功能或改变现有的行为。</li>\n<li><strong>性能优化</strong>：如果你对现有功能进行性能优化，而不会改变其行为，也应该升级Patch版本号。</li>\n<li><strong>小的改进或修改</strong>：如果你进行了一些小的改进，但它们不会破坏向后兼容性，应该升级Patch版本号。</li>\n</ol>\n<p>示例： 继续以图形处理库为例，当前版本号为1.2.3。在测试中发现一个重要的Bug，它导致图像处理不正确。开发团队修复了这个问题，没有引入新的功能或改变现有功能，版本号应该升级到1.2.4。</p>\n",
            "tags": [
                "major"
            ]
        }
    ]
}