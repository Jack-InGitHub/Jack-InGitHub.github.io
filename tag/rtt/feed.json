{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"rtt\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2021/18d811b/",
            "url": "https://www.oikiou.top/2021/18d811b/",
            "title": "J-Link RTT的使用方法",
            "date_published": "2021-09-24T12:28:40.000Z",
            "content_html": "<h1 id=\"J-Link-RTT-amp-JTrace\"><a href=\"#J-Link-RTT-amp-JTrace\" class=\"headerlink\" title=\"J-Link RTT &amp; JTrace\"></a>J-Link RTT &amp; JTrace</h1><h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>Jlink可用直接输出调试信息，省去串口工具（配置麻烦+硬件接线乱+占用IO）</p>\n<p>Jlink输出调试信息有两种</p>\n<ul>\n<li>Jlink的Trace</li>\n<li>Jlink的RTT (Real Time Transfer)</li>\n</ul>\n<h2 id=\"Jlink-Trace\"><a href=\"#Jlink-Trace\" class=\"headerlink\" title=\"Jlink Trace\"></a>Jlink Trace</h2><hr>\n<p>！！！待完善！！！</p>\n<hr>\n<p>MDK 环境下：</p>\n<p><img src=\"/2021/18d811b/132307095276873.png\" alt=\"img\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port8(n)    (*((volatile unsigned char *)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port16(n)   (*((volatile unsigned short*)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DEMCR           (*((volatile unsigned long *)(0xE000EDFC)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TRCENA          0x01000000</span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fputc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ch, FILE *f)</span> <br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (DEMCR &amp; TRCENA) &#123;<br>    <span class=\"hljs-keyword\">while</span> (ITM_Port32(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>);<br>    ITM_Port8(<span class=\"hljs-number\">0</span>) = ch;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span>(ch);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"RTT\"><a href=\"#RTT\" class=\"headerlink\" title=\"RTT\"></a>RTT</h2><p><a href=\"https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/\">Jlink RTT 官网资料</a></p>\n<p>RTT其实原理就是读取RAM上某个Buff的数据，这个Buff可以通过RTT的CB(control block)找到。</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><p>下载Jlink的工具后，安装后程序目录有Samples文件夹(default: C:\\Program Files\\SEGGER\\JLink\\Samples)，文件夹内就有RTT的源码。</p>\n<ol>\n<li>将源码的<code>RTT/</code>目录下 <code>SEGGER_RTT_Printf.c</code>  <code>SEGGER_RTT.c</code> 两个文件添加到工程里，并解决头文件包含问题。</li>\n<li>看 <code>Examples/</code>目录下就有使用历程，移植到你的工程就好。可以参考<code>Main_RTT_InputEchoApp.c</code>和<code>Main_RTT_PrintfTest.c</code>。</li>\n<li>打开 <code>J-Link RTT Viewer</code>软件，选择<code>Device</code>，输入<code>RTT Control Block</code>的地址connect即可。<ol>\n<li><code>RTT Control Block</code>的地址可以输入RAM的范围让<code>J-Link RTT Viewer</code>软件自己去搜索。</li>\n<li>也可手动输入，而RTT_V754a的<code>RTT Control Block</code>是<code>_SEGGER_RTT</code> 在<code> file:SEGGER_RTT.c line:279</code>。<img src=\"/2021/18d811b/image-20210917214218565.png\" alt=\"image-20210917214218565\"></li>\n</ol>\n</li>\n<li>一顿操作下来正常就可以收到数据了。</li>\n</ol>\n<h3 id=\"RTT-源码\"><a href=\"#RTT-源码\" class=\"headerlink\" title=\"RTT 源码\"></a>RTT 源码</h3><h4 id=\"Included-files\"><a href=\"#Included-files\" class=\"headerlink\" title=\"Included files\"></a>Included files</h4><ul>\n<li><code>RTT/</code><ul>\n<li><code>SEGGER_RTT.c</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT.h</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT_ASM_ARMv7M.S</code>    - ARMv7M 的优化实现</li>\n<li><code>SEGGER_RTT_Printf.c</code>        - (‘ SEGGER_RTT_Printf() ‘)的简单实现。</li>\n</ul>\n</li>\n<li><code>Syscalls/</code><ul>\n<li><code>SEGGER_RTT_Syscalls_*.c</code>    - <code>printf()</code> 重定向</li>\n</ul>\n</li>\n<li><code>Config/</code><ul>\n<li><code>SEGGER_RTT_Conf.h</code>          - RTT配置文件。</li>\n</ul>\n</li>\n<li><code>Examples/</code><ul>\n<li><code>Main_RTT_InputEchoApp.c</code>    - Example application which echoes input on Channel 0.</li>\n<li><code>Main_RTT_MenuApp.c</code>         - Example application to demonstrate RTT bi-directional functionality.</li>\n<li><code>Main_RTT_PrintfTest.c</code>      - Example application to test RTT’s simple printf implementation.</li>\n<li><code>Main_RTT_SpeedTestApp.c</code>    - Example application to measure RTT performance. (Requires embOS)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">函数名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SEGGER_RTT_Read()</td>\n<td align=\"center\">从输入缓冲区读取数据。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Write()</td>\n<td align=\"center\">将数据写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WriteString()</td>\n<td align=\"center\">将\\0结尾字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_printf()</td>\n<td align=\"center\">将格式化的字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_GetKey()</td>\n<td align=\"center\">从输入缓冲区 0 中获取一个字符。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_HasKey()</td>\n<td align=\"center\">检查输入缓冲区 0 中是否有字符可用。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WaitKey()</td>\n<td align=\"center\">等待输入缓冲区 0 中的字符可用并获取它。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigUpBuffer()</td>\n<td align=\"center\">配置向上（输出）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigDownBuffer()</td>\n<td align=\"center\">配置向下（输入）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Init()</td>\n<td align=\"center\">仅使用 RAM 目标时初始化 RTT 控制块结构。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_SetTerminal()</td>\n<td align=\"center\">将“虚拟”终端设置为通过 Write 和 WriteString 用于通道 0 上的输出。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_TerminalOut()</td>\n<td align=\"center\">通过“虚拟”终端发送以\\0结尾的字符串。</td>\n</tr>\n</tbody></table>\n<h3 id=\"RTT-软件\"><a href=\"#RTT-软件\" class=\"headerlink\" title=\"RTT 软件\"></a>RTT 软件</h3><p><img src=\"/2021/18d811b/image-20210918101414512.png\" alt=\"image-20210918101414512\"></p>\n<ul>\n<li><p><code>J-Link RTT Viewer</code>软件用的比较多</p>\n</li>\n<li><p><code>J-Link RTT Logger</code>软件可以将输出的数据保存到文件，并显示通信速率和通信数据量。</p>\n</li>\n<li><p><code>J-Link RTT Client</code>可以在调试的时候，充当客户端，输出数据。据说支持中文</p>\n</li>\n</ul>\n<h3 id=\"note：\"><a href=\"#note：\" class=\"headerlink\" title=\"note：\"></a>note：</h3><ul>\n<li>程序如果跑在RAM中，J-Link可能会错误地识别出init部分中的块，而不是数据部分中的实际块。为了防止这种情况，将SEGGER_RTT_IN_RAM的定义设置为1。现在，J-Link将在应用程序中调用第一个SEGGER_RTT函数之后找到正确的RTT缓冲区。建议在应用程序开始时调用SEGGER_RTT_Init()。</li>\n</ul>\n<h4 id=\"不同通道输出数据\"><a href=\"#不同通道输出数据\" class=\"headerlink\" title=\"不同通道输出数据\"></a>不同通道输出数据</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 0\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 1\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 2\\r\\n&quot;</span>);<br><br><br><br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">0</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 0\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">1</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 1\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">2</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 2\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输出带颜色的字符\"><a href=\"#输出带颜色的字符\" class=\"headerlink\" title=\"输出带颜色的字符\"></a>输出带颜色的字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Control sequences, based on ANSI.</span><br><span class=\"hljs-comment\">// Can be used to control color, and clear the screen</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_RESET                <span class=\"hljs-string\">&quot;\\x1B[0m&quot;</span>         <span class=\"hljs-comment\">// Reset to default colors</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_CLEAR                <span class=\"hljs-string\">&quot;\\x1B[2J&quot;</span>         <span class=\"hljs-comment\">// Clear screen, reposition cursor to top left</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLACK           <span class=\"hljs-string\">&quot;\\x1B[2;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_RED             <span class=\"hljs-string\">&quot;\\x1B[2;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_GREEN           <span class=\"hljs-string\">&quot;\\x1B[2;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_YELLOW          <span class=\"hljs-string\">&quot;\\x1B[2;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLUE            <span class=\"hljs-string\">&quot;\\x1B[2;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_MAGENTA         <span class=\"hljs-string\">&quot;\\x1B[2;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_CYAN            <span class=\"hljs-string\">&quot;\\x1B[2;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_WHITE           <span class=\"hljs-string\">&quot;\\x1B[2;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLACK    <span class=\"hljs-string\">&quot;\\x1B[1;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_RED      <span class=\"hljs-string\">&quot;\\x1B[1;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_GREEN    <span class=\"hljs-string\">&quot;\\x1B[1;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_YELLOW   <span class=\"hljs-string\">&quot;\\x1B[1;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLUE     <span class=\"hljs-string\">&quot;\\x1B[1;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_MAGENTA  <span class=\"hljs-string\">&quot;\\x1B[1;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_CYAN     <span class=\"hljs-string\">&quot;\\x1B[1;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_WHITE    <span class=\"hljs-string\">&quot;\\x1B[1;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLACK             <span class=\"hljs-string\">&quot;\\x1B[24;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_RED               <span class=\"hljs-string\">&quot;\\x1B[24;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_GREEN             <span class=\"hljs-string\">&quot;\\x1B[24;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_YELLOW            <span class=\"hljs-string\">&quot;\\x1B[24;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLUE              <span class=\"hljs-string\">&quot;\\x1B[24;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_MAGENTA           <span class=\"hljs-string\">&quot;\\x1B[24;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_CYAN              <span class=\"hljs-string\">&quot;\\x1B[24;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_WHITE             <span class=\"hljs-string\">&quot;\\x1B[24;47m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLACK      <span class=\"hljs-string\">&quot;\\x1B[4;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_RED        <span class=\"hljs-string\">&quot;\\x1B[4;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_GREEN      <span class=\"hljs-string\">&quot;\\x1B[4;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_YELLOW     <span class=\"hljs-string\">&quot;\\x1B[4;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLUE       <span class=\"hljs-string\">&quot;\\x1B[4;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_MAGENTA    <span class=\"hljs-string\">&quot;\\x1B[4;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_CYAN       <span class=\"hljs-string\">&quot;\\x1B[4;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_WHITE      <span class=\"hljs-string\">&quot;\\x1B[4;47m&quot;</span></span><br><br><br>SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,RTT_CTRL_RESET<span class=\"hljs-string\">&quot;Red: &quot;</span>\\<br>                       RTT_CTRL_TEXT_RED<span class=\"hljs-string\">&quot;This text is red.&quot;</span>\\<br>                       RTT_CTRL_BG_BRIGHT_GREEN<span class=\"hljs-string\">&quot;This background is green.\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入字符\"><a href=\"#输入字符\" class=\"headerlink\" title=\"输入字符\"></a>输入字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    <span class=\"hljs-type\">char</span> r = SEGGER_RTT_GetKey();<br>    SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;input:%c\\r\\n&quot;</span>, r);<br>&#125;<br><br><br><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    ReadNum = SEGGER_RTT_Read(<span class=\"hljs-number\">0</span>,&amp;acIn[<span class=\"hljs-number\">0</span>], <span class=\"hljs-keyword\">sizeof</span>(acIn));<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">20</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0x0A</span> != acIn[i])<br>        &#123;<br>            ReadNum++;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    SEGGER_RTT_Write(<span class=\"hljs-number\">0</span>,acIn,ReadNum);<br>    ReadNum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(acIn,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(acIn));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "j-link",
                "jlink",
                "rtt",
                "serial",
                "debug"
            ]
        }
    ]
}