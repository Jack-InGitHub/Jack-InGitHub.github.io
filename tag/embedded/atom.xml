<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.oikiou.top</id>
    <title>Oikiou&#39;s Blog • Posts by &#34;embedded&#34; tag</title>
    <link href="https://www.oikiou.top" />
    <updated>2021-01-02T06:23:05.000Z</updated>
    <category term="123" />
    <category term="embedded" />
    <category term="cc2530" />
    <category term="zigbee" />
    <category term="hp" />
    <category term="chrome" />
    <category term="sscanf" />
    <category term="c/c++" />
    <category term="hex" />
    <category term="md5" />
    <category term="jpeg" />
    <category term="webp" />
    <category term="jpeg2000" />
    <category term="image" />
    <category term="osi" />
    <category term="ssl" />
    <category term="https" />
    <category term="markdown" />
    <category term="note" />
    <category term="tags" />
    <category term="label" />
    <category term="category" />
    <category term="iap" />
    <category term="bootloader" />
    <category term="stm32" />
    <category term="typora" />
    <category term="usart" />
    <category term="rts" />
    <category term="cts" />
    <category term="dtr" />
    <category term="dsr" />
    <category term="ws2812" />
    <category term="spi" />
    <category term="dma" />
    <category term="xip" />
    <category term="nor" />
    <category term="nand" />
    <category term="windows" />
    <category term="makefile" />
    <category term="android" />
    <category term="mtp" />
    <category term="pc" />
    <category term="driver" />
    <category term="ip" />
    <category term="location" />
    <category term="api" />
    <category term="zsh" />
    <category term="shell" />
    <category term="linux" />
    <category term="zip" />
    <category term="gzip" />
    <category term="bzip" />
    <category term="tar" />
    <category term="DS_Store" />
    <category term="rtf" />
    <category term="后缀" />
    <category term="character encoding" />
    <category term="gb2312" />
    <category term="utf-8" />
    <category term="机智云" />
    <category term="kms" />
    <category term="office" />
    <category term="volume" />
    <category term="蓝桥杯" />
    <category term="国赛" />
    <category term="ct117e" />
    <category term="超声波" />
    <category term="github" />
    <category term="hosts" />
    <category term="ct117e-ex" />
    <category term="c" />
    <category term="c++" />
    <category term="ms-dos" />
    <category term="pid" />
    <category term="micropython" />
    <category term="python" />
    <category term="qt" />
    <category term="pyqt" />
    <category term="正则表达式" />
    <category term="数据结构" />
    <category term="堆栈" />
    <category term="队列" />
    <category term="链表" />
    <category term="树" />
    <category term="二叉树" />
    <category term="life" />
    <category term="workflow" />
    <category term="人生" />
    <category term="cat_drive" />
    <category term="cad" />
    <category term="心理学" />
    <category term="switch" />
    <category term="nintendo" />
    <category term="game" />
    <category term="synology" />
    <category term="hardware" />
    <category term="lenovo" />
    <category term="disk" />
    <category term="software" />
    <category term="dslogic" />
    <category term="逻辑分析仪" />
    <category term="pyhton" />
    <category term="decoder" />
    <category term="摄影" />
    <category term="git" />
    <category term="docker" />
    <category term="dockerfile" />
    <category term="namespace" />
    <category term="cgroup" />
    <category term="dockerhub" />
    <category term="j-link" />
    <category term="rtt" />
    <category term="serial" />
    <category term="debug" />
    <category term="jlink" />
    <category term="rdpwrap" />
    <category term="rdp" />
    <category term="flash" />
    <category term="j-tag" />
    <category term="spacedesk" />
    <category term="投屏" />
    <category term="ps" />
    <category term="powershell" />
    <category term="vscode" />
    <category term="commenttranslate" />
    <category term="wsl" />
    <category term="sourceinsigh" />
    <category term="si" />
    <category term="ide" />
    <category term="wordpress" />
    <category term="web" />
    <category term="mysql" />
    <category term="nginx" />
    <category term="unit" />
    <category term="m" />
    <category term="cm" />
    <category term="mm" />
    <category term="s" />
    <category term="us" />
    <category term="tmux" />
    <category term="cortex-m3" />
    <category term="hexo" />
    <category term="jekyll" />
    <category term="fluid" />
    <category term="cusdis" />
    <category term="twikoo" />
    <category term="blog" />
    <category term="gravatar" />
    <category term="cravatar" />
    <category term="cortex-a7" />
    <category term="alpha_mini" />
    <category term="正点原子" />
    <category term="rtx" />
    <category term="rtos" />
    <category term="keil" />
    <category term="ucos" />
    <category term="rt-thread" />
    <category term="raspberry" />
    <category term="ap" />
    <category term="wifi" />
    <category term="wiringpi" />
    <category term="pwm" />
    <category term="bluetooth" />
    <category term="蓝牙" />
    <category term="modbus" />
    <entry>
        <id>https://www.oikiou.top/2021/60aa39b4/</id>
        <title>机智云通信</title>
        <link rel="alternate" href="https://www.oikiou.top/2021/60aa39b4/"/>
        <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包头(2B)&lt;/th&gt;
&lt;th&gt;包长度(2B)&lt;/th&gt;
&lt;th&gt;命令(1B)&lt;/th&gt;
&lt;th&gt;包序号(1B)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0xFFFF&lt;/td&gt;
&lt;td&gt;(包长度)后面的数据长度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag(2B)&lt;/th&gt;
&lt;th&gt;xxx&lt;/th&gt;
&lt;th&gt;校验和(1B)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;和校验&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;因为包头为固定 0xFFFF，对于发送方，如检测到有出现 0xFF 的数据内容，需要在 0xFF 后添加 0x55。对于接收方，如检测到非包头部分出现 0xFF，需要把紧跟其后的 0x55 移除。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x01&lt;/td&gt;
&lt;td&gt;设备向MCU请求信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x02&lt;/td&gt;
&lt;td&gt;MCU回复设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="embedded" />
        <category term="机智云" />
        <updated>2021-01-02T06:23:05.000Z</updated>
    </entry>
    <entry>
        <id>https://www.oikiou.top/2020/7d358aa2/</id>
        <title>Modbus</title>
        <link rel="alternate" href="https://www.oikiou.top/2020/7d358aa2/"/>
        <content type="html">&lt;h1 id=&#34;Modbus&#34;&gt;&lt;a href=&#34;#Modbus&#34; class=&#34;headerlink&#34; title=&#34;Modbus&#34;&gt;&lt;/a&gt;Modbus&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://wenku.baidu.com/view/ef2f8bfe81eb6294dd88d0d233d4b14e85243e3a.html&#34;&gt;百度文库 MODBUS协议最简单又是最直白的解释&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分为RTU（发Hex）模式和ASCII（发字符）模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从机地址 0-247 （其中0为广播地址）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通信格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ASCII&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;起始符+&lt;strong&gt;设备地址(1Byte)+功能码(1Byte)+数据(nByte n&amp;lt;253)+校验(2Byte LRC)&lt;/strong&gt;+结束符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起始符——ASCII的起始符为‘:’一个冒号&lt;/li&gt;
&lt;li&gt;设备地址——0-247&lt;/li&gt;
&lt;li&gt;功能码——见下文&lt;/li&gt;
&lt;li&gt;数据——略&lt;/li&gt;
&lt;li&gt;校验——&lt;strong&gt;起始符 和 校验符&lt;/strong&gt;  之间的所有数据        一般用LRC校验&lt;/li&gt;
&lt;li&gt;结束符——Chr$（13）+Chr（10）&lt;/li&gt;
&lt;li&gt;例—— : (起)    02(地址) 03(功能) 0a00(数据) 0004(校验)    Chr$(13)Chr(10)(终)&lt;/li&gt;
&lt;li&gt;设备地址、功能码、数据、校验 都是用的十六进制的字符形式 例如发送0x16就发送“16”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RTU&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;起始符+&lt;strong&gt;设备地址(1Byte)+功能码(1Byte)+数据(nByte n&amp;lt;253)+校验(2Byte CRC16)&lt;/strong&gt;+结束符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起始符——3.5个字符的时间间隔&lt;/li&gt;
&lt;li&gt;设备地址——0-247&lt;/li&gt;
&lt;li&gt;功能码——见下文&lt;/li&gt;
&lt;li&gt;数据——略&lt;/li&gt;
&lt;li&gt;校验——&lt;strong&gt;起始符 和 校验符&lt;/strong&gt;  之间的所有数据        一般用CRC16校验&lt;/li&gt;
&lt;li&gt;结束符——3.5个字符的时间间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;功能表&#34;&gt;&lt;a href=&#34;#功能表&#34; class=&#34;headerlink&#34; title=&#34;功能表&#34;&gt;&lt;/a&gt;功能表&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;功能码&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;读取线圈状态&lt;/td&gt;
&lt;td&gt;取得一组逻辑线圈的当前状态（ON&amp;#x2F;OFF)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;读取输入状态&lt;/td&gt;
&lt;td&gt;取得一组开关输入的当前状态（ON&amp;#x2F;OFF)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td&gt;读取保持寄存器&lt;/td&gt;
&lt;td&gt;在一个或多个保持寄存器中取得当前的二进制值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td&gt;读取输入寄存器&lt;/td&gt;
&lt;td&gt;在一个或多个输入寄存器中取得当前的二进制值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td&gt;强置单线圈&lt;/td&gt;
&lt;td&gt;强置一个逻辑线圈的通断状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td&gt;预置单寄存器&lt;/td&gt;
&lt;td&gt;把具体二进值装入一个保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td&gt;读取异常状态&lt;/td&gt;
&lt;td&gt;取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td&gt;回送诊断校验&lt;/td&gt;
&lt;td&gt;把诊断校验报文送从机，以对通信处理进行评鉴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td&gt;编程（只用于484）&lt;/td&gt;
&lt;td&gt;使主机模拟编程器作用，修改PC从机逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td&gt;控询（只用于484）&lt;/td&gt;
&lt;td&gt;可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td&gt;读取事件计数&lt;/td&gt;
&lt;td&gt;可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td&gt;读取通信事件记录&lt;/td&gt;
&lt;td&gt;可是主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td&gt;编程（184&amp;#x2F;384 484 584）&lt;/td&gt;
&lt;td&gt;可使主机模拟编程器功能修改PC从机逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td&gt;探询（184&amp;#x2F;384 484 584）&lt;/td&gt;
&lt;td&gt;可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td&gt;强置多线圈&lt;/td&gt;
&lt;td&gt;强置一串连续逻辑线圈的通断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td&gt;预置多寄存器&lt;/td&gt;
&lt;td&gt;把具体的二进制值装入一串连续的保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td&gt;报告从机标识&lt;/td&gt;
&lt;td&gt;可使主机判断编址从机的类型及该从机运行指示灯的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;18&lt;/td&gt;
&lt;td&gt;（884和MICRO 84）&lt;/td&gt;
&lt;td&gt;可使主机模拟编程功能，修改PC状态逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19&lt;/td&gt;
&lt;td&gt;重置通信链路&lt;/td&gt;
&lt;td&gt;发生非可修改错误后，是从机复位于已知状态，可重置顺序字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td&gt;读取通用参数（584L）&lt;/td&gt;
&lt;td&gt;显示扩展存储器文件中的数据信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;21&lt;/td&gt;
&lt;td&gt;写入通用参数（584L）&lt;/td&gt;
&lt;td&gt;把通用参数写入扩展存储文件，或修改之&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;22～64&lt;/td&gt;
&lt;td&gt;保留作扩展功能备用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;65～72&lt;/td&gt;
&lt;td&gt;保留以备用户功能所用&lt;/td&gt;
&lt;td&gt;留作用户功能的扩展编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;73～119&lt;/td&gt;
&lt;td&gt;非法功能&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;120～127&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;留作内部作用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;128～255&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;用于异常应答&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;0x01-读取线圈状态（数字量）&#34;&gt;&lt;a href=&#34;#0x01-读取线圈状态（数字量）&#34; class=&#34;headerlink&#34; title=&#34;0x01 读取线圈状态（数字量）&#34;&gt;&lt;/a&gt;0x01 读取线圈状态（数字量）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0x01号命令，读取一个或多个    可读写数字量寄存器    （读取线圈状态）：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;起始地址高八位+低八位&lt;/th&gt;
&lt;th&gt;读取寄存器数量高八位+低八位&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x01&lt;/td&gt;
&lt;td&gt;0x00+0x13&lt;/td&gt;
&lt;td&gt;0x00+0x25&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备地址与功能码：在一个485总线上可以挂接多个设备，此处的设备地址表示想和哪一个设备通讯。例子中为想和0x11通讯。读取数字量的命令号固定为0x01。&lt;/li&gt;
&lt;li&gt;起始地址高8位、低8位：表示想读取的开关量的起始地址(起始地址为0)。比如例子中的起始地址为0x0013。&lt;/li&gt;
&lt;li&gt;寄存器数高8位、低8位：表示从起始地址开始读多少个开关量。例子中为37(0x0025)个开关量。&lt;/li&gt;
&lt;li&gt;CRC校验：是从开头一直校验到此之前。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设备响应&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;返回的字节个数&lt;/th&gt;
&lt;th&gt;返回的数据1+数据2+….+数据n&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x01&lt;/td&gt;
&lt;td&gt;0x05&lt;/td&gt;
&lt;td&gt;0xcd+0x6b+0xb2+0x0e+0x1b&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设备地址与功能码：上同，0x01。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回的字节个数：表示数据的字节个数，也就是数据的n的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据1…n：由于每一个数据是一个8位的数，所以每一个数据表示8个开关量的值，每一位为0表示对应的开关断开，为1表示闭合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果询问的开关量不是8的整倍数，那么最后一个字节的高位部分无意义，置为0。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRC校验同上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x05强制单线圈（写一个开关数字量）&#34;&gt;&lt;a href=&#34;#0x05强制单线圈（写一个开关数字量）&#34; class=&#34;headerlink&#34; title=&#34;0x05强制单线圈（写一个开关数字量）&#34;&gt;&lt;/a&gt;0x05强制单线圈（写一个开关数字量）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0x05号命令，写一个数字量（强制单线圈） 可广播：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;需操作的寄存器地址高8位+低8位&lt;/th&gt;
&lt;th&gt;需操作的寄存器数据高8位+低8位&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x05&lt;/td&gt;
&lt;td&gt;0x00+0xac&lt;/td&gt;
&lt;td&gt;0xff+0x00&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设备地址与功能码：上同，0x05。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需下置的寄存器地址高8位，低8位：表明了需要置位（操作）的开关的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;置位（操作）的数据高8位，低8位：表明需要置位的开关量的状态。例子中为把该开关闭合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，此处只可以是[FF][00]表示ON状态 闭合      [00][00]表示OFF状态 断开，其他数值非法。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意此命令一条只能下置一个开关量的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设备响应：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果成功把计算机发送的命令原样返回，否则不响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x03读取保持寄存器（模拟量）&#34;&gt;&lt;a href=&#34;#0x03读取保持寄存器（模拟量）&#34; class=&#34;headerlink&#34; title=&#34;0x03读取保持寄存器（模拟量）&#34;&gt;&lt;/a&gt;0x03读取保持寄存器（模拟量）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0x03号命令，读可读写模拟量寄存器（保持寄存器）：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;起始寄存器地址高8位+低8位&lt;/th&gt;
&lt;th&gt;读取的寄存器数量高8位+低8位&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x03&lt;/td&gt;
&lt;td&gt;0x00+0x6b&lt;/td&gt;
&lt;td&gt;0x00+0x03&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备地址与功能码：上同，0x03。&lt;/li&gt;
&lt;li&gt;起始地址高8位、低8位：表示想读取的模拟量的起始地址(起始地址为0)。比如例子中的起始地址为0x006b。&lt;/li&gt;
&lt;li&gt;寄存器数高8位、低8位：表示从起始地址开始读多少个模拟量。例子中为3个模拟量。注意，在返回的信息中一个模拟量需要返回两个字节。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设备响应：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;返回的字节个数&lt;/th&gt;
&lt;th&gt;返回的数据1+数据2+….+数据n&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x03&lt;/td&gt;
&lt;td&gt;0x06&lt;/td&gt;
&lt;td&gt;0x02+0x2b+0x00+0x00+0x00+0x64&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备地址与功能码：上同，0x03。&lt;/li&gt;
&lt;li&gt;返回的字节个数：表示数据的字节个数，也就是数据1，2…n中的n的值。例子中返回了3个模拟量的数据，因为一个模拟量需要2个字节所以共6个字节。&lt;/li&gt;
&lt;li&gt;数据1…n：[数据1][数据2]分别是第1个模拟量的高8位和低8位，[数据3][数据4]是第2个模拟量的高8位和低8位，以此类推。例子中返回的值分别是555，0，100。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x06预置单寄存器（写一个模拟量）&#34;&gt;&lt;a href=&#34;#0x06预置单寄存器（写一个模拟量）&#34; class=&#34;headerlink&#34; title=&#34;0x06预置单寄存器（写一个模拟量）&#34;&gt;&lt;/a&gt;0x06预置单寄存器（写一个模拟量）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0x06号命令，写单个模拟量寄存器（保持寄存器）：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;需操作的寄存器地址高8位+低8位&lt;/th&gt;
&lt;th&gt;需操作的寄存器数据高8位+低8位&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x06&lt;/td&gt;
&lt;td&gt;0x00+0x01&lt;/td&gt;
&lt;td&gt;0x00+0x03&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备地址与功能码：上同，0x06。&lt;/li&gt;
&lt;li&gt;需下置的寄存器地址高8位，低8位：表明了需要下置的模拟量寄存器的地址。&lt;/li&gt;
&lt;li&gt;下置的数据高8位，低8位：表明需要下置的模拟量数据。比如例子中就把1号寄存器的值设为3。&lt;/li&gt;
&lt;li&gt;注意此命令一条只能下置一个模拟量的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设备响应：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果成功把计算机发送的命令原样返回，否则不响应。&lt;/p&gt;
&lt;h2 id=&#34;0x16-预置多寄存器（写多个模拟量）&#34;&gt;&lt;a href=&#34;#0x16-预置多寄存器（写多个模拟量）&#34; class=&#34;headerlink&#34; title=&#34;0x16 预置多寄存器（写多个模拟量）&#34;&gt;&lt;/a&gt;0x16 预置多寄存器（写多个模拟量）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0x16号命令，写多个模拟量寄存器（保持寄存器）：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;需操作的地址高8位+低8位&lt;/th&gt;
&lt;th&gt;需操作数据的数量高8位+低8位&lt;/th&gt;
&lt;th&gt;操作的数据1 高8位+低8位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x16&lt;/td&gt;
&lt;td&gt;0x00+0x01&lt;/td&gt;
&lt;td&gt;0x00+0x01&lt;/td&gt;
&lt;td&gt;0x00+0x05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作的数据2 高8位+低8位&lt;/td&gt;
&lt;td&gt;………&lt;/td&gt;
&lt;td&gt;操作的数据n 高8位+低8位&lt;/td&gt;
&lt;td&gt;CRC16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备地址与功能码：上同，0x16。&lt;/li&gt;
&lt;li&gt;需下置的寄存器地址高8位，低8位：表明了需要下置的模拟量寄存器的地址。&lt;/li&gt;
&lt;li&gt;需下置的数据数量高8位，低8位：表明了需要下置的数据数量，这里为1。&lt;/li&gt;
&lt;li&gt;下置的数据高8位，低8位：表明需要下置的模拟量数据。比如例子中就把1号寄存器的值设为5。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设备响应：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果成功把计算机返回的如下命令，否则不响应。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备地址+功能码&lt;/th&gt;
&lt;th&gt;需操作的寄存器地址高8位+低8位&lt;/th&gt;
&lt;th&gt;需操作的寄存器数量高8位+低8位&lt;/th&gt;
&lt;th&gt;CRC16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0x11+0x16&lt;/td&gt;
&lt;td&gt;0x00+0x01&lt;/td&gt;
&lt;td&gt;0x00+0x01&lt;/td&gt;
&lt;td&gt;高8+低8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="embedded" />
        <category term="modbus" />
        <updated>2020-08-21T14:57:15.000Z</updated>
    </entry>
    <entry>
        <id>https://www.oikiou.top/2020/bf76c113/</id>
        <title>MicroPython</title>
        <link rel="alternate" href="https://www.oikiou.top/2020/bf76c113/"/>
        <content type="html">&lt;h1 id=&#34;MicroPython&#34;&gt;&lt;a href=&#34;#MicroPython&#34; class=&#34;headerlink&#34; title=&#34;MicroPython&#34;&gt;&lt;/a&gt;MicroPython&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.cirmall.com/articles/301308/p1&#34;&gt;简单、方便、快速开发嵌入式实时系统——MicroPytho&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pyb &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; uart&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; pyb &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; I2C &lt;span class=&#34;hljs-comment&#34;&gt;#工程师将从pyb库导入I2C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#这里的PYB库提供了接入到微控制器外围功能，如SPI，I2C以及UART&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#在使用任何外设之前，工程师必须实例化外设类以创建可用于控制外设的对象。一旦外设类被初始化，工程师可以执行任何其他操作，例如在进入主应用程序循环之前验证设备是否存在，主要应用程序代码将会每秒采样一次传感器。&lt;/span&gt;&lt;br&gt;&lt;br&gt;GlobalTemp = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;&lt;br&gt;&lt;br&gt;GlobalBarometer = &lt;span class=&#34;hljs-number&#34;&gt;0.0&lt;/span&gt;&lt;br&gt;&lt;br&gt;＃初始化和实例化I2C外设&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;br&gt;I2C2 = I2C（&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;，I2C.MASTER，波特率= &lt;span class=&#34;hljs-number&#34;&gt;100000&lt;/span&gt;）&lt;br&gt;&lt;br&gt;＃配置Uart1进行通信&lt;br&gt;&lt;br&gt;Uart1 = pyb.UART（&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;115200&lt;/span&gt;）&lt;br&gt;&lt;br&gt;Uart1.init（&lt;span class=&#34;hljs-number&#34;&gt;115200&lt;/span&gt;，bits = &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;，parity = &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;，stop = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;）&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;:&lt;br&gt;&lt;br&gt;SampleSensor（）&lt;br&gt;&lt;br&gt;pyb.delay（&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;）&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SensorSample&lt;/span&gt;（）：&lt;br&gt;&lt;br&gt;＃读取温度数据&lt;br&gt;&lt;br&gt;TempSample = I2C2.readfrom_mem（&lt;span class=&#34;hljs-number&#34;&gt;119&lt;/span&gt;，&lt;span class=&#34;hljs-number&#34;&gt;0xFA&lt;/span&gt;，&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;）&lt;br&gt;&lt;br&gt;＃读取压力数据&lt;br&gt;&lt;br&gt;PressureSample = I2C2.readfrom_mem（&lt;span class=&#34;hljs-number&#34;&gt;119&lt;/span&gt;，&lt;span class=&#34;hljs-number&#34;&gt;0xF7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;）&lt;br&gt;&lt;br&gt;将样本数据转换为字符串&lt;br&gt;&lt;br&gt;data =“＃，temperature =”&lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;（TempSample）+“，pressure”+ &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;（PressureSample）+“，＃，\ n \ r”&lt;br&gt;&lt;br&gt;＃将数据写入蓝牙&lt;br&gt;&lt;br&gt;Uart1.write（data）&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;











</content>
        <category term="embedded" />
        <category term="micropython" />
        <category term="python" />
        <updated>2020-08-08T00:08:08.000Z</updated>
    </entry>
    <entry>
        <id>https://www.oikiou.top/2020/95869d00/</id>
        <title>Bluetooth蓝牙</title>
        <link rel="alternate" href="https://www.oikiou.top/2020/95869d00/"/>
        <content type="html">&lt;h1 id=&#34;蓝牙分类&#34;&gt;&lt;a href=&#34;#蓝牙分类&#34; class=&#34;headerlink&#34; title=&#34;蓝牙分类&#34;&gt;&lt;/a&gt;蓝牙分类&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34; mermaid&#34;&gt;graph LR

Bluetooth_3.0 --&amp;gt;BR
Bluetooth_3.0 --&amp;gt;EDR
Bluetooth_3.0 --&amp;gt;AMP_HS

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34; mermaid&#34;&gt;graph LR

Bluetooth_4.0 --&amp;gt;BR
Bluetooth_4.0 --&amp;gt;EDR
Bluetooth_4.0 --&amp;gt;AMP_HS
Bluetooth_4.0 --&amp;gt;LE

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有一种蓝牙即 Bluetooth SIG。&lt;/p&gt;
&lt;p&gt;但是蓝牙技术本身包括四种类型：BR、EDR、AMP 和 LE。&lt;/p&gt;
&lt;p&gt;为了方便，人们将以前的 BR&amp;#x2F;EDR&amp;#x2F;AMP 技术称为“经典蓝牙”（BT）技术。&lt;/p&gt;
&lt;p&gt;LE也即低功耗蓝牙BLE。&lt;/p&gt;
&lt;h1 id=&#34;SPP&#34;&gt;&lt;a href=&#34;#SPP&#34; class=&#34;headerlink&#34; title=&#34;SPP&#34;&gt;&lt;/a&gt;SPP&lt;/h1&gt;&lt;p&gt;SPP（Serial Port Profile）串口&lt;/p&gt;
</content>
        <category term="embedded" />
        <category term="bluetooth" />
        <category term="蓝牙" />
        <updated>2020-08-08T00:08:08.000Z</updated>
    </entry>
    <entry>
        <id>https://www.oikiou.top/2018/ef667962/</id>
        <title>嵌入式编程杂乱笔记</title>
        <link rel="alternate" href="https://www.oikiou.top/2018/ef667962/"/>
        <content type="html">&lt;h1 id=&#34;嵌入式编程杂乱笔记目录&#34;&gt;&lt;a href=&#34;#嵌入式编程杂乱笔记目录&#34; class=&#34;headerlink&#34; title=&#34;嵌入式编程杂乱笔记目录&#34;&gt;&lt;/a&gt;嵌入式编程杂乱笔记目录&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;硬件类&#34;&gt;&lt;a href=&#34;#硬件类&#34; class=&#34;headerlink&#34; title=&#34;硬件类&#34;&gt;&lt;/a&gt;硬件类&lt;/h1&gt;&lt;h2 id=&#34;NTC和PTC&#34;&gt;&lt;a href=&#34;#NTC和PTC&#34; class=&#34;headerlink&#34; title=&#34;NTC和PTC&#34;&gt;&lt;/a&gt;NTC和PTC&lt;/h2&gt;&lt;p&gt;NTC (Negative Temperature Coefficient 负温度系数)      PTC (Positive 正温度系数)&lt;/p&gt;
&lt;h2 id=&#34;VCC、-VDD、VEE、VSS区别&#34;&gt;&lt;a href=&#34;#VCC、-VDD、VEE、VSS区别&#34; class=&#34;headerlink&#34; title=&#34;VCC、 VDD、VEE、VSS区别&#34;&gt;&lt;/a&gt;VCC、 VDD、VEE、VSS区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一、解释&lt;br&gt;VCC：C&amp;#x3D;circuit 表示电路的意思, 即接入电路的电压；&lt;br&gt;VDD：D&amp;#x3D;device 表示器件的意思, 即器件内部的工作电压；&lt;br&gt;VSS：S&amp;#x3D;series 表示公共连接的意思，通常指电路公共接地端电压；&lt;br&gt;VEE：负电压供电；&lt;br&gt;VPP：编程&amp;#x2F;擦除电压。&lt;/li&gt;
&lt;li&gt;二、说明&lt;br&gt;1、对于数字电路来说，VCC是电路的供电电压,VDD是芯片的工作电压（通常Vcc&amp;gt;Vdd），VSS是接地点。&lt;br&gt;2、有些IC既有VDD引脚又有VCC引脚，说明这种器件自身带有电压转换功能。&lt;br&gt;3、在场效应管（或COMS器件）中，VDD为漏极，VSS为源极，VDD和VSS指的是元件引脚，而不表示供电电压。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;NOR-NAND&#34;&gt;&lt;a href=&#34;#NOR-NAND&#34; class=&#34;headerlink&#34; title=&#34;NOR NAND&#34;&gt;&lt;/a&gt;NOR NAND&lt;/h2&gt;&lt;p&gt;NOR(或非) NAND(与非)&lt;/p&gt;
&lt;p&gt;SLC（Single-Level Cell）、MLC（Multi-Level Cell） 、 TLC（Triple-Level Cell）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共同点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者向浮栅中注入电子表示0(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)，未注入表示1，对其清除数据是对其写1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOR FLASH&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;随机读取(可随机读取，能直接运行代码，BIOS)&lt;/li&gt;
&lt;li&gt;随机读取较快、写入较很慢(热电子注入效率更低)、擦除次数较少、&lt;/li&gt;
&lt;li&gt;容量较小、体积较小、可靠性高一些、数据保存期更高&lt;/li&gt;
&lt;li&gt;初始通电消耗更多的电流, 待机状态电流远远更低&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;浮栅 热电子注入方式充电、FN隧道效应放电&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAND FLASH&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;块读取(块读取，不能运行代码)&lt;/li&gt;
&lt;li&gt;随机读取较慢(地址线复用导致)、顺序读取速度较快、写入较快、擦除次数较多、&lt;/li&gt;
&lt;li&gt;容量较大、体积较大、可靠性较低一些(较容易发生位交换现象)、数据保存期低一些&lt;/li&gt;
&lt;li&gt;待机状态功耗较高&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;浮栅 FN隧道效应充电、FN隧道效应放电&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/contenteetimes-images-design-embedded-2018-fl-1-t1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;详细介绍&#34;&gt;&lt;a href=&#34;#详细介绍&#34; class=&#34;headerlink&#34; title=&#34;详细介绍&#34;&gt;&lt;/a&gt;详细介绍&lt;/h3&gt;&lt;h4 id=&#34;浮栅效应管&#34;&gt;&lt;a href=&#34;#浮栅效应管&#34; class=&#34;headerlink&#34; title=&#34;浮栅效应管&#34;&gt;&lt;/a&gt;浮栅效应管&lt;/h4&gt;&lt;p&gt;NOR FLASH 和 NAND FLASH 都是使用浮栅场效应管(Floating Gate FET)作为基本存储单元来存储数据的，浮栅场效应管共有 4 个端电极，分别是为源极（Source）、漏极（Drain）、控制栅极（Control Gate）和浮置栅极（Floating Gate），前 3 个端电极的作用于普通 MOSFET 是一样的，区别仅在于浮栅，FLASH 就是利用浮栅是否存储电荷来表征数字 0’和‘1’的。&lt;/p&gt;
&lt;p&gt;当向浮栅注入电荷后，D 和 S 之间存在导电沟道，从 D 极读到‘0’&lt;span style=&#34;color:#29b6f6&#34;&gt;(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)&lt;/span&gt;；当浮栅中没有电荷时，D 和 S 间没有导电沟道，从 D 极读到‘1’，原理示意图见图&lt;/p&gt;
&lt;p&gt;注：SLC 可以简单认为是利用浮栅是否存储电荷来表征数字 0’和‘1’的，MLC 则是要利用浮栅中电荷的多少来表征‘00’，‘01’，‘10’和‘11’的，TLC 与 MLC 类似。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  SLC传统上，每个储存单元内储存1个信息位，称为单阶储存单元（Single-Level Cell，SLC）。SLC闪存的优点是传输速度更快，功率消耗更低和储存单元的寿命更长，成本也就更高。一般情况下，SLC多数用于企业级的固态硬盘中，由于企业对于数据的安全性要求更高，需要保存更长时间。&lt;/p&gt;
&lt;p&gt;  MLC多阶储存单元（Multi-Level Cell,MLC）可以在每个储存单元内储存2个以上的信息位。与SLC相比，MLC成本较低，其传输速度较慢，功率消耗较高和储存单元的寿命较低。 但目前主流的固态硬盘中，性能较为优秀的产品选用的都是MLC颗粒，因此可以说MLC颗粒的固态硬盘拥有较高的性价比。甚至一些企业级的固态硬盘，使用的也是MLC颗粒，被专门优化过，称为eMLC颗粒，e代表的是企业enterprise。&lt;/p&gt;
&lt;p&gt;  TLC三阶储存单元（Triple-Level Cell, TLC），这种架构的原理与MLC类似，但可以在每个储存单元内储存3个信息位。由于存储的数据密度相对MLC和SLC更大，所以价格也就更便宜，但使用寿命和性能也就更低，不过这并不能阻止人们购买TLC颗粒的固态硬盘。甚至目前市场上绝大多数的入门级产品使用的都是TLC颗粒。而为了解决TLC颗粒过低的写入寿命问题，许多厂商都在研发新技术，3D-TLC就是这样的技术，目前已经比较广泛的应用在产品中，其性能甚至可以和MLC颗粒一较长短，使用寿命得到大幅度的延长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_01_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;读-写-擦除&#34;&gt;&lt;a href=&#34;#读-写-擦除&#34; class=&#34;headerlink&#34; title=&#34;读 写 擦除&#34;&gt;&lt;/a&gt;读 写 擦除&lt;/h5&gt;&lt;p&gt;FLASH 中，常用的向浮栅注入电荷的技术有两种—热电子注入(hot electron injection)和 F-N 隧道效应(Fowler Nordheim tunneling)；从浮栅中挪走电荷的技术通常使用 F-N 隧道效应(Fowler Nordheim tunneling)，基本原理见图。&lt;/p&gt;
&lt;p&gt;写操作就是向浮栅注入电荷的过程，NOR FLASH 通过热电子注入方式向浮栅注入电荷（这种方法的电荷注入效率较低，因此 NOR FLASH 的写速率较低），NAND FLASH 则通过 F-N 隧道效应向浮栅注入电荷。FLASH 在写操作之前，必须先将原来的数据擦除（即将浮栅中的电荷挪走），也即 FLASH 擦除后读出的都是‘1’。&lt;span style=&#34;color:#29b6f6&#34;&gt;(只能擦除再写入的原因应该是擦除和写入加的电压是反向的, 一个是充电, 一个是放电)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;擦除操作就是从浮栅中挪走电荷的过程，NOR FLASH 和 NAND FLASH 都是通过 F-N 隧道效应将浮栅中的电荷挪走的。&lt;/p&gt;
&lt;p&gt;读出操作时，控制栅极上施加的电压很小，不会改变浮栅中的电荷量，即读出操作不会改变 FLASH 中原有的数据，也即浮栅有电荷时，D 和 S 间存在导电沟道，从 D 极读到‘0’&lt;span style=&#34;color:#29b6f6&#34;&gt;(电子浮栅效应管存在导电沟道bit位被接地 见后续图片)&lt;/span&gt;；当浮栅中没有电荷时，D 和 S 间没有导电沟道，从 D 极读到‘1’。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sunev.cn/blog/wp-content/uploads/2020/03/20200311_03_Nor_FLASH_vs_NAND_FLASH.png&#34;&gt;&lt;img src=&#34;/2018/ef667962/20200311_03_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;NOR-和-NAND-Flash-的结构特性&#34;&gt;&lt;a href=&#34;#NOR-和-NAND-Flash-的结构特性&#34; class=&#34;headerlink&#34; title=&#34;NOR 和 NAND Flash 的结构特性&#34;&gt;&lt;/a&gt;NOR 和 NAND Flash 的结构特性&lt;/h4&gt;&lt;h6 id=&#34;NOR-Flash&#34;&gt;&lt;a href=&#34;#NOR-Flash&#34; class=&#34;headerlink&#34; title=&#34;NOR Flash&#34;&gt;&lt;/a&gt;NOR Flash&lt;/h6&gt;&lt;p&gt;NOR FLASH 的结构原理图见图 ，可见每个 Bit Line 下的基本存储单元是并联的，当某个 Word Line 被选中后，就可以实现对该 Word 的读取，也就是可以实现位读取（即 Random Ａccess），且具有较高的读取速率&lt;/p&gt;
&lt;p&gt;下图是一个 3*8bit 的 NOR FLASH 的原理结构图，这种并联结构决定了 NOR FLASH 的很多特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_04_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是沿 Bit Line 切面的剖面图，展示了 NOR FLASH 的硅切面示意图，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_05_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本存储单元的并联结构决定了金属导线占用很大的面积，因此 NOR　FLASH 的存储密度较低，无法适用于需要大容量存储的应用场合，即适用于 code-storage，不适用于 data-storage。&lt;/li&gt;
&lt;li&gt;基本存储单元的并联结构决定了 NOR FLASH 具有存储单元可独立寻址且读取效率高的特性，因此适用于 code-storage，且程序可以直接在 NOR 中运行（即具有 RAM 的特性）。&lt;/li&gt;
&lt;li&gt;NOR FLASH 写入采用了热电子注入方式，效率较低，因此 NOR 写入速率较低，不适用于频繁擦除&amp;#x2F;写入场合。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;  最后来个小贴士：NOR  FLASH 的中的 N 是 NOT，含义是 Floating Gate 中有电荷时，读出‘0’，无电荷时读出‘1’，是一种‘非’的逻辑；OR 的含义是同一个 Bit Line 下的各个基本存储单元是并联的，是一种‘或’的逻辑，这就是 NOR 的由来。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;NAND-Flash&#34;&gt;&lt;a href=&#34;#NAND-Flash&#34; class=&#34;headerlink&#34; title=&#34;NAND Flash&#34;&gt;&lt;/a&gt;NAND Flash&lt;/h6&gt;&lt;p&gt;NAND FLASH 的结构原理图见图，可见每个 Bit Line 下的基本存储单元是串联的，NAND 读取数据的单位是 Page，当需要读取某个 Page 时，FLASH 控制器就不在这个 Page 的 Word Line 施加电压，而对其他所有 Page 的 Word Line 施加电压（电压值不能改变 Floating Gate 中电荷数量），让这些 Page 的所有基本存储单元的 D 和 S 导通，而我们要读取的 Page 的基本存储单元的 D 和 S 的导通&amp;#x2F;关断状态则取决于 Floating Gate 是否有电荷，有电荷时，Bit Line 读出‘0’，无电荷 Bit Line 读出‘1’，实现了 Page 数据的读出，可见 NAND 无法实现位读取（即 Random Ａccess），程序代码也就无法在 NAND 上运行。&lt;/p&gt;
&lt;p&gt;下图是一个 8*8bit 的 NAND FLASH 的原理结构图，NAND FLASH 的串联结构决定了其很多特点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_07_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是沿 Bit Line 切面的剖面图，展示了 NAND FLASH 的硅切面示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_08_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本存储单元的串联结构减少了金属导线占用的面积，Die 的利用率很高，因此 NAND FLASH 存储密度高，适用于需要大容量存储的应用场合，即适用于 data-storage，见图 3.3[3]。&lt;/li&gt;
&lt;li&gt;基本存储单元的串联结构决定了 NAND FLASH 无法进行位读取，也就无法实现存储单元的独立寻址，因此程序不可以直接在 NAND 中运行,因此 NAND 是以 Page 为读取单位和写入单位，以 Block 为擦除单位，见图 3.6。&lt;/li&gt;
&lt;li&gt;NAND FLASH 写入采用 F-N 隧道效应方式，效率较高，因此 NAND 擦除&amp;#x2F;写入速率很高，适用于频繁擦除&amp;#x2F;写入场合。同时 NAND 是以 Page 为单位进行读取的，因此读取速率也不算低（稍低于 NOR）。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;  最后来个小贴士：NAND FLASH 的中的 N 是 NOT，含义是 Floating Gate 中有电荷时，读出‘0’，无电荷时读出‘1’，是一种‘非’的逻辑；AND 的含义是同一个 Bit Line 下的各个基本存储单元是串联的，是一种‘与’的逻辑，这就是 NAND 的由来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;NOR-和-NAND-的对比&#34;&gt;&lt;a href=&#34;#NOR-和-NAND-的对比&#34; class=&#34;headerlink&#34; title=&#34;NOR 和 NAND 的对比&#34;&gt;&lt;/a&gt;NOR 和 NAND 的对比&lt;/h6&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_10_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20200311_11_Nor_FLASH_vs_NAND_FLASH.png&#34; alt=&#34;Nor FLASH和NAND FLASH基本结构和特点的异同&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;编译器相关&#34;&gt;&lt;a href=&#34;#编译器相关&#34; class=&#34;headerlink&#34; title=&#34;编译器相关&#34;&gt;&lt;/a&gt;编译器相关&lt;/h1&gt;&lt;h2 id=&#34;Keil仿真准确测量运行时间&#34;&gt;&lt;a href=&#34;#Keil仿真准确测量运行时间&#34; class=&#34;headerlink&#34; title=&#34;Keil仿真准确测量运行时间&#34;&gt;&lt;/a&gt;Keil仿真准确测量运行时间&lt;/h2&gt;&lt;p&gt;Debug-&amp;gt;Setting-&amp;gt;Trsce-&amp;gt;Core 修改好核心时钟频率即可准确测量函数运行时间&lt;/p&gt;
&lt;h2 id=&#34;程序内存位置分配&#34;&gt;&lt;a href=&#34;#程序内存位置分配&#34; class=&#34;headerlink&#34; title=&#34;程序内存位置分配&#34;&gt;&lt;/a&gt;程序内存位置分配&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bss段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;未初始化的全局变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;BSS段（BSS segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;已初始化的全局变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据段（DATA segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;text段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码段&lt;/li&gt;
&lt;li&gt;代码段（CODE segment&amp;#x2F;TEXTsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rodata段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;？？？&lt;/li&gt;
&lt;li&gt;存放C中的字符串和#define定义的常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;heap堆：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆（程序员指定的内存 malloc）&lt;/li&gt;
&lt;li&gt;当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stack栈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存&amp;#x2F;恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;？？？&lt;/li&gt;
&lt;li&gt;常量段一般包含编译器产生的数据（与只读段包含用户定义的只读数据不同）。比如说由一个语句a&amp;#x3D;2+3编译器把2+3编译期就算出5，存成常量5在常量段中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Pragma-Pack-内存对齐&#34;&gt;&lt;a href=&#34;#Pragma-Pack-内存对齐&#34; class=&#34;headerlink&#34; title=&#34;#Pragma Pack (内存对齐)&#34;&gt;&lt;/a&gt;#Pragma Pack (内存对齐)&lt;/h2&gt;&lt;h3 id=&#34;规则&#34;&gt;&lt;a href=&#34;#规则&#34; class=&#34;headerlink&#34; title=&#34;规则&#34;&gt;&lt;/a&gt;规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;复杂类型中各个成员按照它们被声明的顺序在内存中顺序存储，第一个成员的地址和整个类型的地址相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结构、联合或者类的对齐长度，按照#pragma pack    &lt;strong&gt;指定的对齐参数&lt;/strong&gt;   和     &lt;strong&gt;这个数据成员自身长度&lt;/strong&gt;     两个中    &lt;strong&gt;比较小&lt;/strong&gt;     的那个进行。（确定成员位置）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复杂类型（如结构）整体的对齐&amp;lt;注意是“整体”&amp;gt;是按照结构体中     &lt;strong&gt;长度最大的数据成员&lt;/strong&gt;     和    &lt;strong&gt;#pragma pack指定值之间&lt;/strong&gt;     &lt;strong&gt;较小&lt;/strong&gt;    的那个值进行；这样在成员是复杂类型时，可以最小化长度。（确定对齐大小）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即：先用规则3确定变量对齐的“容器”大小，再用规则2确定各个变量的存放位置。&lt;/p&gt;
&lt;h3 id=&#34;看图&#34;&gt;&lt;a href=&#34;#看图&#34; class=&#34;headerlink&#34; title=&#34;看图&#34;&gt;&lt;/a&gt;看图&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;stc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; one;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; two;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; three;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; four;&lt;br&gt;&amp;#125; c,d;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98-1608969543089.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#pragma pack (4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/%E6%97%A0%E6%A0%87%E9%A2%98-1608969576331.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;原型&#34;&gt;&lt;a href=&#34;#原型&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pragma pack(n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pragma pack()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1)&lt;span class=&#34;hljs-comment&#34;&gt;//自定义对齐参数   指定对齐参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;MotorStartStop_&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//Code******&lt;/span&gt;&lt;br&gt;&amp;#125; MStartStopRec_TYPEDEF;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;span class=&#34;hljs-comment&#34;&gt;//取消自定义的对齐参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pragma Pack(push)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pragma Pack(pop)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push)&lt;span class=&#34;hljs-comment&#34;&gt;//Push压栈  保存系统的对齐方式(push指令之前的对齐状态)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1)&lt;span class=&#34;hljs-comment&#34;&gt;//            自定义对齐方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;hljs-title&#34;&gt;MotorStartStop_&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//Code******&lt;/span&gt;&lt;br&gt;&amp;#125; MStartStopRec_TYPEDEF;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(pop)&lt;span class=&#34;hljs-comment&#34;&gt;//Pop弹出    恢复系统的对齐方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push,1)&lt;span class=&#34;hljs-comment&#34;&gt;//此语句等同于以下两条语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(push)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(1) &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;pragma-OPTIMIZE-n-优化级别调整&#34;&gt;&lt;a href=&#34;#pragma-OPTIMIZE-n-优化级别调整&#34; class=&#34;headerlink&#34; title=&#34;#pragma OPTIMIZE(n)(优化级别调整)&#34;&gt;&lt;/a&gt;#pragma OPTIMIZE(n)(优化级别调整)&lt;/h2&gt;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;在ARM里面已经用不了&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; save			&lt;span class=&#34;hljs-comment&#34;&gt;//SAVE指令将优化指令的当前设置存储到一个SAVE堆栈中。可以使用RESTORE指令还原设置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; optimize (1)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;.&lt;br&gt;.&lt;br&gt;.&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; restore			&lt;span class=&#34;hljs-comment&#34;&gt;//RESTORE指令 恢复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h2&gt;&lt;p&gt; tip:宏函数&lt;/p&gt;
&lt;p&gt;在大多数情况下，内联特定功能的决定最好留给编译器。使用&lt;code&gt;__inline__&lt;/code&gt;或&lt;code&gt;inline&lt;/code&gt;关键字限定函数的功能向编译器暗示它可以内联该函数，&lt;strong&gt;但最终决定权在于编译器&lt;/strong&gt;。使用限定函数将&lt;code&gt;__attribute__((always_inline))&lt;/code&gt;强制编译器内联函数。 &lt;/p&gt;
&lt;h3 id=&#34;inline内联&#34;&gt;&lt;a href=&#34;#inline内联&#34; class=&#34;headerlink&#34; title=&#34;__inline内联&#34;&gt;&lt;/a&gt;&lt;del&gt;__inline内联&lt;/del&gt;&lt;/h3&gt;&lt;p&gt;最终决定权在于编译器,不使用&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; __inline &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x*&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f(x) + f(y);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;forceinline强制内联&#34;&gt;&lt;a href=&#34;#forceinline强制内联&#34; class=&#34;headerlink&#34; title=&#34;__forceinline强制内联&#34;&gt;&lt;/a&gt;__forceinline强制内联&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__forceinline&lt;/code&gt;的语义与C ++ &lt;code&gt;inline&lt;/code&gt; 关键字的语义完全相同。编译器将尝试内联该函数，而不管其特性如何。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在某些情况下，编译器可能会选择忽略&lt;code&gt;__forceinline&lt;/code&gt;关键字而不是内联函数。&lt;/strong&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归函数永远不会内联到自身中。&lt;/li&gt;
&lt;li&gt;使用函数&lt;code&gt;alloca()&lt;/code&gt;(内存分配函数)永远不会内联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;__forceinline&lt;/code&gt;是存储类限定符。它不影响函数的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它等效于 &lt;strong&gt;attribute&lt;/strong&gt;((always_inline))&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;__forceinline &lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x &amp;gt; y ? x : y; &lt;span class=&#34;hljs-comment&#34;&gt;// always inline if possible&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((always_inline))&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; x &amp;gt; y ? x : y; &lt;span class=&#34;hljs-comment&#34;&gt;// always inline if possible&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用递减的循环可以提高程序运行效率&#34;&gt;&lt;a href=&#34;#使用递减的循环可以提高程序运行效率&#34; class=&#34;headerlink&#34; title=&#34;使用递减的循环可以提高程序运行效率&#34;&gt;&lt;/a&gt;使用递减的循环可以提高程序运行效率&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124222426.htm&#34;&gt;参考  C代码中循环终止的优化 &lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用简单终止循环的条件。&lt;/li&gt;
&lt;li&gt;使用递减到0的循环 &lt;/li&gt;
&lt;li&gt;使用 unsigned int 类型&lt;/li&gt;
&lt;li&gt;与0进行对比&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;volatile-的使用&#34;&gt;&lt;a href=&#34;#volatile-的使用&#34; class=&#34;headerlink&#34; title=&#34;volatile 的使用&#34;&gt;&lt;/a&gt;volatile 的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;访问内存映射的外围设备。&lt;/li&gt;
&lt;li&gt;在多个线程之间共享全局变量。&lt;/li&gt;
&lt;li&gt;在中断例程或信号处理程序中访问全局变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;纯函数-优化&#34;&gt;&lt;a href=&#34;#纯函数-优化&#34; class=&#34;headerlink&#34; title=&#34;纯函数(优化)&#34;&gt;&lt;/a&gt;纯函数(优化)&lt;/h2&gt;&lt;p&gt; &lt;code&gt;__pure&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;纯函数定义：同样的的输入有同样的输出， 纯函数无法通过使用全局变量或通过指针间接读取或写入全局状态 &lt;/p&gt;
&lt;p&gt;优势：编译器通常可以执行强大的优化， 例如通用子表达式消除（CSE） 。&lt;/p&gt;
&lt;h2 id=&#34;packed-pragma-packed-字节对齐&#34;&gt;&lt;a href=&#34;#packed-pragma-packed-字节对齐&#34; class=&#34;headerlink&#34; title=&#34;__packed  #pragma packed 字节对齐&#34;&gt;&lt;/a&gt;__packed  #pragma packed 字节对齐&lt;/h2&gt;&lt;p&gt; 将整个结构声明为 __packed 通常会导致代码大小和性能的损失。 &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;__packed &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mystruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; s;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// 不建议的&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mystruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c;&lt;br&gt;    __packed &lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; s; &lt;span class=&#34;hljs-comment&#34;&gt;// 建议的&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; &lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124230195.htm&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.keil.com/support/man/docs/armcc/armcc_chr1359124230944.htm&#34;&gt;__packed和#pragma packed对比&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;func-FUNCTION-FILE-LINE&#34;&gt;&lt;a href=&#34;#func-FUNCTION-FILE-LINE&#34; class=&#34;headerlink&#34; title=&#34;__func__ __FUNCTION__ __FILE__ __LINE__&#34;&gt;&lt;/a&gt;__func__ __FUNCTION__ __FILE__ __LINE__&lt;/h2&gt;&lt;p&gt;__func__ __FUNCTION__ __FILE__ __LINE__&lt;/p&gt;
&lt;p&gt;获取当前函数名称&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;This function is called &amp;#x27;%s&amp;#x27;.\n&amp;quot;&lt;/span&gt;, __func__);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;prints:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;This function is called &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;attribute-used-不能将其优化移除&#34;&gt;&lt;a href=&#34;#attribute-used-不能将其优化移除&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((used))不能将其优化移除&#34;&gt;&lt;/a&gt;__attribute__((used))不能将其优化移除&lt;/h2&gt;&lt;p&gt;用这个东西声明函数之后，即使这个函数没有被引用，编译器也不能将其优化移除，仍然要求将此函数保留在工程中。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;lose_this&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((used))&lt;/span&gt;;     &lt;span class=&#34;hljs-comment&#34;&gt;// retained in object file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; arg)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (arg+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this_too&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((used))&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 保留在工程文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;keep_this_too&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; arg)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (arg&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (;;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;attribute-section-“XX-name”-放置到特定的段里面&#34;&gt;&lt;a href=&#34;#attribute-section-“XX-name”-放置到特定的段里面&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((section(“XX_name”)))放置到特定的段里面&#34;&gt;&lt;/a&gt;__attribute__((section(“XX_name”)))放置到特定的段里面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;XX_name:是输入段的名称(字符串)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个东西是告诉编译器，将特定的函数或者变量放置到特定的段里面。&lt;/p&gt;
&lt;p&gt;变量和函数在输入段中的地址是连续的，并顺序先按section名(也就是XX_name)排序，section内再按照函数名称进行排序。&lt;/p&gt;
&lt;h2 id=&#34;attribute-at-0x00-将变量定义到指定的地方&#34;&gt;&lt;a href=&#34;#attribute-at-0x00-将变量定义到指定的地方&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((at(0x00)))将变量定义到指定的地方&#34;&gt;&lt;/a&gt;__attribute__((at(0x00)))将变量定义到指定的地方&lt;/h2&gt;&lt;p&gt;将变量定义到指定的地方&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//linux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; temp_A@&lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//定义无符号变量temp_A，强制其地址为0x00 变量@地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//keil&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; cnt __attribute__((at(&lt;span class=&#34;hljs-number&#34;&gt;0x20008000&lt;/span&gt;))); &lt;span class=&#34;hljs-comment&#34;&gt;//格式固定下划线为两个下划线，括号必须那么多层&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;attribute-alias-“sss”-起别名&#34;&gt;&lt;a href=&#34;#attribute-alias-“sss”-起别名&#34; class=&#34;headerlink&#34; title=&#34;__attribute__((alias(“sss”)))起别名&#34;&gt;&lt;/a&gt;__attribute__((alias(“sss”)))起别名&lt;/h2&gt;&lt;p&gt;相当于起别名&lt;/p&gt;
&lt;h3 id=&#34;Example&#34;&gt;&lt;a href=&#34;#Example&#34; class=&#34;headerlink&#34; title=&#34;Example&#34;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, __FUNCTION__);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; __&lt;span class=&#34;hljs-title function_&#34;&gt;attribute__&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;((alias(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)))&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;gazonk&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    bar(); &lt;span class=&#34;hljs-comment&#34;&gt;// calls foo&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;Code-RO-RW-ZI&#34;&gt;&lt;a href=&#34;#Code-RO-RW-ZI&#34; class=&#34;headerlink&#34; title=&#34;Code RO RW ZI&#34;&gt;&lt;/a&gt;Code RO RW ZI&lt;/h2&gt;&lt;p&gt;Program Size: Code&amp;#x3D;14554 RO-data&amp;#x3D;1234 RW-data&amp;#x3D;272 ZI-data&amp;#x3D;6168  &lt;/p&gt;
&lt;p&gt;Program Size: Code&amp;#x3D;13682 RO-data&amp;#x3D;1098 RW-data&amp;#x3D;224 ZI-data&amp;#x3D;6160  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Only&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read Write&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zero Initial&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;汇编延时-不受优化影响&#34;&gt;&lt;a href=&#34;#汇编延时-不受优化影响&#34; class=&#34;headerlink&#34; title=&#34;汇编延时 不受优化影响&#34;&gt;&lt;/a&gt;汇编延时 不受优化影响&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @brief 汇编延时&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @attention us延时不是很准确&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * @details 三个汇编指令理论应该是三个时钟周期&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 则 理论上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * ms AsmDelay( n*(SystemCoreClock/3000) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 实际有所差异 在STM32F105上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * ms AsmDelay( n*(SystemCoreClock/6000) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined (__CC_ARM)              &lt;span class=&#34;hljs-comment&#34;&gt;// ARM Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;__attribute__((always_inline)) __ASM &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;AsmDelay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    subs    r0, #&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    bne     AsmDelay;&lt;br&gt;    bx      lr;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined (__ICCARM__)         &lt;span class=&#34;hljs-comment&#34;&gt;// IAR Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;AsmDelay&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    __asm(&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;subs  r0, #1\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bne.n AsmDelay\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bx    lr&amp;quot;&lt;/span&gt;&lt;br&gt;    );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; (__GUNC__)            &lt;span class=&#34;hljs-comment&#34;&gt;// GUN Compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; __attribute__((naked)) AsmDelay(&lt;span class=&#34;hljs-type&#34;&gt;uint32_t&lt;/span&gt; t)&lt;br&gt;&amp;#123;&lt;br&gt;    __asm(&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;subs  r0, #1\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bne   AsmDelay\n&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bx    lr&amp;quot;&lt;/span&gt;&lt;br&gt;    );&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;大小端-endian&#34;&gt;&lt;a href=&#34;#大小端-endian&#34; class=&#34;headerlink&#34; title=&#34;大小端 endian&#34;&gt;&lt;/a&gt;大小端 endian&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大端模式Big-endian，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；&lt;code&gt;大端模式便于阅读&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小端模式Little-endian，………..&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0x00123456&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;大端&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;0x00000000&lt;/td&gt;
&lt;td&gt;0x00000001&lt;/td&gt;
&lt;td&gt;0x00000002&lt;/td&gt;
&lt;td&gt;0x00000003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;0x34&lt;/td&gt;
&lt;td&gt;0x56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;小端&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;0x00000000&lt;/td&gt;
&lt;td&gt;0x00000001&lt;/td&gt;
&lt;td&gt;0x00000002&lt;/td&gt;
&lt;td&gt;0x00000003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;0x56&lt;/td&gt;
&lt;td&gt;0x34&lt;/td&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;C类&#34;&gt;&lt;a href=&#34;#C类&#34; class=&#34;headerlink&#34; title=&#34;C类&#34;&gt;&lt;/a&gt;C类&lt;/h1&gt;&lt;h2 id=&#34;变量命名&#34;&gt;&lt;a href=&#34;#变量命名&#34; class=&#34;headerlink&#34; title=&#34;变量命名&#34;&gt;&lt;/a&gt;变量命名&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择合适的变量长度(最短的标识符显示最多信息量的原则)&lt;/li&gt;
&lt;li&gt;短变量名i,j等一般作用域较小，有限范围内有效&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;循环变量的命名&#34;&gt;&lt;a href=&#34;#循环变量的命名&#34; class=&#34;headerlink&#34; title=&#34;循环变量的命名&#34;&gt;&lt;/a&gt;循环变量的命名&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;避免使用i、j、k等名字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果循环体长度较长的话，那就很容易使人忘记它代表的是什么，因此最好给循环控制变量一个富有意义的名字。由于经常进行更改，扩展和拷贝等代码到另一个程序中，因此，大多数有经验的程序员都避免用i、j、k这类的名字。&lt;br&gt;通过精心对循环控制变量进行命名，可以避免它们的交叉：当你想用i时误用了j，或者想用j时却又误用了i。&lt;br&gt;如果不得不使用它们的话，那除了把它们用作循环控制变量之外，最好不再用作别的变量名。这一约定是众所周知的，如果不遵守它只会引起别人的困惑。&lt;/p&gt;
&lt;h3 id=&#34;状态变量的命名&#34;&gt;&lt;a href=&#34;#状态变量的命名&#34; class=&#34;headerlink&#34; title=&#34;状态变量的命名&#34;&gt;&lt;/a&gt;状态变量的命名&lt;/h3&gt;&lt;p&gt;利用枚举类型和命名常量来设置状态量的值&lt;/p&gt;
&lt;p&gt;如果没有注释，将数值赋给状态量将是非常费解的。&lt;/p&gt;
&lt;h3 id=&#34;逻辑变量命名&#34;&gt;&lt;a href=&#34;#逻辑变量命名&#34; class=&#34;headerlink&#34; title=&#34;逻辑变量命名&#34;&gt;&lt;/a&gt;逻辑变量命名&lt;/h3&gt;&lt;p&gt;使用肯定的逻辑变量名。&lt;/p&gt;
&lt;p&gt;否定式的变量名如NotFound、NotDone和Notsuccessful等在“非”运算中是很难读懂的，如：&lt;/p&gt;
  &lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ebnf&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;if not NotFound&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参量的命名&#34;&gt;&lt;a href=&#34;#参量的命名&#34; class=&#34;headerlink&#34; title=&#34;参量的命名&#34;&gt;&lt;/a&gt;参量的命名&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;对常量来说，应该用它所代表的抽象实体而不是数值来命名。&lt;/strong&gt;&lt;br&gt;FIVE是一个很不恰当的常量名称（不管它代表的数值是否是5.0）；CYCLES_NEEDED则是个恰当的名称，CYCLES_NEEDED可以等于5.0也可以等于6.0，而Five &amp;#x3D; 6.0则是个荒唐的语句。&lt;/p&gt;
&lt;h2 id=&#34;运算符优先级&#34;&gt;&lt;a href=&#34;#运算符优先级&#34; class=&#34;headerlink&#34; title=&#34;运算符优先级&#34;&gt;&lt;/a&gt;运算符优先级&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/00.jpeg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坑&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译报错&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt; : data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//规范写法&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN!=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? (data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;):(data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;！！！极注意！！！  请小心有位运算时打上括号            &amp;lt;&amp;lt;  比  +-  要低 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;u16 temp;&lt;br&gt;u8 h,l;&lt;br&gt;temp = (u16)(h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 正确语法&lt;/span&gt;&lt;br&gt;temp = h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 错误语法！！！！！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;printf&#34;&gt;&lt;a href=&#34;#printf&#34; class=&#34;headerlink&#34; title=&#34;printf()&#34;&gt;&lt;/a&gt;printf()&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;转换说明符&lt;/th&gt;
&lt;th&gt;输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%a，%A&lt;/td&gt;
&lt;td&gt;浮点数、十六进制、p-计数法（c99）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%c&lt;/td&gt;
&lt;td&gt;一个单一的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%d&lt;/td&gt;
&lt;td&gt;有符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%f&lt;/td&gt;
&lt;td&gt;浮点数、十六进制数法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%e,%E&lt;/td&gt;
&lt;td&gt;e计数法，E计数法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%g,%G&lt;/td&gt;
&lt;td&gt;g自动使用%e和%f，G自动使用%E和%f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%i&lt;/td&gt;
&lt;td&gt;有符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%o&lt;/td&gt;
&lt;td&gt;一个八进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%p&lt;/td&gt;
&lt;td&gt;一个指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%s&lt;/td&gt;
&lt;td&gt;一个字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%u&lt;/td&gt;
&lt;td&gt;无符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%x，%X&lt;/td&gt;
&lt;td&gt;十六进制数字的无符号十六进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%%&lt;/td&gt;
&lt;td&gt;百分号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;项目是左对齐的；打印在字符的最左侧开始处。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;有符号的值显示正负号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(空格)&lt;/td&gt;
&lt;td&gt;带前导空格，复数会带减号符号，+会覆盖空格标志。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;%o以0开始，%x以0x开始，浮点保证打印小数点，%g防止尾随零被删&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;前导零填充，会忽略-符号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修饰符&lt;/td&gt;
&lt;td&gt;意义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;———&lt;/td&gt;
&lt;td&gt;————————————————————&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;digit(s)&lt;/td&gt;
&lt;td&gt;字段宽度的最小值。&lt;br/&gt;%4d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.digit(s)&lt;/td&gt;
&lt;td&gt;精度。&lt;br/&gt;%5.2f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示short int或unsigned short int&lt;br/&gt;%hu、%hx、%6.4hd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hh&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示signed char或unsigned char&lt;br/&gt;%hhu、%hhx、%6.4hhd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。表示intmax_t或uintmax_t&lt;br/&gt;%jd、%8jX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。long int或unsigned long int&lt;br/&gt;%ld、%lu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ll&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。long long int或unsigned long long int（C99）&lt;br/&gt;%lld、%llu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;和浮点数一起使用。表示long double&lt;br/&gt;%Lf、%Le&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;和整数说明符一起使用。ptrdiff_t（两个指针的差，相对向量）(C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;和整数转换符一起使用。表示一个size_t值（sizeof的返回值）(C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;数值数据类型-u-ul-b&#34;&gt;&lt;a href=&#34;#数值数据类型-u-ul-b&#34; class=&#34;headerlink&#34; title=&#34;数值数据类型 u ul b&#34;&gt;&lt;/a&gt;数值数据类型 u ul b&lt;/h2&gt;&lt;h3 id=&#34;用于说明数据类型&#34;&gt;&lt;a href=&#34;#用于说明数据类型&#34; class=&#34;headerlink&#34; title=&#34;用于说明数据类型&#34;&gt;&lt;/a&gt;用于说明数据类型&lt;/h3&gt;&lt;p&gt;u &amp;#x3D;&amp;#x3D; unsigned int&lt;/p&gt;
&lt;p&gt;l &amp;#x3D;&amp;#x3D;  long&lt;/p&gt;
&lt;p&gt;ul &amp;#x3D;&amp;#x3D; unsigned long&lt;/p&gt;
&lt;p&gt;数值后面加“L”和“l”（小写的l）的意义是该数值是long型。&lt;br&gt;详细说如下：&lt;br&gt;5L			的数据类型为long int。&lt;br&gt;5.12L	   的数据类型为long double。&lt;br&gt;数值后面加“U”和“u”的意义是该数值是unsigned型。&lt;/p&gt;
&lt;h3 id=&#34;用于说明数值表示方法&#34;&gt;&lt;a href=&#34;#用于说明数值表示方法&#34; class=&#34;headerlink&#34; title=&#34;用于说明数值表示方法&#34;&gt;&lt;/a&gt;用于说明数值表示方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;进制↓   \   表示方法→&lt;/th&gt;
&lt;th&gt;前面加&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;二进制&lt;/td&gt;
&lt;td&gt;0b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0b1010 &amp;#x3D; 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;八进制&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;012 &amp;#x3D; 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;u l ul&lt;/td&gt;
&lt;td&gt;1u (规范性)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十六进制&lt;/td&gt;
&lt;td&gt;0x&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0x12 &amp;#x3D; 18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意：在宏定义中数字应加上尾缀，避免与八进制混淆&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sprintf&#34;&gt;&lt;a href=&#34;#sprintf&#34; class=&#34;headerlink&#34; title=&#34;sprintf()&#34;&gt;&lt;/a&gt;sprintf()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;写入buff的数据会连带‘\0’一起写入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 C 里，对“字符串”的通常约定，是以 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 为结尾的字符串。从而在传递字符串参数的时候，只需要一个指向字符串首字符的指针。来自 C 的操作字符串的函数(&lt;code&gt;sprintf&lt;/code&gt;, &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;strcat&lt;/code&gt;, 等等)通常都遵循这一约定，包括在写字符串的时候，会在末尾添加一个 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 。（除非在某些情况下有特殊约定）&lt;/p&gt;
&lt;p&gt;但是，&lt;code&gt;memcpy&lt;/code&gt; 等不是操作字符串的函数，就不会添加最后的 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;snprintf&#34;&gt;&lt;a href=&#34;#snprintf&#34; class=&#34;headerlink&#34; title=&#34;snprintf()&#34;&gt;&lt;/a&gt;snprintf()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所传入的值以&lt;strong&gt;‘\0’&lt;/strong&gt;结尾    要得到   &lt;strong&gt;20&lt;/strong&gt;  个数据需要传入参数  &lt;strong&gt;20+1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果传入的str是&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; size参数是5则 无法写入&lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt; ,size参数是6 则可以写入 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sscanf&#34;&gt;&lt;a href=&#34;#sscanf&#34; class=&#34;headerlink&#34; title=&#34;sscanf()&#34;&gt;&lt;/a&gt;sscanf()&lt;/h2&gt;&lt;h3 id=&#34;原型-1&#34;&gt;&lt;a href=&#34;#原型-1&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sscanf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *buffer, &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *format, [ argument ] ...   )&lt;/span&gt;; &lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;buffer 			  存储的数据&lt;br&gt;format 			窗体控件字符串。 有关详细信息，请参阅”格式规范”。&lt;br&gt;argument	    可选自变量&lt;br&gt;locale			   要使用的区域设置&lt;/p&gt;
&lt;h3 id=&#34;说明&#34;&gt;&lt;a href=&#34;#说明&#34; class=&#34;headerlink&#34; title=&#34;说明&#34;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;sscanf与scanf类似，都是用于输入的，只是后者以键盘(stdin)为输入源，前者以&lt;strong&gt;固定字符串&lt;/strong&gt;为输入源。&lt;/p&gt;
&lt;h4 id=&#34;控制字符说明&#34;&gt;&lt;a href=&#34;#控制字符说明&#34; class=&#34;headerlink&#34; title=&#34;控制字符说明&#34;&gt;&lt;/a&gt;控制字符说明&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;%c  一个单一的字符&lt;br&gt;%d  一个十进制整数&lt;br&gt;%i  一个整数&lt;br&gt;%e, %f, %g 一个浮点数&lt;br&gt;%o  一个八进制数&lt;br&gt;%s  一个字符串&lt;br&gt;%x  一个十六进制数&lt;br&gt;%p  一个指针&lt;br&gt;%n  一个等于读取字符数量的整数&lt;br&gt;%u  一个无符号整数&lt;br&gt;%[]  一个字符集&lt;br&gt;%%  一个精度符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;函数返回值&#34;&gt;&lt;a href=&#34;#函数返回值&#34; class=&#34;headerlink&#34; title=&#34;函数返回值&#34;&gt;&lt;/a&gt;函数返回值&lt;/h3&gt;&lt;p&gt;函数将返回成功赋值的字段个数；返回值不包括已读取但未赋值的字段个数。 返回值为 0 表示没有将任何字段赋值。 如果在第一次读取之前到达字符串结尾，则返回EOF。&lt;/p&gt;
&lt;h3 id=&#34;例程&#34;&gt;&lt;a href=&#34;#例程&#34; class=&#34;headerlink&#34; title=&#34;例程&#34;&gt;&lt;/a&gt;例程&lt;/h3&gt;&lt;h4 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;hljs-number&#34;&gt;512&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 &amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取指定长度的字符串。如在下例中，取最大长度为4字节的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 &amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%4s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：1234&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取到指定字符为止的字符串。如在下例中，取遇到空格为止字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456 abcdedf&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[^ ]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取仅包含指定字符集的字符串。如在下例中，取仅包含1到9和小写字母的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456abcdedfBCDEF&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[1-9a-z]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456abcdedf&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//取到指定字符集为止的字符串。如在下例中，取遇到大写字母为止的字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456abcdedfBCDEF&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%[^A-Z]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：123456abcdedf&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//给定一个字符串iios/12DDWDFF@122，获取 / 和 @ 之间的字符串，先将 &amp;quot;iios/&amp;quot;过滤掉，再将非&amp;#x27;@&amp;#x27;的一串内容送到buf中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;iios/12DDWDFF@122&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%*[^/]/%[^@]&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：12DDWDFF&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//给定一个字符串&amp;quot;hello, world&amp;quot;，仅保留&amp;quot;world&amp;quot;。（注意：“，”之后有一空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sscanf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello, world&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%*s%s&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, buf);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//结果为：world&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&#34;图片&#34;&gt;&lt;a href=&#34;#图片&#34; class=&#34;headerlink&#34; title=&#34;图片&#34;&gt;&lt;/a&gt;图片&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20161218131342960.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Union&#34;&gt;&lt;a href=&#34;#Union&#34; class=&#34;headerlink&#34; title=&#34;Union&#34;&gt;&lt;/a&gt;Union&lt;/h2&gt;&lt;h3 id=&#34;数据拆分、移位&#34;&gt;&lt;a href=&#34;#数据拆分、移位&#34; class=&#34;headerlink&#34; title=&#34;数据拆分、移位&#34;&gt;&lt;/a&gt;数据拆分、移位&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;union&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	u16 Val_u16;&lt;br&gt;	u8 Val_u8[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;#125;_HL_UNION;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Struct&#34;&gt;&lt;a href=&#34;#Struct&#34; class=&#34;headerlink&#34; title=&#34;Struct&#34;&gt;&lt;/a&gt;Struct&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意节约内存，小数据全部写在前面方便对齐。&lt;/li&gt;
&lt;li&gt;结构体内的结构体因为已经是对其了的，所以，可以建议放在最前、最后。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;register&#34;&gt;&lt;a href=&#34;#register&#34; class=&#34;headerlink&#34; title=&#34;register&#34;&gt;&lt;/a&gt;register&lt;/h2&gt;&lt;p&gt;　　这个关键字&lt;strong&gt;请求&lt;/strong&gt;（只是请求，最终看编译器）编译器尽可能的将变量存在CPU内部寄存器中，而不是通过内存寻址访问，以提高效率。注意是尽可能，不是绝对。你想想，一个CPU 的寄存器也就那么几个或几十个，你要是定义了很多很多register 变量，它累死也可能不能全部把这些变量放入寄存器吧。&lt;/p&gt;
&lt;h2 id=&#34;volatile&#34;&gt;&lt;a href=&#34;#volatile&#34; class=&#34;headerlink&#34; title=&#34;volatile&#34;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;并行设备的硬件寄存器（如：状态寄存器）&lt;ul&gt;
&lt;li&gt;延伸 const  volatile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个中断服务子程序中会访问到的&lt;strong&gt;非自动变量&lt;/strong&gt;(Non-automatic variables)&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动变量&lt;/strong&gt;：是在函数内部定义和使用的变量，它是&lt;strong&gt;局部变量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非自动变量&lt;/strong&gt;：有两种，一种是&lt;strong&gt;全局变量&lt;/strong&gt;，一种是&lt;strong&gt;静态变量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多线程应用中被几个任务共享的变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;static&#34;&gt;&lt;a href=&#34;#static&#34; class=&#34;headerlink&#34; title=&#34;static&#34;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;h2 id=&#34;const&#34;&gt;&lt;a href=&#34;#const&#34; class=&#34;headerlink&#34; title=&#34;const&#34;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;h3 id=&#34;关于Const指针&#34;&gt;&lt;a href=&#34;#关于Const指针&#34; class=&#34;headerlink&#34; title=&#34;关于Const指针&#34;&gt;&lt;/a&gt;关于Const指针&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p1;		&lt;span class=&#34;hljs-comment&#34;&gt;//指向常量的指针 (const int) *p1，指向的值不能修改，指针本身可以修改&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; p2;    	&lt;span class=&#34;hljs-comment&#34;&gt;//指针是常量 int *(const p2) 不能指向别的变量，但是指向的变量可以修改		因为不能被修改所以必须要被初始化。&lt;/span&gt;&lt;br&gt;   &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; p3;&lt;span class=&#34;hljs-comment&#34;&gt;//不能指向别的变量，也不能修改指向变量的值&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注意   这个等同于第一个   容易产生误解尽量不要使用这个表达&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; *p;		&lt;span class=&#34;hljs-comment&#34;&gt;//指向常量的指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Const常量可以被修改&#34;&gt;&lt;a href=&#34;#Const常量可以被修改&#34; class=&#34;headerlink&#34; title=&#34;Const常量可以被修改&#34;&gt;&lt;/a&gt;Const常量可以被修改&lt;/h3&gt;&lt;p&gt;对于一个Cont常量，实际上你访问的是它的&lt;strong&gt;内存拷贝&lt;/strong&gt;，你仍然可以去用指针去修改它。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; const_val=&lt;span class=&#34;hljs-number&#34;&gt;66&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p = &amp;amp;const_val;&lt;br&gt;    &lt;br&gt;	*p = &lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;const_val=%d \r\n&amp;quot;&lt;/span&gt;, const_val );		&lt;span class=&#34;hljs-comment&#34;&gt;//const_val=33&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;const-局部变量&#34;&gt;&lt;a href=&#34;#const-局部变量&#34; class=&#34;headerlink&#34; title=&#34;const 局部变量&#34;&gt;&lt;/a&gt;const 局部变量&lt;/h3&gt;&lt;p&gt;const 局部变量居然定义在stack上，用指针居然可以修改其值&lt;/p&gt;
&lt;h2 id=&#34;指针&#34;&gt;&lt;a href=&#34;#指针&#34; class=&#34;headerlink&#34; title=&#34;指针&#34;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;h3 id=&#34;const-指针&#34;&gt;&lt;a href=&#34;#const-指针&#34; class=&#34;headerlink&#34; title=&#34;const 指针&#34;&gt;&lt;/a&gt;const 指针&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;###%E5%85%B3%E4%BA%8EConst%E6%8C%87%E9%92%88&#34;&gt;关于Const指针&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;有x个指针的数组&#34;&gt;&lt;a href=&#34;#有x个指针的数组&#34; class=&#34;headerlink&#34; title=&#34;有x个指针的数组&#34;&gt;&lt;/a&gt;有x个指针的数组&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *p2[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;hljs-comment&#34;&gt;//这是有三个指针的数组&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;指向x个元素数组的指针&#34;&gt;&lt;a href=&#34;#指向x个元素数组的指针&#34; class=&#34;headerlink&#34; title=&#34;指向x个元素数组的指针&#34;&gt;&lt;/a&gt;指向x个元素数组的指针&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指针执行&lt;code&gt;p1 = p1 + 1;&lt;/code&gt;操作，p1中的值会增加12个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; (*p1)[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;hljs-comment&#34;&gt;//指向x个元素数组的指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;二维、多维数组的指针&#34;&gt;&lt;a href=&#34;#二维、多维数组的指针&#34; class=&#34;headerlink&#34; title=&#34;二维、多维数组的指针&#34;&gt;&lt;/a&gt;二维、多维数组的指针&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] =&amp;#123;&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;&amp;#125;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; (*pa)[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = a&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//a是指向指针的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//a是一个指针，他指向的是下一维度的数组的头（指针、地址，它指向二维数组的第一个值），&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;*(*(a+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)+&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) == &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h3 id=&#34;指针参数的内存传递&#34;&gt;&lt;a href=&#34;#指针参数的内存传递&#34; class=&#34;headerlink&#34; title=&#34;指针参数的内存传递&#34;&gt;&lt;/a&gt;指针参数的内存传递&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; a=&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, b=&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun_p&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    p = &amp;amp;b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun_p_p&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    *p = &amp;amp;b;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *p_a = &amp;amp;a;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;amp;a=%X-&amp;amp;b=%X\r\n&amp;quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    fun_p(p_a);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    fun_p_p(&amp;amp;p_a);&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_a=%X\r\n&amp;quot;&lt;/span&gt;, p_a);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;编译器总是要为函数的每个参数制作临时副本，&lt;code&gt;void fun_p(int *p)&lt;/code&gt;函数的指针参数是&lt;code&gt;p&lt;/code&gt;，编译器为其分配的副本是&lt;code&gt;_p&lt;/code&gt;，编译器使&lt;code&gt;_p=p&lt;/code&gt;就是两者不是同一个变量但是指向相同的地址，函数里面修改了&lt;code&gt;_P&lt;/code&gt;的指向，但是并没有修改&lt;code&gt;p&lt;/code&gt;的指向，所以导致函数&lt;code&gt;void fun_p(int *p)&lt;/code&gt;并没有得到期待的运行结果。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;void fun_p_p(int *p)&lt;/code&gt;函数是用指向&lt;code&gt;p_a&lt;/code&gt;的指针修改了&lt;code&gt;p_a&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;修改某个变量，要用指向这个变量的指针！而修改指针要用（指向指针的指针）才行！&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;野指针&#34;&gt;&lt;a href=&#34;#野指针&#34; class=&#34;headerlink&#34; title=&#34;野指针&#34;&gt;&lt;/a&gt;野指针&lt;/h3&gt;&lt;p&gt;申请内存后的指针，被&lt;code&gt;free() &lt;/code&gt;或&lt;code&gt; delete()&lt;/code&gt;之后内存被释放，但是指针还是指向的那块内存，这个指针就叫野指针。&lt;/p&gt;
&lt;h2 id=&#34;跳的转到指定地址执行程序&#34;&gt;&lt;a href=&#34;#跳的转到指定地址执行程序&#34; class=&#34;headerlink&#34; title=&#34;跳的转到指定地址执行程序&#34;&gt;&lt;/a&gt;跳的转到指定地址执行程序&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;第一种办法：&lt;span class=&#34;hljs-keyword&#34;&gt;goto&lt;/span&gt;&lt;br&gt;第二种办法：&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//解释&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)				&lt;span class=&#34;hljs-comment&#34;&gt;//函数指针类型&lt;/span&gt;&lt;br&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)) &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//将 100 强制转换为 函数指针类型&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数定义&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//code&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数调用&lt;/span&gt;&lt;br&gt;func();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用函数指针来执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*pF)(&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;) = func;	&lt;span class=&#34;hljs-comment&#34;&gt;//使用函数指针指向func函数&lt;/span&gt;&lt;br&gt;pF();						&lt;span class=&#34;hljs-comment&#34;&gt;//利用函数指针调用函数&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;内联函数-inline&#34;&gt;&lt;a href=&#34;#内联函数-inline&#34; class=&#34;headerlink&#34; title=&#34;内联函数 inline&#34;&gt;&lt;/a&gt;内联函数 inline&lt;/h2&gt;&lt;p&gt;详见Keil-&amp;gt; Arm Compiler 6 User’s Guides-&amp;gt; Inlining functions&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Inlining options, keywords, or attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__inline__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this keyword on a function definition or declaration as a hint to the compiler  to favor inlining of the function. However, for each function call, the compiler  still decides whether to inline the function. This is equivalent to  &lt;code&gt;__inline&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__attribute__((always_inline))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this function attribute on a function definition or declaration to tell the  compiler to always inline this function, with certain exceptions such as for  recursive functions. This overrides the &lt;code&gt;-fno-inline-functions&lt;/code&gt;  option.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__attribute__((noinline))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specify  this function attribute on a function definition or declaration to tell the  compiler to not inline the function. This is equivalent to  &lt;code&gt;__declspec(noinline)&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-fno-inline-functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This  is a compiler command-line option. Specify this option to the compiler to  disable inlining. This option overrides the &lt;code&gt;__inline__&lt;/code&gt;  hint.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arm Compiler only  inlines functions within the same compilation unit, unless you use Link Time  Optimization. For more information, see &lt;a href=&#34;armclang_intro_chr1413367986635.htm&#34;&gt;&lt;em&gt;Optimizing across modules with link time  optimization&lt;/em&gt;&lt;/a&gt; in the Software Development  Guide. &lt;/li&gt;
&lt;li&gt;C++ and C99 provide the &lt;code&gt;inline&lt;/code&gt; language keyword. The effect of  this &lt;code&gt;inline&lt;/code&gt; language keyword is identical to the effect of using  the &lt;code&gt;__inline__&lt;/code&gt; compiler keyword. However, the effect in C99 mode is  different from the effect in C++ or other C that does not adhere to the C99  standard. For more information, see &lt;a href=&#34;https://developer.arm.com/docs/101754/0614/armclang-reference/other-compiler-specific-features/inline-functions&#34;&gt;&lt;em&gt;Inline functions&lt;/em&gt;&lt;/a&gt; in  the Arm Compiler Reference Guide. &lt;/li&gt;
&lt;li&gt;Function inlining normally happens at higher optimization levels, such as  &lt;code&gt;-O2&lt;/code&gt;, except when you specify  &lt;code&gt;__attribute__((always_inline))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;do-while-continue&#34;&gt;&lt;a href=&#34;#do-while-continue&#34; class=&#34;headerlink&#34; title=&#34;do while continue&#34;&gt;&lt;/a&gt;do while continue&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 相当于一个go to 去到了contin&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;contin:;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;hljs-comment&#34;&gt;/* ... */&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;预编译ifdef&#34;&gt;&lt;a href=&#34;#预编译ifdef&#34; class=&#34;headerlink&#34; title=&#34;预编译ifdef&#34;&gt;&lt;/a&gt;预编译ifdef&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;ifdef&lt;/span&gt; WIN7&lt;/span&gt;&lt;br&gt;     xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined WIN8 &lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;	xxxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined(WIN7)&lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined(WIN8) &lt;/span&gt;&lt;br&gt;	xxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;	xxxx&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏相关&#34;&gt;&lt;a href=&#34;#宏相关&#34; class=&#34;headerlink&#34; title=&#34;宏相关&#34;&gt;&lt;/a&gt;宏相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般来说在宏中不要使用增量(++i)或减量(–i)运算符。假设宏里面有多个替换，结果是不可预知的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏后面对宏的注释应该要用块注释，而不应使用行注释。因为有些编译器会将行注释理解成宏的一部分(这么智障的编译器嘛？？)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;define定义一个宏函数记得写 do{}while(0)&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; device_init_wakeup(dev,val) \ &lt;/span&gt;&lt;br&gt; device_can_wakeup(dev) = !!(val);   \ &lt;br&gt; device_set_wakeup_enable(dev,val);&lt;br&gt; &lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) device_init_wakeup(d, v);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   为什么不简单写{}&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; device_init_wakeup(dev,val) \ &lt;/span&gt;&lt;br&gt;&amp;#123; device_can_wakeup(dev) = !!(val); \ &lt;br&gt;device_set_wakeup_enable(dev,val); &amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &lt;br&gt;    device_init_wakeup(d, v);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;continue&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;__FILE__和__LINE__，FILE展开为当前源文件的文件名，是一个字符串，LINE展开为当前代码行的行号，是一个整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似上面的 C99有__func__ 可以打印出当前函数名，但是注意这是一个变量而不是宏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gcc 定义宏&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;gcc -c -DMACHINE=&lt;span class=&#34;hljs-number&#34;&gt;8086&lt;/span&gt; main.c&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏中用#将宏参量（可以是变量、函数名）转换成&lt;strong&gt;字符串&lt;/strong&gt;。——创建字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏中用##将两者进行粘合变成&lt;strong&gt;一个标识符&lt;/strong&gt;(变量等…)。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; X_NAME(n) 	x##n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; X_CHAR(x)	#x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; PSQR(x)		printf( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;The square of &amp;quot;&lt;/span&gt; #x &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; is %d\n&amp;quot;&lt;/span&gt;,((x)*(x)) )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; PSQRx(x)	printf( &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;The square of %s is %d\n&amp;quot;&lt;/span&gt;, #x, ((x)*(x)) )&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;X_NAME&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;		&lt;span class=&#34;hljs-comment&#34;&gt;//等价于   x1 = 5;&lt;/span&gt;&lt;br&gt;PSQR( x1 );&lt;br&gt;PSQRx( x1 );&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s-%s-%d\r\n&amp;quot;&lt;/span&gt;, X_CHAR( X_NAME(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) ), X_CHAR( x1 ), X_NAME(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) );&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;The square of x1 is 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;The square of x1 is 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;X_NAME( 1 )-x1-5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可变参数&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; DEBUGP(format, ...) printk(format, ## __VA_ARGS__)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;宏展开的顺序&#34;&gt;&lt;a href=&#34;#宏展开的顺序&#34; class=&#34;headerlink&#34; title=&#34;宏展开的顺序&#34;&gt;&lt;/a&gt;宏展开的顺序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带#和带##的运算符不需要进行参数的展开！！除了带#和##运算符的参数之外，其它参数在替换之前要对实参本身做充分的展开，所以应该先把sub_z展开成26再替换到alt[x]中x的位置。&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; sh(x) printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; #x &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;=%d, or %d\n&amp;quot;&lt;/span&gt;,n##x,alt[x])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; sub_z 26&lt;/span&gt;&lt;br&gt;&lt;br&gt;sh(sub_z)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//展开成了printf(&amp;quot;n&amp;quot; &amp;quot;sub_z&amp;quot; &amp;quot;=%d, or %d\n&amp;quot;,nsub_z,alt[26])&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;强制转换&#34;&gt;&lt;a href=&#34;#强制转换&#34; class=&#34;headerlink&#34; title=&#34;强制转换&#34;&gt;&lt;/a&gt;强制转换&lt;/h2&gt;&lt;h3 id=&#34;signed-int转换到unsigned-int&#34;&gt;&lt;a href=&#34;#signed-int转换到unsigned-int&#34; class=&#34;headerlink&#34; title=&#34;signed int转换到unsigned int&#34;&gt;&lt;/a&gt;signed int转换到unsigned int&lt;/h3&gt;&lt;p&gt;带符号整型转换到无符号整型,最高位(high-order bit)会丧失其作为符号位的功能。如果该带符号整数的值非负,那么转换后值不变;如果该带符号整数的值为负,那么转换后的结果通常是一个非常大的正数。&lt;/p&gt;
&lt;h2 id=&#34;uint32-t-无符号相减-定时器溢出问题&#34;&gt;&lt;a href=&#34;#uint32-t-无符号相减-定时器溢出问题&#34; class=&#34;headerlink&#34; title=&#34;uint32_t 无符号相减 定时器溢出问题&#34;&gt;&lt;/a&gt;uint32_t 无符号相减 定时器溢出问题&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;timer_loop&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Timer&lt;/span&gt;* &lt;span class=&#34;hljs-title&#34;&gt;target&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt;(target=head_handle; target; target=target-&amp;gt;next) &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(_timer_ticks &amp;gt;= target-&amp;gt;timeout) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(target-&amp;gt;repeat == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;				timer_stop(target);&lt;br&gt;			&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;				target-&amp;gt;timeout = _timer_ticks + target-&amp;gt;repeat;&lt;br&gt;			&amp;#125;&lt;br&gt;			target-&amp;gt;timeout_cb();&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个uint32_t的_timer_ticks，每毫秒自加1，设备运行到49天的时候会涉及到溢出的问题。所以在timer_loop里面的判断超时的语句需要小修改下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if(_timer_ticks &amp;gt;= target-&amp;gt;timeout)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 修改为 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;if((int)((uint32_t)(target-&amp;gt;timeout -_timer_ticks)) &amp;lt;= 0)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;完美解决uint32_t变量溢出时，超时判断有误的bug&lt;/p&gt;
&lt;p&gt;HAL库的无符号相减，tick是++&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;((now_tick - tick_start) &amp;lt; wait )&lt;br&gt;&amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;RT-thread 内的判断&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 最大定时长度是 RT_TICK_MAX / 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((current_tick - t-&amp;gt;timeout_tick) &amp;lt; RT_TICK_MAX / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;p&gt;&lt;strong&gt;这里其实涉及的是无符号数相减，减出负数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;负数在计算机内是用其补码来存储的。&lt;/p&gt;
&lt;p&gt;减法会被换算成两个数的加法，a-b会被换算成a加上b的补码，即a+(~b+1)。&lt;/p&gt;
&lt;p&gt;252-250&amp;#x3D;(b1111 1100)+(b0000 0110)&amp;#x3D;(b0000 0010)&amp;#x3D;2&lt;/p&gt;
&lt;p&gt;1-250&amp;#x3D;(b0000 0001)+(b0000 0110)&amp;#x3D;(b0000 0111)&amp;#x3D;7&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;所以计算两值的差值就可以直接相减&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; now = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; pre = &lt;span class=&#34;hljs-number&#34;&gt;250&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt; differ=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;differ = (&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;)(now - pre);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// differ = 0x08&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;c编译原理&#34;&gt;&lt;a href=&#34;#c编译原理&#34; class=&#34;headerlink&#34; title=&#34;c编译原理&#34;&gt;&lt;/a&gt;c编译原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/2018051223284857.png&#34; alt=&#34;2018051223284857&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2018/ef667962/20180513215202780.png&#34; alt=&#34;20180513215202780&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;预编译&#34;&gt;&lt;a href=&#34;#预编译&#34; class=&#34;headerlink&#34; title=&#34;预编译&#34;&gt;&lt;/a&gt;预编译&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;define展开&lt;/li&gt;
&lt;li&gt;FILE LINE等展开&lt;/li&gt;
&lt;li&gt;include包含&lt;/li&gt;
&lt;li&gt;转化 .i 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -E&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;编译&#34;&gt;&lt;a href=&#34;#编译&#34; class=&#34;headerlink&#34; title=&#34;编译&#34;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化在这进行，包括数值计算一类&lt;/li&gt;
&lt;li&gt;编译成汇编文件&lt;/li&gt;
&lt;li&gt;转化 .s .asm文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -S&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;汇编&#34;&gt;&lt;a href=&#34;#汇编&#34; class=&#34;headerlink&#34; title=&#34;汇编&#34;&gt;&lt;/a&gt;汇编&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;汇编语言代码翻译成目标机器指令的过程&lt;/li&gt;
&lt;li&gt;data段code段在这里产生&lt;/li&gt;
&lt;li&gt;转化 .o .obj文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc -c&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;链接成 .exe .out .axf等&lt;/li&gt;
&lt;li&gt;动态链接、静态链接(动态库.so、静态库.a)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs makefile&#34;&gt;gcc&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h2 id=&#34;内存分配相关&#34;&gt;&lt;a href=&#34;#内存分配相关&#34; class=&#34;headerlink&#34; title=&#34;内存分配相关&#34;&gt;&lt;/a&gt;内存分配相关&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/806053-20170722131756261-1095755633.png&#34; alt=&#34;806053-20170722131756261-1095755633&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;code-代码区&#34;&gt;&lt;a href=&#34;#code-代码区&#34; class=&#34;headerlink&#34; title=&#34;.code 代码区&#34;&gt;&lt;/a&gt;.code 代码区&lt;/h3&gt;&lt;p&gt;代码段（code segment&amp;#x2F;text segment ）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。&lt;/p&gt;
&lt;h3 id=&#34;data-已初始化区&#34;&gt;&lt;a href=&#34;#data-已初始化区&#34; class=&#34;headerlink&#34; title=&#34;.data 已初始化区&#34;&gt;&lt;/a&gt;.data 已初始化区&lt;/h3&gt;&lt;h3 id=&#34;bss-未初始化区&#34;&gt;&lt;a href=&#34;#bss-未初始化区&#34; class=&#34;headerlink&#34; title=&#34;.bss 未初始化区&#34;&gt;&lt;/a&gt;.bss 未初始化区&lt;/h3&gt;&lt;h3 id=&#34;stack-栈区&#34;&gt;&lt;a href=&#34;#stack-栈区&#34; class=&#34;headerlink&#34; title=&#34;stack 栈区&#34;&gt;&lt;/a&gt;stack 栈区&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/686215-20151218231826459-500964006.png&#34; alt=&#34;686215-20151218231826459-500964006&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在C语言中，函数参数的入栈顺序是从右到左&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;heap-堆区&#34;&gt;&lt;a href=&#34;#heap-堆区&#34; class=&#34;headerlink&#34; title=&#34;heap 堆区&#34;&gt;&lt;/a&gt;heap 堆区&lt;/h3&gt;&lt;h2 id=&#34;new-delete-malloc-free&#34;&gt;&lt;a href=&#34;#new-delete-malloc-free&#34; class=&#34;headerlink&#34; title=&#34;new delete malloc free&#34;&gt;&lt;/a&gt;new delete malloc free&lt;/h2&gt;&lt;h3 id=&#34;new-x2F-delete&#34;&gt;&lt;a href=&#34;#new-x2F-delete&#34; class=&#34;headerlink&#34; title=&#34;new &amp;#x2F; delete&#34;&gt;&lt;/a&gt;new &amp;#x2F; delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x2F; release memory 分配&amp;#x2F;释放&lt;ol&gt;
&lt;li&gt;Memory allocated from ‘Free Store’.   这个FreeStore和Heap不一定一样 似乎取决于它的具体实现方式&lt;/li&gt;
&lt;li&gt;Returns a fully typed pointer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; (standard version) never returns a &lt;code&gt;NULL&lt;/code&gt; (will throw on failure).&lt;/li&gt;
&lt;li&gt;Are called with Type-ID (compiler calculates the size). 使用 Type-ID 调用（编译器计算大小）。&lt;/li&gt;
&lt;li&gt;Has a version explicitly to handle arrays. 有一个明确的版本来处理数组。&lt;/li&gt;
&lt;li&gt;Reallocating (to get more space) not handled intuitively (because of copy constructor). 重新分配（以获得更多空间）没有直观地处理（因为复制构造函数）。&lt;/li&gt;
&lt;li&gt;Whether they call &lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt; is implementation defined. 他们是否调用&lt;code&gt;malloc&lt;/code&gt;&amp;#x2F;&lt;code&gt;free&lt;/code&gt;是由实现来定义的。&lt;/li&gt;
&lt;li&gt;Can add a new memory allocator to deal with low memory (&lt;code&gt;std::set_new_handler&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator new&lt;/code&gt; &amp;#x2F; &lt;code&gt;operator delete&lt;/code&gt; can be overridden legally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constructor &amp;#x2F; destructor used to initialize &amp;#x2F; destroy the object.  构造函数&amp;#x2F;析构函数用于初始化&amp;#x2F;销毁对象。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;malloc-x2F-free&#34;&gt;&lt;a href=&#34;#malloc-x2F-free&#34; class=&#34;headerlink&#34; title=&#34;malloc &amp;#x2F; free&#34;&gt;&lt;/a&gt;malloc &amp;#x2F; free&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x2F; release memory&lt;ol&gt;
&lt;li&gt;Memory allocated from ‘Heap’.&lt;/li&gt;
&lt;li&gt;Returns a &lt;code&gt;void*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Returns &lt;code&gt;NULL&lt;/code&gt; on failure.&lt;/li&gt;
&lt;li&gt;Must specify the size required in bytes. 必须以字节为单位指定所需的大小。&lt;/li&gt;
&lt;li&gt;Allocating array requires manual calculation of space. 分配数组需要手动计算空间。&lt;/li&gt;
&lt;li&gt;Reallocating larger chunk of memory simple (no copy constructor to worry about). 重新分配更大的内存块很简单（无需担心复制构造函数）。&lt;/li&gt;
&lt;li&gt;They will &lt;strong&gt;NOT&lt;/strong&gt; call &lt;code&gt;new&lt;/code&gt; &amp;#x2F; &lt;code&gt;delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No way to splice user code into the allocation sequence to help with low memory. 无法将用户代码拼接到分配序列中以帮助解决内存不足的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt; can &lt;strong&gt;NOT&lt;/strong&gt; be overridden legally.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Table-comparison-of-the-features&#34;&gt;&lt;a href=&#34;#Table-comparison-of-the-features&#34; class=&#34;headerlink&#34; title=&#34;Table comparison of the features:&#34;&gt;&lt;/a&gt;Table comparison of the features:&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Feature&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;new&lt;/code&gt; &amp;#x2F; &lt;code&gt;delete&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;malloc&lt;/code&gt; &amp;#x2F; &lt;code&gt;free&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Memory allocated from&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;‘Free Store’&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;‘Heap’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Returns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fully typed pointer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;void*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;On failure&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Throws (never returns &lt;code&gt;NULL&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Returns &lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Required size&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Calculated by compiler&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Must be specified in bytes&lt;br/&gt;必须以字节为单位指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Handling arrays&lt;br&gt;处理数组&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Has an explicit version&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Requires manual calculations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Reallocating&lt;br&gt;重新分配&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not handled intuitively&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Simple (no copy constructor)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Call of reverse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Implementation defined&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Low memory cases&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Can add a new memory allocator&lt;br&gt;可以添加新的内存分配器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not handled by user code&lt;br&gt;不由用户代码处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Overridable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Use of constructor &amp;#x2F; destructor&lt;br&gt;构造函数&amp;#x2F;析构函数的使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;运算符&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Technically, memory allocated by &lt;code&gt;new&lt;/code&gt; comes from the ‘Free Store’ while memory allocated by &lt;code&gt;malloc&lt;/code&gt; comes from the ‘Heap’. Whether these two areas are the same is an implementation detail, which is another reason that &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; cannot be mixed. 从技术上讲，分配的内存&lt;code&gt;new&lt;/code&gt;来自“免费存储”，而分配的内存&lt;code&gt;malloc&lt;/code&gt;来自“堆”。这两个区域是否相同是一个实现细节，这是另一个&lt;code&gt;malloc&lt;/code&gt;不能&lt;code&gt;new&lt;/code&gt;混为一谈的原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最相关的区别是&lt;code&gt;new&lt;/code&gt;运算符分配内存然后调用&lt;strong&gt;构造函数&lt;/strong&gt;，&lt;code&gt;delete&lt;/code&gt;调用&lt;strong&gt;析构函数&lt;/strong&gt;然后释放内存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格来说，new 操作符只是分配内存。是 new 表达式调用 new 运算符，然后在分配的内存中运行构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;调用对象的ctor，&lt;code&gt;delete&lt;/code&gt;调用dtor。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;malloc&lt;/code&gt;&amp;amp;&lt;code&gt;free&lt;/code&gt;只是分配和释放原始内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;STM32相关&#34;&gt;&lt;a href=&#34;#STM32相关&#34; class=&#34;headerlink&#34; title=&#34;STM32相关&#34;&gt;&lt;/a&gt;STM32相关&lt;/h1&gt;&lt;h2 id=&#34;ADC-与-通道映射关系&#34;&gt;&lt;a href=&#34;#ADC-与-通道映射关系&#34; class=&#34;headerlink&#34; title=&#34;ADC 与 通道映射关系&#34;&gt;&lt;/a&gt;ADC 与 通道映射关系&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/ef667962/ADC%E9%80%9A%E9%81%93%E4%B8%8E%E5%BC%95%E8%84%9A%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.png&#34; alt=&#34;ADC通道与引脚对应关系&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Printf第一个字符丢失&#34;&gt;&lt;a href=&#34;#Printf第一个字符丢失&#34; class=&#34;headerlink&#34; title=&#34;Printf第一个字符丢失&#34;&gt;&lt;/a&gt;Printf第一个字符丢失&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将发送放在等待标志位后面即可解决问题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* Loop until the end of transmission */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* Place your implementation of fputc here */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/* e.g. write a character to the USART */&lt;/span&gt;&lt;br&gt;	USART_SendData(USART2, (&lt;span class=&#34;hljs-type&#34;&gt;uint8_t&lt;/span&gt;) ch);&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ch;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;通用TIM-PWM输出低电平&#34;&gt;&lt;a href=&#34;#通用TIM-PWM输出低电平&#34; class=&#34;headerlink&#34; title=&#34;通用TIM PWM输出低电平&#34;&gt;&lt;/a&gt;通用TIM PWM输出低电平&lt;/h2&gt;&lt;p&gt;调用 TIM_CCxCmd 关闭输出使能即可&lt;strong&gt;持续输出低电平&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;TIM_CCxCmd&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TIM_TypeDef* TIMx, &lt;span class=&#34;hljs-type&#34;&gt;uint16_t&lt;/span&gt; TIM_Channel, &lt;span class=&#34;hljs-type&#34;&gt;uint16_t&lt;/span&gt; TIM_CCx)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CCxE位&lt;/th&gt;
&lt;th&gt;OCx输出状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;禁止输出(OCx&amp;#x3D;0，OCx_EN&amp;#x3D;0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;OCx &amp;#x3D; OCxREF + 极性，OCx_EN&amp;#x3D;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;杂乱笔记&#34;&gt;&lt;a href=&#34;#杂乱笔记&#34; class=&#34;headerlink&#34; title=&#34;杂乱笔记&#34;&gt;&lt;/a&gt;杂乱笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仿真建议使用SWD模式(使用的线少)         emmm。。。。？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KEY_UP高电有效（可用于唤醒）、KEY0、KEY1低电有效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;编译器会默认把没有赋值的变量自动赋值为0（真的是这样吗？，局部变量呢？答复:局部变量不会被初始化,请一定注意要去手动进行初始化）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NTC (Negative Temperature Coefficient 负温度系数)      PTC (Positive 正温度系数)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RTC (实时时钟)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;APB1和APB2的区别,&lt;br&gt;APB1操作速度限于36MHz,	上面连接的是低速外设,包括 TIM234567、WWDG、SPI2、SPI3、USART23、UART45、CAN12、PWRPower interface clock、 BKP、 DAC、I2C12、等，&lt;strong&gt;具体请参考7.3.8章节APB1外设使能寄存器&lt;/strong&gt;&lt;br&gt;APB2操作速度全速,	上面连接的是高速外设,包括 UART1 、SPI1、Timer1、ADC1、ADC2、所有普通 IO 口(PA-PE)(PA-PE)(PA-PE)(PA-PE)(PA-PE)(PA-PE) 、第二功能IO 口 、&lt;strong&gt;具体请参考7.3.7章节APB2外设使能寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原子提供的delay_ms 最大是1864ms不能超过这个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;volatile 简单地说就是防止编译器对代码进行优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;enum 枚举类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SysTick     LOAD 转载到 VAL 需要时钟周期所以计算 LOAD 时需要-1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PA13 PA14 PA15 PB3 PB4 上电默认是SWD+JTAG模式所以这些GPIO口不能直接使用可调用 GPIO_PinRemapConfig 函数修改&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DAC要将对应的IO设置成模拟输入！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;USART1 时钟脉冲来源   PCLK2     USART2-4来源   PCLK1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用USART不需要使能AFIO    （发生重映射才需要进行打开AFIO参考CSDN）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;0,1,2,3,4 各有自己的中断函数        5-9共用一个中断函数    10-15共用一个中断函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;u8 temp &lt;em&gt;attribute&lt;/em&gt;((at (地址)));					&amp;#x2F;&amp;#x2F;需要定义为全局变量—-定义变量到指定地址&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容量&lt;/p&gt;
&lt;p&gt;4表示16KB （小容量ld）&lt;br&gt;6表示32KB （小容量ld）&lt;br&gt;8表示64KB （中容量md）&lt;br&gt;B表示128KB （中容量md）&lt;br&gt;C表示256KB （大容量hd）&lt;br&gt;E表示512KB （大容量hd）&lt;br&gt;F表示768KB （超大容量xl）&lt;br&gt;G表示1024KB （超大容量xl）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC输入范围：VREF- ≤  VIN  ≤  VREF+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在扫描模式下，由ADC_SQRx或者ADC_JSQRx寄存器选中的通道被转换。如果设置了EOCIE或者JEOCIE，在最后一个通道转换完毕后才会产生EOC或者JEOC中断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC ADC1通道17 测得的是内部参考电压(根据数据手册中的数据，这个参照电压的典型值是1.20V，最小值是1.16V，最大值是1.24V)，!!!不是ADC的参考电压Vref+!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统滴答定时器&lt;/p&gt;
&lt;p&gt;SysTick-&amp;gt;CTRL        类似控制及状态位寄存器&lt;br&gt;SysTick-&amp;gt;LOAD	   到时间自动重装的重装载寄存器&lt;br&gt;SysTick-&amp;gt;VAL	      当前数值寄存器&lt;br&gt;SysTick-&amp;gt;CALIB      校准数值寄存器（暂时没有用到）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;RTOS相关&#34;&gt;&lt;a href=&#34;#RTOS相关&#34; class=&#34;headerlink&#34; title=&#34;RTOS相关&#34;&gt;&lt;/a&gt;RTOS相关&lt;/h1&gt;&lt;h2 id=&#34;线程进程&#34;&gt;&lt;a href=&#34;#线程进程&#34; class=&#34;headerlink&#34; title=&#34;线程进程&#34;&gt;&lt;/a&gt;线程进程&lt;/h2&gt;&lt;h3 id=&#34;进程&#34;&gt;&lt;a href=&#34;#进程&#34; class=&#34;headerlink&#34; title=&#34;进程&#34;&gt;&lt;/a&gt;进程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资源分配的最小单位(拥有独立的地址空间，同一个进程内的线程共享进程地址空间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进程是程序执行的实例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程&#34;&gt;&lt;a href=&#34;#线程&#34; class=&#34;headerlink&#34; title=&#34;线程&#34;&gt;&lt;/a&gt;线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序执行的最小单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU调度最小单位，一个进程并发多个线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系&#34;&gt;&lt;a href=&#34;#关系&#34; class=&#34;headerlink&#34; title=&#34;关系&#34;&gt;&lt;/a&gt;关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;资源分配给进程，同一进程内的所有线程共享该进程的所有资源；&lt;/li&gt;
&lt;li&gt;同一个进程的线程之间可以直接交流；两个进程想通信，必须通过一个中间代理来实现；&lt;/li&gt;
&lt;li&gt;处理机分配给线程，即真正在处理机上运行的是线程；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程共享内存空间；进程的内存是独立的；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;系统开销：在创建和撤销进程的时候，系统都要分配和回收资源，导致系统的明显大于创建和撤销线程时的开销。但进程有独立的地址空间，进程崩溃后，在保护模式的下不会对其他进程造成影响，而线程只是进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有独立的地址空间，一个线程死后就等于整个进程死掉，所以多进程程序要比多线程程序健壮，但是在进程切换的时候消耗的资源较大，效率差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程执行效率高; 多进程耗资源，安全。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;外设&#34;&gt;&lt;a href=&#34;#外设&#34; class=&#34;headerlink&#34; title=&#34;外设&#34;&gt;&lt;/a&gt;外设&lt;/h1&gt;&lt;h2 id=&#34;IIC&#34;&gt;&lt;a href=&#34;#IIC&#34; class=&#34;headerlink&#34; title=&#34;IIC&#34;&gt;&lt;/a&gt;IIC&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;双向通信速度（模式）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;100 kbit&amp;#x2F;s：标准模式，Standard-mode (Sm)；&lt;/p&gt;
&lt;p&gt;400 kbit&amp;#x2F;s：快速模式，Fast-mode (Fm)；&lt;/p&gt;
&lt;p&gt;1 Mbit&amp;#x2F;s：快速模式+，Fast-mode Plus (Fm+)；&lt;/p&gt;
&lt;p&gt;3.4Mbit&amp;#x2F;s：高速模式，High-speed mode (Hs-mode)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单向通信速度（模式）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5 Mbit&amp;#x2F;s：超快模式，UItra Fast-mode (UFm)。&lt;/p&gt;
&lt;h2 id=&#34;SPI&#34;&gt;&lt;a href=&#34;#SPI&#34; class=&#34;headerlink&#34; title=&#34;SPI&#34;&gt;&lt;/a&gt;SPI&lt;/h2&gt;&lt;p&gt;CKPOL (Clock Polarity) &amp;#x3D; CPOL &amp;#x3D; POL &amp;#x3D; Polarity &amp;#x3D; （时钟）极性&lt;br&gt;CKPHA (Clock Phase)  &amp;#x3D; CPHA &amp;#x3D; PHA &amp;#x3D; Phase &amp;#x3D; （时钟）相位&lt;/p&gt;
&lt;h3 id=&#34;CPOL极性&#34;&gt;&lt;a href=&#34;#CPOL极性&#34; class=&#34;headerlink&#34; title=&#34;CPOL极性&#34;&gt;&lt;/a&gt;CPOL极性&lt;/h3&gt;&lt;p&gt;先说什么是SCLK时钟的空闲时刻，其就是当SCLK在发送8个bit比特数据之前和之后的状态，于此对应的，SCLK在发送数据的时候，就是正常的工作的时候，有效active的时刻了。其英文精简解释为：Clock Polarity &amp;#x3D; IDLE state of SCK。&lt;/p&gt;
&lt;p&gt;SPI的CPOL，&lt;span style=&#34;color:#29b6f6&#34;&gt;&lt;strong&gt;表示当SCLK空闲idle的时候，其电平的值是低电平0还是高电平1&lt;/strong&gt;&lt;/span&gt;：&lt;br&gt;CPOL&amp;#x3D;0，时钟空闲idle时候的电平是低电平，所以当SCLK有效的时候，就是高电平，就是所谓的active-high；&lt;br&gt;CPOL&amp;#x3D;1，时钟空闲idle时候的电平是高电平，所以当SCLK有效的时候，就是低电平，就是所谓的active-low；&lt;br&gt;&lt;img src=&#34;/2018/ef667962/231416549884871.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上图中可以看出，(CPOL&amp;#x3D;0)的SCK 波形，它有（传输）8 个脉冲，而在脉冲传输前和完成后都保持在【低电平状态】。&lt;br&gt;此时的状态就是时钟的空闲状态或无效状态，因为此时没有脉冲，也就不会有数据传输。同理得出，（CPOL&amp;#x3D;）1 的图，时钟的空闲状态或无效状态时SCK 是保持【高电平的】。&lt;/p&gt;
&lt;h3 id=&#34;CPHA相位&#34;&gt;&lt;a href=&#34;#CPHA相位&#34; class=&#34;headerlink&#34; title=&#34;CPHA相位&#34;&gt;&lt;/a&gt;CPHA相位&lt;/h3&gt;&lt;p&gt;首先说明一点，capture strobe &amp;#x3D; latch &amp;#x3D; read &amp;#x3D; sample，都是表示数据采样，数据有效的时刻。&lt;br&gt;相位，对应着数据采样是在第几个边沿（edge），是第一个边沿还是第二个边沿，0对应着第一个边沿，1对应着第二个边沿。对于：&lt;/p&gt;
&lt;p&gt;CPHA&amp;#x3D;0，表示第一个边沿：&lt;br&gt;对于CPOL&amp;#x3D;0，idle时候的是低电平，第一个边沿就是从低变到高，所以是上升沿；&lt;br&gt;对于CPOL&amp;#x3D;1，idle时候的是高电平，第一个边沿就是从高变到低，所以是下降沿；&lt;/p&gt;
&lt;p&gt;CPHA&amp;#x3D;1，表示第二个边沿：&lt;br&gt;对于CPOL&amp;#x3D;0，idle时候的是低电平，第二个边沿就是从高变到低，所以是下降沿；&lt;br&gt;对于CPOL&amp;#x3D;1，idle时候的是高电平，第一个边沿就是从低变到高，所以是上升沿；&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#29b6f6&#34;&gt;&lt;strong&gt;数据是在SCK的第一个时钟边沿保持稳定【数据被采样捕获】，在下一个边沿改变【SCK 的下降沿数据改变】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;嵌入式高效位算法&#34;&gt;&lt;a href=&#34;#嵌入式高效位算法&#34; class=&#34;headerlink&#34; title=&#34;嵌入式高效位算法&#34;&gt;&lt;/a&gt;嵌入式高效位算法&lt;/h1&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://aggregate.org/MAGIC/#Bit%20Reversal&#34;&gt;The Aggregate Magic Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://graphics.stanford.edu/~seander/bithacks.html&#34;&gt;Bit Twiddling Hacks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WORDBITS:		数据宽度&lt;/p&gt;
&lt;h2 id=&#34;位逆序&#34;&gt;&lt;a href=&#34;#位逆序&#34; class=&#34;headerlink&#34; title=&#34;位逆序&#34;&gt;&lt;/a&gt;位逆序&lt;/h2&gt;&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1&#34;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;在整数x中反转位有点痛苦，但这里有一个32位值的SWAR算法: &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xaaaaaaaa&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xcccccccc&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xf0f0f0f0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;));&lt;br&gt;	x = (((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff00ff00&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) | ((x &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;));&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | (x &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;));&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 也可以重写这个算法，使用4个而不是8个常量，从而节省一些指令带宽。在我的1.2GHz Athlon(雷鸟)上，这种差别太小了，无法可靠地测量。下面是另一个版本: &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; y = &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;));&lt;br&gt;        y = &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;;&lt;br&gt;        x = (((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) &amp;amp; y) | ((x &amp;amp; y) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;));&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;((x &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | (x &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;));&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;8位查表&#34;&gt;&lt;a href=&#34;#8位查表&#34; class=&#34;headerlink&#34; title=&#34;8位查表&#34;&gt;&lt;/a&gt;8位查表&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;private Byte  &lt;span class=&#34;hljs-title function_&#34;&gt;BitReverse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Byte bData)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    Byte[] lookup = &amp;#123; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;,  &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;, &lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt; , &lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;,  &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;13&lt;/span&gt;,&lt;br&gt;                     &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;15&lt;/span&gt; &amp;#125;;&lt;br&gt;    Byte ret_val = (Byte)(((lookup[(bData &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0x0F&lt;/span&gt;)]) &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) + lookup[((bData &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xF0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)]);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ret_val;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;16位查表&#34;&gt;&lt;a href=&#34;#16位查表&#34; class=&#34;headerlink&#34; title=&#34;16位查表&#34;&gt;&lt;/a&gt;16位查表&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; BitReverseTable256[] = &lt;br&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x00&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x40&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x20&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x60&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x90&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x50&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x30&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x70&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF0&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x08&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x88&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x48&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x28&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x68&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x18&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x98&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x58&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x38&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x78&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF8&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x04&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x84&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x44&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x24&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x64&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x14&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x94&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x54&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x34&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x74&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF4&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBC&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7C&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFC&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x02&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x82&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x42&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x22&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x62&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x12&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x92&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x52&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x32&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x72&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF2&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBA&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7A&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFA&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x06&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x86&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x46&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x26&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x66&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x16&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x96&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x56&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x36&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x76&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF6&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBE&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7E&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFE&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x01&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x81&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x41&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x21&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x61&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x11&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x91&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x51&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x31&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x71&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF1&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x09&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x89&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x49&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x29&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x69&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x19&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x99&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x59&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x39&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x79&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF9&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x05&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x85&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x45&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x25&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x65&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x15&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x95&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x55&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x35&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x75&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF5&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xED&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBD&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7D&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFD&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x03&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x83&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x43&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x23&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x63&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x13&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x93&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x53&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x33&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x73&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF3&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBB&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7B&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFB&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x07&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x87&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x47&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xC7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x27&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xA7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x67&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xE7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x17&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x97&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x57&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xD7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x37&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xB7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x77&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xF7&lt;/span&gt;, &lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0x0F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x8F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x4F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xCF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x2F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xAF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x6F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xEF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x1F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x9F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x5F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xDF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x3F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xBF&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0x7F&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0xFF&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; v; &lt;span class=&#34;hljs-comment&#34;&gt;// reverse 32-bit value, 8 bits at time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; c; &lt;span class=&#34;hljs-comment&#34;&gt;// c will get v reversed&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Option 1:&lt;/span&gt;&lt;br&gt;c = (BitReverseTable256[v &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;) | &lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) | &lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) |&lt;br&gt;    (BitReverseTable256[(v &amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;) &amp;amp; &lt;span class=&#34;hljs-number&#34;&gt;0xff&lt;/span&gt;]);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Option 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; * p = (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *) &amp;amp;v;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; * q = (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; *) &amp;amp;c;&lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]]; &lt;br&gt;q[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] = BitReverseTable256[p[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;整数平均值&#34;&gt;&lt;a href=&#34;#整数平均值&#34; class=&#34;headerlink&#34; title=&#34;整数平均值&#34;&gt;&lt;/a&gt;整数平均值&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;(x+y)/&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//可能导致溢出 相加溢出&lt;/span&gt;&lt;br&gt;    &lt;br&gt;(x＆y)+((x ^ y)&amp;gt;&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)	&lt;span class=&#34;hljs-comment&#34;&gt;//可以改用这种方法&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;这实际上是“众所周知”事实的扩展，对于二进制整数值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;（x + y）&lt;/code&gt; 等于&lt;code&gt;（（x＆y）+（x | y））&lt;/code&gt;等于&lt;code&gt;（（x ^ y）+ 2 *（x＆y ））&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;给定两个整数值&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，平均值的（底数）通常将由&lt;code&gt;（x + y）/ 2计算&lt;/code&gt;；不幸的是，由于溢出，这可能会产生错误的结果。一个非常偷偷摸摸的替代方法是使用&lt;code&gt;（x＆y）+（（（x ^ y）/ 2）&lt;/code&gt;。如果我们由于C没有指定是否对移位进行签名而意识到潜在的不可移植性，则可以将其简化为&lt;code&gt;（x＆y）+（（x ^ y）&amp;gt;&amp;gt; 1）&lt;/code&gt;。无论哪种情况，好处是此代码序列都不会溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;整数求最大最小值&#34;&gt;&lt;a href=&#34;#整数求最大最小值&#34; class=&#34;headerlink&#34; title=&#34;整数求最大最小值&#34;&gt;&lt;/a&gt;整数求最大最小值&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;x-(((x-y)&amp;gt;&amp;gt;(WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;))&amp;amp;(x-y))				&lt;span class=&#34;hljs-comment&#34;&gt;//Maximum&lt;/span&gt;&lt;br&gt;x+(((y-x)&amp;gt;&amp;gt;(WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;))&amp;amp;(y-x))				&lt;span class=&#34;hljs-comment&#34;&gt;//Minimum &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;p&gt;WORDBITS是数据宽度（8，16，32，……）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;((x-y)&amp;gt;&amp;gt;(WORDBITS-1)) 相当于取出符号位&lt;/p&gt;
&lt;p&gt;当x&amp;gt;y时结果是0&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt; 注意！ 当x&amp;lt;y时结果是全1，，比如WORDBITS是8那么这个式子运算结果是0xFF&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;注意！ 负数的移位似乎不太一样（当有符号整数右移时，最左边的位的值被复制到其他位）,（ 不幸的是，这种行为是特定于体系结构的）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样的可以利用这一点应用到其他算法中：&lt;a href=&#34;#%E6%95%B4%E6%95%B0%E9%80%89%E6%8B%A9%E8%B5%8B%E5%80%BC&#34;&gt;整数选择赋值&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;整数选择赋值&#34;&gt;&lt;a href=&#34;#整数选择赋值&#34; class=&#34;headerlink&#34; title=&#34;整数选择赋值&#34;&gt;&lt;/a&gt;整数选择赋值&lt;/h2&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (a&amp;lt;b) x=c; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; x=d; 					&lt;span class=&#34;hljs-comment&#34;&gt;//都是整数&lt;/span&gt;&lt;br&gt;&lt;br&gt;x=((((a-b) &amp;gt;&amp;gt; (WORDBITS&lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;)) &amp;amp; (c^d)) ^ d) 	&lt;span class=&#34;hljs-comment&#34;&gt;//优化后&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&#34;#%E6%95%B4%E6%95%B0%E6%B1%82%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC&#34;&gt;整数求最大最小值&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;没有临时值，交换值两数据的值&#34;&gt;&lt;a href=&#34;#没有临时值，交换值两数据的值&#34; class=&#34;headerlink&#34; title=&#34;没有临时值，交换值两数据的值&#34;&gt;&lt;/a&gt;没有临时值，交换值两数据的值&lt;/h2&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//example 1&lt;/span&gt;&lt;br&gt;x ^= y; &lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x^y) */&lt;/span&gt;&lt;br&gt;y ^= x;	&lt;span class=&#34;hljs-comment&#34;&gt;/* y&amp;#x27; = (y^(x^y)) = x */&lt;/span&gt;&lt;br&gt;x ^= y; &lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x^y)^x = y */&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//example 2&lt;/span&gt;&lt;br&gt;x += y; 	&lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x+y) */&lt;/span&gt;&lt;br&gt;y = x - y;	&lt;span class=&#34;hljs-comment&#34;&gt;/* y&amp;#x27; = (x+y)-y = x */&lt;/span&gt;&lt;br&gt;x -= y;		&lt;span class=&#34;hljs-comment&#34;&gt;/* x&amp;#x27; = (x+y)-x = y */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;但是当x和y之间的大小有显著差异时，较小的大小的值可能会严重损失准确性。例如，如果x的模比y大得多，那么(x+y)&amp;#x3D;&amp;#x3D;x，最后得到y&amp;#x3D;0。 &lt;/p&gt;
&lt;p&gt;这里如果变量的存储大小很小 还可能会产生溢出 计算出来的数据就会问题了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算byte内有多少bit置1&#34;&gt;&lt;a href=&#34;#计算byte内有多少bit置1&#34; class=&#34;headerlink&#34; title=&#34;计算byte内有多少bit置1&#34;&gt;&lt;/a&gt;计算byte内有多少bit置1&lt;/h2&gt;&lt;p&gt;此为 汉明距离 问题&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;&lt;a href=&#34;#循环&#34; class=&#34;headerlink&#34; title=&#34;循环&#34;&gt;&lt;/a&gt;循环&lt;/h3&gt;&lt;p&gt;just&lt;/p&gt;
&lt;h3 id=&#34;Bit1-Bit0数量相关&#34;&gt;&lt;a href=&#34;#Bit1-Bit0数量相关&#34; class=&#34;headerlink&#34; title=&#34;Bit1 Bit0数量相关&#34;&gt;&lt;/a&gt;Bit1 Bit0数量相关&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//bit 1 较少 0x1000 0000 只需要一次&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; count=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (n)  &amp;#123;&lt;br&gt;        count++;&lt;br&gt;        n &amp;amp;= (n - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; count;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//bit 0 较少 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;);&lt;br&gt;    n ^= (&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (n)&lt;br&gt;    &amp;#123;&lt;br&gt;        count--;&lt;br&gt;        n &amp;amp;= (n - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; count;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;查表&#34;&gt;&lt;a href=&#34;#查表&#34; class=&#34;headerlink&#34; title=&#34;查表&#34;&gt;&lt;/a&gt;查表&lt;/h3&gt;&lt;p&gt;8位查表 4位查表&lt;/p&gt;
&lt;h3 id=&#34;合并计数-优&#34;&gt;&lt;a href=&#34;#合并计数-优&#34; class=&#34;headerlink&#34; title=&#34;合并计数(优)&#34;&gt;&lt;/a&gt;合并计数(优)&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;0x34520&lt;/code&gt;为例，&lt;code&gt;b0011 0100 0101 0010 0000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第一步：每2位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight tap&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs tap&#34;&gt;RAW |00110100010100100000|&lt;br&gt;H   |0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;|&lt;br&gt;L   |&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;-------------------------|&lt;br&gt;H&amp;gt;&amp;gt;1|&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;L   |&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 1 &lt;/span&gt;1&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0&lt;span class=&#34;hljs-number&#34;&gt; 0 &lt;/span&gt;0|&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;+ &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;= &lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;10&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;00&lt;span class=&#34;hljs-number&#34;&gt; 01 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;01&lt;span class=&#34;hljs-number&#34;&gt; 00 &lt;/span&gt;00&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第二步：每4位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;RAW&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0100 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0101 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;H&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;  &lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;L&lt;/span&gt;      &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;01&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;00&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;-----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;H&amp;gt;&amp;gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;L&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;-----------------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;H:&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;L:&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;=&lt;/span&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0010 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0001 &lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第三步：每8位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight dns&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs dns&#34;&gt;RAW &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00010010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00010000&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0001&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0001&lt;/span&gt;    &lt;br&gt;        &lt;span class=&#34;hljs-number&#34;&gt;0010&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0010&lt;/span&gt;     &lt;span class=&#34;hljs-number&#34;&gt;0000&lt;/span&gt;&lt;br&gt;&lt;br&gt;H:  &lt;span class=&#34;hljs-number&#34;&gt;00000000&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt;&lt;br&gt;L:  &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000000&lt;/span&gt;&lt;br&gt;=   &lt;span class=&#34;hljs-number&#34;&gt;00000010&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000011&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;00000001&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第四步：每16位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;RAW 0000000000000010 0000001100000001&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    00000000         00000011        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;            00000010         00000001&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    &lt;/span&gt;&lt;br&gt;H:  0000000000000000 0000000000000011&lt;br&gt;L:  0000000000000010 0000000000000001&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;=   0000000000000010 0000000000000100&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第五步：每32位为一组，组内高低位相加&lt;/p&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs asciidoc&#34;&gt;RAW 0000000000000010 0000000000000100&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;    0000000000000000 0000000000000010&lt;/span&gt;&lt;br&gt;+   0000000000000000 0000000000000100&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;=   0000000000000000 0000000000000110 = 6 &lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;这样最后得到的00000000 00000111即7即34520二进制中1的个数。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;numbits&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK1  = &lt;span class=&#34;hljs-number&#34;&gt;0x55555555&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK2  = &lt;span class=&#34;hljs-number&#34;&gt;0x33333333&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK4  = &lt;span class=&#34;hljs-number&#34;&gt;0x0f0f0f0f&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK8  = &lt;span class=&#34;hljs-number&#34;&gt;0x00ff00ff&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; MASK16 = &lt;span class=&#34;hljs-number&#34;&gt;0x0000ffff&lt;/span&gt;;&lt;br&gt;    i = (i&amp;amp;MASK1 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &amp;amp;MASK1 );&lt;br&gt;    i = (i&amp;amp;MASK2 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;amp;MASK2 );&lt;br&gt;    i = (i&amp;amp;MASK4 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt; &amp;amp;MASK4 );&lt;br&gt;    i = (i&amp;amp;MASK8 ) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; &amp;amp;MASK8 );&lt;br&gt;    i = (i&amp;amp;MASK16) + (i&amp;gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;&amp;amp;MASK16);&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; i;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 另外一种实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; TWO(c)       	(0x1u &amp;lt;&amp;lt; (c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; MASK(c)      	(((unsigned int)(-1)) / (TWO(TWO(c)) + 1u))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; COUNT(x,c) 		((x) &amp;amp; MASK(c)) + (((x) &amp;gt;&amp;gt; (TWO(c))) &amp;amp; MASK(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bitcount&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) ;&lt;br&gt;    n = COUNT(n, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) ;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* n = COUNT(n, 5) ;      for 64-bit integers */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; n ;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h1 id=&#34;规范性&#34;&gt;&lt;a href=&#34;#规范性&#34; class=&#34;headerlink&#34; title=&#34;规范性&#34;&gt;&lt;/a&gt;规范性&lt;/h1&gt;&lt;h2 id=&#34;头文件&#34;&gt;&lt;a href=&#34;#头文件&#34; class=&#34;headerlink&#34; title=&#34;头文件&#34;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;common.h作为顶层头文件，主要放置(f10x.h、通用define、通用enum、)，不得包含用户头文件以避免循环依赖。&lt;/li&gt;
&lt;li&gt;#ifndef标识符规范，前面加两个下划线 __COMMON_H&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;详细&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;全局变量&lt;/td&gt;
&lt;td&gt;前面加 g&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gRoomHmidity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指针&lt;/td&gt;
&lt;td&gt;前面加 p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;pHumidity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有符号变量&lt;/td&gt;
&lt;td&gt;前面加i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;iTemperature&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;struct函数指针&lt;/td&gt;
&lt;td&gt;前面加f(可选的)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fGetVal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不允许直接访问&lt;/td&gt;
&lt;td&gt;前面加_&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_DataVal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enum&lt;/td&gt;
&lt;td&gt;变量前面加 e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;eFlag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;值全大写即可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ERR_OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Typedef&lt;/td&gt;
&lt;td&gt;后面加 _t&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;uint32_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;不要使用八进制，误认是十进制。&lt;/li&gt;
&lt;li&gt;Switch default无操作需要得到注释。&lt;/li&gt;
&lt;li&gt;禁止变量未赋值就进行使用。&lt;/li&gt;
&lt;li&gt;如果某常量与其他常量密切相关，在定义中应该明确表示出此关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; RAD=&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; DIAM=RAD*&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通讯过程中使用的结构,必须注意字节序。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免使用危险函数sprintf &amp;#x2F;vsprintf&amp;#x2F;strcpy&amp;#x2F;strcat&amp;#x2F;gets操作字符串&lt;ul&gt;
&lt;li&gt;用strncpy()代替strcpy()&lt;/li&gt;
&lt;li&gt;用strncat()代替strcat()&lt;/li&gt;
&lt;li&gt;用snprintf()代替sprintf()&lt;/li&gt;
&lt;li&gt;用fgets()代替gets()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特殊技巧及知识总结&#34;&gt;&lt;a href=&#34;#特殊技巧及知识总结&#34; class=&#34;headerlink&#34; title=&#34;特殊技巧及知识总结&#34;&gt;&lt;/a&gt;特殊技巧及知识总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字符串中可以使用\0OO(八进制)或\xHH(十六进制)来引用ASCII码中的符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ascii=\x35\n&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;ascii=5&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;if&amp;#x2F;else结构中尽量把TRUE概念较高的条件放到前面可以提高效率。&lt;/li&gt;
&lt;li&gt;尽量把最有可能FALSE的子表达式放在“&amp;amp;&amp;amp;”的左边，同理尽量把最有可能为TRUE的子表达式放在“||”的左边。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( p5 &amp;amp;&amp;amp; p95 )		&lt;span class=&#34;hljs-comment&#34;&gt;//第一个不满足就不满足&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( p95 || p5 )		&lt;span class=&#34;hljs-comment&#34;&gt;//第一个满足就满足&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;对于多维数组来说，”先行后列”的遍历效率会更高，但可能不明显。&lt;/li&gt;
&lt;li&gt;如果某常量与其他常量密切相关，在定义中应该明确表示出此关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; RAD=&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; DIAM=RAD*&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果输入参数传递的是一个ADT&amp;#x2F;UDT类型的参数（抽象数据类型&amp;#x2F;用户定义数据类型），宜采用 &lt;code&gt;const &amp;amp;&lt;/code&gt;的方式来传递以提高效率。而对于int等类型的基本类型的参数没有必要改成 &lt;code&gt;const &amp;amp;&lt;/code&gt;传递。指针传递，提高效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虽然类型名称和&lt;code&gt;*&lt;/code&gt;组合是一种指针类型，但是编译器是将&lt;code&gt;*&lt;/code&gt;于后面的变量结合的，列如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;* a,b,c;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译器的理解是  a是int*， b、c是int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//这也是为什么推荐将*粘着变量的原因&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; *a,b,c;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;多维数组中的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//以下四种表达是等价的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// i是指行，j是指列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// a[i][j]里面 *(a+i) 就等价于 a[i]&lt;/span&gt;&lt;br&gt;a[i][j]&lt;br&gt;*(a[i]+j)&lt;br&gt;(*(a+i))[j]&lt;br&gt;*(*(a+i)+j)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;字符数组&lt;/span&gt;是保存字符变量的数组，而&lt;span style=&#34;color:red&#34;&gt;字符串&lt;/span&gt;是以&lt;code&gt;\0&lt;/code&gt;结尾的字符数组。&lt;/li&gt;
&lt;li&gt;malloc&amp;#x2F;free和new&amp;#x2F;delete，这两者的区别主要有。new&amp;#x2F;delete是C++里的，更高级，更安全，返回的是有类型的指针，出错会抛出异常。&lt;/li&gt;
&lt;li&gt;中断内不能使用除法&lt;ul&gt;
&lt;li&gt;中断内有些指令需要较多的周期才能完成，它们是除法指令，双字传送指令LDRD&amp;#x2F;STRD以及多&lt;br&gt;重数据传送指令(LDM&amp;#x2F;STM)。对于前两者，CM3将为了保证中断及时响应而取消它们的执行。也就是中断内无法完成&lt;strong&gt;除法指令&lt;/strong&gt;！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试模式如果单步调试，会屏蔽各种中断，定时器，IWDG都无法进行，而且定时器仍然在计数但是不会响应中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码解析&#34;&gt;&lt;a href=&#34;#代码解析&#34; class=&#34;headerlink&#34; title=&#34;代码解析&#34;&gt;&lt;/a&gt;代码解析&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (tx_semaphore_get(tx_semaphore, convert_ms_to_ticks(timeout)))&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_SUCCESS:&lt;br&gt;        result = FFW_SUCCESS;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_NO_INSTANCE:&lt;br&gt;        result = FFW_TIMEOUT;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; TX_SEMAPHORE_ERROR:&lt;br&gt;        result = FFW_INVALID_ARGUMENT;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;:&lt;br&gt;        result = FFW_FAILURE;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// convert_ms_to_ticks 这样做会更加通用&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;BUG-翻车集锦&#34;&gt;&lt;a href=&#34;#BUG-翻车集锦&#34; class=&#34;headerlink&#34; title=&#34;BUG 翻车集锦&#34;&gt;&lt;/a&gt;BUG 翻车集锦&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TIM捕获触发DMA传输，但是在调试模式下DMA传出来的数据有问题。&lt;/p&gt;
&lt;p&gt;把DMA出来的的数据再复制一份，复制出来的数据是没有问题的。&lt;/p&gt;
&lt;p&gt;分析可能是，DEBUG下CPU停了，但是DMA总线还在跑，外设可能也是还在运行的，导致看起来DMA出来的数据有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADC矫正会发生ADC转换，如果有DMA配合使用，需要注意DMA需要在ADC矫正后使能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐式转换  小范围会转换成大范围  有一点特殊的是   unsigned int &amp;gt; int&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运算符优先级！位运算符优先级较低&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//编译报错&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)? data_temp |= &lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;:data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//规范写法&lt;/span&gt;&lt;br&gt;(DS18B20_DQ_IN!=&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)? (data_temp|=&lt;span class=&#34;hljs-number&#34;&gt;0x80&lt;/span&gt;):(data_temp&amp;amp;=&lt;span class=&#34;hljs-number&#34;&gt;0x7f&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;运算符优先级！！！极注意！！！  请小心有位运算时打上括号            &amp;lt;&amp;lt;  比  +-  要低&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;u16 temp;&lt;br&gt;u8 h,l;&lt;br&gt;temp = (u16)(h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;) + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 正确语法&lt;/span&gt;&lt;br&gt;temp = h&amp;lt;&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt; + l;&lt;span class=&#34;hljs-comment&#34;&gt;// 错误语法！！！！！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0b110&lt;/code&gt; 这种二进制写法似乎只有在GNU模式才被允许。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STM32的看门狗是使得RST引脚拉低，来复位的。所以要注意复位电容的选择，太大会导致软件无法复位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;代码段内 \ 换行后不能接 /* xxx */ 注释，注释需要些在 \ 的前面，如 /* xxx */ \ 这样才行&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;printf 内字符串问题&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; DC_LOG_ERROR    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\x11&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 没有逗号 这是正常想要表达的逻辑, 前面的DC_LOG_ERROR 和 &amp;quot;%s:%d check SID Stasrt&amp;quot; 合并成一个表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(DC_LOG_ERROR  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s:%d check SID Stasrt&amp;quot;&lt;/span&gt;,__func__, __LINE__);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 有逗号 只会识别前面一个字符串 后面的都没了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;printf&lt;/span&gt;(DC_LOG_ERROR, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s:%d check SID Stasrt&amp;quot;&lt;/span&gt;,__func__, __LINE__);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="embedded" />
        <category term="note" />
        <updated>2018-03-11T14:57:15.000Z</updated>
    </entry>
    <entry>
        <id>https://www.oikiou.top/2018/8d6db935/</id>
        <title>CC2530</title>
        <link rel="alternate" href="https://www.oikiou.top/2018/8d6db935/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;CC2530是针对IEEE 802.15.4，Zigbee和RF4CE应用的真正片上系统（SoC）解决方案。 它能够以非常低的总物料成本构建强大的网络节点。 CC2530将领先的射频收发器的卓越性能与业界标准增强型8051 MCU，系统内可编程闪存，8 KB RAM以及许多其他强大功能相结合。 CC2530有四种不同的闪存版本：分别为CC2530F32 &amp;#x2F; 64&amp;#x2F;128&amp;#x2F;256对应32&amp;#x2F;64&amp;#x2F;128&amp;#x2F;256 KB的闪存。 CC2530具有多种工作模式，非常适合需要超低功耗的系统。 运行模式之间的短暂转换时间进一步确保了低能耗。&lt;/p&gt;
&lt;p&gt;•CC2530是TI公司推出的用来实现嵌入式ZigBee应用的低功耗片上系统。&lt;/p&gt;
&lt;p&gt;•在单个芯片上整合了ZigBee 射频(RF)前端、内存和微控制器。&lt;/p&gt;
&lt;p&gt;•8 位MCU（增强型、标准8051指令集）。&lt;/p&gt;
&lt;p&gt;•256 KB Flash和8 KB 的RAM，内部16MHz RC 和 32kHz RC 振荡器。&lt;/p&gt;
&lt;p&gt;•8路12位ADC；18个中断源；4个Timer；硬件支持的AES128 ；WDT(1.9ms-1s)；32 kHz晶振的休眠模式定时器、POR(上电复位)、BOD(掉电检测)，以及21 个通用I&amp;#x2F;O 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;GPIO&#34;&gt;&lt;a href=&#34;#GPIO&#34; class=&#34;headerlink&#34; title=&#34;GPIO&#34;&gt;&lt;/a&gt;GPIO&lt;/h1&gt;&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/2018/8d6db935/20180211202707601.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;I &amp;#x2F; O端口具有以下主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;21个数字通用输入&amp;#x2F;输出引脚&lt;/li&gt;
&lt;li&gt;通用I &amp;#x2F; O或外设I &amp;#x2F; O&lt;/li&gt;
&lt;li&gt;输入上拉或下拉功能&lt;/li&gt;
&lt;li&gt;外部中断功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所有21个I &amp;#x2F; O引脚都具有外部中断功能。 因此，如果需要，外部设备可能会产生中断。 外部中断功能也可用于将器件从睡眠模式（电源模式PM1，PM2和PM3）中唤醒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通用IO：共21个，分成3组，&lt;strong&gt;P0组、P1组、P2组&lt;/strong&gt;，其中P0\P1组各8个IO，P2组5个（P2_0、P2_1、 P2_2、P2_3、 P2_4）。其中P1_0、P1_1有20mA的输出驱动能力，其余的只有4mA。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;寄存器&#34;&gt;&lt;a href=&#34;#寄存器&#34; class=&#34;headerlink&#34; title=&#34;寄存器&#34;&gt;&lt;/a&gt;寄存器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GPIO&lt;strong&gt;功能&lt;/strong&gt;选择寄存器——&lt;strong&gt;PxSEL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 寄存器PxSEL（其中x是端口号0-2）用于将端口中的每个引脚配置为&lt;strong&gt;通用I&amp;#x2F;O引脚&lt;/strong&gt;或&lt;strong&gt;外设I&amp;#x2F;O引脚&lt;/strong&gt;，可位寻址。 默认情况下，复位后，所有数字输入&amp;#x2F;输出引脚都配置为&lt;strong&gt;通用上拉输入引脚&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，P2SEL只有第0位至第2位是端口2的功能选择控制位，第3位至第6位是端口1的外设优先级控制位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0&amp;#x3D;通用&lt;/li&gt;
&lt;li&gt;1&amp;#x3D;外设I&amp;#x2F;O&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GPIO&lt;strong&gt;输入输出方向&lt;/strong&gt;选择寄存器——&lt;strong&gt;PxDIR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;寄存器PxDIR用于将每个端口的引脚方向设置为&lt;strong&gt;输入方向&lt;/strong&gt;或&lt;strong&gt;输出方向&lt;/strong&gt;。 因此，将PxDIR中的相应位设置为1，相应的引脚就变成输出方向，可位寻址。复位后为&lt;strong&gt;输入引脚&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，P2DIR只有第0位至第4位是端口2的方向选择控制位，第6位和第7位是端口0外设优先级控制位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;0&amp;#x3D;输入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1&amp;#x3D;输出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;GPIO&lt;strong&gt;输入模式&lt;/strong&gt;寄存器——&lt;strong&gt;PxINP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;寄存器PxINP用于设置IO端口的&lt;strong&gt;输入模式&lt;/strong&gt;，通用I &amp;#x2F; O端口引脚可配置为具有&lt;strong&gt;上拉&lt;/strong&gt;，&lt;strong&gt;下拉&lt;/strong&gt;或&lt;strong&gt;三态&lt;/strong&gt;操作模式。 默认情况下，复位后，输入配置为带有上拉的输入。如果要取消输入端口的上拉或下拉功能，必须将PxINP中的相应位设置为1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请注意，即使IO端口是外设功能输入，配置为外设I &amp;#x2F; O信号的引脚也不具有上拉或下拉功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，P2INP中，第0位至第4位是端口2的输入模式选择位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第5位至第7位是端口0、端口1、端口2的上下拉选择位。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0&amp;#x3D;PullUp&lt;/li&gt;
&lt;li&gt;1&amp;#x3D;PullDown&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0&amp;#x3D;上拉或下拉&lt;/li&gt;
&lt;li&gt;1&amp;#x3D;三态&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Z-Stack&#34;&gt;&lt;a href=&#34;#Z-Stack&#34; class=&#34;headerlink&#34; title=&#34;Z-Stack&#34;&gt;&lt;/a&gt;Z-Stack&lt;/h1&gt;&lt;h2 id=&#34;创建一个任务-Create-Task&#34;&gt;&lt;a href=&#34;#创建一个任务-Create-Task&#34; class=&#34;headerlink&#34; title=&#34;创建一个任务 Create Task&#34;&gt;&lt;/a&gt;创建一个任务 Create Task&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F; 任务列表&lt;br&gt;const pTaskEventHandlerFn tasksArr[] &amp;#x3D; {…..}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F; 初始化任务&lt;br&gt;void osalInitTasks( void )&lt;br&gt;{…..}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F; 任务处理函数&lt;br&gt;uint16 Hello_ProcessEvent(uint8 task_id, uint16 events)&lt;br&gt;{…}&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HAL库之LED&#34;&gt;&lt;a href=&#34;#HAL库之LED&#34; class=&#34;headerlink&#34; title=&#34;HAL库之LED&#34;&gt;&lt;/a&gt;HAL库之LED&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;uint8 HalLedSet (uint8 leds, uint8 mode)&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ModeName&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;HAL_LED_MODE_BLINK&lt;/td&gt;
&lt;td&gt;闪烁  (一次)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAL_LED_MODE_FLASH&lt;/td&gt;
&lt;td&gt;闪烁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAL_LED_MODE_ON&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAL_LED_MODE_OFF&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAL_LED_MODE_TOGGLE&lt;/td&gt;
&lt;td&gt;触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;定时器&#34;&gt;&lt;a href=&#34;#定时器&#34; class=&#34;headerlink&#34; title=&#34;定时器&#34;&gt;&lt;/a&gt;定时器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//为指定的任务设置定时器&lt;/span&gt;&lt;br&gt;&lt;br&gt;osal_start_timerEx(task_id, &lt;span class=&#34;hljs-number&#34;&gt;0x0001&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10000&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;PAN-ID&#34;&gt;&lt;a href=&#34;#PAN-ID&#34; class=&#34;headerlink&#34; title=&#34;PAN_ID&#34;&gt;&lt;/a&gt;PAN_ID&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全称 Personal Area Network (网络标识符)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相当于网络号，网段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools\f8Config.cfg	Line59&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Define the default PAN ID.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * Setting this to a value other than 0xFFFF causes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * ZDO_COORD to use this value as its PAN ID and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * Routers and end devices to join PAN with this ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;-DZDAPP_CONFIG_PAN_ID=&lt;span class=&#34;hljs-number&#34;&gt;0x0010&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h2 id=&#34;Z-Stack开发步骤&#34;&gt;&lt;a href=&#34;#Z-Stack开发步骤&#34; class=&#34;headerlink&#34; title=&#34;Z-Stack开发步骤&#34;&gt;&lt;/a&gt;Z-Stack开发步骤&lt;/h2&gt;&lt;h3 id=&#34;功能类型定义&#34;&gt;&lt;a href=&#34;#功能类型定义&#34; class=&#34;headerlink&#34; title=&#34;功能类型定义&#34;&gt;&lt;/a&gt;功能类型定义&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 功能类型值定义&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    DevTemp = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;    DevHumm,&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//略---------------------&lt;/span&gt;&lt;br&gt;    DevMaxNum&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;枚举功能类型值，需要时添加即可。&lt;/p&gt;
&lt;h3 id=&#34;定义节点功能列表&#34;&gt;&lt;a href=&#34;#定义节点功能列表&#34; class=&#34;headerlink&#34; title=&#34;定义节点功能列表&#34;&gt;&lt;/a&gt;定义节点功能列表&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/***************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 节点功能列表                                    */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/***************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ep_info_t&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;funcList&lt;/span&gt;[] =&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined(HAS_GAS)&lt;/span&gt;&lt;br&gt;    &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//stat,income,timeout,resource&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;, sensorGasTimeout, sensorGasResAvailable,&lt;br&gt;        &amp;#123; DevGas, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt; &amp;#125;,                   &lt;span class=&#34;hljs-comment&#34;&gt;// type, id, refresh cycle&lt;/span&gt;&lt;br&gt;    &amp;#125;,&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//略----------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined(ZDO_COORDINATOR)&lt;/span&gt;&lt;br&gt;    &amp;#123;   &lt;span class=&#34;hljs-comment&#34;&gt;// 协调器&lt;/span&gt;&lt;br&gt;        CoordinatorNwkStateChangeRoutine,&lt;br&gt;        CoordinatorIncomingRoutine,&lt;br&gt;        CoordinatorTimeoutRoutine,&lt;br&gt;        CoordinatorResAvailableRoutine,&lt;br&gt;        &amp;#123; DevCoordinator, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#125;,&lt;br&gt;    &amp;#125;,&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; defined(RTR_NWK)&lt;/span&gt;&lt;br&gt;    &amp;#123;   &lt;span class=&#34;hljs-comment&#34;&gt;// 路由器&lt;/span&gt;&lt;br&gt;        RouterNwkStateChangeRoutine,&lt;br&gt;        RouterIncomingRoutine,&lt;br&gt;        RouterTimeoutRoutine,&lt;br&gt;        RouterResAvailableRoutine,&lt;br&gt;        &amp;#123; DevRouter, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &amp;#125;,&lt;br&gt;    &amp;#125;,&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;功能列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参考下面的 &lt;strong&gt;ep_info_t&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 不能修改下面的内容!!!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;const&lt;/span&gt; uint8 funcCount = &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(funcList) / &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(funcList[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]);&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;功能数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ep-info-t&#34;&gt;&lt;a href=&#34;#ep-info-t&#34; class=&#34;headerlink&#34; title=&#34;ep_info_t&#34;&gt;&lt;/a&gt;ep_info_t&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ep_info_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 网络状态发生变化时会调用该函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*nwk_stat_change)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 接收到数据时会调用该函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*incoming_data)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 周期性调用的函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*time_out)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 系统资源可用时调用该函数,系统资源指的是:串口接收到数据/中断等等&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; (*res_available)(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, RES_TYPE type, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *res);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// &lt;span class=&#34;hljs-doctag&#34;&gt;NOTE:&lt;/span&gt; cycle成员会被用来计数,并周期性调用time_out函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;func_info_t&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;function&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//以下数据用户不能进行更改！！！！！&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 当前端点号&lt;/span&gt;&lt;br&gt;    uint8 ep;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 与此端点绑定的任务ID&lt;/span&gt;&lt;br&gt;    uint8 task_id;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 递减计数,为0时调用time_out函数,并重载初值=cycle&lt;/span&gt;&lt;br&gt;    uint8 timerTick;&lt;br&gt;    uint8 userTimer;&lt;br&gt;    endPointDesc_t SampleApp_epDesc;&lt;br&gt;    SimpleDescriptionFormat_t simpleDesc;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//一个典型的初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; defined(ZDO_COORDINATOR)&lt;/span&gt;&lt;br&gt;    &amp;#123;   &lt;span class=&#34;hljs-comment&#34;&gt;// 协调器&lt;/span&gt;&lt;br&gt;        CoordinatorNwkStateChangeRoutine,&lt;span class=&#34;hljs-comment&#34;&gt;//节点加入网络完成后调用&lt;/span&gt;&lt;br&gt;        CoordinatorIncomingRoutine,&lt;span class=&#34;hljs-comment&#34;&gt;//端点接收到数据后会调用&lt;/span&gt;&lt;br&gt;        CoordinatorTimeoutRoutine,&lt;span class=&#34;hljs-comment&#34;&gt;//周期调用&lt;/span&gt;&lt;br&gt;        CoordinatorResAvailableRoutine,&lt;span class=&#34;hljs-comment&#34;&gt;//系统初始化、串口收到数据、用户定时器到时 会调用&lt;/span&gt;&lt;br&gt;        &amp;#123; DevCoordinator, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#125;,&lt;span class=&#34;hljs-comment&#34;&gt;//功能类型、功能编号、刷新周期&lt;/span&gt;&lt;br&gt;    &amp;#125;,&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&#34;nwk-stat-change&#34;&gt;&lt;a href=&#34;#nwk-stat-change&#34; class=&#34;headerlink&#34; title=&#34;nwk_stat_change&#34;&gt;&lt;/a&gt;nwk_stat_change&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;节点加入网络完成后调用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用于读取当前  端点  信息&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;xxNwkStateChange&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep)&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sensorVoiceNwkStateChange&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    voiceEndPoint = ep;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&#34;incoming-data&#34;&gt;&lt;a href=&#34;#incoming-data&#34; class=&#34;headerlink&#34; title=&#34;incoming_data&#34;&gt;&lt;/a&gt;incoming_data&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;端点接收到数据后会调用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下发的指令的处理&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;xxReceiveData&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testReceiveData&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//msg-&amp;gt;Data[0] 是接受到的总  比特   数 &lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( (msg-&amp;gt;Data[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]==&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;L&amp;#x27;&lt;/span&gt;)&amp;amp;&amp;amp;(msg-&amp;gt;Data[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]==&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;E&amp;#x27;&lt;/span&gt;)&amp;amp;&amp;amp;(msg-&amp;gt;Data[&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]==&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;D&amp;#x27;&lt;/span&gt;) )&lt;br&gt;    &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;( msg-&amp;gt;Data[&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]==&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; )&lt;br&gt;		&amp;#123;&lt;br&gt;			HalUARTWrite(HAL_UART_PORT_0, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;LED_1\r\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;LED_1\r\n&amp;quot;&lt;/span&gt;) - &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;			&lt;span class=&#34;hljs-comment&#34;&gt;//HalLedBlink(HAL_LED_1, 2, 50, 100);&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;time-out&#34;&gt;&lt;a href=&#34;#time-out&#34; class=&#34;headerlink&#34; title=&#34;time_out&#34;&gt;&lt;/a&gt;time_out&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;周期调用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取传感器数据&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;xxTimeout&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sensorFireTimeout&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    uint8 value = FireInfo();&lt;br&gt;    SendData(ep-&amp;gt;ep, &amp;amp;value, &lt;span class=&#34;hljs-number&#34;&gt;0x0000&lt;/span&gt;, TRANSFER_ENDPOINT, &lt;span class=&#34;hljs-keyword&#34;&gt;sizeof&lt;/span&gt;(value));&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h4 id=&#34;res-available&#34;&gt;&lt;a href=&#34;#res-available&#34; class=&#34;headerlink&#34; title=&#34;res_available&#34;&gt;&lt;/a&gt;res_available&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;系统初始化、串口收到数据、用户定时器到时 会调用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化端口、&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;xxResAvailable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, RES_TYPE type, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *res)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sensorRainResAvailable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ep_info_t&lt;/span&gt; *ep, RES_TYPE type, &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; *res)&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(type == ResInit)&lt;br&gt;    &amp;#123;&lt;br&gt;        RainInit();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
















&lt;h1 id=&#34;IAR学习笔记&#34;&gt;&lt;a href=&#34;#IAR学习笔记&#34; class=&#34;headerlink&#34; title=&#34;IAR学习笔记&#34;&gt;&lt;/a&gt;IAR学习笔记&lt;/h1&gt;&lt;h2 id=&#34;无法观察局部变量&#34;&gt;&lt;a href=&#34;#无法观察局部变量&#34; class=&#34;headerlink&#34; title=&#34;无法观察局部变量&#34;&gt;&lt;/a&gt;无法观察局部变量&lt;/h2&gt;&lt;p&gt;在软件调试的时候发现Watch窗口中无法观察局部变量的值，总是显示&lt;unavailable&gt;&lt;br&gt;　　设置IAR中的”&lt;strong&gt;Options — c&amp;#x2F;c++ compiler — Optimization — Level&lt;/strong&gt;“ 选项：&lt;br&gt;　　Level的缺省值为Low，当我把Level选为None之后，即不执行任何优化时，全局变量、静态局部变量、局部变量的值都可以看到。&lt;/p&gt;
</content>
        <category term="embedded" />
        <category term="cc2530" />
        <category term="zigbee" />
        <updated>2018-02-11T12:27:07.000Z</updated>
    </entry>
</feed>
