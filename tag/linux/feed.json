{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"linux\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2023/6dfa9920/",
            "url": "https://www.oikiou.top/2023/6dfa9920/",
            "title": "OrangePi",
            "date_published": "2023-11-23T08:12:15.000Z",
            "content_html": "<h1 id=\"OrangePi-3B-系统安装\"><a href=\"#OrangePi-3B-系统安装\" class=\"headerlink\" title=\"OrangePi 3B 系统安装\"></a>OrangePi 3B 系统安装</h1><p>…</p>\n<p>系统镜像：</p>\n<p>EN: <a href=\"http://www.orangepi.org/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-3B.html\">http://www.orangepi.org/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-3B.html</a></p>\n<p>CN: <a href=\"http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-3B.html\">http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-3B.html</a></p>\n<h1 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h1><h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><table>\n<thead>\n<tr>\n<th>用户名</th>\n<th>密码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>root</td>\n<td>orangepi</td>\n</tr>\n<tr>\n<td>orangepi</td>\n<td>orangepi</td>\n</tr>\n</tbody></table>\n<h2 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h2><blockquote>\n<p>  <strong>选择 System -&gt; Hardware</strong></p>\n<p>  请注意，uart2_m0 默认是作为系统的调试串口，如果打开了 uart2 的配置，调试串口的功能会无法使用</p>\n<p>  i2c3_m0 和 uart3_m0 是引脚复用的，两者不能同时打开</p>\n<p>  <strong>配置完成需要重启生效</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo orangepi-config<br><br>reboot<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"WLAN\"><a href=\"#WLAN\" class=\"headerlink\" title=\"WLAN\"></a>WLAN</h3><blockquote>\n<p>  请不要通过修改&#x2F;etc&#x2F;network&#x2F;interfaces 配置文件的方式来连接 WIFI，通过这种方式连接 WIFI 网络使用会有问题。</p>\n</blockquote>\n<h4 id=\"命令行版\"><a href=\"#命令行版\" class=\"headerlink\" title=\"命令行版\"></a>命令行版</h4><ol>\n<li>首先使用<code>nmcli dev wifi</code>命令扫描周围的 WIFI 热点</li>\n<li>然后使用 nmcli 命令连接扫描到的 WIFI 热点 <code>nmcli dev wifi connect wifi_name password wifi_passwd</code><ol>\n<li><code>wifi_name</code> 需要换成想连接的 WIFI 热点的名字</li>\n<li><code>wifi_passwd</code> 需要换成想连接的 WIFI 热点的密码</li>\n</ol>\n</li>\n<li>通过 <code>ip addr show wlan0</code> 命令可以查看 wifi 的 IP 地址</li>\n</ol>\n<h4 id=\"UI版\"><a href=\"#UI版\" class=\"headerlink\" title=\"UI版\"></a>UI版</h4><ol>\n<li>在命令行中输入 <code>nmtui</code> 命令打开 wifi 连接的界面</li>\n</ol>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-30T02:23:15.000Z",
            "content_html": "<h1 id=\"LVGL\"><a href=\"#LVGL\" class=\"headerlink\" title=\"LVGL\"></a>LVGL</h1><p>Github：<a href=\"https://github.com/lvgl/lvgl/\">https://github.com/lvgl/lvgl/</a></p>\n<p>LVGL：<a href=\"https://lvgl.io/\">https://lvgl.io/</a></p>\n<p>LVGL（轻巧多功能图形库）是一个免费的开源图形库，提供创建具有易于使用的图形元素、精美的视觉效果和低内存占用的嵌入式 GUI 所需的一切。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>丰富且强大的模块化<a href=\"https://docs.lvgl.io/master/widgets/index.html\">图形组件</a>：按钮 (buttons)、图表 (charts)、列表 (lists)、滑动条 (sliders)、图片 (images) 等</li>\n<li>高级的图形引擎：动画、抗锯齿、透明度、平滑滚动、图层混合等效果</li>\n<li>支持多种<a href=\"https://docs.lvgl.io/master/overview/indev.html\">输入设备</a>：触摸屏、 键盘、编码器、按键等</li>\n<li>支持<a href=\"https://docs.lvgl.io/master/overview/display.html\">多显示设备</a></li>\n<li>不依赖特定的硬件平台，可以在任何显示屏上运行</li>\n<li>配置可裁剪（最低资源占用：64 kB Flash，16 kB RAM）</li>\n<li>基于UTF-8的多语种支持，例如中文、日文、韩文、阿拉伯文等</li>\n<li>可以通过<a href=\"https://docs.lvgl.io/master/overview/style.html\">类CSS</a>的方式来设计、布局图形界面（例如：<a href=\"https://docs.lvgl.io/master/layouts/flex.html\">Flexbox</a>、<a href=\"https://docs.lvgl.io/master/layouts/grid.html\">Grid</a>）</li>\n<li>支持操作系统、外置内存、以及硬件加速（LVGL已内建支持STM32 DMA2D、SWM341 DMA2D、NXP PXP和VGLite）</li>\n<li>即便仅有<a href=\"https://docs.lvgl.io/master/porting/display.html\">单缓冲区(frame buffer)</a>的情况下，也可保证渲染如丝般顺滑</li>\n<li>全部由C编写完成，并支持C++调用</li>\n<li>支持Micropython编程，参见：<a href=\"https://blog.lvgl.io/2019-02-20/micropython-bindings\">LVGL API in Micropython</a></li>\n<li>支持<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>仿真，可以无硬件依托进行开发</li>\n<li>丰富详实的<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>详尽的<a href=\"http://docs.lvgl.io/\">文档</a>以及API参考手册，可线上查阅或可下载为PDF格式</li>\n</ul>\n<h3 id=\"硬件要求\"><a href=\"#硬件要求\" class=\"headerlink\" title=\"硬件要求\"></a>硬件要求</h3><table>\n<thead>\n<tr>\n<th><strong>要求</strong></th>\n<th><strong>最低要求</strong></th>\n<th><strong>建议要求</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>架构</strong></td>\n<td>16、32、64位微控制器或微处理器</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>时钟</strong></td>\n<td>&gt; 16 MHz</td>\n<td>&gt; 48 MHz</td>\n</tr>\n<tr>\n<td><strong>Flash&#x2F;ROM</strong></td>\n<td>&gt; 64 kB</td>\n<td>&gt; 180 kB</td>\n</tr>\n<tr>\n<td><strong>Static RAM</strong></td>\n<td>&gt; 16 kB</td>\n<td>&gt; 48 kB</td>\n</tr>\n<tr>\n<td><strong>Draw buffer</strong></td>\n<td>&gt; 1 × <em>hor. res.</em> pixels</td>\n<td>&gt; 1&#x2F;10屏幕大小</td>\n</tr>\n<tr>\n<td><strong>编译器</strong></td>\n<td>C99或更新</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><em>注意：资源占用情况与具体硬件平台、编译器等因素有关，上表中仅给出参考值</em></p>\n<h1 id=\"如何入门\"><a href=\"#如何入门\" class=\"headerlink\" title=\"如何入门\"></a>如何入门</h1><p>请按照如下顺序来学习LVGL：</p>\n<ol>\n<li>使用<a href=\"https://lvgl.io/demos\">网页在线例程</a>来体验LVGL</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/intro/index.html\">简介</a>章节来初步了解LVGL</li>\n<li>再来阅读一下文档快速<a href=\"https://docs.lvgl.io/master/get-started/quick-overview.html\">快速概览</a>章节来了解LVGL的基本知识</li>\n<li>学习如何使用<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>来在电脑上仿真LVGL</li>\n<li>试着动手实践一些<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>参考<a href=\"https://docs.lvgl.io/master/porting/index.html\">移植指南</a>尝试将LVGL移植到一块开发板上，LVGL也已经提供了一些移植好的<a href=\"https://github.com/lvgl?q=lv_port_\">工程</a></li>\n<li>仔细阅读文档<a href=\"https://docs.lvgl.io/master/overview/index.html\">总览</a>章节来更加深入的了解和熟悉LVGL</li>\n<li>浏览文档<a href=\"https://docs.lvgl.io/master/widgets/index.html\">组件(Widgets)</a>章节来了解如何使用它们</li>\n<li>如果你有问题可以到LVGL<a href=\"http://forum.lvgl.io/\">论坛</a>提问</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/CONTRIBUTING.html\">如何向社区贡献</a>章节来看看你能帮LVGL社区做些什么，以促进LVGL软件质量的不断提高</li>\n</ol>\n<h1 id=\"模拟器入门\"><a href=\"#模拟器入门\" class=\"headerlink\" title=\"模拟器入门\"></a>模拟器入门</h1><p>您可以<strong>仅使用PC试用</strong>LVGL（即没有任何开发板）。LVGL将在PC上的模拟器环境中运行，任何人都可以编写和试验真正的LVGL应用程序。</p>\n<p>在PC上使用模拟器具有以下优点：</p>\n<ul>\n<li>硬件独立 - 编写代码，在PC上运行它，并在显示器上查看结果。</li>\n<li>跨平台 - 任何Windows，Linux或macOS系统都可以运行PC模拟器。</li>\n<li>可移植性 - 编写的代码是可移植的，这意味着您可以在迁移到嵌入式硬件时简单地复制它。</li>\n<li>易于验证 - 模拟器对于报告错误也非常有用，因为它为每个用户提供了一个通用平台。因此，最好在模拟器中重现错误并在<a href=\"https://forum.lvgl.io/\">论坛</a>中使用该代码片段。</li>\n</ul>\n<p><a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">PC 上的模拟器 — LVGL 文档</a></p>\n",
            "tags": [
                "linux",
                "cmake"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-29T13:57:15.000Z",
            "content_html": "<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>CMake是开源、跨平台的构建工具，可以让我们通过编写简单的配置文件去生成本地的Makefile，这个配置文件是<strong>独立于运行平台和编译器</strong>的，这样就不用亲自去编写Makefile了，而且配置文件可以直接拿到其它平台上使用，无需修改，非常方便。</p>\n<p><a href=\"https://blog.csdn.net/whahu1989/article/details/82078563\">Linux下CMake简明教程_linux中cmake_爱就是恒久忍耐的博客-CSDN博客</a></p>\n<h1 id=\"CMake-的安装\"><a href=\"#CMake-的安装\" class=\"headerlink\" title=\"CMake 的安装\"></a>CMake 的安装</h1><h2 id=\"Ubuntu下的安装\"><a href=\"#Ubuntu下的安装\" class=\"headerlink\" title=\"Ubuntu下的安装\"></a>Ubuntu下的安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install cmake</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cmake --version</span><br>cmake version 3.16.3<br>.....<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这样就安装好了</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CMake语法\"><a href=\"#CMake语法\" class=\"headerlink\" title=\"CMake语法\"></a>CMake语法</h1><h2 id=\"最简单的版本\"><a href=\"#最简单的版本\" class=\"headerlink\" title=\"最简单的版本\"></a>最简单的版本</h2><blockquote>\n<p>  环境：只有一个main.c的<code>hello world</code>文件，没有任何依赖。</p>\n</blockquote>\n<p>在<code>main.c</code>的同级目录下建立一个文件，文件名叫<code>CMakeFileLists.txt</code>，这个文件名不能变更，只能是这个形式。</p>\n<p>文件内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-comment\"># cmake的最低版本要求是2.8</span><br><span class=\"hljs-keyword\">cmake_minimum_required</span>(VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-comment\"># 工程名</span><br><span class=\"hljs-keyword\">project</span>(download)<br><br><span class=\"hljs-comment\"># 使用main.c这个源文件 生成elf文件 生成的文件名字叫main</span><br><span class=\"hljs-keyword\">add_executable</span>(main, main.c)<br></code></pre></td></tr></table></figure>\n\n<p>我们在当前目录（<code>main.c</code>和<code>CMakeFileLists.txt</code>的目录下）运行<code>cmake .</code>，含义就是在当前目录下执行cmake。执行成功后会生成<code>Makefils</code>以及一些cmake运行时自动生成的文件。</p>\n<p>这个时候我们使用命令<code>make</code>就可以看到正确编译了。</p>\n<h2 id=\"一个目录下的多个源文件\"><a href=\"#一个目录下的多个源文件\" class=\"headerlink\" title=\"一个目录下的多个源文件\"></a>一个目录下的多个源文件</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 当前目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span>(. SRC_LIST)<br><br><span class=\"hljs-comment\"># 在add_executable里调用SRC_LIST（注意调用变量时的写法）</span><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<p><code>aux_source_directory()</code>也存在弊端，它<strong>会把指定目录下的所有源文件都加进来</strong>，可能会加入一些我们不需要的文件，此时我们可以使用<strong>set命令</strong>去新建变量来存放需要的源文件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># set 命令设置变量存放源文件</span><br><span class=\"hljs-keyword\">set</span>( SRC_LIST<br>\t ./main.c<br>\t ./testFunc1.c<br>\t ./testFunc.c)<br><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不同目录下的多个源文件\"><a href=\"#不同目录下的多个源文件\" class=\"headerlink\" title=\"不同目录下的多个源文件\"></a>不同目录下的多个源文件</h2><blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 修改输出位置</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUT_PATH和PROJECT_SOURCE_DIR是CMake自带的预定义变量</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUTPUT_PATH ：目标二进制可执行文件的存放位置</span><br><span class=\"hljs-comment\"># PROJECT_SOURCE_DIR：工程的根目录</span><br><span class=\"hljs-keyword\">set</span> (EXECUTABLE_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class=\"hljs-comment\"># 当前src目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span> (src SRC_LIST)<br><br><span class=\"hljs-comment\"># 将include文件夹设定为头文件搜索路径</span><br><span class=\"hljs-comment\"># 该命令是用来向工程添加多个指定头文件的搜索路径，路径之间用空格分隔。</span><br><span class=\"hljs-keyword\">include_directories</span> (<span class=\"hljs-keyword\">include</span>)<br><br><span class=\"hljs-comment\"># 生成elf文件</span><br><span class=\"hljs-keyword\">add_executable</span> (main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"静态库和动态库的编译\"><a href=\"#静态库和动态库的编译\" class=\"headerlink\" title=\"静态库和动态库的编译\"></a>静态库和动态库的编译</h2><p>编译出动态库和静态库，然后等着让其它程序去使用。</p>\n<blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./lib<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">3.5</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-keyword\">set</span> (SRC_LIST <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/xxx.c)<br><br><span class=\"hljs-comment\"># 生成动态库或静态库</span><br><span class=\"hljs-comment\"># 第1个参数指定库的名字；</span><br><span class=\"hljs-comment\"># 第2个参数决定是动态还是静态，如果没有就默认静态；</span><br><span class=\"hljs-comment\"># 第3个参数指定生成库的源文件</span><br><span class=\"hljs-keyword\">add_library</span> (testFunc_shared SHARED <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><span class=\"hljs-keyword\">add_library</span> (testFunc_static STATIC <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><br><span class=\"hljs-comment\"># 设置最终生成的库的名称，还有其它功能，如设置库的版本号等等</span><br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_shared PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_static PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><br><span class=\"hljs-keyword\">set</span> (LIBRARY_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对库进行链接\"><a href=\"#对库进行链接\" class=\"headerlink\" title=\"对库进行链接\"></a>对库进行链接</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)<br><br><span class=\"hljs-keyword\">target_link_libraries</span> (main <span class=\"hljs-variable\">$&#123;TESTFUNC_LIB&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>find_library: 在指定目录下查找指定库，并把<strong>库的绝对路径</strong>存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是HINTS，第4个参数是路径，其它用法可以参考cmake文档</li>\n<li>target_link_libraries: 把目标文件与库文件进行链接</li>\n</ul>\n<p>ps：在lib目录下有testFunc的静态库和动态库，find_library(TESTFUNC_LIB testFunc …默认是查找动态库，如果想直接指定使用动态库还是静态库，可以写成find_library(TESTFUNC_LIB libtestFunc.so …或者find_library(TESTFUNC_LIB libtestFunc.a …</p>\n<p>ps： 查看elf文件使用了哪些库，可以使用readelf -d .&#x2F;xx来查看</p>\n<p>之前本节教程使用的是库查找方法是link_directories，但是很多读者反映运行时有问题，本人去官方文档上查了下，发现不建议使用了，推荐使用find_library或者find_package</p>\n<h2 id=\"添加编译选项\"><a href=\"#添加编译选项\" class=\"headerlink\" title=\"添加编译选项\"></a>添加编译选项</h2><p>有时编译程序时想添加一些编译选项，如-Wall，-std&#x3D;c++11等，就可以使用add_compile_options来进行操作。</p>\n<p><code>add_compile_options(-std=c++11 -Wall) </code></p>\n<h2 id=\"更加完善的目录结构及编译选项\"><a href=\"#更加完善的目录结构及编译选项\" class=\"headerlink\" title=\"更加完善的目录结构及编译选项\"></a>更加完善的目录结构及编译选项</h2><blockquote>\n<p>  文件结构</p>\n<p>  构建的时候我们需要先<code>cd build</code>，然后再<code>cmake ..</code>构建，最后<code>make -j8</code>编译即可。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">.<br>├── build<br>├── CMakeLists.txt<br>├── libzip<br>│   ├── ioapi.c<br>│   ├── ioapi.h<br>│   ├── unzip.c<br>│   └── unzip.h<br>├── main<br>│   └── curl_zip.c<br>├── tools<br>    └── log<br>        └── log.h<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cmake_minimum_required(VERSION 3.0)<br>project(curl_zip)<br><br>set(Target down)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置语言标准</span><br>set(CMAKE_C_STANDARD 11)<br>set(CMAKE_CXX_STANDARD 17)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为当前路径以及子目录的源文件加入由-D预编译定义</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_definitions(-DFOO -DDEBUG ...)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置C++编译参数(CMAKE_CXX_FLAGS是全局变量)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_FLAGS <span class=\"hljs-string\">&quot;-Wall std=c++11 -Wextra -fPIC -g&quot;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置指定的C++编译器版本是必须的，如果不设置，或者为OFF，则指定版本不可用时，会使用上一版本。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置编译器选项</span><br>add_compile_options(-O3 -Wall) <br><br><br>message(&quot;Target=&quot; $&#123;Target&#125;)<br>message(&quot;---------- Start building ----------&quot;)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置包含路径</span><br>include_directories(    $&#123;PROJECT_SOURCE_DIR&#125;/libzip<br>                        $&#123;PROJECT_SOURCE_DIR&#125;/tools/log<br>)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把xxx目录下所有源文件写入变量SRC_LIST</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/libzip           SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/src/curl         SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/main             SRC_LIST)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以SRC_LIST为源文件生成目标文件xxx</span><br><span class=\"hljs-meta prompt_\">add_executable($</span><span class=\"language-bash\">&#123;Target&#125; <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建库文件</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_library(&lt;name&gt; [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">目标文件链接的库</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">target_link_libraries() 总是指明 PRIVATE、PUBLIC 、INTERFACE</span><br>target_link_libraries( $&#123;Target&#125;<br>    pthread<br>    curl<br>    z<br>)<br><br>message(&quot;---------- Stop  building ----------&quot;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "linux",
                "cmake"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/47a3870e/",
            "url": "https://www.oikiou.top/2023/47a3870e/",
            "title": "Linux 应用编程",
            "date_published": "2023-03-26T08:26:15.000Z",
            "content_html": "<h1 id=\"Linux-Application-Programming\"><a href=\"#Linux-Application-Programming\" class=\"headerlink\" title=\"Linux Application Programming\"></a>Linux Application Programming</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&lt;stdio.h&gt;\"></a>&lt;stdio.h&gt;</h1><blockquote>\n<p>  英语：standard input&#x2F;output header，标准输入&#x2F;输出头文件）是C语言为输入输出提供的标准库头文件，其前身是迈克·莱斯克20世纪70年代编写的“可移植输入输出程序库”</p>\n</blockquote>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标识符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>size_t</code></td>\n<td align=\"left\">用于表示大小的数据类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FILE</code></td>\n<td align=\"left\">记录流的信息的数据结构</td>\n</tr>\n<tr>\n<td align=\"left\"><code>fpos_t</code></td>\n<td align=\"left\">用于在文件中定位的数据类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标识符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>NULL</code></td>\n<td align=\"left\">空指针</td>\n</tr>\n<tr>\n<td align=\"left\"><code>_IOFBF</code></td>\n<td align=\"left\">用于控制缓冲方式的参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>_IOLBF</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>_IONBF</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>BUFSIZ</code></td>\n<td align=\"left\"><code>setbuf</code>函数使用的缓冲区大小</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EOF</code></td>\n<td align=\"left\">文件结尾标志</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FOPEN_MAX</code></td>\n<td align=\"left\">实现保证能够同时打开的文件数量</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FILENAME_MAX</code></td>\n<td align=\"left\">实现保证支持的最长文件名的字符数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>L_tmpnam</code></td>\n<td align=\"left\">存放<code>tmpnam</code>函数生成的临时文件名的<code>char</code>数组的大小</td>\n</tr>\n<tr>\n<td align=\"left\"><code>SEEK_CUR</code></td>\n<td align=\"left\">用于控制文件定位方式的参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>SEEK_END</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>SEEK_SET</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>TMP_MAX</code></td>\n<td align=\"left\">实现保证能生成的临时文件名个数</td>\n</tr>\n</tbody></table>\n<h3 id=\"标准流\"><a href=\"#标准流\" class=\"headerlink\" title=\"标准流\"></a>标准流</h3><table>\n<thead>\n<tr>\n<th align=\"left\">标识符</th>\n<th align=\"left\">说明</th>\n<th>fd</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>stdin</code></td>\n<td align=\"left\">标准输入流</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\"><code>stdout</code></td>\n<td align=\"left\">标准输出流</td>\n<td>1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>stderr</code></td>\n<td align=\"left\">标准错误流</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">函数原型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">文件操作</td>\n<td align=\"left\"><code>int remove(const char *filename);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int rename(const char *old, const char *new);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>FILE *tmpfile(void);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>char *tmpnam(char *s);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fclose(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fflush(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>FILE *fopen(const char * restrict filename, const char * restrict mode);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>FILE *freopen(const char * restrict filename, const char * restrict mode, FILE * restrict stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>void setbuf(FILE * restrict stream, char * restrict buf);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size);</code></td>\n</tr>\n<tr>\n<td align=\"left\">格式化输入输出</td>\n<td align=\"left\"><code>int fprintf(FILE * restrict stream, const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fscanf(FILE * restrict stream, const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int printf(const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int scanf(const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int snprintf(char * restrict s, size_t n, const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int sprintf(char * restrict s, const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int sscanf(const char * restrict s, const char * restrict format, ...);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vfprintf(FILE * restrict stream, const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vfscanf(FILE * restrict stream, const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vprintf(const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vscanf(const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vsprintf(char * restrict s, const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int vsscanf(const char * restrict s, const char * restrict format, va_list arg);</code></td>\n</tr>\n<tr>\n<td align=\"left\">字符输入输出</td>\n<td align=\"left\"><code>int fgetc(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>char *fgets(char * restrict s, int n, FILE * restrict stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fputc(int c, FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fputs(const char * restrict s, FILE * restrict stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int getc(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int getchar(void);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int putc(int c, FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int putchar(int c);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int puts(const char *s);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int ungetc(int c, FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\">直接输入输出</td>\n<td align=\"left\"><code>size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\">文件内定位</td>\n<td align=\"left\"><code>int fgetpos(FILE * restrict stream, fpos_t * restrict pos);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fseek(FILE *stream, long int offset, int whence);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int fsetpos(FILE *stream, const fpos_t *pos);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>long int ftell(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>void rewind(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\">错误处理</td>\n<td align=\"left\"><code>void clearerr(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int feof(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>int ferror(FILE *stream);</code></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"><code>void perror(const char *s);</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h3><p>open()调用既能打开一个业已存在的文件，也能创建并打开一个新文件。</p>\n<p>若发生错误，则返回−1，并将 errno 置为相应的错误标志。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 使用这个函数需导入以下头文件</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span><br><br><br><span class=\"hljs-comment\">// 原型</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">pathname 要打开的文件由参数 pathname 来标识。如果 pathname 是一符号链接，会对其进行解引用。</span><br><span class=\"hljs-comment\">如果调用成功，open()将返回一文件描述符，用于在后续函数调用中指代该文件。若发生错误，则返回−1，并将 errno 置为相应的错误标志。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">flags 为位掩码，用于指定文件的访问模式。</span><br><span class=\"hljs-comment\">常用的有如下几个：</span><br><span class=\"hljs-comment\">O_RDONLY：只读方式打开文件。</span><br><span class=\"hljs-comment\">O_WRONLY：只写方式打开文件。</span><br><span class=\"hljs-comment\">O_RDWR：读写方式打开文件。</span><br><span class=\"hljs-comment\">O_CREAT：如果文件不存在，则创建文件。</span><br><span class=\"hljs-comment\">O_EXCL：与O_CREAT一起使用，如果文件已存在，则返回错误。</span><br><span class=\"hljs-comment\">O_TRUNC：如果文件已存在，将其截断为0字节。</span><br><span class=\"hljs-comment\">O_APPEND：在文件末尾追加写入。</span><br><span class=\"hljs-comment\">O_NONBLOCK：以非阻塞方式打开文件。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">mode 参数仅在创建新文件使用，当调用 open()创建新文件时 mode 指定了文件的访问权限。</span><br><span class=\"hljs-comment\">S_IRUSR：用户可读权限。</span><br><span class=\"hljs-comment\">S_IWUSR：用户可写权限。</span><br><span class=\"hljs-comment\">S_IXUSR：用户可执行权限。</span><br><span class=\"hljs-comment\">S_IRGRP：组可读权限。</span><br><span class=\"hljs-comment\">S_IWGRP：组可写权限。</span><br><span class=\"hljs-comment\">S_IXGRP：组可执行权限。</span><br><span class=\"hljs-comment\">S_IROTH：其他人可读权限。</span><br><span class=\"hljs-comment\">S_IWOTH：其他人可写权限。</span><br><span class=\"hljs-comment\">S_IXOTH：其他人可执行权限。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">return 调用所返回的文件描述符数值</span><br><span class=\"hljs-comment\">调用成功返回一个大于0的数字，这个数字是文件描述符。（后续对打开或创建的文件，进行读或写的操作时候都需要用到这个文件描述符）。调用失败返回-1。</span><br><span class=\"hljs-comment\">SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者（优先用数值较小的文件描述符）。</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">open</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *pathname, <span class=\"hljs-type\">int</span> flags)</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">open</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *pathname, <span class=\"hljs-type\">int</span> flags, <span class=\"hljs-type\">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<h3 id=\"open-函数\"><a href=\"#open-函数\" class=\"headerlink\" title=\"open 函数\"></a>open 函数</h3><blockquote>\n<p>  open() 是一个系统调用函数，用于在 Linux 系统中打开或者创建一个文件。</p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span>  <span class=\"hljs-comment\">// 使用这个函数需导入以下头文件</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">open</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *pathname, <span class=\"hljs-type\">int</span> flags)</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">open</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *pathname, <span class=\"hljs-type\">int</span> flags, <span class=\"hljs-type\">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fopen函数\"><a href=\"#fopen函数\" class=\"headerlink\" title=\"fopen函数\"></a>fopen函数</h3><blockquote>\n<p>  fopen() 函数是标准 C 库中用来打开文件的函数。</p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span> <span class=\"hljs-comment\">// 使用此函数需导入此头文件</span></span><br>FILE *<span class=\"hljs-title function_\">fopen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *filename, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *mode)</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"fclose\"><a href=\"#fclose\" class=\"headerlink\" title=\"fclose()\"></a>fclose()</h3><p>关闭流 stream。刷新所有的缓冲区（相当于做了fflush）。</p>\n<h4 id=\"fclose函数的作用\"><a href=\"#fclose函数的作用\" class=\"headerlink\" title=\"fclose函数的作用\"></a><strong>fclose函数的作用</strong></h4><ul>\n<li><p><strong>清空相关的缓冲区</strong></p>\n<p>以写文件为例,程序会先将文本信息存入缓冲区中,然后根据缓冲区刷新指令或者等缓冲区满了以后才向文件写入,那么我们如果不使用fclose()关闭流,就有可能有部分文本信息在缓冲区中没有写入到文本文件中,从而导致文本信息缺失.但是这东西看运气.</p>\n</li>\n<li><p><strong>释放内存</strong></p>\n<p>我们知道,如果我们不手动关闭这个流,系统会维持打开的状态,维持当然需要消耗一定的内存资源,本着苍蝇再小也是块肉的原则当然是要把它关掉了,其实如果有很多流在使用后没有关闭,这部分内存资源也是十分可观的.</p>\n</li>\n</ul>\n<h4 id=\"多次fclose-会发生什么\"><a href=\"#多次fclose-会发生什么\" class=\"headerlink\" title=\"多次fclose()会发生什么\"></a>多次fclose()会发生什么</h4><blockquote>\n<p>  <strong>能不能多次对同一个文件描述符调用fclose？</strong></p>\n<p>  <strong>答案是不行的</strong>。</p>\n<p>  为啥不行，我们需要看看fclose到底干了什么</p>\n<p>  fclose关闭的是一个文件流，当调用fclose时，将会使用户态（C库）缓冲区中的数据刷新到内核区域（或通过socket发送，或者仅仅写回硬盘）。<br>  于此同时，fclose会调用free来释放fp所指向的用户态buffer。</p>\n<p>  因此，如果多次调用fclose，会多次调用free来释放一块已经被释放的区域，而这个动作是危险的。<br>  很多解释是说，因为一旦被释放之后，这块区域就属于未知区域。有可能系统已经把该区域分给了其他进程，所以不能多次fclose。</p>\n<p>  但是我看过Linux关于close的内核源码，发现并不是这样，当第一次调用close时，将会把对应的文件描述符数组flip[fp] &#x3D; NULL。如果再调用close时，会在前面判断该项是否为null，如果为null，return -EINVAL;因此，多次调用fclose时会报错，但不会影响系统其他进程。</p>\n<p>  <a href=\"https://blog.csdn.net/zdavb/article/details/49069803\">来源CSDN</a></p>\n</blockquote>\n<blockquote>\n<p>  *<em>调用fclose之后，FILE <em>fp会变成NULL吗？</em></em></p>\n<p>  不会，没有什么机制把fp置空的动作，只是这个时候fp所指向的区域已经不再有效。</p>\n<p>  <a href=\"https://blog.csdn.net/zdavb/article/details/49069803\">来源CSDN</a></p>\n</blockquote>\n<h3 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush()\"></a>fflush()</h3><p>刷新流 stream 的输出缓冲区，将数据刷新到内核缓冲。</p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>C 库函数 <strong>int fflush(FILE *stream)</strong> 刷新流 stream 的输出缓冲区。</p>\n<h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><p>下面是 fflush() 函数的声明。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\"><span class=\"hljs-built_in\">int</span> fflush(<span class=\"hljs-keyword\">FILE</span> *stream)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个缓冲流。</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>如果成功，该函数返回零值。如果发生错误，则返回 EOF，且设置错误标识符（即 feof）。</p>\n<h3 id=\"fsync\"><a href=\"#fsync\" class=\"headerlink\" title=\"fsync()\"></a>fsync()</h3><p>fsync函数同步内存中所有已修改的文件数据到储存设备。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 头文件</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><br><span class=\"hljs-comment\">// 原型</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fsync</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> fd)</span>;<br><br><span class=\"hljs-comment\">// 参数</span><br>fd 是该进程打开来的文件描述符<br><br><span class=\"hljs-comment\">// 返回值</span><br>函数成功执行时，返回<span class=\"hljs-number\">0</span>。失败返回<span class=\"hljs-number\">-1</span>，errno被设为以下的某个值<br>EBADF：文件描述词无效<br>EIO：读写的过程中发生错误<br>EROFS, EINVAL：文件所在的文件系统不支持同步<br>调用 fsync 可以保证文件的修改时间也被更新。fsync 系统调用可以使您精确的强制每次写入都被更新到磁盘中。您也可以使用同步（synchronous）I/O 操作打开一个文件，这将引起所有写数据都立刻被提交到磁盘中。通过在 open 中指定 O_SYNC 标志启用同步I/O。<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"perror\"><a href=\"#perror\" class=\"headerlink\" title=\"perror()\"></a>perror()</h3><blockquote>\n<p>  errno是一个错误编号，本质上是一个整形的变量，每个错误对应着一个错误编号，当你调用”<strong>某些</strong>“函数出错时，这个函数会更新errno的值。</p>\n<p>  也就是说，并不是所有的函数都会将错误编号输出到errno变量中。</p>\n</blockquote>\n<p><strong>描述</strong></p>\n<p>C 库函数 <strong>void perror(const char *str)</strong> 把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 <strong>str</strong>，后跟一个冒号，然后是一个空格。</p>\n<p><strong>声明</strong></p>\n<p>下面是 perror() 函数的声明。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">void</span> perror(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">char</span> *<span class=\"hljs-built_in\">str</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>参数</strong></p>\n<ul>\n<li><strong>str</strong> – 这是 C 字符串，包含了一个自定义消息，将显示在原本的错误消息之前。</li>\n</ul>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"&lt;stdlib.h&gt;\"></a>&lt;stdlib.h&gt;</h1><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p><code>stdlib.h</code>中定义的常量:</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>NULL</code></td>\n<td>一般定义为<code>0</code>, 或<code>0L</code>, 或<code>(void*)0</code></td>\n<td>表示<a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%8C%87%E9%92%88\">空指针</a>常量的<a href=\"https://zh.wikipedia.org/wiki/%E5%B7%A8%E9%9B%86\">宏</a>; 换句话说，一个常量用来表示一个总是指向无效的内存地址的指针值。</td>\n</tr>\n<tr>\n<td><code>EXIT_FAILURE</code></td>\n<td>一个非<code>0</code>值</td>\n<td>用来指示程序失败的结束，一般用于<code>exit()</code>.</td>\n</tr>\n<tr>\n<td><code>EXIT_SUCCESS</code></td>\n<td><code>0</code></td>\n<td>用来指示程序成功的结束，一般用于<code>exit()</code>.</td>\n</tr>\n<tr>\n<td><code>RAND_MAX</code></td>\n<td><code>&gt;= 32767</code></td>\n<td>函数<code>rand()</code>所能返回的最大的值.</td>\n</tr>\n<tr>\n<td><code>MB_CUR_MAX</code></td>\n<td></td>\n<td>当前locale中多字节字符的最大字节数目</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><code>stdlib.h</code>中定义的<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">数据类型</a>：</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>size_t</code></td>\n<td>算子<code>sizeof</code>返回结果的数据类型，实际上是无符号整型.</td>\n</tr>\n<tr>\n<td><code>div_t</code> ， <code>ldiv_t</code>，<code>lldiv_t</code></td>\n<td>函数<code>div</code>, <code>ldiv</code>, <code>lldiv</code>的返回结果的数据类型，实际上是包含两个整数的结构类型.</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p><code>stdlib.h</code>中声明的库函数可分为六类：类型转换、伪随机数、动态内存分配与回收管理、进程控制、搜索及排序、简单数学。</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型转换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>atof</code></td>\n<td>把<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a>转换为双精度浮点数。相当于<code>strtod(s, (char**)NULL)</code>.</td>\n</tr>\n<tr>\n<td><code>atoi</code></td>\n<td>把字符串转换为整型. 相当于<code>(int)strtol(s, (char**)NULL, 10)</code>.</td>\n</tr>\n<tr>\n<td><code>atol</code></td>\n<td>把字符串转换为长整型. Equivalente a <code>strtol(s, (char**)NULL, 10)</code>.</td>\n</tr>\n<tr>\n<td><code>atoll</code></td>\n<td>把字符串转换为长长整型. Equivalente a <code>strtol(s, (char**)NULL, 10)</code>. 这是<a href=\"https://zh.wikipedia.org/wiki/C99\">C99</a>新增加的库函数。</td>\n</tr>\n<tr>\n<td><code>strtod</code></td>\n<td>把字符串转换为双精度浮点数，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtof</code></td>\n<td>把字符串转换为单精度浮点数，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtold</code></td>\n<td>把字符串转换为长双精度浮点数，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtol</code></td>\n<td>把字符串转换为长整型，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtoll</code></td>\n<td>把字符串转换为<code>long long int</code>，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtoul</code></td>\n<td>把字符串转换为无符号长整形，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td><code>strtoull</code></td>\n<td>把字符串转换为<code>unsigned long long int</code>，检查结果是否溢出，并返回字符串不能转换部分的地址.</td>\n</tr>\n<tr>\n<td>伪随机数序列生成</td>\n<td></td>\n</tr>\n<tr>\n<td><code>rand</code></td>\n<td>返回在0到RAND_MAX之间的伪随机数. 不接受参数作为随机数种子，因此产生的伪随机数列相同，有利于程序调试。</td>\n</tr>\n<tr>\n<td><code>srand</code></td>\n<td>初始化<code>rand()</code>接受无符号整型参数作为伪随机数种子.如果种子相同，伪随机数列也相同。</td>\n</tr>\n<tr>\n<td>内存的分配与释放</td>\n<td></td>\n</tr>\n<tr>\n<td><code>aligned_alloc</code></td>\n<td>边界对齐的动态内存分配.</td>\n</tr>\n<tr>\n<td><code>calloc</code></td>\n<td>数组的动态内存分配，且初始化为全零</td>\n</tr>\n<tr>\n<td><code>malloc</code></td>\n<td>动态内存分配，其内容不初始化</td>\n</tr>\n<tr>\n<td><code>realloc</code></td>\n<td>释放老的动态内存块，按照给出的尺寸分配新的动态内存块，老的内存块的内容尽量复制到新的内存块</td>\n</tr>\n<tr>\n<td><code>free</code></td>\n<td>系统释放动态分配的内存. 如果是空指针，则无动作发生；如果指针所指不是动态分配的内存块或者是已释放的内存块，则行为是未定义的。</td>\n</tr>\n<tr>\n<td>进程控制&#x2F;与运行环境的沟通</td>\n<td></td>\n</tr>\n<tr>\n<td><code>abort</code></td>\n<td>导致程序非正常的结束，各种流缓冲区与临时文件直接放弃。实际上抛出<code>raise(SIGABRT)</code>，缺省的信号处理行为是使用退出代码3执行终止（terminate）操作。如果<code>SIGABRT</code>被捕捉且信号处理程序不返回，则程序将不终止.</td>\n</tr>\n<tr>\n<td><code>atexit</code></td>\n<td>登记一个函数，当程序使用<code>exit</code>正常退出时被登记的函数自动被调用.</td>\n</tr>\n<tr>\n<td><code>exit</code></td>\n<td>程序正常终止。首先<code>atexit()</code>登记的函数按照登记的逆序被调用；如果多次调用<code>atexit</code>登记了多个函数，按照登记的逆序调用这些函数。如果一个函数被登记了多次，则程序正常退出时该函数也将被调用多次。然后所有缓冲区中的数据被写回(flushed)；所有打开着的流被关闭；<code>tmpfile</code>函数创建的文件被删除。最后，控制权返回给调用环境，返回数值表示程序返回时的状态，0表示<code>EXIT_SUCCESS</code>, 1表示<code>EXIT_FAILURE</code>.</td>\n</tr>\n<tr>\n<td><code>at_quick_exit</code></td>\n<td>登记一个函数，当程序使用<code>quick_exit</code>正常退出时被登记的函数自动被调用.</td>\n</tr>\n<tr>\n<td><code>_Exit</code></td>\n<td>程序正常终止, 但<code>atexit()</code>, <code>at_quick_exit()</code>, <code>signal()</code>登记的函数不被调用; 打开的流、文件是否被关闭，由编译器的实现者决定</td>\n</tr>\n<tr>\n<td><code>getenv</code></td>\n<td>获得某一个环境变量的字符串值，如果该环境变量不存在，返回<code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>quick_exit</code></td>\n<td>程序正常终止, 但<code>atexit()</code>, 登记的函数不被调用; <code>at_quick_exit()</code>登记的函数按登记顺序的逆序被调用。</td>\n</tr>\n<tr>\n<td><code>system</code></td>\n<td>把参数作为外部环境的命令执行。 如果参数为空，则判断外部环境是否有命令解释器。</td>\n</tr>\n<tr>\n<td>搜索与排序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>bsearch</code></td>\n<td>折半搜索.</td>\n</tr>\n<tr>\n<td><code>qsort</code></td>\n<td>快速排序.</td>\n</tr>\n<tr>\n<td>整数算术</td>\n<td></td>\n</tr>\n<tr>\n<td><code>abs, labs, llabs</code></td>\n<td>计算整数的绝对值.</td>\n</tr>\n<tr>\n<td><code>div, ldiv, lldiv</code></td>\n<td>计算整数除法的商与余数.</td>\n</tr>\n<tr>\n<td>多字节字符&#x2F;宽字符转换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>mblen</code></td>\n<td>计算多字节字符的长度并确定是否为有效字符 .</td>\n</tr>\n<tr>\n<td><code>mbtowc</code></td>\n<td>多字节字符转换为宽字符.</td>\n</tr>\n<tr>\n<td><code>wctomb</code></td>\n<td>宽字符转换为多字节字符.</td>\n</tr>\n<tr>\n<td>多字节字符串&#x2F;宽字符串转换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>mbstowcs</code></td>\n<td>多字节字符串转换为宽字符串.</td>\n</tr>\n<tr>\n<td><code>wcstombs</code></td>\n<td>宽字符串转换为多字节字符串.</td>\n</tr>\n</tbody></table>\n<h3 id=\"atof-str-转-double\"><a href=\"#atof-str-转-double\" class=\"headerlink\" title=\"atof() str 转 double\"></a>atof() str 转 double</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">atof</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *nptr)</span>;<br></code></pre></td></tr></table></figure>\n\n<p><strong>函数说明</strong></p>\n<p>atof()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\\0’)才结束转换，并将结果返回。参数nptr字符串可包含正负号、小数点或E(e)来表示指数部分，如123.456或123e-2。</p>\n<p><strong>相关函数</strong></p>\n<ul>\n<li><code>strtod(nptr,(char**)NULL)</code></li>\n<li><code>gcvt</code> 浮点型数转换为字符串，取四舍五入</li>\n</ul>\n<h3 id=\"atoi-str-转-int\"><a href=\"#atoi-str-转-int\" class=\"headerlink\" title=\"atoi() str 转 int\"></a>atoi() str 转 int</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">atoi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str)</span><br></code></pre></td></tr></table></figure>\n\n<p>将字符串参数<strong>str</strong>转换为整数（int 类型）。</p>\n<p>在字符串的开头，atoi() 方法忽略所有空格，转换紧跟在空格之后的单词，然后在遇到第一个非数字单词时停止。atoi() 模块实现了字符串的整数描述。</p>\n<h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>str</strong> – 这是整数的字符串表示形式。</li>\n</ul>\n<h4 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>此函数将转换后的整数作为 int 值返回。如果无法执行有效的转换，则返回零。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">val = atoi(<span class=\"hljs-string\">&quot;123456&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>atoi</strong> 输入参数少，使用简单，在一些明确知道数值范围的情况下使用比较合适，转换范围相较于strtol（64位环境下）比较小，而且也不知道返回值为0时是转换失败还是转换成功。</p>\n<p><strong>strtol</strong> 输入参数相对较多，用法也更灵活支持转换成不同进制，能够明确的知道输入数据转换出错的位置和错误原因，相比较与atoi，对于0这种特殊的字符串，能更清楚的知道是转换成功的得到的还是转换失败得到的。</p>\n<p>综上，strtol使用更灵活，功能更强大，且可以判断转换结果的正确性，建议字符串转换为整型时使用strtol</p>\n</blockquote>\n<h3 id=\"atol-str-转-long-int\"><a href=\"#atol-str-转-long-int\" class=\"headerlink\" title=\"atol() str 转 long int\"></a>atol() str 转 long int</h3><h3 id=\"gcvt-double-转-str\"><a href=\"#gcvt-double-转-str\" class=\"headerlink\" title=\"gcvt() double 转 str\"></a>gcvt() double 转 str</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">gcvt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> number，<span class=\"hljs-type\">size_t</span> ndigits，<span class=\"hljs-type\">char</span> *buf)</span>;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">函数说明</span><br><span class=\"hljs-comment\">gcvt()用来将参数number转换成ASCII码字符串，参数ndigits表示显示的位数。gcvt()与ecvt()和fcvt()不同的地方在于，gcvt()所转换后的字符串包含小数点或正负符号。若转换成功，转换后的字符串会放在参数buf指针所指的空间。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">返回值</span><br><span class=\"hljs-comment\">返回一字符串指针，此地址即为buf指针。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"strtod-str-转-double\"><a href=\"#strtod-str-转-double\" class=\"headerlink\" title=\"strtod() str 转 double\"></a>strtod() str 转 double</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">strtod</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *nptr,<span class=\"hljs-type\">char</span> **endptr)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"strtol-str-转long-int-不同进制\"><a href=\"#strtol-str-转long-int-不同进制\" class=\"headerlink\" title=\"strtol() str 转long int 不同进制\"></a>strtol() str 转long int 不同进制</h3><p>C 库函数 <code>strtol()</code> 把参数 <strong>str</strong> 所指向的字符串根据给定的 <strong>base</strong> 转换为一个长整数（类型为 long int 型），base 必须介于 2 和 36（包含）之间，或者是特殊值 0。</p>\n<p>strtol() 方法将具有字符串数据类型的值转换为长整数。strtol() 方法跳过字符串开头的所有空白字符，将连续的字符转换为部分的一部分，然后在到达第一个非数字字符时终止。</p>\n<p><strong>strtol() 函数对异常的返回可以设置errno，从而可以发现异常的返回。</strong></p>\n<h4 id=\"声明-1\"><a href=\"#声明-1\" class=\"headerlink\" title=\"声明\"></a>声明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">strtol</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">char</span> **endptr, <span class=\"hljs-type\">int</span> base)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>str</strong> – 要转换为长整数的字符串。</li>\n<li><strong>endptr</strong> – 对类型为 char* 的对象的引用，其值由函数设置为 <strong>str</strong> 中数值后的下一个字符。</li>\n<li><strong>base</strong> – 基数，必须介于 2 和 36（包含）之间，或者是特殊值 0。</li>\n</ul>\n<h4 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>该函数返回转换后的长整数，如果没有执行有效的转换，则返回一个零值。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>下面的实例演示了 strtol() 函数的用法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;errno.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">30</span>] = <span class=\"hljs-string\">&quot;2030300 This is test&quot;</span>;<br>\t<span class=\"hljs-type\">char</span> *ptr;<br>\t<span class=\"hljs-type\">long</span> ret;<br><br>    errno = <span class=\"hljs-number\">0</span>;<br>\tret = strtol(str, &amp;ptr, <span class=\"hljs-number\">10</span>);<br>    <span class=\"hljs-comment\">/* Check for various possible errors */</span>  <br>   <span class=\"hljs-keyword\">if</span> ((errno == ERANGE &amp;&amp; (ret == LONG_MAX || ret == LONG_MIN)) || (errno != <span class=\"hljs-number\">0</span> &amp;&amp; ret == <span class=\"hljs-number\">0</span>)) &#123;  <br>       perror(<span class=\"hljs-string\">&quot;strtol&quot;</span>);  <br>       <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);  <br>   &#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;数字（无符号长整数）是 %ld\\n&quot;</span>, ret);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;字符串部分是 |%s|&quot;</span>, ptr);<br><br>   <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出：</span><br><span class=\"hljs-comment\">数字（无符号长整数）是 2030300</span><br><span class=\"hljs-comment\">字符串部分是 | This is test|</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"strtoul-str-转-unsigned-long-int\"><a href=\"#strtoul-str-转-unsigned-long-int\" class=\"headerlink\" title=\"strtoul() str 转 unsigned long int\"></a>strtoul() str 转 unsigned long int</h3><h3 id=\"toascii-int-转-ascii\"><a href=\"#toascii-int-转-ascii\" class=\"headerlink\" title=\"toascii() int 转 ascii\"></a>toascii() int 转 ascii</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">toascii</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> c)</span><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">函数说明</span><br><span class=\"hljs-comment\">toascii()会将参数c转换成7位的unsigned char值，第八位则会被清除，此字符即会被转成ASCII码字符。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">返回值</span><br><span class=\"hljs-comment\">将转换成功的ASCII码字符值返回。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"tolower-大写-转-小写\"><a href=\"#tolower-大写-转-小写\" class=\"headerlink\" title=\"tolower() 大写 转 小写\"></a>tolower() 大写 转 小写</h3><h3 id=\"toupper-小写-转-大写\"><a href=\"#toupper-小写-转-大写\" class=\"headerlink\" title=\"toupper() 小写 转 大写\"></a>toupper() 小写 转 大写</h3><h3 id=\"strtok-用分隔符分解字符串\"><a href=\"#strtok-用分隔符分解字符串\" class=\"headerlink\" title=\"strtok() 用分隔符分解字符串\"></a>strtok() 用分隔符分解字符串</h3><h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>C 库函数 <code>strtok()</code> 分解字符串 <strong>str</strong> 为一组字符串，<strong>delim</strong> 为分隔符。</p>\n<h4 id=\"声明-2\"><a href=\"#声明-2\" class=\"headerlink\" title=\"声明\"></a>声明</h4><p>下面是 strtok() 函数的声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">strtok</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *delim)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>str</strong> – 要被分解成一组小字符串的字符串。输入NULL则是从上次结束的位置继续查找。</li>\n<li><strong>delim</strong> – 包含分隔符的 C 字符串。</li>\n</ul>\n<h4 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>该函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。</p>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> str[] = <span class=\"hljs-string\">&quot;8.8.8.8&quot;</span><br><span class=\"hljs-type\">char</span> s[] = <span class=\"hljs-string\">&quot;.&quot;</span> <br><span class=\"hljs-type\">char</span> *token;<br>token = strtok(str, s);<br><span class=\"hljs-keyword\">while</span> (token != <span class=\"hljs-literal\">NULL</span>)<br>&#123;<br>    token = strtok(<span class=\"hljs-literal\">NULL</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>让我们编译并运行上面的程序，这将产生以下结果：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">This is <br> www<span class=\"hljs-selector-class\">.runoob</span><span class=\"hljs-selector-class\">.com</span> <br> website<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"&lt;netinet&#x2F;in.h&gt;\"></a>&lt;netinet&#x2F;in.h&gt;</h1><blockquote>\n<p>  <strong>网络中的数据传输是按 大端 数据格式来传输的。</strong></p>\n<p>  所以在一些设备上需要进行大小端转换，也就是所谓的<strong>网络字节序转换</strong>。</p>\n</blockquote>\n<h3 id=\"htonl-htons-ntohl-ntohs\"><a href=\"#htonl-htons-ntohl-ntohs\" class=\"headerlink\" title=\"htonl() htons() ntohl() ntohs()\"></a>htonl() htons() ntohl() ntohs()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// host to network long</span><br><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title function_\">htonl</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> hostlong)</span>;<br><span class=\"hljs-comment\">// host to network short</span><br><span class=\"hljs-type\">uint16_t</span> <span class=\"hljs-title function_\">htons</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint16_t</span> hostshort)</span>;<br><br><span class=\"hljs-comment\">// network to host long</span><br><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title function_\">ntohl</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> netlong)</span>;<br><span class=\"hljs-comment\">// network to host short</span><br><span class=\"hljs-type\">uint16_t</span> <span class=\"hljs-title function_\">ntohs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint16_t</span> netshort)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"INET-ADDRSTRLEN-IPv4-str-len\"><a href=\"#INET-ADDRSTRLEN-IPv4-str-len\" class=\"headerlink\" title=\"INET_ADDRSTRLEN IPv4 str len\"></a>INET_ADDRSTRLEN IPv4 str len</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 预定义的字符串长度</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INET_ADDRSTRLEN 16</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INET6_ADDRSTRLEN 46</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"&lt;arpa&#x2F;inet.h&gt;\"></a>&lt;arpa&#x2F;inet.h&gt;</h1><h3 id=\"inet-addr-str-转-in-addr\"><a href=\"#inet-addr-str-转-in-addr\" class=\"headerlink\" title=\"inet_addr() str 转 in_addr\"></a>inet_addr() str 转 in_addr</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">in_addr_t</span> <span class=\"hljs-title function_\">inet_addr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果参数char *cp无效，函数返回-1(INADDR_NONE),</p>\n<p>  这个函数在处理地址为255.255.255.255时也返回－1,</p>\n<p>  255.255.255.255是一个有效的地址，不过inet_addr无法处理;</p>\n</blockquote>\n<p><strong>建议使用 <code>inet_pton()</code> 替代此函数</strong></p>\n<h3 id=\"inet-aton-str-转-in-addr\"><a href=\"#inet-aton-str-转-in-addr\" class=\"headerlink\" title=\"inet_aton() str 转 in_addr\"></a>inet_aton() str 转 in_addr</h3><p><code>inet_ntoa</code>是一个用于将IPv4地址的二进制值转换为点分十进制格式的函数。它的函数原型如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">inet_aton</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *cp, <span class=\"hljs-keyword\">struct</span> in_addr *inp)</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  其中，<code>cp</code>是一个指向以点分十进制格式表示的IPv4地址的字符串，<code>inp</code>是一个指向<code>in_addr</code>结构体的指针，该结构体包含了转换后的二进制值。</p>\n<p>  如果转换成功，<code>inet_aton</code>返回非0值，否则返回0值。需要注意的是，如果提供的字符串地址不合法，那么<code>inet_aton</code>返回0值，而不会设置<code>errno</code>。</p>\n</blockquote>\n<p><strong><code>inet_aton</code>已经被弃用，推荐使用<code>inet_pton</code>函数代替。</strong></p>\n<h3 id=\"inet-ntoa-in-addr-转-str\"><a href=\"#inet-ntoa-in-addr-转-str\" class=\"headerlink\" title=\"inet_ntoa() in_addr 转 str\"></a>inet_ntoa() in_addr 转 str</h3><p><code>inet_ntoa</code>是一个用于将IPv4地址的二进制值转换为点分十进制格式的函数。它的函数原型如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">inet_ntoa</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> in_addr)</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  其中，<code>in</code>是一个指向<code>in_addr</code>结构体的指针，该结构体包含了IPv4地址的二进制值。</p>\n<p>  <code>inet_ntoa</code>返回一个指向以点分十进制格式表示的IPv4地址的字符串，如果转换失败，则返回<code>NULL</code>。</p>\n</blockquote>\n<p><strong><code>inet_ntoa</code>已经被弃用，推荐使用<code>inet_ntop</code>函数代替。</strong></p>\n<h3 id=\"inet-pton-str-转-in-addr\"><a href=\"#inet-pton-str-转-in-addr\" class=\"headerlink\" title=\"inet_pton() str 转 in_addr\"></a>inet_pton() str 转 in_addr</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">inet_pton</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> af, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *<span class=\"hljs-keyword\">restrict</span> src , <span class=\"hljs-type\">void</span> *<span class=\"hljs-keyword\">restrict</span> dst )</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  函数中的p和n分别代表<strong>表达式(presentation)<strong>和</strong>数值(numeric)</strong></p>\n<p>  这里的表达式一般是指字符串，数值对于IPv4就是uint32</p>\n</blockquote>\n<p><code>inet_pton()</code> 转换网络主机地址表达式(presentation)为二进制数值(numeric)，支持IPv4 to IPv6，线程安全，可重入。</p>\n<h4 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><code>af</code> – 仅支持<code>AF_INET</code>或<code>AF_INET6</code>，IPv4 IPv6</li>\n<li><code>src</code> – 表达式(presentation)字符串</li>\n<li><code>dst</code> – 数值(numeric)指针</li>\n</ul>\n<h4 id=\"返回值-4\"><a href=\"#返回值-4\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>inet_pton () <strong>成功返回1</strong>（网络地址转换成功）。如果src不包含表示指定地址族中有效网络地址的字符串，<strong>则返回 0</strong> 。如果af不包含有效地址族，<strong>则返回 -1</strong> 并将errno设置为EAFNOSUPPORT。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> addr_str[] = <span class=\"hljs-string\">&quot;8.8.8.8&quot;</span>;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">in_addr</span> <span class=\"hljs-title\">addr</span>;</span> <br><br><span class=\"hljs-keyword\">if</span>((res = inet_pton(AF_INET, addr_str, &amp;addr)) &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-comment\">// inet_pton error</span><br>    <span class=\"hljs-keyword\">if</span>(res == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// Invalid expression</span><br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (res &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>        <span class=\"hljs-comment\">// error</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// success</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"inet-ntop-in-addr-转-str\"><a href=\"#inet-ntop-in-addr-转-str\" class=\"headerlink\" title=\"inet_ntop() in_addr 转 str\"></a>inet_ntop() in_addr 转 str</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">inet_ntop</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> af, </span><br><span class=\"hljs-params\">                      <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *<span class=\"hljs-keyword\">restrict</span> src, </span><br><span class=\"hljs-params\">                      <span class=\"hljs-type\">char</span> *<span class=\"hljs-keyword\">restrict</span> dst, </span><br><span class=\"hljs-params\">                      <span class=\"hljs-type\">socklen_t</span> size)</span>;<br></code></pre></td></tr></table></figure>\n\n<p><code>inet_ntop()</code> 函数转换二进制数值(numeric)为网络主机地址表达式(presentation)，支持IPv4 to IPv6，线程安全，可重入。</p>\n<h4 id=\"参数-5\"><a href=\"#参数-5\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><code>af</code> – 仅支持<code>AF_INET</code>或<code>AF_INET6</code>，IPv4 or IPv6</li>\n<li><code>src</code> – 数值(numeric)指针</li>\n<li><code>dst</code> – 表达式(presentation)字符串</li>\n<li><code>size</code> – 此缓冲区可用字节数</li>\n</ul>\n<h4 id=\"返回值-5\"><a href=\"#返回值-5\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>成功时，inet_ntop() 返回一个指向 <code>dst</code> 的<strong>非空指针</strong>。如果有错误则返回<code>NULL</code>，errno设置为指示错误。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span> addr_str[<span class=\"hljs-number\">16</span>];<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">in_addr</span> <span class=\"hljs-title\">addr</span>;</span> <br><br><span class=\"hljs-keyword\">if</span>( inet_ntop(AF_INET, &amp;addr, addr_str, <span class=\"hljs-keyword\">sizeof</span>(addr_str)) == <span class=\"hljs-literal\">NULL</span> ) &#123;<br>    <span class=\"hljs-comment\">// inet_ntop error</span><br>&#125;<br><span class=\"hljs-comment\">// success</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// man 手册</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> &#123;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> buf[<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> in6_addr)];<br>    <span class=\"hljs-type\">int</span> domain, s;<br>    <span class=\"hljs-type\">char</span> str[INET6_ADDRSTRLEN];<br><br>    <span class=\"hljs-keyword\">if</span> (argc != <span class=\"hljs-number\">3</span>) &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Usage: %s &#123;i4|i6|&lt;num&gt;&#125; string\\n&quot;</span>, argv[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    domain = (<span class=\"hljs-built_in\">strcmp</span>(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">&quot;i4&quot;</span>) == <span class=\"hljs-number\">0</span>) ? AF_INET : (<span class=\"hljs-built_in\">strcmp</span>(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">&quot;i6&quot;</span>) == <span class=\"hljs-number\">0</span>) ? AF_INET6 : atoi(argv[<span class=\"hljs-number\">1</span>]);<br><br>    s = inet_pton(domain, argv[<span class=\"hljs-number\">2</span>], buf);<br>    <span class=\"hljs-keyword\">if</span> (s &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Not in presentation format&quot;</span>);<br>        <span class=\"hljs-keyword\">else</span><br>            perror(<span class=\"hljs-string\">&quot;inet_pton&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (inet_ntop(domain, buf, str, INET6_ADDRSTRLEN) == <span class=\"hljs-literal\">NULL</span>) &#123;<br>        perror(<span class=\"hljs-string\">&quot;inet_ntop&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, str);<br><br>    <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h1><blockquote>\n<p>socket 是一种 IPC 方法，它允许位于同一主机（计算机）或使用网络连接起来的不同主机上的应用程序之间交换数据。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>使用 socket()系统调用能够创建一个 socket，<strong>它返回一个用来在后续系统调用中引用该 socket 的文件描述符</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">socket</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> __domain, <span class=\"hljs-type\">int</span> __type, <span class=\"hljs-type\">int</span> __protocol)</span>;<br><br><span class=\"hljs-comment\">// 在绝大部分情况下 protocol=0</span><br>fd = socket(domain, type, protocol)<br></code></pre></td></tr></table></figure>\n\n<p><strong>socket domain</strong><br>socket 存在于一个通信 domain 中，它确定：</p>\n<ul>\n<li>识别出一个 socket 的方法（即 socket“地址”的格式）；</li>\n<li>通信范围（即是在位于同一主机上的应用程序之间还是在位于使用一个网络连接起来的不同主机上的应用程序之间）。</li>\n</ul>\n<p>现代操作系统至少支持下列 domain</p>\n<ul>\n<li>UNIX (AF_UNIX) domain 允许在同一主机上的应用程序之间进行通信。</li>\n<li>IPv4 (AF_INET) domain 允许在使用因特网协议第 4 版（IPv4）网络连接起来的主机上的应用程序之间进行通信。</li>\n<li>IPv6 (AF_INET6) domain 允许在使用因特网协议第 6 版（IPv6）网络连接起来的主机上的应用程序之间进行通信。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Domain</th>\n<th>执行的通信</th>\n<th>应用程序间的通信</th>\n<th>地址格式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AF_UNIX</td>\n<td>内核中</td>\n<td>同一主机</td>\n<td>路径名</td>\n<td></td>\n</tr>\n<tr>\n<td>AF_INET</td>\n<td>通过 IPv4</td>\n<td>通过 IPv4 网络连接起来的主机</td>\n<td>32 位 IPv4 地址+16 位端口号</td>\n<td></td>\n</tr>\n<tr>\n<td>AF_INET6</td>\n<td>通过 IPv6</td>\n<td>通过 IPv6 网络连接起来的主机</td>\n<td>128 位 IPv6 地址+16 位端口号</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>socket type</strong><br>每个 socket 实现都至少提供了两种 socket：STREAM (流)和 DGRAM (数据报)。这两种 socket 类型在 UNIX 和 Internet domain 中都得到了支持。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>socket 类型</th>\n<th>socket 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>STREAM</td>\n<td>DGRAM</td>\n</tr>\n<tr>\n<td>可靠地递送？</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>面向连接？</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>消息边界保留？</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>SOCK_STREAM</strong> (流)</p>\n<blockquote>\n<p>  流 socket（SOCK_STREAM）提供了一个可靠的双向的字节流通信信道。</p>\n<ul>\n<li>可靠的：表示可以保证发送者传输的数据会完整无缺地到达接收应用程序（假设网络链接和接收者都不会崩溃）或收到一个传输失败的通知。</li>\n<li>双向的：表示数据可以在两个 socket 之间的任意方向上传输。</li>\n<li>字节流：表示与管道一样不存在消息边界的概念（参见 44.1 节）。</li>\n</ul>\n<p>  一个流 socket 类似于使用一对允许在两个应用程序之间进行双向通信的管道，它们之间<br>  的差别在于（Internet domain）socket 允许在网络上进行通信。</p>\n<p>  流 socket 的正常工作需要一对相互连接的 socket，因此流 socket 通常被称为面向连接的。</p>\n</blockquote>\n</li>\n<li><p><strong>SOCK_DGRAM</strong> (数据报)</p>\n<blockquote>\n<p>  允许数据以被称为数据报的消息的形式进行交换。在数据报 socket 中，消息边界得到了保留，但<strong>数据传输是不可靠的</strong>。<strong>消息的到达可能是无序的、重复的或者根本就无法到达</strong>。</p>\n<p>  数据报 socket 是更一般的<strong>无连接 socket 概念的一个示例</strong>。与流 socket 不同，一个数据报socket 在使用时无需与另一个 socket 连接。（在 56.6.2 节中将会看到数据报 socket 可以与另一个 socket 连接，但其语义与连接的流 socket 是不同的。）</p>\n</blockquote>\n</li>\n</ol>\n<p>在 Internet domain 中，<u>数据报 socket 使用了用户数据报协议（UDP）</u>，而<u>流 socket 则（通常）使用了传输控制协议（TCP）</u>。</p>\n<p>一般来讲，在称呼这两种 socket 时不会使用术语“Internet domain 数据报 socket”和“Internet domain 流 socket”，而是分别使用术语“<strong>UDP socket</strong>”和“<strong>TCP socket</strong>”。</p>\n<p><strong>socket 系统调用</strong><br>关键的 socket 系统调用包括以下几种。</p>\n<ul>\n<li>**socket()**系统调用<ul>\n<li>创建一个新 socket。</li>\n</ul>\n</li>\n<li>**bind()**系统调用<ul>\n<li>将一个 socket 绑定到一个地址上。</li>\n<li>通常，服务器需要使用这个调用来将其 socket 绑定到一个众所周知的地址上使得客户端能够定位到该 socket 上。</li>\n</ul>\n</li>\n<li>**listen()**系统调用<ul>\n<li>允许一个流 socket 接受来自其他 socket 的接入连接。</li>\n</ul>\n</li>\n<li>**accept()**系统调用<ul>\n<li>在一个监听流 socket 上接受来自一个对等应用程序的连接，并可选地返回对等 socket 的地址。</li>\n</ul>\n</li>\n<li>**connect()**系统调用<ul>\n<li>建立与另一个 socket 之间的连接。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>  socket I&#x2F;O 可以使用传统的 read()和 write()系统调用或使用一组 socket 特有的系统调用（如<u>send()、recv()、sendto()以及 recvfrom()</u>）来完成。</p>\n<p>  在默认情况下，这些系统调用在 I&#x2F;O 操作无法被立即完成时会阻塞。<strong>通过使用 fcntl() F_SETFL 操作（5.3 节）来启用 O_NONBLOCK 打开文件状态标记可以执行非阻塞 I&#x2F;O。</strong></p>\n</blockquote>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc.\"></a>Misc.</h1><h3 id=\"assert-断言\"><a href=\"#assert-断言\" class=\"headerlink\" title=\"assert() 断言\"></a>assert() 断言</h3><p><a href=\"https://so.csdn.net/so/search?q=assert&spm=1001.2101.3001.7020\">assert</a>()是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。如果表达式不为0，则继续执行后面的语句，它的作用是<strong>终止程序以免导致严重后果，同时也便于查找错误</strong>。</p>\n<p>所需头文件：<code>#include &lt;assert.h&gt;</code></p>\n<p>报告错误的条件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">assert</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">   <span class=\"hljs-type\">int</span> expression</span><br><span class=\"hljs-params\">)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>参数：Expression (including pointers) that evaluates to nonzero or 0.（表达式【包括指针】是非零或零）</p>\n<p>原理：assert的作用是现计算表达式 expression ，如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。<br>示例程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">memcpy</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *pvTo, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *pvFrom, <span class=\"hljs-type\">size_t</span> size)</span><br>&#123;<br>\tassert((pvTo != <span class=\"hljs-literal\">NULL</span>) &amp;&amp; (pvFrom != <span class=\"hljs-literal\">NULL</span>));   <span class=\"hljs-comment\">// 使用断言</span><br>\t<span class=\"hljs-comment\">//...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>总结</strong></p>\n<ul>\n<li><p><strong>在函数开始处检验传入参数的合法性</strong></p>\n</li>\n<li><p><strong>每个assert只检验一个条件,因为同时检验多个条件时,如果断言失败,无法直观的判断是哪个条件失败</strong></p>\n</li>\n<li><p><strong>不能使用改变环境的语句,因为assert只在DEBUG个生效,如果这么做,会使用程序在真正运行时遇到问题</strong></p>\n</li>\n<li><p><strong>assert和后面的语句应空一行,以形成逻辑和视觉上的一致感</strong></p>\n</li>\n<li><p><strong>有的地方,assert不能代替条件过滤</strong></p>\n<p>ASSERT只有在Debug版本中才有效，如果编译为Release版本则被忽略掉。</p>\n</li>\n</ul>\n<p><strong>何时需要使用断言</strong></p>\n<ul>\n<li>可以在预计正常情况下程序不会到达的地方放置断言：ASSERT( FALSE );</li>\n<li>断言可以用于检查传递给私有方法的参数。（对于公有方法，因为是提供给外部的接口，所以必须在方法中有相应的参数检验才能保证代码的健壮性）</li>\n<li>使用断言测试方法执行的前置条件和后置条件</li>\n<li>使用断言检查类的不变状态，确保任何情况下，某个变量的状态必须满足。（如age属性应大于0小于某个合适值）</li>\n</ul>\n<p><strong>什么地方不要使用断言</strong></p>\n<p>断言语句不是永远会执行，可以屏蔽也可以启用</p>\n<ul>\n<li>不要使用断言作为公共方法的参数检查，公共方法的参数合法性永远都要执行</li>\n<li>断言语句不可以有任何边界效应，不要使用断言语句去修改变量和改变方法的返回值</li>\n</ul>\n<h1 id=\"Note-1\"><a href=\"#Note-1\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"sync、fsync、fdatasync、fflush对比\"><a href=\"#sync、fsync、fdatasync、fflush对比\" class=\"headerlink\" title=\"sync、fsync、fdatasync、fflush对比\"></a>sync、fsync、fdatasync、fflush对比</h2><blockquote>\n<blockquote>\n<p>  <strong>c库缓冲 —–fflush—–&gt; 内核缓冲 —–fsync—–&gt; 磁盘</strong></p>\n</blockquote>\n<ol>\n<li><p>void sync(void)  函数<strong>只是将所有修改过的块缓冲区排入写队列，然后就返回</strong>，它<strong>并不等待实际写磁盘操作结束</strong>。通常称为update的系统守护进程会周期性地（一般每隔30秒）调用sync函数。这就保证了定期冲洗内核的块缓冲区。命令sync(1)也调用sync函数。</p>\n</li>\n<li><p>int fsync(int fd)  函数是系统提供的系统调用。<strong>只对由文件描述符filedes指定的单一文件起作用，并且等待写磁盘操作结束，然后返回</strong>。fsync可用于数据库这样的应用程序，这种应用程序需要确保将修改过的块立即写到磁盘上。fsync<strong>还会同步更新文件的属性</strong>，即inode部分。</p>\n</li>\n<li><p>int fdatasync(int fd)  函数类似于fsync，但它<strong>只影响文件的数据部分</strong>。它<strong>并不会更新文件的属性</strong>。</p>\n</li>\n<li><p>int fflush(FILE *stream)：标准I&#x2F;O函数（如：fread，fwrite）会在内存建立缓冲，该函数<strong>刷新内存缓冲，将内容写入内核缓冲</strong>，要想将其写入磁盘，还需要调用fsync（先调用fflush后调用fsync，否则不起作用）。fflush接受一个参数<code>FILE *</code>。它还可以刷新标准输入输出。fclose函数在关闭文件之前也会做flush操作</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"关于缓冲\"><a href=\"#关于缓冲\" class=\"headerlink\" title=\"关于缓冲.\"></a>关于缓冲.</h2><p>C标准库的I&#x2F;O缓冲区有三种类型:全缓冲、行缓冲和无缓冲。当用户程序调用库函数做写操作时, 不同类型的缓冲区具有不同特性。</p>\n<ul>\n<li><p>全缓冲：如果缓冲区写满了就写回内核。<strong>常规文件通常是全缓冲的。</strong></p>\n</li>\n<li><p>行缓冲：如果用户程序写的数据中有换行符就把这一行写回内核,或者如果缓冲区写满了就写回内核。<strong>标准输入和标准输出对应终端设备时通常是行缓冲的。</strong></p>\n</li>\n<li><p>无缓冲：用户程序每次调库函数做写操作都要通过系统调用写回内核。<strong>标准错误输出通常是无缓冲的</strong>，这样用户程序产生的错误信息可以尽快输出到设备。</p>\n</li>\n</ul>\n<blockquote>\n<p>  虽然write系统调用位于C标准库I&#x2F;O缓冲区的底层，被称为Unbuffered I&#x2F;O函数，但在write的底层也可以分配一个内核I&#x2F;O缓冲区，所以write 也不一定是直接写到文件的，也可能写到内核I&#x2F;O缓冲区中。</p>\n<p>  可以使用fsync函数同步至磁盘文件，至于究竟写到了文件中还是内核缓冲区中对于进程来说是没有差别的，如果进程A和进程B打开同一文件，进程A写到内核I&#x2F;O缓冲区中的数据从进程B也能读到，因为内核空间是进程共享的，而c标准库的I&#x2F;O缓冲区则不具有这一特性，因为进程的用户空间是完全独立的。</p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/d911b12b/",
            "url": "https://www.oikiou.top/2022/d911b12b/",
            "title": "Zsh 安装 配置",
            "date_published": "2022-12-12T14:57:15.000Z",
            "content_html": "<h1 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h1><p><strong>Zsh</strong>是一个为交互使用而设计的shell，它也是一种强大的脚本语言。<em>bash</em>、ksh 和 <em>tcsh</em> 的许多有用特性都被合并到 <em>zsh</em> 中; 添加了许多原始功能。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Ubuntu</span> <br>sudo apt-get install zsh<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  zsh非常强大，同时它的配置也是较为繁杂，所以我们使用“oh my zsh”这个框架来简化我们的配置流程。</p>\n</blockquote>\n<p><code>cat /etc/shells</code> 查看当前系统有哪些shell版本<br><code>echo $SHELL</code> 查看当前使用的shell版本</p>\n<p>安装完成后会在<code>~</code>目录下产生一个<code>.zshrc</code>这个跟<code>.bashrc</code>是一样的文件，只是配置的对象不一样。<code>rc</code>就是启动的意思，启动zsh读取的配置就是这个文件。</p>\n<h1 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h1><p><a href=\"https://ohmyz.sh/\">官网</a></p>\n<p>Oh My Zsh 是一个令人愉快的、开源的、社区驱动的框架，用于管理你的 Zsh 配置。它捆绑了数千个有用的功能、助手、插件、主题和一些东西 让你大喊大叫… “Oh My ZSH!”</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh -c &quot;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;<br></code></pre></td></tr></table></figure>\n\n<p>安装完成后发现<code>~</code>目录下会有一个<code>.oh-my-zsh</code>文件夹，文件夹内的一些文件主要用处</p>\n<ul>\n<li><code>themes</code> 一些主题文件</li>\n<li><code>plugins</code> 插件，我们的插件就下载放在这个文件夹里面</li>\n</ul>\n<p>Powerlevel10k 是用于 Zsh 美化的一个非常酷的主题，它强调速度、 灵活性和开箱即用的体验。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"zsh-syntax-highlighting-语法高亮\"><a href=\"#zsh-syntax-highlighting-语法高亮\" class=\"headerlink\" title=\"zsh-syntax-highlighting 语法高亮\"></a>zsh-syntax-highlighting 语法高亮</h3><p>插件功能：这个包为<code>shell zsh</code>提供语法突出显示。它允许高亮显示在<code>zsh</code>提示符下输入到交互式终端的命令。这有助于在运行命令之前检查它们，特别是在捕获语法错误方面。<br>例：在你输入某个命令时，如果该命令不存在，那么它显示为红色；否则，它会变成绿色。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure>\n\n<p>将 <code>zsh-syntax-highlighting</code> 添加到 <code>~/.zshrc</code> 中</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">plugins=(--other-- zsh-syntax-highlighting)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"zsh-autosuggestions-自动补全\"><a href=\"#zsh-autosuggestions-自动补全\" class=\"headerlink\" title=\"zsh-autosuggestions 自动补全\"></a>zsh-autosuggestions 自动补全</h3><p>插件功能：输入命令时可提示自动补全（灰色部分），按tab键（→ ）即可补全。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/zsh-users/zsh-autosuggestions.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure>\n\n<p>将 <code>zsh-autosuggestions</code> 添加到 <code>~/.zshrc</code> 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">plugins=(--other-- zsh-autosuggestions)<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">空格分隔不同的插件</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Powerlevel10k\"><a href=\"#Powerlevel10k\" class=\"headerlink\" title=\"Powerlevel10k\"></a>Powerlevel10k</h1><p><a href=\"https://github.com/romkatv/powerlevel10k\">https://github.com/romkatv/powerlevel10k</a></p>\n<h2 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><blockquote>\n<p>  powerlevel10k里面使用了很多的图标，而这些图标只有一些特定的字体才能显示，所以我们需要安装这些字体这样才能正常显示，我们称这些有很多图标的字体为<code>Nerd Fonts</code>。</p>\n</blockquote>\n<p>首先我们需要先安装一下字体，我们先下载官方推荐的<code>MesloLGS NF</code>字体来配置。</p>\n<ul>\n<li>Download these four ttf files:<ul>\n<li>[MesloLGS NF Regular.ttf](<a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Regular.ttf)</li>\n<li>[MesloLGS NF Bold.ttf](<a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Bold.ttf)</li>\n<li>[MesloLGS NF Italic.ttf](<a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Italic.ttf)</li>\n<li>[MesloLGS NF Bold Italic.ttf](<a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS\">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Bold Italic.ttf)</li>\n</ul>\n</li>\n<li>Double-click on each file and click “Install”. This will make <code>MesloLGS NF</code> font available to all applications on your system.</li>\n</ul>\n<blockquote>\n<p>  我们如果是在ssh配置远程主机的时候，是在本地的主机上安装这个字体。</p>\n<p>  字体影响的是显示，ssh显示是在本地渲染的，所以肯定是在本地主机上安装字体。</p>\n</blockquote>\n<h4 id=\"其他的Nerd-Fonts字体\"><a href=\"#其他的Nerd-Fonts字体\" class=\"headerlink\" title=\"其他的Nerd Fonts字体\"></a>其他的<code>Nerd Fonts</code>字体</h4><p><a href=\"https://github.com/ryanoasis/nerd-fonts\">https://github.com/ryanoasis/nerd-fonts</a></p>\n<p>我们可以在这里下载一些打过补丁的热门字体。</p>\n<h3 id=\"安装Powerlevel10k\"><a href=\"#安装Powerlevel10k\" class=\"headerlink\" title=\"安装Powerlevel10k\"></a>安装Powerlevel10k</h3><p>官方的README文档提出了几种安装方式，它推荐使用手动安装方式。</p>\n<h4 id=\"Manual\"><a href=\"#Manual\" class=\"headerlink\" title=\"Manual\"></a>Manual</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k<br>echo &#x27;source ~/powerlevel10k/powerlevel10k.zsh-theme&#x27; &gt;&gt;~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Oh-My-Zsh-1\"><a href=\"#Oh-My-Zsh-1\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h4><ol>\n<li><p>Clone the repository:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>~/.zshrc</code>文件中，设置<code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code></p>\n</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>安装好后我们启动zsh，在zsh环境下输入<code>p10k configure</code>用于配置p10k</p>\n<blockquote>\n<p>  这一步我在<code>MobaXterm</code>下进行，发现可配置的选项缺失很多，后面在<code>Windows Terminal</code>重新配置发现显示是正常的。</p>\n<p>  <code>MobaXterm</code>下<code>Fira Code</code>字体似乎显示也有些问题，<code>MesloLGS NF</code>就是正常的。</p>\n<p>  23.8.1 p10k启动配置的时候如果选Unicode，该选项下会有尽量多图标的选项。MobaXterm里面如果出现历史候选词没有变灰色的情况可以在<code>Terminal Type</code>里面修改成<code>xterm-256color</code>，除此之外其他的没有尝试</p>\n</blockquote>\n",
            "tags": [
                "zsh",
                "shell",
                "linux"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/9d389561/",
            "url": "https://www.oikiou.top/2022/9d389561/",
            "title": "Tmux 终端复用器(Terminal Multiplexer)",
            "date_published": "2022-09-29T15:57:15.000Z",
            "content_html": "<h1 id=\"tmux-终端复用器-terminal-multiplexer\"><a href=\"#tmux-终端复用器-terminal-multiplexer\" class=\"headerlink\" title=\"tmux 终端复用器(terminal multiplexer)\"></a>tmux 终端复用器(terminal multiplexer)</h1><p>☆为重要内容</p>\n<h1 id=\"Tmux-简介\"><a href=\"#Tmux-简介\" class=\"headerlink\" title=\"Tmux 简介\"></a>Tmux 简介</h1><p>tmux 终端复用器(terminal multiplexer)</p>\n<h2 id=\"tmux-能干什么\"><a href=\"#tmux-能干什么\" class=\"headerlink\" title=\"tmux 能干什么\"></a>tmux 能干什么</h2><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> 。</p>\n<p>会话的一个重要特点是，窗口与其中启动的进程是<a href=\"https://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">连在一起</a>的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>\n<p>一个典型的例子就是，<a href=\"https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">SSH 登录</a>远程计算机，打开一个远程窗口执行一个命令例如<code>iperf3 -s</code>。这时，关掉SSH，会发现<code>iperf3</code>进程也被关掉了。这是因为<code>iperf3</code>属于SSH的子进程，SSH作为父进程，如果父进程关掉了，子进程也就关掉了。</p>\n<p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</p>\n<p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p>\n<blockquote>\n<ul>\n<li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li>\n<li>它可以让新窗口”接入”已经存在的会话。</li>\n<li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li>\n<li>它还支持窗口任意的垂直和水平拆分。</li>\n</ul>\n</blockquote>\n<p>类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。</p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><p>Tmux 一般需要自己安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Ubuntu 或 Debian</span><br>$ <span class=\"hljs-built_in\">sudo</span> apt-get install tmux<br><br><span class=\"hljs-comment\"># 启动</span><br>$ tmux<br><br><span class=\"hljs-comment\"># 退出</span><br>$ <span class=\"hljs-built_in\">exit</span><br></code></pre></td></tr></table></figure>\n\n<p>启动后底部<u>左边</u>是<strong>窗口</strong>信息（编号和名称），<u>右侧</u>是系统信息。</p>\n<p><img src=\"/2022/9d389561/image-20220929235001871.png\" alt=\"image-20220929235001871\"></p>\n<p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p>\n<h2 id=\"前缀键☆\"><a href=\"#前缀键☆\" class=\"headerlink\" title=\"前缀键☆\"></a><strong>前缀键</strong>☆</h2><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p>\n<p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p>\n<h2 id=\"会话-窗格-窗口-的概念☆\"><a href=\"#会话-窗格-窗口-的概念☆\" class=\"headerlink\" title=\"会话  窗格  窗口  的概念☆\"></a><strong>会话  窗格  窗口  的概念</strong>☆</h2><blockquote>\n<p>  会话 session<br>  窗口 windows<br>  窗格 pane</p>\n</blockquote>\n<ul>\n<li><code>tmux new</code>的是会话, 会话可以包括多个窗口, 窗口内可以有多个窗格</li>\n</ul>\n<ul>\n<li><code>tmux ls</code> 列出的是会话</li>\n</ul>\n<p><img src=\"/2022/9d389561/image-20220930003505311.png\" alt=\"image-20220930003505311\"></p>\n<h1 id=\"会话的管理\"><a href=\"#会话的管理\" class=\"headerlink\" title=\"会话的管理\"></a>会话的管理</h1><h2 id=\"快捷键☆\"><a href=\"#快捷键☆\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><p>下面是一些会话相关的快捷键。</p>\n<blockquote>\n<ul>\n<li><code>Ctrl+b d</code>：分离当前会话。</li>\n<li><code>Ctrl+b s</code>：列出所有会话。</li>\n<li><code>Ctrl+b $</code>：重命名当前会话。</li>\n</ul>\n</blockquote>\n<h2 id=\"3-1-new新建会话☆\"><a href=\"#3-1-new新建会话☆\" class=\"headerlink\" title=\"3.1 new新建会话☆\"></a>3.1 new新建会话☆</h2><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 直接新建一个</span><br>$ tmux<br><span class=\"hljs-comment\"># 新建并设置一个名字</span><br>$ tmux new -s &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令新建一个指定名称的会话。</p>\n<p>在<code>tmux</code>内应该是无法执行这个指令的, 需要分屏参考下面的窗格操作章节.</p>\n<h2 id=\"3-2-detach分离会话☆\"><a href=\"#3-2-detach分离会话☆\" class=\"headerlink\" title=\"3.2 detach分离会话☆\"></a>3.2 detach分离会话☆</h2><p>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux detach<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p>\n<p><code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux <span class=\"hljs-built_in\">ls</span><br><span class=\"hljs-comment\"># or</span><br>$ tmux list-session<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-3-attach接入会话☆\"><a href=\"#3-3-attach接入会话☆\" class=\"headerlink\" title=\"3.3 attach接入会话☆\"></a>3.3 attach接入会话☆</h2><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux attach -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux attach -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-4-kill-session杀死会话☆\"><a href=\"#3-4-kill-session杀死会话☆\" class=\"headerlink\" title=\"3.4 kill-session杀死会话☆\"></a>3.4 kill-session杀死会话☆</h2><p><code>tmux kill-session</code>命令用于杀死某个会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux kill-session -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux kill-session -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-5-切换会话\"><a href=\"#3-5-切换会话\" class=\"headerlink\" title=\"3.5 切换会话\"></a>3.5 切换会话</h2><p><code>tmux switch</code>命令用于切换会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用会话编号</span><br>$ tmux switch -t 0<br><br><span class=\"hljs-comment\"># 使用会话名称</span><br>$ tmux switch -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"3-6-重命名会话\"><a href=\"#3-6-重命名会话\" class=\"headerlink\" title=\"3.6 重命名会话\"></a>3.6 重命名会话</h2><p><code>tmux rename-session</code>命令用于重命名会话。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux rename-session -t 0 &lt;new-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将0号会话重命名。</p>\n<h1 id=\"窗格操作\"><a href=\"#窗格操作\" class=\"headerlink\" title=\"窗格操作\"></a>窗格操作</h1><h2 id=\"快捷键☆-1\"><a href=\"#快捷键☆-1\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><blockquote>\n<ul>\n<li><code>Ctrl+b %</code>：划分左右两个窗格。☆</li>\n<li><code>Ctrl+b &quot;</code>：划分上下两个窗格。☆</li>\n<li><code>Ctrl+b &lt;arrow key&gt;</code>：光标切换到其他窗格。<code>&lt;arrow key&gt;</code>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键<code>↓</code>。☆</li>\n<li><code>Ctrl+b ;</code>：光标切换到上一个窗格。</li>\n<li><code>Ctrl+b o</code>：光标切换到下一个窗格。</li>\n<li><code>Ctrl+b &#123;</code>：当前窗格与上一个窗格交换位置。☆</li>\n<li><code>Ctrl+b &#125;</code>：当前窗格与下一个窗格交换位置。☆</li>\n<li><code>Ctrl+b Ctrl+o</code>：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</li>\n<li><code>Ctrl+b Alt+o</code>：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</li>\n<li><code>Ctrl+b x</code>：关闭当前窗格。☆</li>\n<li><code>Ctrl+b !</code>：将当前窗格拆分为一个独立窗口。</li>\n<li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li>\n<li><code>Ctrl+b Ctrl+&lt;arrow key&gt;</code>：按箭头方向调整窗格大小。☆</li>\n<li><code>Ctrl+b q</code>：显示窗格编号。</li>\n</ul>\n</blockquote>\n<h2 id=\"5-1-划分窗格\"><a href=\"#5-1-划分窗格\" class=\"headerlink\" title=\"5.1 划分窗格\"></a>5.1 划分窗格</h2><p><code>tmux split-window</code>命令用来划分窗格。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 划分上下两个窗格</span><br>$ tmux split-window<br><br><span class=\"hljs-comment\"># 划分左右两个窗格</span><br>$ tmux split-window -h<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"5-2-移动光标\"><a href=\"#5-2-移动光标\" class=\"headerlink\" title=\"5.2 移动光标\"></a>5.2 移动光标</h2><p><code>tmux select-pane</code>命令用来移动光标位置。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 光标切换到上方窗格</span><br>$ tmux select-pane -U<br><br><span class=\"hljs-comment\"># 光标切换到下方窗格</span><br>$ tmux select-pane -D<br><br><span class=\"hljs-comment\"># 光标切换到左边窗格</span><br>$ tmux select-pane -L<br><br><span class=\"hljs-comment\"># 光标切换到右边窗格</span><br>$ tmux select-pane -R<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"5-3-交换窗格位置\"><a href=\"#5-3-交换窗格位置\" class=\"headerlink\" title=\"5.3 交换窗格位置\"></a>5.3 交换窗格位置</h2><p><code>tmux swap-pane</code>命令用来交换窗格位置。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 当前窗格上移</span><br>$ tmux swap-pane -U<br><br><span class=\"hljs-comment\"># 当前窗格下移</span><br>$ tmux swap-pane -D<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"窗口管理\"><a href=\"#窗口管理\" class=\"headerlink\" title=\"窗口管理\"></a>窗口管理</h1><h2 id=\"快捷键☆-2\"><a href=\"#快捷键☆-2\" class=\"headerlink\" title=\"快捷键☆\"></a>快捷键☆</h2><p>下面是一些窗口操作的快捷键。</p>\n<blockquote>\n<ul>\n<li><code>Ctrl+b c</code>：创建一个新窗口，状态栏会显示多个窗口的信息。</li>\n<li><code>Ctrl+b p</code>：切换到上一个窗口（按照状态栏上的顺序）。</li>\n<li><code>Ctrl+b n</code>：切换到下一个窗口。</li>\n<li><code>Ctrl+b &lt;number&gt;</code>：切换到指定编号的窗口，其中的<code>&lt;number&gt;</code>是状态栏上的窗口编号。</li>\n<li><code>Ctrl+b w</code>：从列表中选择窗口。</li>\n<li><code>Ctrl+b ,</code>：窗口重命名。</li>\n</ul>\n</blockquote>\n<h2 id=\"6-1-新建窗口\"><a href=\"#6-1-新建窗口\" class=\"headerlink\" title=\"6.1 新建窗口\"></a>6.1 新建窗口</h2><p><code>tmux new-window</code>命令用来创建新窗口。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux new-window<br><br><span class=\"hljs-comment\"># 新建一个指定名称的窗口</span><br>$ tmux new-window -n &lt;window-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"6-2-切换窗口\"><a href=\"#6-2-切换窗口\" class=\"headerlink\" title=\"6.2 切换窗口\"></a>6.2 切换窗口</h2><p><code>tmux select-window</code>命令用来切换窗口。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 切换到指定编号的窗口</span><br>$ tmux select-window -t &lt;window-number&gt;<br><br><span class=\"hljs-comment\"># 切换到指定名称的窗口</span><br>$ tmux select-window -t &lt;window-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"6-3-重命名窗口\"><a href=\"#6-3-重命名窗口\" class=\"headerlink\" title=\"6.3 重命名窗口\"></a>6.3 重命名窗口</h2><p><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ tmux rename-window &lt;new-name&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"一些其他的快捷键\"><a href=\"#一些其他的快捷键\" class=\"headerlink\" title=\"一些其他的快捷键\"></a>一些其他的快捷键</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 列出所有快捷键，及其对应的 Tmux 命令</span><br>$ tmux list-keys<br><br><span class=\"hljs-comment\"># 列出所有 Tmux 命令及其参数</span><br>$ tmux list-commands<br><br><span class=\"hljs-comment\"># 列出当前所有 Tmux 会话的信息</span><br>$ tmux info<br><br><span class=\"hljs-comment\"># 重新加载当前的 Tmux 配置</span><br>$ tmux source-file ~/.tmux.conf<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"开启鼠标支持\"><a href=\"#开启鼠标支持\" class=\"headerlink\" title=\"开启鼠标支持\"></a>开启鼠标支持</h2><p>tmux2 以上版本和 tmux2 以上版本有所不同</p>\n<blockquote>\n<p>  查看版本<code>tmux -V</code></p>\n<p>  注意大写</p>\n</blockquote>\n<h3 id=\"tmux2-以上\"><a href=\"#tmux2-以上\" class=\"headerlink\" title=\"tmux2 以上\"></a>tmux2 以上</h3><p><strong>写入配置文件</strong></p>\n<p>在<code>~/.tmux.conf</code>中加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Enable mouse mode (tmux 2.1 and above)</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># Mouse based copy</span><br>bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;reattach-to-user-namespace pbcopy&quot;</span><br>bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel <span class=\"hljs-string\">&quot;reattach-to-user-namespace pbcopy&quot;</span> <br></code></pre></td></tr></table></figure>\n\n<p><strong>临时使用</strong></p>\n<p>按完前缀ctrl+B后，再按冒号：进入<code>命令行</code>模式，输入<code>set -g mouse on</code></p>\n<h3 id=\"tmux2-以下\"><a href=\"#tmux2-以下\" class=\"headerlink\" title=\"tmux2 以下\"></a>tmux2 以下</h3><p><strong>写入配置文件</strong></p>\n<p>在<code>~/.tmux.conf</code>中加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">setw -g mouse-resize-pane on<br>setw -g mouse-select-pane on<br>setw -g mouse-select-window on<br>setw -g mode-mouse on<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  这几行的作用分别是:<br>  开启用鼠标拖动调节pane的大小（拖动位置是pane之间的分隔线）<br>  开启用鼠标点击pane来激活该pane<br>  开启用鼠标点击来切换活动window（点击位置是状态栏的窗口名称）<br>  开启window&#x2F;pane里面的鼠标支持（也即可以用鼠标滚轮回滚显示窗口内容，此时还可以用鼠标选取文本）</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/\">A Quick and Easy Guide to tmux</a></li>\n<li><a href=\"https://danielmiessler.com/study/tmux/\">Tactical tmux: The 10 Most Important Commands</a></li>\n<li><a href=\"https://linuxize.com/post/getting-started-with-tmux/\">Getting started with Tmux</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/10/tmux.html\">阮一峰</a></li>\n</ul>\n",
            "tags": [
                "linux",
                "tmux"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/eae787f0/",
            "url": "https://www.oikiou.top/2022/eae787f0/",
            "title": "CatDrive猫盘",
            "date_published": "2022-01-21T14:57:15.000Z",
            "content_html": "<h1 id=\"刷机\"><a href=\"#刷机\" class=\"headerlink\" title=\"刷机\"></a>刷机</h1><p>刷机教程很多很多，这边就不赘述了</p>\n<p><a href=\"https://www.jianshu.com/p/77e529fb35f9\">https://www.jianshu.com/p/77e529fb35f9</a></p>\n<p><a href=\"https://www.huakings.cn/post/283.html\">https://www.huakings.cn/post/283.html</a></p>\n<ul>\n<li>建议备好串口刷砖必备</li>\n<li>猫盘ssh 用户名 <strong>root</strong> 密码 <strong>Etech12</strong></li>\n</ul>\n<h1 id=\"变砖刷机\"><a href=\"#变砖刷机\" class=\"headerlink\" title=\"变砖刷机\"></a>变砖刷机</h1><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/av73492887\">https://www.bilibili.com/video/av73492887</a></p>\n<p><a href=\"https://www.huakings.cn/post/186.html\">https://www.huakings.cn/post/186.html</a></p>\n<p><a href=\"http://wiki.espressobin.net/tiki-index.php?page=Bootloader+recovery+via+UART\">http://wiki.espressobin.net/tiki-index.php?page=Bootloader+recovery+via+UART</a></p>\n<h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><p><strong>猫盘引导过程</strong></p>\n<p><img src=\"/2022/eae787f0/image-20211225204417854.png\" alt=\"image-20211225204417854\"></p>\n<p>从 A3720 机器引导，再到SPI FLASH引导，再到SATA硬盘或者EMMC启动</p>\n<p>出现<code>&gt;E</code>就是SPI引导没了，需要用厂商工具把SPI引导刷一遍。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p><img src=\"/2022/eae787f0/image-20211225203501999.png\" alt=\"image-20211225203501999\"></p>\n<p>发现出现<code>&gt;E</code>，这就说明猫盘SPI引导没了，需要重新刷入uboot，进行救砖。</p>\n<p>首先，需要预装VM启用厂商的Linux环境(ezremaster.iso)，安装VM这步跳过。</p>\n<blockquote>\n<p>创建虚拟机的时候操作系统可以选择Linux 2.2.x内核，</p>\n</blockquote>\n<p>串口的USB设备加到VM内，然后开机。</p>\n<p>输入如下代码，回车运行后会让输入port，<code>/dev/ttyUSB0</code>一般是<code>0</code>输入0回车就会开始刷SPI，然后会出现++++++++，在此期间可以按几下回车。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo sh /wtpd/shua.sh<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/eae787f0/image-20211225204613427.png\" alt=\"image-20211225204613427\"></p>\n<p>等一段时间就会出现<code>marvell&gt;&gt;</code>，至此就已经救砖成功。</p>\n<p><img src=\"/2022/eae787f0/image-20211225205017895.png\" alt=\"image-20211225205017895\"></p>\n<p>接下来就可以用<code>bubt</code>命令正常刷SPI引导了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bubt full.bin spi usb<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"LED-FAN-控制脚本\"><a href=\"#LED-FAN-控制脚本\" class=\"headerlink\" title=\"LED FAN 控制脚本\"></a>LED FAN 控制脚本</h2><p>参考: <a href=\"https://bbs.nas66.com/thread-9007-1-1.html\">https://bbs.nas66.com/thread-9007-1-1.html</a></p>\n<p>参考: <a href=\"https://bbs.nas66.com/thread-13810-1-1.html\">https://bbs.nas66.com/thread-13810-1-1.html</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir -p /a_usr<br>cat &gt; /a_usr/ledfan.sh &lt;&lt;EOF<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br>if [ ! -d /sys/class/gpio/gpio450 ] ; then<br>echo 450 &gt; /sys/class/gpio/export<br>fi<br>echo out &gt; /sys/class/gpio/gpio450/direction<br>i2cset -y -f 0 0x45 0x00 0x55<br>i2cset -y -f 0 0x45 0x01 0x01<br>i2cset -y -f 0 0x45 0x30 0x07 <br>rm -r /tmp/led/<br>mkdir /tmp/led/<br>echo 1 &gt; /tmp/led/leds.flag<br>while true<br>do<br>sata_temp=&quot;\\$(smartctl -a /dev/hda -d ata | sed -n &#x27;/Temperature_Celsius/p&#x27; | awk &#x27;&#123;print $10&#125;&#x27;)&quot;<br>sata=&quot;\\$(hdparm -C /dev/sda |grep &#x27;drive&#x27;|awk &#x27;&#123;print \\$4&#125;&#x27;)&quot;<br>ledss=&quot;\\$(cat /tmp/led/leds.flag)&quot;<br>if [ \\$sata = standby ];then<br>led=&quot;0x03&quot;<br>leds=&quot;0&quot;<br>fi<br>if [ \\$sata = active/idle ];then<br>led=&quot;0x73&quot;<br>leds=&quot;1&quot;<br>fi<br>if [ \\$sata_temp -ge 55 ];then<br>if [ -f &quot;/tmp/led/led31.flag&quot; ] &amp;&amp; [ \\$ledss = \\$leds ];then <br>sleep 15<br>continue<br>fi<br>i2cset -y -f 0 0x45 0x32 0x00<br>i2cset -y -f 0 0x45 0x33 0x00<br>i2cset -y -f 0 0x45 0x31 \\$&#123;led&#125;<br>i2cset -y -f 0 0x45 0x34 255<br>echo 1 &gt; /sys/class/gpio/gpio450/value<br>rm -rf /tmp/led/led*.flag<br>touch /tmp/led/led31.flag<br>echo \\$&#123;leds&#125; &gt; /tmp/led/leds.flag<br>fi<br>if [ \\$sata_temp -ge 45 ] &amp;&amp; [ \\$sata_temp -lt 55 ];then<br>if [ -f &quot;/tmp/led/led33.flag&quot; ] &amp;&amp; [ \\$ledss = \\$leds ];then<br>sleep 15 <br>continue<br>fi<br>i2cset -y -f 0 0x45 0x31 0x00<br>i2cset -y -f 0 0x45 0x32 0x00<br>i2cset -y -f 0 0x45 0x33 \\$&#123;led&#125;<br>i2cset -y -f 0 0x45 0x36 255<br>echo 1 &gt; /sys/class/gpio/gpio450/value<br>rm -rf /tmp/led/led*.flag<br>touch /tmp/led/led33.flag<br>echo \\$&#123;leds&#125; &gt; /tmp/led/leds.flag<br>fi<br>if [ \\$sata_temp -lt 45 ];then<br>if [ -f &quot;/tmp/led/led32.flag&quot; ] &amp;&amp; [ \\$ledss = \\$leds ];then<br>sleep 15 <br>continue<br>fi<br>i2cset -y -f 0 0x45 0x31 0x00<br>i2cset -y -f 0 0x45 0x33 0x00<br>i2cset -y -f 0 0x45 0x32 \\$&#123;led&#125;<br>i2cset -y -f 0 0x45 0x35 255<br>echo 0 &gt; /sys/class/gpio/gpio450/value<br>rm -rf /tmp/led/led*.flag<br>touch /tmp/led/led32.flag<br>echo \\$&#123;leds&#125; &gt; /tmp/led/leds.flag<br>fi<br>sleep 15<br>done<br>EOF<br>bash /a_usr/ledfan.sh<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改SN半白脚本\"><a href=\"#修改SN半白脚本\" class=\"headerlink\" title=\"修改SN半白脚本\"></a>修改SN半白脚本</h2><p>下面的<code>00:11:32:12:34:56</code>最好改成壳子上自己的MAC</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd ~ &amp;&amp; wget -N --no-check-certificate https://www.huakings.cn/mp202003/macsn.sh &amp;&amp; chmod +x macsn.sh &amp;&amp; bash macsn.sh 00:11:32:12:34:56 1860ABCDE1860 &amp;&amp; rm -f /root/macsn.sh<br></code></pre></td></tr></table></figure>\n\n<p>macsn.sh脚本详细内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">macstr=$1<br>sn=$2<br>mac=($&#123;macstr//:/ &#125;)<br>if [ $&#123;#mac[@]&#125; != 6 ];<br>then<br>echo mac address error!<br>exit<br>fi<br>for var in $&#123;mac[@]&#125;<br>do<br>if echo $var | grep -q &#x27;[^0-9A-F]&#x27;<br>then <br>echo mac address error!<br>exit<br>fi <br>if  [[ $&#123;#var&#125; != 2  ]] <br>then<br>echo mac address error!!<br>exit<br>fi<br>done<br>if  [[ $&#123;#sn&#125; != 13  ]] <br>then<br>echo sn error:The SN Length must be 13<br>exit<br>fi<br><br>for((i=0;i&lt;6;i++));<br>do <br>declare -i macchecksum+=0x$&#123;mac[i]&#125;<br>done<br>declare -i macchecksum=$macchecksum%256<br>for((i=0;i&lt;13;i++));<br>do <br>declare -i checksum+=$(printf &#x27;%d&#x27; &quot;&#x27;$&#123;sn:$i:1&#125;&quot;)<br>done<br>if [ $&#123;#checksum&#125; == 3 ];<br>then<br>echo -e -n &quot;\\x$&#123;mac[0]&#125;\\x$&#123;mac[1]&#125;\\x$&#123;mac[2]&#125;\\x$&#123;mac[3]&#125;\\x$&#123;mac[4]&#125;\\x$&#123;mac[5]&#125;\\<br>\\x$(printf &#x27;%x&#x27; $macchecksum)\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0&quot;\\<br>\\SN=$sn&quot;,CHK=&quot;$checksum\\<br>&quot;\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x3C\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x1\\x1\\<br>\\x0\\x1\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x1\\x1\\<br>\\x1\\x0\\x1\\x1\\x1\\x1\\x1\\x0\\<br>\\x1\\x1\\x1\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x1\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0&quot; &gt; vender.bin<br>else<br>echo -e -n &quot;\\x$&#123;mac[0]&#125;\\x$&#123;mac[1]&#125;\\x$&#123;mac[2]&#125;\\x$&#123;mac[3]&#125;\\x$&#123;mac[4]&#125;\\x$&#123;mac[5]&#125;\\<br>\\x$(printf &#x27;%x&#x27; $macchecksum)\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0&quot;\\<br>\\SN=$sn&quot;,CHK=&quot;$checksum\\<br>&quot;\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x3C\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x1\\x1\\<br>\\x0\\x1\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x1\\x1\\x1\\x1\\<br>\\x1\\x0\\x1\\x1\\x1\\x1\\x1\\x0\\<br>\\x1\\x1\\x1\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x1\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\<br>\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0\\x0&quot; &gt; vender.bin<br>fi<br>dd if=vender.bin of=/dev/mtdblock3<br>rm vender.bin<br>echo Update Success! MAC:$macstr SN:$sn<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"解决猫盘掉ip问题\"><a href=\"#解决猫盘掉ip问题\" class=\"headerlink\" title=\"解决猫盘掉ip问题\"></a>解决猫盘掉ip问题</h2><h3 id=\"最蠢的办法，检查无IP重启\"><a href=\"#最蠢的办法，检查无IP重启\" class=\"headerlink\" title=\"最蠢的办法，检查无IP重启\"></a>最蠢的办法，检查无IP重启</h3><p>将下面脚本添加到，群晖的开机启动</p>\n<p>控制面板-任务计划-新增-触发的任务-用户自定义脚本-开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>dt=`date &#x27;+%d/%m/%Y %H:%M:%S&#x27;`<br>echo &quot;$dt&quot;<br>sleep 60<br>num=`ping -c20 223.5.5.5 | tail -2 | head -1 | cut -f 3 -d&quot;,&quot; | cut -f 1 -d&quot;%&quot; | cut -f 2 -d&quot; &quot;`<br>echo $num<br>echo $?<br>if [ $? -eq 0 -a $num -eq 0 ]; then<br>echo &quot;$dt ok&quot; &gt;&gt; /result.txt<br>else<br>echo &quot;$dt noip loss $num reboot&quot; &gt;&gt; /result.txt<br>reboot<br>fi<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"其它办法\"><a href=\"#其它办法\" class=\"headerlink\" title=\"其它办法\"></a>其它办法</h3><p><a href=\"https://bbs.nas66.com/thread-17505-1-1.html\">https://bbs.nas66.com/thread-17505-1-1.html</a></p>\n<p><a href=\"https://bbs.nas66.com/thread-16639-1-1.html\">https://bbs.nas66.com/thread-16639-1-1.html</a></p>\n<p><a href=\"https://bbs.nas66.com/thread-7843-1-1.html\">https://bbs.nas66.com/thread-7843-1-1.html</a></p>\n<p><a href=\"https://bbs.nas66.com/thread-9350-1-1.html\">https://bbs.nas66.com/thread-9350-1-1.html</a></p>\n<p><a href=\"https://bbs.nas66.com/thread-4593-5-3.html\">https://bbs.nas66.com/thread-4593-5-3.html</a></p>\n<h2 id=\"群晖回退x3p\"><a href=\"#群晖回退x3p\" class=\"headerlink\" title=\"群晖回退x3p\"></a>群晖回退x3p</h2><p><a href=\"https://bbs.nas66.com/forum.php?mod=viewthread&tid=2661\">https://bbs.nas66.com/forum.php?mod=viewthread&amp;tid=2661</a></p>\n<p>主要就是刷x3p的UBOOT，插U盘，U盘放x3p的自动安装镜像</p>\n",
            "tags": [
                "linux",
                "cat_drive"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/784ee20b/",
            "url": "https://www.oikiou.top/2021/784ee20b/",
            "title": "WSL",
            "date_published": "2021-11-29T05:12:15.000Z",
            "content_html": "<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。更新到“设置”菜单中的<a href=\"ms-settings:windowsupdate\">最新 Windows 版本</a>。</p>\n<p><em><strong>IF</strong></em> (Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11)</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">一键自动安装 WSL</a></p>\n<p><em><strong>ELSE</strong></em></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual\">旧版 WSL 的手动安装步骤(可以更改WSL系统的存放位置)</a></p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><blockquote>\n<p>   手动安装的优点是避免Linux的镜像文件(<code>ext4.vhdx</code>)存放在C盘, 存放<code>ext4.vhdx</code>的位置可以自定义.</p>\n</blockquote>\n<p>以下指令需要在<strong>管理员</strong>下的 powershell 运行</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-comment\"># 1 开启Microsoft-Windows-Subsystem-Linux</span><br>dism.exe <span class=\"hljs-string\">/online</span> <span class=\"hljs-string\">/enable-feature</span> <span class=\"hljs-string\">/featurename</span><span class=\"hljs-function\">:Microsoft-Windows-Subsystem-Linux</span> <span class=\"hljs-string\">/all</span> <span class=\"hljs-string\">/norestart</span><br><br><span class=\"hljs-comment\"># 2 开启VirtualMachinePlatform</span><br>dism.exe <span class=\"hljs-string\">/online</span> <span class=\"hljs-string\">/enable-feature</span> <span class=\"hljs-string\">/featurename</span><span class=\"hljs-function\">:VirtualMachinePlatform</span> <span class=\"hljs-string\">/all</span> <span class=\"hljs-string\">/norestart</span><br><br><span class=\"hljs-comment\"># 3 重启</span><br><span class=\"hljs-comment\"># reboot</span><br><br><span class=\"hljs-comment\"># 4 安装WLS2内核更新包</span><br>https:<span class=\"hljs-string\">//wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</span><br><br><span class=\"hljs-comment\"># 5 将WSL2设为默认</span><br>wsl <span class=\"hljs-params\">--set-default-version</span> 2<br><br><span class=\"hljs-comment\"># 6 下载离线包(可以避免将WSL的系统装在C盘)</span><br>https:<span class=\"hljs-string\">//docs.microsoft.com/zh-cn/windows/wsl/install-manual</span><br><span class=\"hljs-comment\"># example</span><br>https:<span class=\"hljs-string\">//aka.ms/wslubuntu2004</span><br>https:<span class=\"hljs-string\">//aka.ms/wsl-ubuntu-1804</span><br>https:<span class=\"hljs-string\">//aka.ms/wsl-debian-gnulinux</span><br><span class=\"hljs-comment\"># 离线包下载完成后解压缩 运行目录内的ubuntu.exe</span><br><span class=\"hljs-comment\"># 会提示输入用户名和密码</span><br><br><span class=\"hljs-comment\"># 7 (可选)安装 windows终端</span><br>https:<span class=\"hljs-string\">//docs.microsoft.com/en-us/windows/terminal/get-started</span> 可选 <br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"卸载-禁用\"><a href=\"#卸载-禁用\" class=\"headerlink\" title=\"卸载 &amp; 禁用\"></a>卸载 &amp; 禁用</h2><ol>\n<li><p>在控制面板中禁用 Hyper-V</p>\n<ol>\n<li>在“控制面板”中，打开“程序和功能”。</li>\n<li>选择“启用或关闭 Windows 功能”。</li>\n<li>展开 <strong>Hyper-V</strong>，展开 <strong>Hyper-V 平台</strong>，然后清除“Hyper-V 虚拟机监控程序”复选框。</li>\n</ol>\n</li>\n<li><p>在 PowerShell 中禁用 Hyper-V</p>\n<ol>\n<li><p>打开提升权限的 PowerShell 窗口。</p>\n</li>\n<li><p>运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"U盘挂载\"><a href=\"#U盘挂载\" class=\"headerlink\" title=\"U盘挂载\"></a>U盘挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1 新建文件夹g</span><br>sudo mkdir /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">2 挂载盘符g</span><br>sudo mount -t drvfs g: /mnt/g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">大功告成。进入/mnt/g即可操作</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">弹出移动硬盘，这样才能在windows下正常弹出，否则是会一直占用的。</span><br>sudo umount /mnt/g<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"映射wsl文件系统\"><a href=\"#映射wsl文件系统\" class=\"headerlink\" title=\"映射wsl文件系统\"></a>映射wsl文件系统</h2><p><img src=\"/2021/784ee20b/image-20211129131237501.png\" alt=\"image-20211129131237501\"></p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">\\\\wsl<span class=\"hljs-symbol\">$</span><br></code></pre></td></tr></table></figure>\n\n<p>通过 <code>\\\\wsl$</code> 访问 Linux 文件时将使用 WSL 分发版的默认用户。 因此，任何访问 Linux 文件的 Windows 应用都具有与默认用户相同的权限。</p>\n<h2 id=\"wsl关机\"><a href=\"#wsl关机\" class=\"headerlink\" title=\"wsl关机\"></a>wsl关机</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wsl --shutdown<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"wsl-配置文件\"><a href=\"#wsl-配置文件\" class=\"headerlink\" title=\"wsl 配置文件\"></a>wsl 配置文件</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"hljs-section\">[wsl2]</span><br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">4</span>GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br><span class=\"hljs-attr\">processors</span>=<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br><span class=\"hljs-attr\">kernel</span>=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br><span class=\"hljs-attr\">kernelCommandLine</span> = vsyscall=emulate<br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br><span class=\"hljs-comment\"># 虚拟内存</span><br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">8</span>GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br><span class=\"hljs-attr\">swapfile</span>=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br><span class=\"hljs-attr\">pageReporting</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br><span class=\"hljs-attr\">localhostforwarding</span>=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br><span class=\"hljs-attr\">nestedVirtualization</span>=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br><span class=\"hljs-attr\">debugConsole</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>打开powershell输入<code>~</code>切换目录</p>\n<p><code>code .wslconfig</code>编辑配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[wsl2]</span><br><span class=\"hljs-attr\">memory</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">swap</span>=<span class=\"hljs-number\">2</span>GB<br><span class=\"hljs-attr\">localhostForwarding</span>=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"WSL-配置代理\"><a href=\"#WSL-配置代理\" class=\"headerlink\" title=\"WSL 配置代理\"></a>WSL 配置代理</h2><p><strong>获取主机 IP      主机 IP 保存在 &#x2F;etc&#x2F;resolv.conf 中</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> hostip=$(<span class=\"hljs-built_in\">cat</span> /etc/resolv.conf |grep -oP <span class=\"hljs-string\">&#x27;(?&lt;=nameserver\\ ).*&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br><br><span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:7890&quot;</span><br><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10880&quot;</span><br><span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:10881&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>在wsl尝试用<code>export all_proxy</code>socks5做代理感觉总是调不通, 换成http就好了  不知道是为啥</li>\n</ul>\n<h2 id=\"wsl-conf-wslconfig配置文件\"><a href=\"#wsl-conf-wslconfig配置文件\" class=\"headerlink\" title=\"wsl.conf .wslconfig配置文件\"></a>wsl.conf .wslconfig配置文件</h2><p>参考文档:</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config\">WSL 中的高级设置配置</a></p>\n<blockquote>\n<h2 id=\"wsl-conf\"><a href=\"#wsl-conf\" class=\"headerlink\" title=\"wsl.conf\"></a>wsl.conf</h2><ul>\n<li>以 <code>/etc</code> unix 文件的形式存储在分发目录中。</li>\n<li>用于按分布配置设置。 此文件中配置的设置将仅应用于包含存储此文件的目录的特定 Linux 分发版。</li>\n<li>可用于版本、WSL 1 或 WSL 2 运行的分发版。</li>\n<li>若要访问已安装的发行版的 <code>/etc</code> 目录，请使用发行版的命令行和 <code>cd /</code> 访问根目录，然后使用 <code>ls</code> 列出文件或使用 <code>explorer.exe .</code> 在 Windows 文件资源管理器中查看。 目录路径应如下所示： <code>/etc/wsl.conf</code></li>\n</ul>\n<h2 id=\"wslconfig\"><a href=\"#wslconfig\" class=\"headerlink\" title=\".wslconfig\"></a>.wslconfig</h2><ul>\n<li>存储在目录中 <code>%UserProfile%</code> 。</li>\n<li>用于跨作为 WSL 2 版本运行的所有已安装 Linux 分发版全局配置设置。</li>\n<li><strong>只能用于 WSL 2 运行的分发</strong>版。 作为 WSL 1 运行的分发版不会受到此配置的影响，因为它们未作为虚拟机运行。</li>\n<li>要访问 <code>%UserProfile%</code> 目录，请在 PowerShell 中使用 <code>cd ~</code> 访问主目录（通常是用户配置文件 <code>C:\\Users\\&lt;UserName&gt;</code>），或者可以打开 Windows 文件资源管理器并在地址栏中输入 <code>%UserProfile%</code>。 目录路径应如下所示： <code>C:\\Users\\&lt;UserName&gt;\\.wslconfig</code></li>\n</ul>\n</blockquote>\n<h3 id=\"wsl-conf-的配置-unix\"><a href=\"#wsl-conf-的配置-unix\" class=\"headerlink\" title=\"wsl.conf 的配置 (unix )\"></a>wsl.conf 的配置 (unix )</h3><p>wsl.conf 文件支持四个部分：<code>automount</code>、<code>network</code>、<code>interop</code>、<code>user</code> 、<code>[boot]</code>。 </p>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Automatically mount Windows drive when the distribution is launched</span><br>[automount]<br><br><span class=\"hljs-comment\"># Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won&#x27;t be mounted automatically, but need to be mounted manually or with fstab.</span><br>enabled = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c. </span><br>root = /<br><br><span class=\"hljs-comment\"># DrvFs-specific options can be specified.  </span><br>options = <span class=\"hljs-string\">&quot;metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off&quot;</span><br><br><span class=\"hljs-comment\"># Sets the `/etc/fstab` file to be processed when a WSL distribution is launched.</span><br>mountFsTab = <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Network host settings that enable the DNS server used by WSL 2. This example changes the hostname, sets generateHosts to false, preventing WSL from the default behavior of auto-generating /etc/hosts, and sets generateResolvConf to false, preventing WSL from auto-generating /etc/resolv.conf, so that you can create your own (ie. nameserver 1.1.1.1).</span><br>[network]<br>hostname = DemoHost<br>generateHosts = <span class=\"hljs-literal\">false</span><br>generateResolvConf = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set whether WSL supports interop process like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.</span><br>[interop]<br>enabled = <span class=\"hljs-literal\">false</span><br>appendWindowsPath = <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Set the user when launching a distribution with WSL.</span><br>[user]<br>default = DemoUser<br><br><span class=\"hljs-comment\"># Set a command to run when a new WSL instance launches. This example starts the Docker container service.</span><br>[boot]<br><span class=\"hljs-built_in\">command</span> = service docker start<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动装载设置-automount\"><a href=\"#自动装载设置-automount\" class=\"headerlink\" title=\"自动装载设置 automount\"></a>自动装载设置 automount</h4><p>节标签：<code>[automount]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 导致固定驱动器（即 <code>C:/</code> 或 <code>D:/</code>）自动装载到 DrvFs 中的 <code>/mnt</code> 下。 <code>false</code> 表示驱动器不会自动装载，但你仍可以手动或通过 <code>fstab</code> 装载驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">mountFsTab</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是</td>\n<td align=\"left\"><code>true</code> 设置启动 WSL 时要处理的 <code>/etc/fstab</code>。 &#x2F;etc&#x2F;fstab 是可在其中声明其他文件系统的文件，类似于 SMB 共享。 因此，在启动时，可以在 WSL 中自动装载这些文件系统。</td>\n</tr>\n<tr>\n<td align=\"left\">root</td>\n<td align=\"left\">string</td>\n<td align=\"left\"><code>/mnt/</code></td>\n<td align=\"left\">设置固定驱动器要自动装载到的目录。 默认情况下，此设置设置为 <code>/mnt/</code>，因此 Windows 文件系统 C 驱动器已装载到 <code>/mnt/c/</code>。 如果更改为<code>/mnt/``/windir/</code>，应会看到已装载到<code>/windir/c</code>的固定 C 驱动器。</td>\n</tr>\n<tr>\n<td align=\"left\">选项</td>\n<td align=\"left\">逗号分隔的值列表，例如 uid、gid 等，请参阅下面的自动装载选项</td>\n<td align=\"left\">空字符串</td>\n<td align=\"left\">下面列出了自动装载选项值，并追加到默认 DrvFs 装载选项字符串。 <strong>只能指定特定于 DrvFs 的选项。</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"网络设置-network\"><a href=\"#网络设置-network\" class=\"headerlink\" title=\"网络设置 network\"></a>网络设置 network</h4><p>节标签：<code>[network]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">generateHosts</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/hosts</code>。 <code>hosts</code> 文件包含主机名对应的 IP 地址的静态映射。</td>\n</tr>\n<tr>\n<td align=\"left\">generateResolvConf</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><code>true</code> 将 WSL 设置为生成 <code>/etc/resolv.conf</code>。 <code>resolv.conf</code> 包含能够将给定主机名解析为其 IP 地址的 DNS 列表。</td>\n</tr>\n<tr>\n<td align=\"left\">hostname</td>\n<td align=\"left\">string</td>\n<td align=\"left\">Windows 主机名</td>\n<td align=\"left\">设置要用于 WSL 分发的主机名。</td>\n</tr>\n</tbody></table>\n<h4 id=\"互操作设置-interop\"><a href=\"#互操作设置-interop\" class=\"headerlink\" title=\"互操作设置 interop\"></a>互操作设置 interop</h4><p>节标签：<code>[interop]</code></p>\n<p>这些选项在预览体验成员内部版本 17713 和更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">enabled</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否支持启动 Windows 进程。</td>\n</tr>\n<tr>\n<td align=\"left\">appendWindowsPath</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">设置此键可确定 WSL 是否会将 Windows 路径元素添加到 $PATH 环境变量。</td>\n</tr>\n</tbody></table>\n<h4 id=\"用户设置-user\"><a href=\"#用户设置-user\" class=\"headerlink\" title=\"用户设置 user\"></a>用户设置 user</h4><p>节标签：<code>[user]</code></p>\n<p>这些选项在版本 18980 及更高版本中可用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">default</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">首次运行时创建的初始用户名</td>\n<td align=\"left\">设置此键指定在首次启动 WSL 会话时以哪个用户身份运行。</td>\n</tr>\n</tbody></table>\n<h4 id=\"启动设置-boot\"><a href=\"#启动设置-boot\" class=\"headerlink\" title=\"启动设置 boot\"></a>启动设置 boot</h4><p>启动设置仅适用于 Windows 11 和 Server 2022。</p>\n<p>节标签：<code>[boot]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">命令</td>\n<td align=\"left\">string</td>\n<td align=\"left\">“”</td>\n<td align=\"left\">你希望在 WSL 实例启动时运行的命令字符串。 此命令以根用户身份运行。 例如： <code>service docker start</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"wslconfig-的配置-windows\"><a href=\"#wslconfig-的配置-windows\" class=\"headerlink\" title=\".wslconfig 的配置 (windows)\"></a>.wslconfig 的配置 (windows)</h3><blockquote>\n<p>  全局 <code>.wslconfig</code> 配置选项仅适用于在 Windows 内部版本 19041 及更高版本中作为 WSL 2 运行的分发版。 请记住，可能需要运行 <code>wsl --shutdown</code> 来关闭 WSL 2 VM，然后重启 WSL 实例以使这些更改生效。</p>\n</blockquote>\n<p><strong>配置文件示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Settings apply across all Linux distros running on WSL 2</span><br>[wsl2]<br><br><span class=\"hljs-comment\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br>memory=4GB <br><br><span class=\"hljs-comment\"># Sets the VM to use two virtual processors</span><br>processors=2<br><br><span class=\"hljs-comment\"># Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel</span><br>kernel=C:\\\\temp\\\\myCustomKernel<br><br><span class=\"hljs-comment\"># Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6</span><br>kernelCommandLine = vsyscall=<span class=\"hljs-built_in\">emulate</span><br><br><span class=\"hljs-comment\"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span><br>swap=8GB<br><br><span class=\"hljs-comment\"># Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</span><br>swapfile=C:\\\\temp\\\\wsl-swap.vhdx<br><br><span class=\"hljs-comment\"># Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free</span><br>pageReporting=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span><br>localhostforwarding=<span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-comment\"># Disables nested virtualization</span><br>nestedVirtualization=<span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging</span><br>debugConsole=<span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>节标签：<code>[wsl2]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">key</th>\n<th align=\"left\">值</th>\n<th align=\"left\">default</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">内核 (kernel)</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">Microsoft 内置内核提供的收件箱</td>\n<td align=\"left\">自定义 Linux 内核的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">内存</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上总内存的 50% 或 8GB，以较小者为准；在 20175 之前的版本上：Windows 上总内存的 80%</td>\n<td align=\"left\">要分配给 WSL 2 VM 的内存量。</td>\n</tr>\n<tr>\n<td align=\"left\">处理器</td>\n<td align=\"left\">数字</td>\n<td align=\"left\">Windows 上相同数量的处理器</td>\n<td align=\"left\">要分配给 WSL 2 VM 的处理器数量。</td>\n</tr>\n<tr>\n<td align=\"left\">localhostForwarding</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于指定绑定到 WSL 2 VM 中的通配符或 localhost 的端口是否应可通过 <code>localhost:port</code> 从主机连接。</td>\n</tr>\n<tr>\n<td align=\"left\">kernelCommandLine</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\">空白</td>\n<td align=\"left\">其他内核命令行参数。</td>\n</tr>\n<tr>\n<td align=\"left\">swap</td>\n<td align=\"left\">大小</td>\n<td align=\"left\">Windows 上 25% 的内存大小四舍五入到最接近的 GB</td>\n<td align=\"left\">要向 WSL 2 VM 添加的交换空间量，0 表示无交换文件。 交换存储是基于磁盘的 RAM，当内存需求超过硬件设备的限制时使用。</td>\n</tr>\n<tr>\n<td align=\"left\">swapFile</td>\n<td align=\"left\">字符串</td>\n<td align=\"left\"><code>%USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx</code></td>\n<td align=\"left\">交换虚拟硬盘的绝对 Windows 路径。</td>\n</tr>\n<tr>\n<td align=\"left\">pageReporting</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">默认设置 <code>true</code> 使 Windows 能够回收分配给 WSL 2 虚拟机的未使用的内存。</td>\n</tr>\n<tr>\n<td align=\"left\">guiApplications</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 中打开或关闭对 GUI 应用程序 (<a href=\"https://github.com/microsoft/wslg\">WSLg</a>) 的支持。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">debugConsole</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\">一个布尔值，用于在 WSL 2 发行版实例启动时打开显示 <code>dmesg</code> 内容的输出控制台窗口。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">nestedVirtualization</td>\n<td align=\"left\">boolean*</td>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\">用于打开或关闭嵌套虚拟化的布尔值，使其他嵌套 VM 能够在 WSL 2 中运行。 仅适用于Windows 11。</td>\n</tr>\n<tr>\n<td align=\"left\">vmIdleTimeout</td>\n<td align=\"left\">number*</td>\n<td align=\"left\"><code>60000</code></td>\n<td align=\"left\">VM 在关闭之前处于空闲状态的毫秒数。 仅适用于Windows 11。</td>\n</tr>\n</tbody></table>\n<p>具有 <code>path</code> 值的条目必须是带有转义反斜杠的 Windows 路径，例如：<code>C:\\\\Temp\\\\myCustomKernel</code></p>\n<p>具有 <code>size</code> 值的条目必须是后跟单位的大小，例如 <code>8GB</code> 或 <code>512MB</code>。</p>\n<p>值类型后具有 * 的条目仅在Windows 11可用。</p>\n<h2 id=\"WSL导出与迁移\"><a href=\"#WSL导出与迁移\" class=\"headerlink\" title=\"WSL导出与迁移\"></a>WSL导出与迁移</h2><blockquote>\n<p>   我们可以选择手动安装wsl, 这样我们可以避免将wsl安装在c盘, 手动安装的时候, 将下载下来的<code>&lt;distro&gt;.appx</code>文件直接解压, 例如将<code>Ubuntu_1604.2019.523.0_x64.appx</code>解压, 解压出来的文件夹内就包含了<code>ubuntu1604.exe</code>, 运行他就可以启动wsl, 这样可以避免wsl的迁移.</p>\n</blockquote>\n<p><strong>查看WSL分发版本</strong></p>\n<p>在<code>Windows PowerShell</code>中输入如下命令, 查看当前子系统的状态和版本信息.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">wsl -l <span class=\"hljs-comment\">--all  -v</span><br></code></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">  NAME      STATE           <span class=\"hljs-keyword\">VERSION</span><br>* Ubuntu    Running         <span class=\"hljs-number\">2</span><br>  Debian    <span class=\"hljs-literal\">Stopped</span>         <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>导出分发版为tar文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">递归创建文件夹</span><br>mkdir -p d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入文件夹</span><br>cd d:\\system\\wsl\\ubuntu20.04\\<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">导出tar包 到当前目录</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">(如果显示的子系统的`NAME`是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如`Ubuntu-20.04`)</span><br>wsl --export Ubuntu .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--export &lt;发行版&gt; &lt;FileName&gt; [选项]<br>        将发行版导出为 tar 文件。<br>        对于标准输出，文件名可以为 -。<br><br>        选项:<br>            --vhd<br>                指定该发行版应导出为 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注销当前分发版</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --unregister Ubuntu<br></code></pre></td></tr></table></figure>\n\n<p><strong>重新导入并安装WSL</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wsl --import Ubuntu .\\ .\\ubuntu20.04.tar --version 2<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--import &lt;发行版&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [选项]<br>        将指定的 tar 文件作为新发行版导入。<br>        对于标准输入，文件名可以为 -。<br><br>        选项:<br>            --version &lt;版本&gt;<br>                指定新发行版要使用的版本。<br><br>            --vhd<br>                指定提供的文件是 .vhdx 文件，而不是 tar 文件。<br>                此操作会在指定的安装位置复制 .vhdx 文件。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>设置默认登陆用户为安装时用户名</strong></p>\n<blockquote>\n<p>  (如果显示的子系统的<code>NAME</code>是带有版本号的话需要注意的是这里第二个参数就要带上参数, 例如<code>Ubuntu-20.04</code>)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ubuntu config --default-user Username<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除tar文件(可选)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">rm .\\ubuntu20.04.tar<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"语言和缺字体\"><a href=\"#语言和缺字体\" class=\"headerlink\" title=\"语言和缺字体\"></a>语言和缺字体</h2><p>wsl是没有中文字体的，所以在安装使用Firefox等软件时，无法正常显示中文字体，所以我们可以通过使用Windows自带字体的方式，来实现快速安装中文字体（以Ubuntu为例）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo ln -s /mnt/c/Windows/Fonts /usr/share/fonts/font<br></code></pre></td></tr></table></figure>\n\n<p>我们只需要将Windows下的字体目录链接到WSL目录下即可然后再刷新一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fc-cache -fv<br></code></pre></td></tr></table></figure>\n\n<p>这样就可以正常显示中文字体了。</p>\n",
            "tags": [
                "windows",
                "linux",
                "wsl"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/ee60585b/",
            "url": "https://www.oikiou.top/2021/ee60585b/",
            "title": "Synology 群晖",
            "date_published": "2021-10-18T14:57:15.000Z",
            "content_html": "<h1 id=\"群晖\"><a href=\"#群晖\" class=\"headerlink\" title=\"群晖\"></a>群晖</h1><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"资源及参考链接\"><a href=\"#资源及参考链接\" class=\"headerlink\" title=\"资源及参考链接\"></a>资源及参考链接</h2><p><a href=\"https://www.openos.org/threads/dsm-6-2-3-2020-12-27.29/\">https://www.openos.org/threads/dsm-6-2-3-2020-12-27.29/</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p><strong>引导系统装哪里？</strong><br>非常关键的问题，DSM采用系统和数据相分离的结构，也就是说引导系统需要独立安装在一个设备上，通常是U盘&#x2F;SD&#x2F;TF卡、或者SSD硬盘上。数据需要额外安装独立的硬盘上。</p>\n</li>\n<li><p><strong>引导系统安装盘 (U盘&#x2F;USB flash drive&#x2F;随身碟)</strong><br>无论是U盘还是TF卡，其实128MB或以上就足够了，USB 2.0&#x2F;3.0都可以。</p>\n</li>\n<li><p><strong>数据存储硬盘 (硬盘)</strong><br>机械硬盘或者固态硬盘都可以，这个没有限制，容量当然越大越好。</p>\n</li>\n<li><p>一般来说安装黑群晖至少需要两个文件, 一个是黑群晖的引导文件, 一个是群晖DSM的系统文件.</p>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><blockquote>\n<p>  黑群晖系统: DSM 6.2.0–6.2.3<br>  引导版本: 1.04b (首选推荐版本)<br>  针对机型: DS918+<br>  引导方式: 传统BIOS和UEFI<br>  引导下载地址<br>  <a href=\"https://www.openos.org/downloads/synology-dsm-6-2-1-loader-v1-04b.15/\">https://www.openos.org/downloads/synology-dsm-6-2-1-loader-v1-04b.15/</a></p>\n<p>  DS918+ DSM 6.2.3-25426 Update2 系统<br>  <a href=\"https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat\">https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat</a></p>\n<p>  其他DSM系统版本请看这里<br>  <a href=\"https://archive.synology.com/download\">https://archive.synology.com/download</a></p>\n</blockquote>\n<ol>\n<li><p>下载群晖的引导文件, 推荐下载<code>v1.04b.for.dms.6.2.1.synoboot-ds918.zip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">http://down.nas2x.com/synology/dsm/6.2/synoboot/<br><span class=\"hljs-comment\"># 里面有三个文件</span><br>dsm.6.2.synoboot_ds3615xs.1.03b.zip                02-Aug-2018 10:43     17M<br>dsm.6.2.synoboot_ds3617xs.1.03b.zip                02-Aug-2018 10:42     20M<br>v1.04b.for.dms.6.2.1.synoboot-ds918.zip            25-Jan-2019 18:30     21M<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>下载群晖的系统, 根据上面的引导下载系统, 上面选的是<code>DS918+</code>的话, 这里下载<code>DS918+</code>就好.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># DS918+</span><br>https://global.download.synology.com/download/DSM/release/6.2.3/25426/DSM_DS918+_25426.pat<br><span class=\"hljs-comment\"># 其他DSM系统</span><br>https://archive.synology.com/download<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改引导程序配置文件,</p>\n<p>使用<code>ChipEasy</code>或者<code>ChipGenius</code>查找到U盘的VID和PID。</p>\n<p>以下图为例，这个U盘的VID是0930，PID是6544。</p>\n<p><strong>请记录好这两个值。下面修改配置文件需要用到。</strong></p>\n<p><img src=\"/2021/ee60585b/07.png\" alt=\"IMG\"></p>\n</li>\n<li><p>编辑配置文件grub.cfg.</p>\n<p>打开DiskGenius, 在顶部选择硬盘-打开虚拟硬盘文件, 选择刚刚下载的<code>.img</code>引导文件并打开.</p>\n<p><img src=\"/2021/ee60585b/kc6jjxmd.png\" alt=\"IMG\"></p>\n<p>在左边找到刚刚打开的img文件, 点击展开<code>ESP-&gt;grub</code>, 在右边找到<code>grub.cfg</code>, 选择复制到桌面.</p>\n<p><img src=\"/2021/ee60585b/kccTMt.md.png\" alt=\"IMG\"></p>\n<p>使用文本编辑器修改<code>line22-line25</code>的数据,</p>\n<p>需要注意的是<code>VID</code>和<code>PID</code>必须要和U盘的数值匹配好.</p>\n<p><code>SN</code>和<code>MAC1</code>是在洗半白的时候需要修改的数值, 是非必须修改的.</p>\n<blockquote>\n<p>set vid&#x3D;0x058f U盘的VID 实体机必须修改，虚拟机无需修改<br>set pid&#x3D;0x6387 U盘的PID 实体机必须修改，虚拟机无需修改<br>set sn&#x3D;A8ODN02468 序列号 可以不修改<br>set mac1&#x3D;0011322CA603 mac地址 可以不修改</p>\n</blockquote>\n<p>注意:vid和pid的0x是十六进制的意思是不要删除掉的，只需要修改后面的4位.</p>\n<p><img src=\"/2021/ee60585b/06.png\" alt=\"IMG\"></p>\n<p>回到DiskGenius内将原来的<code>grub.cfg</code>文件替换掉, 我这里是先将<code>img</code>镜像里面的<code>grub.cfg</code>文件删除, 再右键选择新增文件将编辑好的<code>grub.cfg</code>文件放入其中.</p>\n<p>关闭DiskGenius完成<code>img</code>引导的修改.</p>\n</li>\n<li><p><strong>制作引导U盘</strong></p>\n<p>使用<code>Win32 Disk Imager</code>磁盘映像工具将<code>img</code>引导文件写入U盘内.</p>\n<blockquote>\n<p>  下载地址:<a href=\"https://sourceforge.net/projects/win32diskimager/\">https://sourceforge.net/projects/win32diskimager/</a><br>  中文版:<a href=\"https://www.openos.org/downloads/win32-disk-imager.2/\">https://www.openos.org/downloads/win32-disk-imager.2/</a></p>\n</blockquote>\n<ul>\n<li><p>先在软件界面右侧设备(Device) 部分选择U盘的盘符。<br>（建议在操作前移除所有其他的USB存储设备，以防选择错误导致其他U盘或移动硬盘数据丢失）。</p>\n</li>\n<li><p>再点击软件界面 映像文件(Image File)右侧蓝色文件夹图标，选择之前下载的synoboot.img文件。</p>\n</li>\n<li><p>最后再点击写入(Write)。</p>\n</li>\n</ul>\n<p><img src=\"/2021/ee60585b/w11.png\" alt=\"IMG\"></p>\n</li>\n<li><p>安装群晖系统</p>\n<p>插入U盘，并且在主板上设置默认从U盘启动</p>\n<p>默认选择从U盘启动后选择第1个选项<code>DS3617xs 6.1 Baremetal with Jun&#39;s Mod v1.02-alpha</code>按回车。</p>\n<p><img src=\"/2021/ee60585b/2017041711.png\" alt=\"IMG\"></p>\n</li>\n<li><p>找到设备IP地址</p>\n<p>这里需要稍微等一等提示<code>Please open [http://find.synology.com](http://find.synology.com/) to continue</code>后等个1-2分钟在浏览器里面输入<a href=\"http://find.synology.com/\">http://find.synology.com/</a> ，搜索DSM，如果没有找到，那么使用SynologyAssistant查找. <a href=\"https://cndl.synology.cn/download/Tools/Assistant/6.1-15030/Windows/synology-assistant-6.1-15030.exe\">点击下载Windows版本</a> </p>\n<p>能进路由器管理页面的, 较好的方案是看一下群晖获取的IP是多少, 浏览器直接进去这个<code>IP:5000</code>的网页即可, 免去搜寻的麻烦.</p>\n<blockquote>\n<p>  若多次测试还是无法搜索到群晖，那可能是网卡不支持,<br>  详情请查看DSM黑群晖网卡支持列表<br>  <a href=\"https://www.openos.org/threads/dsm-6-1-supported-drivers.42/\">https://www.openos.org/threads/dsm-6-1-supported-drivers.42/</a></p>\n</blockquote>\n<p><img src=\"/2021/ee60585b/201704zoz.png\" alt=\"IMG\"></p>\n</li>\n<li><p>上传系统文件.</p>\n<p>根据提示继续，点击<code>手动安装</code>后选择之前下载的pat文件，然后再点击<code>立即安装</code>。</p>\n<p><img src=\"/2021/ee60585b/201704opo.png\" alt=\"IMG\"></p>\n<p><img src=\"/2021/ee60585b/201704ada.png\" alt=\"IMG\"></p>\n</li>\n<li><p>安装之后完成一些配置后就可以进入系统界面了.</p>\n</li>\n</ol>\n<h2 id=\"安装后的注意事项\"><a href=\"#安装后的注意事项\" class=\"headerlink\" title=\"安装后的注意事项\"></a>安装后的注意事项</h2><blockquote>\n<p>  <strong>安装完成后的基本设置和注意事项</strong><br>  1,不要升级，不要升级，不要升级。可以去控制面板下面的-更新和还原里面设置。<br>  2,还是不要升级，去计划任何里面关闭DSM自动更新选项。<br>  3,在存储空间管理员里面设置存储空间后才可以进行其他的操作，如共享文件夹或安装其他套件。<br>  4,DSM 6.x配置文件grub.cfg修改: <a href=\"https://www.openos.org/threads/dsm-6-x-grub-cfg-mac-sn.36/\">https://www.openos.org/threads/dsm-6-x-grub-cfg-mac-sn.36/</a></p>\n<p>  群辉Synology DSM 添加硬盘&#x2F;存储空间的方法<br>  <a href=\"https://www.openos.org/threads/synology-dsm-hdd.30/\">https://www.openos.org/threads/synology-dsm-hdd.30/</a></p>\n<p>  6.1驱动支持列表<br>  <a href=\"https://www.openos.org/threads/dsm-6-1-supported-drivers.42/\">https://www.openos.org/threads/dsm-6-1-supported-drivers.42/</a></p>\n<p>  经过测试，引导文件支持DSM 6.1.1-15101<br>  但是不支持从老版本升级升级，仅限全新安装<br>  安装后更新到update 2没有问题<br>  <a href=\"https://www.openos.org/downloads/xpenology-dsm-6-1-1.8/history\">https://www.openos.org/downloads/xpenology-dsm-6-1-1.8/history</a></p>\n</blockquote>\n<blockquote>\n<p>  安装完成后可以下载一些相关的手机端应用<br>  DS Finder<br>  DS File<br>  DS photo</p>\n</blockquote>\n<h1 id=\"编译引导安装群晖\"><a href=\"#编译引导安装群晖\" class=\"headerlink\" title=\"编译引导安装群晖\"></a>编译引导安装群晖</h1><p>Github： <a href=\"https://github.com/fbelavenuto/arpl/\">https://github.com/fbelavenuto/arpl/</a> （这个在2023年停更了）<br>Github：<a href=\"https://github.com/RROrg/rr/releases\">https://github.com/RROrg/rr/releases</a> （这个在更新，但是出现不久，据说是新的，也有说是arpl的迭代版本）</p>\n<ol>\n<li><p>到release页面下载<code>arpl-1.1-beta2a.img.zip</code>，解压后得到<code>arpl.img</code>文件。</p>\n<ol>\n<li>物理机安装群晖的，使用rufus吧<code>arpl.img</code>文件写入到U盘中</li>\n<li>虚拟机安装的，将这个文件导入虚拟机，并将其设置为启动盘</li>\n</ol>\n</li>\n<li><p>开机设为启动项</p>\n</li>\n<li><p>跳出显示画面，按默认选项走就好</p>\n</li>\n<li><p>如果设备连接的路由器打开了DHCP的话，屏幕可以看到已经显示了<code>IP:7601</code>这样的地址。</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230148188.png\" alt=\"image-20230828230148188\"></li>\n</ol>\n</li>\n<li><p>我们需要连接到设备进行一些配置</p>\n<ol>\n<li>方式一 通过终端<ol>\n<li>机器插上键盘</li>\n<li>从设备调用“menu.sh”命令。</li>\n</ol>\n</li>\n<li>方式二 通过网络配置<ol>\n<li>另外一台电脑，打开刚刚屏幕上显示的网址配置</li>\n</ol>\n</li>\n<li>方式三 通过ssh配置<ol>\n<li>使用ssh客户端，用户名： <code>root</code> 和密码： <code>Redp1lL-1s-4weSomE</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p><code>Choose a model</code>选择你喜欢的型号 （DS918+ 兼容性好）</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230737102.png\" alt=\"image-20230828230737102\"></li>\n<li>这里有个型号选择的参考 <a href=\"http://d.nas50.cn/?id=16\">网址</a><br> <img src=\"/%E7%BE%A4%E6%99%96.assets/image-20240626182531055.png\"></li>\n</ol>\n</li>\n<li><p><code>Choose a Build Number</code> 可以选最新的版本，这个版本对应群晖系统的版本</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828230902591.png\" alt=\"image-20230828230902591\"></li>\n</ol>\n</li>\n<li><p><code>Choose a serial number</code> 序列号配置</p>\n<ol>\n<li><code>Generate a random serial number</code> 随机生成一个序列号</li>\n</ol>\n</li>\n<li><p><code>Addons</code> 是和十代cpu核显驱动相关的配置（这里根据CPU去配置）</p>\n</li>\n<li><p><code>build the loader</code> 编译loader程序</p>\n<ol>\n<li>这个需要一点时间稍微等一下</li>\n<li><img src=\"/2021/ee60585b/image-20230828231118050.png\" alt=\"image-20230828231118050\"></li>\n</ol>\n</li>\n<li><p><code>boot the loader</code> 启动编译好的boot</p>\n<ol>\n<li><img src=\"/2021/ee60585b/image-20230828231334846.png\" alt=\"image-20230828231334846\"></li>\n</ol>\n</li>\n<li><p>boot引导到DSM之后，屏幕就不会再更新信息了</p>\n</li>\n<li><p>访问群晖的页面</p>\n<ol>\n<li>路由器找到群晖的IP，访问<code>IP:5000</code></li>\n<li>浏览器输入 <a href=\"https://finds.synology.com/\">https://finds.synology.com/</a> 寻找刚刚安装启动的NAS</li>\n</ol>\n</li>\n<li><p>DSM系统安装参照上篇，DSM系统安装就是一样的了。</p>\n</li>\n</ol>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"SSH访问启动盘\"><a href=\"#SSH访问启动盘\" class=\"headerlink\" title=\"SSH访问启动盘\"></a>SSH访问启动盘</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir /mnt/boot<br>cd /dev<br>sudo mount -t vfat synoboot1 /mnt/boot<br>cd /mnt/boot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"半洗白-SN\"><a href=\"#半洗白-SN\" class=\"headerlink\" title=\"半洗白 SN\"></a>半洗白 SN</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>全黑版本的群晖VideoStation不能离线转码，PhotoStation和Moments的略缩图和人像识别也会有问题</li>\n<li>半洗白就是转码和缩略图一类的可用</li>\n<li>全白就是多了QC，这个就没必要了(白嫖个系统就好了,就不要去嫖别人的服务器了)</li>\n<li>主要通过Docker+DDSM来获得SN</li>\n<li>群辉新版的Docker 18.09.0-0506已经关闭了DDSM安装，可下载17.05.0版本的Docker</li>\n</ul>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>下载17.05.0的Docker，可以在<a href=\"https://archive.synology.com/download/Package/Docker/17.05.0-0401\">群晖官网下载</a>。</p>\n</li>\n<li><p>下载DDSM，可在<a href=\"https://archive.synology.com/download/Os/DSM/6.2.3-25426\">群晖官网下载</a>，注意要对应自己DSM的版本。</p>\n</li>\n<li><p>首先在套件中心点手动安装把第一步下载的17.05.0的Docker放进去。</p>\n</li>\n<li><p>打开Docker-左侧DSM-点击新增-下一步-下一步-下一步-手动上传，把刚刚下载的DDSM放进去，等待他安装完成。</p>\n</li>\n<li><p>安装完成后，进入DDSM群晖的控制面板。</p>\n</li>\n<li><p>在信息栏可看到SN和MAC，复制DDSM的SN和MAC保存下来。</p>\n</li>\n<li><p>SSH接入DSM群晖，挂载启动盘BOOT，修改<code>/grub/grub.cfg</code>文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">挂载启动盘BOOT</span><br>mkdir /mnt/boot<br>cd /dev<br>sudo mount -t vfat synoboot1 /mnt/boot<br>cd /mnt/boot<br></code></pre></td></tr></table></figure></li>\n<li><p>重启。</p>\n</li>\n</ol>\n<p><img src=\"/2021/ee60585b/image-20211018141146176.png\" alt=\"image-20211018141146176\"></p>\n<h2 id=\"半洗白后moments人脸识别不出来\"><a href=\"#半洗白后moments人脸识别不出来\" class=\"headerlink\" title=\"半洗白后moments人脸识别不出来\"></a>半洗白后moments人脸识别不出来</h2><h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>当群晖系统升级到6.22-24922以后，Moments也升级到了1.3.X，新的bug也随着版本升级来了”人物或者主题经常识别不出来“，经查日志后发现是Moments1.3插件有bug引导的，有问题的插件为“<strong>libsynophoto-plugin-detection.so</strong>”，经测试该插件在Moments1.2版本中是正常的。</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>群晖上启用SSH，并将moments停用</p>\n</li>\n<li><p>MobaXterm连接群晖，启用root登录</p>\n<ol>\n<li><code>sudo -i</code></li>\n<li><code>vi /etc/ssh/sshd_config</code></li>\n<li>找到#PermitRootLogin prohibit password，这一行最后，按回车，然后输入 <code>PermitRootLogin yes</code></li>\n<li>修改root密码<code>synouser --setpw root 你的密码</code></li>\n<li>重启</li>\n</ol>\n</li>\n<li><p>用root重新登录，将libsynophoto-plugin-detection.so插件替换掉</p>\n<ol>\n<li>找到目录：&#x2F;var&#x2F;packages&#x2F;SynologyMoments&#x2F;target&#x2F;usr&#x2F;lib&#x2F;libsynophoto-plugin-detection.so</li>\n<li>将原文件先备份一下</li>\n<li>用现有新文件将他替换掉</li>\n<li>新文件权限修改一下</li>\n</ol>\n</li>\n<li><p>将moments启用，问题解决</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.zhihu.com/question/428454266/answer/1681110862?ivk_sa=1024320u\">https://www.zhihu.com/question/428454266/answer/1681110862?ivk_sa=1024320u</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_36059505/article/details/112766321\">https://blog.csdn.net/weixin_36059505/article/details/112766321</a></p>\n<h2 id=\"群晖安装-ipkg-包管理\"><a href=\"#群晖安装-ipkg-包管理\" class=\"headerlink\" title=\"群晖安装 ipkg 包管理\"></a>群晖安装 ipkg 包管理</h2><p><strong>仅适用于x86平台，ARM平台需要修改链接</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以 root 用户执行</span><br>sudo -i<br>cd /volume1/@tmp<br>wget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh<br>chmod +x syno-i686-bootstrap_1.2-7_i686.xsh<br>sh syno-i686-bootstrap_1.2-7_i686.xsh<br>rm syno-i686-bootstrap_1.2-7_i686.xsh<br>ipkg update<br>reboot<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CPU频率调整\"><a href=\"#CPU频率调整\" class=\"headerlink\" title=\"CPU频率调整\"></a>CPU频率调整</h2><ol>\n<li><p>Linux的&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpuxxx&#x2F;cpufreq目录存储着第xxx个CPU的一些参数，例如最小最大平均频率，bios限制频率。</p>\n</li>\n<li><p>使用如下命令可以查看支持的工作模式：</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cat <span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/system/</span>cpu<span class=\"hljs-regexp\">/cpu0/</span>cpufreq/scaling_available_governors<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>powersave</td>\n<td>只会保持最低频率，节能省电</td>\n</tr>\n<tr>\n<td>userspace</td>\n<td>自定义频率</td>\n</tr>\n<tr>\n<td>ondemand</td>\n<td>一有cpu计算量的任务，就会立即达到最大频率运行，等执行完毕就立即回到最低频率</td>\n</tr>\n<tr>\n<td>conservative</td>\n<td>根据负载状态自动在频率上下限调整</td>\n</tr>\n<tr>\n<td>performance</td>\n<td>保持以最大频率运行</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>通过下面指令可以看第*个CPU核心的工作状态，</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">cat <span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/system/</span>cpu<span class=\"hljs-regexp\">/cpu*/</span>cpufreq/scaling_governor<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>安装cpufreq-info：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">ipkg update<br>ipkg <span class=\"hljs-keyword\">install</span> cpufrequtils<br></code></pre></td></tr></table></figure>\n\n<p>查看CPU频率和模式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cpufreq-info<br></code></pre></td></tr></table></figure>\n\n<p>修改模式：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">cpufreq-<span class=\"hljs-built_in\">set</span> -c * -g <span class=\"hljs-built_in\">MODE</span><br></code></pre></td></tr></table></figure>\n\n<p>例如将四个核心全部ondemand：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">cpufreq-<span class=\"hljs-keyword\">set</span> -c <span class=\"hljs-comment\">0 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 1 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 2 -g ondemand</span><br>cpufreq-<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">-c 3 -g ondemand</span><br></code></pre></td></tr></table></figure>\n\n<p>为了下次开机也自动生效，可以手动添加启动脚本。将其存成.sh，开启启动即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#/bin/bash</span><br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">0</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">1</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">2</span> -g ondemand<br>/opt/<span class=\"hljs-built_in\">bin</span>/cpufreq-<span class=\"hljs-built_in\">set</span> -c <span class=\"hljs-number\">3</span> -g ondemand<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lm-sensors-风扇控制\"><a href=\"#lm-sensors-风扇控制\" class=\"headerlink\" title=\"lm-sensors 风扇控制\"></a>lm-sensors 风扇控制</h2><p>执行安装命令</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">ipkg <span class=\"hljs-keyword\">install</span> lm-sensors<br></code></pre></td></tr></table></figure>\n\n<p>查看温度</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sensors</span><br></code></pre></td></tr></table></figure>\n\n<p>配置风扇控制，这块主要的目的只检测风扇在那一路，一般主板会涉及到多个风扇，但不一定都会安装，所以通过pwmconfig来检测与测试风扇的转速控制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> pwmconfig<br></code></pre></td></tr></table></figure>\n\n<p>使用fancontrol自动控制风扇转速，他的原理就是定时执行脚本，监控CPU温度、根据不同的温度区间控制PWM值，从而改变风扇的转速。<br>当转速降低了后，噪音自然就解决了。</p>\n<p>fancontrol会依赖pwmconfig命令生成的配置文件。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">/etc/fancontrol<br><br>-----------配置内容如下--------------<br><span class=\"hljs-comment\"># Configuration file generated by pwmconfig, changes will be lost</span><br><span class=\"hljs-attribute\">INTERVAL</span>=10<br><span class=\"hljs-attribute\">DEVPATH</span>=hwmon0=devices/platform/coretemp.0 <span class=\"hljs-attribute\">hwmon1</span>=devices/platform/it87.2624<br><span class=\"hljs-attribute\">DEVNAME</span>=hwmon0=coretemp <span class=\"hljs-attribute\">hwmon1</span>=it8772<br><span class=\"hljs-attribute\">FCTEMPS</span>=hwmon1/device/pwm2=hwmon0/device/temp3_input<br>FCFANS= hwmon1/device/<span class=\"hljs-attribute\">pwm2</span>=hwmon1/device/fan2_input<br><span class=\"hljs-attribute\">MINTEMP</span>=hwmon1/device/pwm2=20<br><span class=\"hljs-attribute\">MAXTEMP</span>=hwmon1/device/pwm2=60<br><span class=\"hljs-attribute\">MINSTART</span>=hwmon1/device/pwm2=150<br><span class=\"hljs-attribute\">MINSTOP</span>=hwmon1/device/pwm2=100<br></code></pre></td></tr></table></figure>\n\n<p>默认生成的配置基本能够满足需求，经过测试风扇在2000转左右噪音相对能够接受。</p>\n<h2 id=\"VideoStation\"><a href=\"#VideoStation\" class=\"headerlink\" title=\"VideoStation\"></a>VideoStation</h2><p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/357332211\">关于群晖NAS video station TMDB连接测试失败及搜刮结果下载失败的解决方案</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/152351243\">（群晖）关于Video Station内电影及电视剧封面简介为空白的处理方法</a></p>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>TMDB的图片服务器被屏蔽需要修改hosts 加上 api.themoviedb.org 的ip</p>\n</li>\n<li><p>修改hosts后即可测试，已经连通</p>\n</li>\n<li><p>搜刮信息会出现下载失败，主要是下载图片的url需要切换一下</p>\n<p>  编辑 util_themoviedb.php 文件</p>\n  <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">cd /var/packages/VideoStation/target/plugins<br>vi util_themoviedb.php<br></code></pre></td></tr></table></figure>\n  <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\"># 找到下面的语句<br>define(&#x27;API_URL&#x27;, &#x27;https://api.themoviedb.org/3/&#x27;);<br>define(&#x27;BANNER_URL&#x27;, &#x27;https://image.tmdb.org/t/p/w500&#x27;);<br>define(&#x27;BACKDROUP_URL&#x27;, &#x27;https://image.tmdb.org/t/p/original&#x27;);<br><br># 我们只需要把改为<br>image.tmdb.org<br># 改为<br>www.themoviedb.org<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Gogs\"><a href=\"#Gogs\" class=\"headerlink\" title=\"Gogs\"></a>Gogs</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/cfan927/article/details/100862989\">【工具】群晖利用docker安装Gogs代码管理平台</a></p>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>打开“Docker”-&gt;”注册表”，搜索Gogs并“右键”-&gt;“下载此映像”</p>\n<p><img src=\"/2021/ee60585b/watermark.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>在”映像“页面中安装Gogs容器后，切换到”容器“页面，然后双击打开Gogs详情页</p>\n<ol>\n<li>设定容器的本地端口</li>\n<li>设定桌面快捷方式</li>\n</ol>\n</li>\n<li><p>Gogs配置</p>\n<ol>\n<li><p>数据库类型。</p>\n<p>这里我是个人用，所以就选<code>SQLite</code>，比较好备份，备份的时候可以整个打包走。</p>\n<p>如果选用mariaDB就按下面的步骤配置</p>\n<blockquote>\n<ol>\n<li><p>Windows中用ssh登录群晖服务器，cd到mariaDB目录下：</p>\n<p> <code>cd /volume1/@appstore/MariaDB10/usr/local/mariadb10/bin/</code></p>\n</li>\n<li><p>输入命令 <code>./mysql -u root -p</code>，然后输入密码，连接数据库</p>\n</li>\n<li><p>输入命令 <code>use mysql</code>切换到mysql数据库</p>\n</li>\n<li><p>创建数据库gogs<br> <code>CREATE DATABASE IF NOT EXISTS gogs;</code></p>\n</li>\n<li><p>输入下面的命令获取数据库远程访问权限 ：</p>\n<p> <code>GRANT ALL PRIVILEGES ON gogs.* TO &#39;user&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code><br> 其中user为用户名<br> password为用户密码</p>\n</li>\n<li><p>然后用<code>show databases;</code>命令查看一下结果</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>ssh建议使用内置ssh服务器，注意的是使用内置ssh服务器的时候就不能再使用22端口了，需要改掉</p>\n</li>\n<li><p>HTTP端口和应用URL这里需要注意，如果配置了bredge网络，这里是端口是gogs的端口，应用URL的端口是对外的配置网络时候配置的端口。</p>\n</li>\n</ol>\n</li>\n<li><p>gogs:port 设定相关参数即可</p>\n</li>\n<li><p>着重需要说明的是：</p>\n<ol>\n<li>NULL</li>\n</ol>\n</li>\n<li><p>tips</p>\n<ol>\n<li>删除数据库  <code>DROP DATABASE gogs;</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Note-1\"><a href=\"#Note-1\" class=\"headerlink\" title=\"Note\"></a>Note</h3><ul>\n<li>gogs 的配置保存在<code>/data/gogs/conf/app.ini</code> 参考下图</li>\n</ul>\n<p><img src=\"/2021/ee60585b/image-20211103161058734.png\" alt=\"image-20211103161058734\"></p>\n<ul>\n<li><strong>注意</strong> MariaDB的port默认是不开的，需要去套件里面打开。</li>\n</ul>\n<blockquote>\n<ol>\n<li><strong>Domain</strong> 填写Docker宿主机的物理IP地址，或者域名地址,注意这里是不带 http的 如： 192.168.137.140 或 git.mydomain.com</li>\n<li><strong>SSH port</strong> 假如Docker映射的端口是 10022:22 那么这里就填写宿主机开放的端口 10022</li>\n<li><strong>HTTP port</strong> 假如Docker映射的端口是 10080:3000 这里要填容器内的监听端口 3000</li>\n<li><strong>Application URL</strong> 这里要填写的格式为 http(s)?&#x2F; + Domain + HTTP port ，比如：<a href=\"http://git.mydomain.com/10080\">http://git.mydomain.com/10080</a> 。还需要注意的一点是，如果你用了nginx来映射宿主机的 10080 端口，这里要去掉后面的端口，即 <a href=\"http://git.mydomain.com/%EF%BC%8C%E8%AF%B4%E7%99%BD%E4%BA%86%E5%B0%B1%E6%98%AF%E4%BD%A0%E5%9C%A8%E5%A4%96%E9%83%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82\">http://git.mydomain.com/，说白了就是你在外部浏览器上访问的地址。</a></li>\n</ol>\n</blockquote>\n<ul>\n<li><strong>注意</strong>非标准port的ssh需要注意clone地址是否正确</li>\n</ul>\n<h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p><a href=\"https://github.com/gogs/gogs/discussions/6876\">https://github.com/gogs/gogs/discussions/6876</a></p>\n<ul>\n<li><strong>数据备份</strong></li>\n<li>因为容器内的 <code>/data</code> 目录是直接挂载到宿主机的，我们把容器内备份目录设置为 <code>/data</code> ， 方便宿主机将备份文件同步到远程备份服务器。</li>\n<li>这是直接在宿主机上执行的命令。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker container exec gogs su - git -s /bin/ash \\<br>-c &quot;/app/gogs/gogs backup \\<br>--config=/data/gogs/conf/app.ini \\<br>--target=/data&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意挂载目录的权限</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">也可以在docker命令行中手动执行命令来备份</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开命令交互窗口</span><br>docker exec -ti gogs bash<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">gogs是git用户运行的 需要 先切换到git用户</span><br>su - git <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看备份命令的格式</span><br>/app/gogs/gogs backup -h<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行备份  config自然就是配置文件了 target是输出的目录</span><br>/app/gogs/gogs backup --config=/data/gogs/conf/app.ini --target=/data/<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>数据恢复</strong></p>\n</li>\n<li><p>用docker<strong>完成gogs部署</strong>之后，执行下面命令</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker container exec -it gogs su - git -s /bin/ash \\<br>-c &quot;/app/gogs/gogs restore \\<br>--config=/data/gogs/conf/app.ini \\<br>--tempdir=/data \\<br>--from=/data/gogs-backup-20211230091744.zip&quot;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">同样的这里如果手动执行的话就是这样的啦</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">记得先在docker部署好gogs</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开命令交互窗口</span><br>docker exec -ti gogs bash<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">gogs是git用户运行的 需要 先切换到git用户</span><br>su - git <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看恢复命令的格式</span><br>/app/gogs/gogs restore -h<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行恢复</span><br>/app/gogs/gogs restore --config=/data/gogs/conf/app.ini --tempdir=/data --from=/data/gogs-backup-xxx.zip<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>注意：</strong></p>\n</li>\n<li><p>备份和恢复时，使用的 gogs 版本必须是一致的</p>\n</li>\n<li><p>备份和恢复时，使用的 mysql 版本必须是一致的</p>\n</li>\n</ul>\n<h4 id=\"自述文档\"><a href=\"#自述文档\" class=\"headerlink\" title=\"自述文档\"></a>自述文档</h4><p>Create a plain text file then move to directory <code>custom/conf/readme/README</code> and <strong>restart Gogs.</strong></p>\n<ul>\n<li><code>&#123;Name&#125;</code>: Repository name</li>\n<li><code>&#123;Description&#125;</code>: Repository description</li>\n<li><code>&#123;CloneURL.SSH&#125;</code>: Repository SSH clone address</li>\n<li><code>&#123;CloneURL.HTTPS&#125;</code>: Repository HTTP&#x2F;HTTPS clone address</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&#123;Name&#125;</span><br>&#123;Name&#125; Repository<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Tip</span></span><br>You can get the development version of this repo via<br>**git clone &#123;CloneURL.SSH&#125;**<br>or<br>**git clone &#123;CloneURL.HTTPS&#125;**<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Bref</span></span><br>&#123;Description&#125;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># Details</span></span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"zerotier\"><a href=\"#zerotier\" class=\"headerlink\" title=\"zerotier\"></a>zerotier</h2><table>\n<thead>\n<tr>\n<th>img name</th>\n<th>last version</th>\n<th>notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>henrist-zerotier-one1</td>\n<td>1.6.6</td>\n<td>没有自动配置路由</td>\n</tr>\n<tr>\n<td>bltavares zerotier</td>\n<td>1.6.6</td>\n<td>网络不通</td>\n</tr>\n<tr>\n<td>zyclonite&#x2F;zerotier&#x2F;</td>\n<td>1.8.4</td>\n<td>没有自动配置路由 配置路由后正常</td>\n</tr>\n<tr>\n<td>spikhalskiy-zerotier1</td>\n<td>1.8.2</td>\n<td>运行会报错<code>zerotier-cli: /usr/lib/libstdc++.so.6: no version information available (required by zerotier-cli)</code>, 没有自动配置路由 配置路由后正常</td>\n</tr>\n<tr>\n<td>zerotier-zerotier-synology</td>\n<td>1.8.4</td>\n<td>没有自动配置路由 配置路由后正常</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>  -d <span class=\"hljs-string\">\\</span><br>  --restart always <span class=\"hljs-string\">\\</span><br>  --name zerotier-one <span class=\"hljs-string\">\\</span><br>  --device /dev/net/tun <span class=\"hljs-string\">\\</span><br>  --net host <span class=\"hljs-string\">\\</span><br>  --cap-add NET_ADMIN <span class=\"hljs-string\">\\</span><br>  --cap-add SYS_ADMIN <span class=\"hljs-string\">\\</span><br>  -v /<span class=\"hljs-keyword\">var</span>/lib/zerotier-one:/<span class=\"hljs-keyword\">var</span>/lib/zerotier-one <span class=\"hljs-string\">\\</span><br>  zerotier/zerotier-synology<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第三方套件\"><a href=\"#第三方套件\" class=\"headerlink\" title=\"第三方套件\"></a>第三方套件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">矿神</span><br>https://spk.imnks.com/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"群晖的备份-还原\"><a href=\"#群晖的备份-还原\" class=\"headerlink\" title=\"群晖的备份 还原\"></a>群晖的备份 还原</h2><p>晖硬盘接到电脑上使用diskgenius查看，有三个分区：系统、swap交换分区、数据存储区，所有的硬盘都有这三个分区。</p>\n<blockquote>\n<p>  交换分区，英文是swap，意思是“交换”、“实物交易”。 它的功能就是在内存不够的情况下，操作系统先把内存中暂时不用的数据，存到硬盘的交换空间，腾出内存来让别的程序运行，和Windows的虚拟内存（pagefile.sys）的作用是一样的。</p>\n</blockquote>\n<p><img src=\"/2021/ee60585b/image-20220918161100014.png\" alt=\"image-20220918161100014\"></p>\n<p>弄清楚这三个分区是做什么的就很简单了, 我们备份和还原自然也就是备份和还原第一个系统分区了.</p>\n<p>需要注意的是群晖的系统存在于任何一块硬盘内, <strong>所以还原分区的时候需要将分区还原到每一块硬盘内才行</strong>.</p>\n<blockquote>\n<p>  如果只还原一块后，开机进入系统，系统会提示修复，虽然也能成功但是并不建议这么做</p>\n</blockquote>\n<h2 id=\"群晖-硬盘扩容-硬盘升级\"><a href=\"#群晖-硬盘扩容-硬盘升级\" class=\"headerlink\" title=\"群晖 硬盘扩容 硬盘升级\"></a>群晖 硬盘扩容 硬盘升级</h2><p>紧跟上面, 如果我们需要进行硬盘扩容, 比如原来的硬盘128G, 现在购入一块新硬盘256G, 我们需要用256去替换原来的硬盘, 但是现有设备上盘位已经插满了或者是属于单盘位的机器, 这时候就要把硬盘拆下来手动将数据进行转移.</p>\n<blockquote>\n<p>  我的大致思路是使用DG全盘拷贝到256G硬盘上(当时尝试的时候没有找到这方面的文章, 不知道该怎么样操作, 担心数据出问题所以就用了全盘拷贝), 然后上电开机SSH登录上去扩容一下分区就好.</p>\n</blockquote>\n<p><strong>克隆数据</strong></p>\n<p>首先打开<code>DiskGenius</code>软件 选择 -&gt; <code>工具</code> -&gt; <code>克隆磁盘</code> 我这里选的是按扇区全盘克隆.</p>\n<p>讲道理来说将<code>系统区</code>、<code>数据存储区</code>拷贝过去, 再划分出<code>swap交换分区</code>应该也是可以的.</p>\n<p>等待克隆完成.</p>\n<p><strong>扩容分区</strong></p>\n<p>磁盘克隆完成后, 旧的硬盘先不能格式化掉, 需要先留着以防万一.</p>\n<p>将新的硬盘安装回群晖, 并上电开机, 开机一切正常, 查看存储管理器会发现, 256的磁盘只显示了128G, 这个时候我们就需要登录SSH进行下一步操作了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 首先查看一下新放进去的盘的挂载位置</span><br>$ fdisk -l<br>Disk /dev/sda: 232.9 GiB, 250059350016 bytes, 488397168 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel <span class=\"hljs-built_in\">type</span>: dos<br><br><span class=\"hljs-comment\"># 上面可以看到 设备在`/dev/sda` 这里的sda里面的a是按顺序来的 第二个第三个盘就是sdb sdc 类推</span><br><span class=\"hljs-comment\"># 输入命令后它会让我们输入结束地址, 我们这里直接回车, 设定地址为最末尾</span><br>$ parted /dev/sda resizepart 3<br>End?  [250GB]?<br>Information: You may need to update /etc/fstab.<br><br><span class=\"hljs-comment\"># 这里运行的时候报错了, 但是时间有点久没有记录下来给忘记了, 哎这些东西还是不能拖, 要立刻记录下来才行</span><br>$ resize2fs -f /dev/sda3 <br>resize2fs 1.42.6 (21-Sep-2012)<br>.....<br><br><span class=\"hljs-comment\"># 再次查看扩容完成</span><br>$ fdisk -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>参考:</strong></p>\n<p><a href=\"https://imnks.com/389.html\">群晖升级硬盘 磁盘克隆后的简单扩容教程</a></p>\n<h2 id=\"PVE-Exsi-硬盘扩容\"><a href=\"#PVE-Exsi-硬盘扩容\" class=\"headerlink\" title=\"PVE Exsi 硬盘扩容\"></a>PVE Exsi 硬盘扩容</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo fdisk /dev/sdb<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 p 查考分区情况</span><br>Command (m for help): p<br><br>Disk /dev/sdb: 64 GiB, 68719476736 bytes, 134217728 sectors<br>Disk model: HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0x6776aa49<br><br>Device     Boot    Start      End  Sectors  Size Id Type<br>/dev/sdb1           8192 16785407 16777216    8G fd Linux raid autodetect<br>/dev/sdb2       16785408 20979711  4194304    2G fd Linux raid autodetect<br>/dev/sdb3       21241856 66904063 45662208 21.8G fd Linux raid autodetect<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 q 退出</span><br>Command (m for help): q<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入命令，给存储池扩容（命令中的3，对应/dev/sdb3）</span><br>parted /dev/sdb resizepart 3 100%<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">再次使用此命令查看分区表是否正确</span><br>sudo fdisk /dev/sdb<br></code></pre></td></tr></table></figure>\n\n<p>shell操作完成后在群晖的存储管理器，就看到系统提示”<strong>检测到未使用的硬盘空间，请单击立即扩充以扩充此存储池</strong>“，点蓝色的”<strong>立即扩充</strong>“；</p>\n<h2 id=\"群晖安装USB网卡驱动-AX88179A-6-2-3\"><a href=\"#群晖安装USB网卡驱动-AX88179A-6-2-3\" class=\"headerlink\" title=\"群晖安装USB网卡驱动 AX88179A 6.2.3\"></a>群晖安装USB网卡驱动 AX88179A 6.2.3</h2><p><img src=\"/2021/ee60585b/image-20220926214605083.png\" alt=\"image-20220926214605083\"></p>\n<ol>\n<li><p>将USB网卡插入群晖</p>\n</li>\n<li><p>下载驱动程序 <a href=\"%E7%BE%A4%E6%99%96.assets/ax88179_178a.ko.zip\">ax88179_178a.ko.zip</a></p>\n</li>\n<li><p>解压后将<code>ax88179_178a.ko</code>文件复制到群晖的<code>/lib/modules/</code>目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cp</span> /volume......./ax88179_178a.ko /lib/modules<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用命令 <code>chmod 644 ax88179_178a.ko</code>修改文件权限为<code>-rw-r--r--</code></p>\n</li>\n<li><p>加载驱动<code>insmod /lib/modules/ax88179_178a.ko </code> </p>\n<ol>\n<li><p>我这里当时报错了, 但是似乎并没有什么影响</p>\n</li>\n<li><p><code>insmod: ERROR: could not insert module /lib/modules/ax88179_178a.ko: Invalid module format</code></p>\n</li>\n<li><p>拓展一下</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 获取已加载的驱动列表</span><br>lsmod<br><span class=\"hljs-comment\"># 卸载驱动</span><br><span class=\"hljs-comment\"># 参数为lsmod获取到的驱动名称，而不是路径</span><br>rmmod ax88179_178a<br></code></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n</li>\n<li><p>启用网卡 <code>ifconfig eth1 up</code></p>\n</li>\n<li><p>重新启动</p>\n</li>\n</ol>\n<blockquote>\n<p>  网上很多blog写需要添加启动项, 但是我这里并没有添加 看起来也没有什么问题.</p>\n<p>  添加启动项的操作是在群晖的<code>设置</code>里面 添加一个<code>任务计划</code>开机触发执行下面这个脚本</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">insmod /lib/modules/ax88179_178a.ko<br>ifconfig eth1 up<br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h2 id=\"PC通过群晖的网卡桥接上网\"><a href=\"#PC通过群晖的网卡桥接上网\" class=\"headerlink\" title=\"PC通过群晖的网卡桥接上网\"></a>PC通过群晖的网卡桥接上网</h2><p><strong>注意</strong>:首先需要确定Open vSwitch是开启的. 控制面板-&gt;网络-&gt;网络界面-&gt;管理，打开Open vSwitch（如果使用了VMM套件会自动开启，而且提示无法禁用）.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 路径图</span><br>网关(路由器) &lt;-eth0-&gt; 群晖 &lt;-eth1-&gt; PC<br></code></pre></td></tr></table></figure>\n\n<p>装了群晖的Virtual Machine Manager后一个接口会多出来一块网卡, 其中<code>eth0</code>是物理网卡, <code>ovs_eth0</code>是Open vSwitch这个网络管理工具虚拟出来的网卡.</p>\n<p>一般来说<code>eth0</code>会空闲, 流量都是通过<code>ovs_eth0</code>这个虚拟网卡, 其中<code>eth0</code>会被配置成与<code>ovs_eth0</code>桥接</p>\n<hr>\n<p><strong>修改配置文件</strong></p>\n<p>如你的电脑接在群晖的第一个网口<code>eth0</code>就修改<code>ifcfg-eth0</code>，接的是第二个网口<code>eth1</code>就修改<code>ifcfg-eth1</code>(本例)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 编辑</span><br>vim /etc/sysconfig/network-scripts/ifcfg-eth1<br><span class=\"hljs-comment\"># 将BRIDGE 改成ovs_eth0</span><br><span class=\"hljs-comment\"># 原BRIDGE=ovs_eth1</span><br>BRIDGE=ovs_eth0<br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   <code>/etc/sysconfig/network-scripts/ifcfg-eth1</code>文件参数简介</p>\n<p>  <img src=\"/2021/ee60585b/1841273-20191019215624473-1921771223.png\" alt=\"img\"></p>\n</blockquote>\n<p><strong>命令修改</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前网桥 可以看到有两个网桥 ovs_eth0 和 ovs_eth1</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl show</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">我们将网桥 ovs_eth1 删除, 并将 eth1 加入到 网桥ovs_eth0</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl del-br ovs_eth1</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl add-port ovs_eth0 eth1</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">再次查看网桥状态</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">ovs-vsctl show</span><br>Bridge &quot;ovs_eth0&quot;<br>        Port &quot;eth1&quot;<br>            Interface &quot;eth1&quot;<br>        Port &quot;eth0&quot;<br>            Interface &quot;eth0&quot;<br>        Port &quot;ovs_eth0&quot;<br>            Interface &quot;ovs_eth0&quot;<br>                type: internal<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此时eth0和eth1全部在ovs_eth0内，即两个网口处于同一个交换机内。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将eth1和电脑相连，发现电脑可以正常从路由器获取IP地址，并正常上网</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"PC通过群晖的网卡NAT上网\"><a href=\"#PC通过群晖的网卡NAT上网\" class=\"headerlink\" title=\"PC通过群晖的网卡NAT上网\"></a>PC通过群晖的网卡NAT上网</h2><p>这里主要是利用<code>iptable</code>路由流量.</p>\n<p>首先补个<code>iptable</code>的教程</p>\n<p><a href=\"https://wooyun.js.org/drops/Iptables%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html\">Iptables入门教程</a></p>\n<ol>\n<li>我们需要先给<code>局域网2 eth1</code>设置一个静态ip <code>192.168.88.1/24 gw 192.168.88.1</code></li>\n<li>然后在DHCP服务器端开启<code>局域网2 eth1</code>的DHCP服务, 网关填<code>192.168.88.1</code></li>\n<li>然后配置<code>iptable</code>开启网口转发</li>\n</ol>\n<p><img src=\"/2021/ee60585b/image-20221121215936519.png\" alt=\"image-20221121215936519\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">开启群晖的转发功能</span><br>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为PC添加 去往群晖的 路由表 群晖开了对应接口的DHCP就不需要了</span><br>route add -net 192.168.88.0/24 gw 192.168.88.1<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在群晖中添加iptable 策略</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置 NAT 服务器，执行命令</span><br>iptables -t nat -A POSTROUTING -s 192.168.88.0/24 -o ovs_eth0 -j MASQUERADE<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-t 表名</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-A 在指定链的末尾添加（--append）一条新的规则</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-s 指定数据包的源地址参数，可以使IP地址、网络地址、主机名</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   192.168.88.0 表示 192.168.88.x 的整个网络。</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-o 输出接口</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-j 目标动作或跳转</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   MASQUERADE 则表示从 NAT 服务器的网卡上自动获取当前的 IP 地址来做端口转发。否则，基于目标的网络地址转换模式（即 DNAT）需要在每次 NAT 服务器连接外网的 IP 地址变更的时候重新配置端口转发。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">也可以使用源地址目标转换模式（即 SNAT），命令是</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">** 这里和上面选其一即可 **</span><br>iptables -t nat -A POSTROUTING -s 192.168.88.0/24 -o ovs_eth0 -j SNAT --to-source 192.168.20.2<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显然这种方式也会依赖命令中指定的通向外网的 IP 地址，所以仍然不够灵活。推荐使用第一种方式。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">允许端口转发</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此命令将允许经过 eth1 网卡（连接内网）的所有数据包通向外网的转发。</span><br>iptables -A FORWARD -i eth1 -j ACCEPT<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者 仅允许转发192.168.88.0/24段的报文</span><br>iptables -A FORWARD -s 192.168.88.0/24 -j ACCEPT<br></code></pre></td></tr></table></figure>\n\n<p><strong>参考</strong></p>\n<p><a href=\"https://blog.csdn.net/liuzhanchun/article/details/106819839\">Linux 内部路由实现及网口转发之理论篇</a></p>\n<p><a href=\"https://blog.csdn.net/luozhen07/article/details/48051005\">Linux 系统双网卡实现内网端口转发</a></p>\n",
            "tags": [
                "linux",
                "synology"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/9b4105ad/",
            "url": "https://www.oikiou.top/2021/9b4105ad/",
            "title": "LinuxAlphaMini",
            "date_published": "2021-07-07T06:46:15.000Z",
            "content_html": "<h1 id=\"Cortex-A7-MPCore架构\"><a href=\"#Cortex-A7-MPCore架构\" class=\"headerlink\" title=\"Cortex-A7 MPCore架构\"></a>Cortex-A7 MPCore架构</h1><h1 id=\"汇编基础\"><a href=\"#汇编基础\" class=\"headerlink\" title=\"汇编基础\"></a>汇编基础</h1><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">label： instruction @ comment <br></code></pre></td></tr></table></figure>\n\n<p><strong>label 即标号</strong>，表示地址位置，有些指令前面可能会有标号，这样就可以通过这个标号得到指令的地址，标号也可以用来表示数据地址。注意 label 后面的“：”，任何以“：”结尾的标识符都会被识别为一个标号。<br><strong>instruction 即指令</strong>，也就是汇编指令或伪指令。<br><strong>@符号</strong>，表示后面的是注释<br><strong>comment</strong> 就是注释内容。</p>\n<p>例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">add:<br>MOVS R0, #0X12 @设置 R0=0X12<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意！ ARM 中的指令、伪指令、伪操作、寄存器名等可以全部使用大写，也可以全部使用小写，但是不能大小写混用。</strong>  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">.section .testsection @定义一个 testsetcion 段 <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>.text 表示代码段。  </li>\n<li>.data 初始化的数据段。</li>\n<li>.bss 未初始化的数据段。</li>\n<li>.rodata 只读数据段。</li>\n</ul>\n<p><strong>伪操作:</strong></p>\n<ul>\n<li>.byte 定义单字节数据，比如.byte 0x12。</li>\n<li>.short 定义双字节数据，比如.short 0x1234。</li>\n<li>.long 定义一个 4 字节数据，比如.long 0x12345678。</li>\n<li>.equ 赋值语句，格式为： .equ 变量名，表达式，比如.equ num, 0x12，表示 num&#x3D;0x12。</li>\n<li>.align 数据字节对齐，比如： .align 4 表示 4 字节对齐。</li>\n<li>.end 表示源文件结束。</li>\n<li>.global 定义一个全局符号，格式为： .global symbol，比如： .global _start(汇编程序的默认入口标号是_start  )。</li>\n</ul>\n<p><strong>函数:</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">函数名:<br> 函数体<br> 返回语句<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">/* SVC 中断 */<br>SVC_Handler:<br>    ldr r0, =SVC_Handler<br>    bx r0     @跳转<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常用汇编指令\"><a href=\"#常用汇编指令\" class=\"headerlink\" title=\"常用汇编指令\"></a>常用汇编指令</h2><h3 id=\"处理器内部数据传输指令-mov-mrs-msr\"><a href=\"#处理器内部数据传输指令-mov-mrs-msr\" class=\"headerlink\" title=\"处理器内部数据传输指令 mov mrs msr\"></a>处理器内部数据传输指令 mov mrs msr</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>目的</th>\n<th>源</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MOV</td>\n<td>R0</td>\n<td>R1</td>\n<td>将 R1 里面的数据复制到 R0 中。</td>\n</tr>\n<tr>\n<td>MRS</td>\n<td>R0</td>\n<td>CPSR</td>\n<td>将特殊寄存器 CPSR 里面的数据复制到 R0 中。<br/><strong>(特殊寄存器只能由这个指令 读 )</strong></td>\n</tr>\n<tr>\n<td>MSR</td>\n<td>CPSR</td>\n<td>R1</td>\n<td>将 R1 里面的数据复制到特殊寄存器 CPSR 里中。<br/><strong>(特殊寄存器只能由这个指令 写 )</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"存储器访问指令-ldr-str\"><a href=\"#存储器访问指令-ldr-str\" class=\"headerlink\" title=\"存储器访问指令 ldr str\"></a>存储器访问指令 ldr str</h3><p>I.MX6UL中的RAM,寄存器都需要这个指令访问。</p>\n<p>LDR和STR是按照字进行读取和写入的，LDRB和STRB是按字节，LDRH和STRH是按半字操作。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LDR Rd, [Rn , #offset]</td>\n<td>从存储器 Rn+offset 的位置读取数据存放到 Rd 中。</td>\n</tr>\n<tr>\n<td>STR Rd, [Rn, #offset]</td>\n<td>将 Rd 中的数据写入到存储器中的 Rn+offset 位置。</td>\n</tr>\n</tbody></table>\n<h4 id=\"LDR\"><a href=\"#LDR\" class=\"headerlink\" title=\"LDR\"></a>LDR</h4><ul>\n<li><p>读取寄存器值</p>\n</li>\n<li><p>加载立即数到寄存器</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@加载立即数<br>LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004<br>@读取寄存器值<br>LDR R1, [R0] @读取地址 0X0209C004 中的数据到 R1 寄存器中<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"STR\"><a href=\"#STR\" class=\"headerlink\" title=\"STR\"></a>STR</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">LDR R0, =0X0209C004 @将寄存器地址 0X0209C004 加载到 R0 中，即 R0=0X0209C004<br>LDR R1, =0X12345678 @R1 保存要写入到寄存器的值，即 R1=0X12345678<br>STR R1, [R0] @将 R1 中的值写入到 R0 中的地址上<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压栈出栈指令-push-pop\"><a href=\"#压栈出栈指令-push-pop\" class=\"headerlink\" title=\"压栈出栈指令 push pop\"></a>压栈出栈指令 push pop</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PUSH &lt;reg list&gt;</td>\n<td>将寄存器列表存入栈中。</td>\n</tr>\n<tr>\n<td>POP &lt;reg list&gt;</td>\n<td>从栈中恢复寄存器列表。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@处理器的堆栈是向下增长的 见下图<br>PUSH &#123;R0~R3, R12&#125; @将 R0~R3 和 R12 压栈<br>PUSH &#123;LR&#125; @将 LR 进行压栈<br><br>POP &#123;LR&#125; @先恢复 LR<br>POP &#123;R0~R3,R12&#125; @在恢复 R0~R3,R12<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/9b4105ad/image-20210707144653945.png\" alt=\"image-20210707144653945\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">@这个和上面的是等同的<br>STMFD SP!,&#123;R0~R3, R12&#125; @R0~R3,R12 入栈<br>STMFD SP!,&#123;LR&#125; @LR 入栈<br><br>LDMFD SP!, &#123;LR&#125; @先恢复 LR<br>LDMFD SP!, &#123;R0~R3, R12&#125; @再恢复 R0~R3, R12<br><br><br>LDMFD = LDM + FD<br>STMFD = STM + FD<br>LDM(多个) -&gt; LDR(单个)<br>STM(多个) -&gt; STR(单个)<br>FD = Full Descending 即满递减的意思(根据 ATPCS 规则,ARM 使用的 FD 类型的堆栈， SP 指向最后一个入栈的数值，堆栈是由高地址向下增长的，也就是前面说的向下增长的堆栈，)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"跳转指令-b-bx-bl-blx\"><a href=\"#跳转指令-b-bx-bl-blx\" class=\"headerlink\" title=\"跳转指令 b bx bl blx\"></a>跳转指令 b bx bl blx</h3><p>跳转操作的方法  </p>\n<ol>\n<li>直接使用跳转指令 B、 BL、 BX 等</li>\n<li>直接向 PC 寄存器里面写入数据。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B &lt;label&gt;</td>\n<td>跳转到 label，如果跳转范围超过了+&#x2F;-2KB，<br/>可以指定 B.W &lt;label&gt;使用 32 位版本的跳转指令， 这样可以得到较大范围的 跳转</td>\n</tr>\n<tr>\n<td>BX &lt;Rm&gt;</td>\n<td>间接跳转，跳转到存放于 Rm 中的地址处，并且切换指令集</td>\n</tr>\n<tr>\n<td>BL &lt;label&gt;</td>\n<td>跳转到标号地址，并将返回地址保存在 LR 中。</td>\n</tr>\n<tr>\n<td>BLX &lt;Rm&gt;</td>\n<td>结合 BX 和 BL 的特点，跳转到 Rm 指定的地址，并将返回地 址保存在 LR 中，切换指令集。</td>\n</tr>\n</tbody></table>\n<h4 id=\"B指令\"><a href=\"#B指令\" class=\"headerlink\" title=\"B指令\"></a>B指令</h4><p>这是最简单的跳转指令， B 指令会将 PC 寄存器的值设置为跳转目标地址， 一旦执行 B 指令， ARM 处理器就会立即跳转到指定的目标地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">_start:<br>    ldr sp,=0X80200000 @设置栈指针<br>    b main @跳转到 main 函数<br></code></pre></td></tr></table></figure>\n\n<p>上述代码就是典型的在汇编中初始化 C 运行环境，然后跳转到 C 文件的 main 函数中运行 ，上述代码只是初始化了 SP 指针，有些处理器还需要做其他的初始化，比如初始化 DDR 等等。因为跳转到 C 文件以后再也不会回到汇编了，所以在第 4 行使用了 B 指令来完成跳转  。</p>\n<h4 id=\"BL指令\"><a href=\"#BL指令\" class=\"headerlink\" title=\"BL指令\"></a>BL指令</h4><p>BL 指令相比 B 指令，在跳转之前会在寄存器 LR(R14)中保存当前 PC 寄存器值，所以可以通过将 LR 寄存器中的值重新加载到 PC 中来继续从跳转之前的代码处运行，这是子程序调用一个基本但常用的手段。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asm\">push &#123;r0, r1&#125; \t\t\t@保存 r0,r1<br>cps #0x13 \t\t\t\t@进入 SVC 模式，允许其他中断再次进去<br><br>bl system_irqhandler\t@加载 C 语言中断处理函数到 r2 寄存器中<br><br>cps #0x12 \t\t\t\t@进入 IRQ 模式<br>pop &#123;r0, r1&#125;<br>str r0, [r1, #0X10] \t@中断执行完成，写 EOIR<br></code></pre></td></tr></table></figure>\n\n<p>上述代码中第 5 行就是执行 C 语言版的中断处理函数，当处理完成以后是需要返回来继续执行下面的程序，所以使用了 BL 指令。  </p>\n<h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a>算术运算指令</h3><p>汇编中也可以进行算术运算， 比如加减乘除，常用的运算指令用法如表 7.2.5.1 所示：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>计算公式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ADD Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn + Rm</td>\n<td>加法运算，指令为 ADD</td>\n</tr>\n<tr>\n<td>ADD Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn + #immed</td>\n<td>加法运算，指令为 ADD</td>\n</tr>\n<tr>\n<td>ADC Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn + Rm + 进位</td>\n<td>带进位的加法运算，指令为 ADC</td>\n</tr>\n<tr>\n<td>ADC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn + #immed +进位</td>\n<td>带进位的加法运算，指令为 ADC</td>\n</tr>\n<tr>\n<td>SUB Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn – Rm</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SUB Rd, #immed</td>\n<td>Rd &#x3D; Rd - #immed</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SUB Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn - #immed</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>SBC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn - #immed – 借位</td>\n<td>带借位的减法</td>\n</tr>\n<tr>\n<td>SBC Rd, Rn ,Rm</td>\n<td>Rd &#x3D; Rn – Rm – 借位</td>\n<td>带借位的减法</td>\n</tr>\n<tr>\n<td>MUL Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn * Rm</td>\n<td>乘法(32 位)</td>\n</tr>\n<tr>\n<td>UDIV Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &#x2F; Rm</td>\n<td>无符号除法</td>\n</tr>\n<tr>\n<td>SDIV Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &#x2F; Rm</td>\n<td>有符号除法</td>\n</tr>\n</tbody></table>\n<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a>逻辑运算指令</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>计算公式</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND Rd, Rn</td>\n<td>Rd &#x3D; Rd &amp;Rn</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>AND Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn &amp;#immed</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>AND Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn &amp; Rm</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn</td>\n<td>Rd &#x3D; Rd | Rn</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn | #immed</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>ORR Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn | Rm</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn</td>\n<td>Rd &#x3D; Rd &amp; (~Rn)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn &amp; (~#immed)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>BIC Rd, Rn , Rm</td>\n<td>Rd &#x3D; Rn &amp; (~Rm)</td>\n<td>位清除</td>\n</tr>\n<tr>\n<td>ORN Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn | (#immed)</td>\n<td>按位或非</td>\n</tr>\n<tr>\n<td>ORN Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn | (Rm)</td>\n<td>按位或非</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn</td>\n<td>Rd &#x3D; Rd ^ Rn</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn, #immed</td>\n<td>Rd &#x3D; Rn ^ #immed</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>EOR Rd, Rn, Rm</td>\n<td>Rd &#x3D; Rn ^ Rm</td>\n<td>按位异或</td>\n</tr>\n</tbody></table>\n<h1 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h1><h2 id=\"BOOT\"><a href=\"#BOOT\" class=\"headerlink\" title=\"BOOT\"></a>BOOT</h2><p>OOT_MODE[1:0]的值是可以改变的，有两种方式，一种是改写 eFUSE(熔丝)，一种是修改相应的 GPIO 高低电平。  </p>\n<ul>\n<li>BOOT_MODE1 和 BOOT_MODE0 在芯片内部是有 100KΩ下拉电阻的 ，所以默认是0。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>BOOT_MODE[1:0]</th>\n<th>BOOT 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>从 FUSE 启动</td>\n</tr>\n<tr>\n<td>01</td>\n<td>串行下载</td>\n</tr>\n<tr>\n<td>10</td>\n<td>内部 BOOT 模式</td>\n</tr>\n<tr>\n<td>11</td>\n<td>保留</td>\n</tr>\n</tbody></table>\n<h3 id=\"串行下载\"><a href=\"#串行下载\" class=\"headerlink\" title=\"串行下载\"></a>串行下载</h3><p>串行下载的意思就是可以通过 USB 或者 UART 将代码下载到板子上的外置存储设备中，我们可以使用 OTG1 这个 USB口向开发板上的 SD&#x2F;EMMC、 NAND 等存储设备下载代码。  </p>\n<h3 id=\"内部-BOOT-模式\"><a href=\"#内部-BOOT-模式\" class=\"headerlink\" title=\"内部 BOOT 模式\"></a>内部 BOOT 模式</h3><p>芯片会执行内部的 boot ROM 代码，代码会进行硬件初始化(一部分外设)，然后从 boot 设备(就是存放代码的设备、比如 SD&#x2F;EMMC、 NAND)中<strong>将代码拷贝出来复制到指定的 RAM 中，一般是 DDR。</strong>  </p>\n<h2 id=\"BOOT模式-启动设备\"><a href=\"#BOOT模式-启动设备\" class=\"headerlink\" title=\"BOOT模式 启动设备\"></a>BOOT模式 启动设备</h2><p>当 BOOT_MODE 设置为内部 BOOT 模式以后，可以从以下设备中启动：<br>①、接到 EIM 接口的 CS0 上的 16 位 NOR Flash。<br>②、接到 EIM 接口的 CS0 上的 OneNAND Flash。<br>③、接到 GPMI 接口上的 MLC&#x2F;SLC NAND Flash， NAND Flash 页大小支持 2KByte、 4KByte和 8KByte， 8 位宽。<br>④、 Quad SPI Flash。<br>⑤、接到 USDHC 接口上的 SD&#x2F;MMC&#x2F;eSD&#x2F;SDXC&#x2F;eMMC 等设备。<br>⑥、 SPI 接口的 EEPROM。  </p>\n<p>启动设备是通过  BOOT_CFG1[7:0]、 BOOT_CFG2[7:0]和 BOOT_CFG4[7:0]这 24 个配置 IO配置，这 24 个配置 IO 刚好对应着 LCD 的 24 根数据线 LCD_DATA0~LCDDATA23，<strong>当启动完成以后这 24 个 IO 就可以作为 LCD 的数据线使用。</strong>  </p>\n<table>\n<thead>\n<tr>\n<th>boot1</th>\n<th>boot0</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th>启动设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>1</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td>串行下载，可以通过 USB 烧写镜像文件。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>SD 卡启动。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>EMMC 启动。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>NAND FLASH 启动。</td>\n</tr>\n</tbody></table>\n<h2 id=\"烧写镜像\"><a href=\"#烧写镜像\" class=\"headerlink\" title=\"烧写镜像\"></a>烧写镜像</h2><p><strong>imxdownload 会在 led.bin前面添加一些头信息，重新生成一个叫做 load.imx 的文件，头部信息包含以下</strong>  </p>\n<ul>\n<li><p>Image vector table，简称 IVT， IVT 里面包含了一系列的地址信息，这些地址信息在ROM 中按照固定的地址存放着。</p>\n</li>\n<li><p>Boot data，启动数据，包含了镜像要拷贝到哪个地址，拷贝的大小是多少等等。</p>\n</li>\n<li><p>Device configuration data，简称 DCD，设备配置信息，重点是 DDR3 的初始化配置。</p>\n</li>\n<li><p>用户代码可执行文件，比如 led.bin。</p>\n</li>\n</ul>\n<p>最终烧写到 I.MX6U 中的程序其组成为： IVT+Boot data+DCD+.bin 。(3KByte 的 IVT+Boot Data+DCD)</p>\n<p>.bin是从0x87800000这个地方开始，往前推load.imx就是从0x877FF400开始的。</p>\n<h1 id=\"点灯Makefile\"><a href=\"#点灯Makefile\" class=\"headerlink\" title=\"点灯Makefile\"></a>点灯Makefile</h1><p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># 定义了一个变量 objs， objs 包含着要生成 ledc.bin 所需的材料： start.o 和 main.o</span><br><span class=\"hljs-comment\"># 这里要注意 start.o 一定要放到最前面！因为在后面链接的时候 start.o 要在最前面，因为 start.o 是最先要执行的文件！</span><br>objs := start.o main.o<br><br><span class=\"hljs-comment\"># 使用依赖文件(objs:=start.o main.o),生成目标可执行文件ledc.bin</span><br><span class=\"hljs-section\">ledc.bin:<span class=\"hljs-variable\">$(objs)</span></span><br>\t<span class=\"hljs-comment\"># 使用编译器 arm-linux-gnueabihf-ld 进行连接,-Ttext指定起始地址是0X87800000</span><br>\t<span class=\"hljs-comment\"># $^ 是所有依赖文件的集合,也就是变量objs的值(start.o main.o)</span><br>\t<span class=\"hljs-comment\"># 展开等价 arm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf start.o main.o</span><br>\tarm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-comment\"># 将ledc.elf转换成ledc.bin文件</span><br>\t<span class=\"hljs-comment\"># $@ 的意思是目标集合，在这里就是 ledc.bin</span><br>\t<span class=\"hljs-comment\"># 展开等价 arm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin</span><br>\tarm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-comment\"># 反汇编，生成 ledc.dis 文件</span><br>\tarm-linux-gnueabihf-objdump -D -m arm ledc.elf &gt; ledc.dis<br><br><span class=\"hljs-comment\"># 下面规则展开等价 </span><br><span class=\"hljs-comment\"># start.o:start.s</span><br><span class=\"hljs-comment\">#\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o start.o start.s</span><br><span class=\"hljs-comment\"># %匹配任意字符</span><br><span class=\"hljs-section\">%.o:%.s</span><br>\t<span class=\"hljs-comment\"># $@ 的意思是目标集合，在这里就是 %.o</span><br>\t<span class=\"hljs-comment\"># $&lt; 所有依赖文件的集合，在这就是 %.s</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.S</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.c</span><br>\tarm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><br><span class=\"hljs-section\">clean:</span><br>\trm -rf *.o ledc.bin ledc.elf ledc.dis<br></code></pre></td></tr></table></figure>\n\n<p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># 类似于上面的只是用到了变量</span><br>CROSS_COMPILE\t?= arm-linux-gnueabihf-<br>NAME \t\t\t?= ledc<br><br>CC \t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>gcc<br>LD \t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>ld<br>OBJCOPY \t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objcopy<br>OBJDUMP \t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objdump<br>OBJS \t\t\t:= start.o main.o<br><br><span class=\"hljs-variable\">$(NAME)</span>.bin:<span class=\"hljs-variable\">$(OBJS)</span><br>\t<span class=\"hljs-variable\">$(LD)</span> -Timx6ul.lds -o <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-variable\">$(OBJCOPY)</span> -O binary -S <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-variable\">$(OBJDUMP)</span> -D -m arm <span class=\"hljs-variable\">$(NAME)</span>.elf &gt; <span class=\"hljs-variable\">$(NAME)</span>.dis<br>    <br><span class=\"hljs-section\">%.o:%.s</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.S</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">%.o:%.c</span><br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br>\t<br><span class=\"hljs-section\">clean:</span><br>\trm -rf *.o <span class=\"hljs-variable\">$(NAME)</span>.bin <span class=\"hljs-variable\">$(NAME)</span>.elf <span class=\"hljs-variable\">$(NAME)</span>.dis<br></code></pre></td></tr></table></figure>\n\n<p><strong>Makefile</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">CROSS_COMPILE\t?= arm-linux-gnueabihf-<br><span class=\"hljs-comment\"># 编译后 目标名</span><br>TARGET\t\t\t?= bsp<br><br><span class=\"hljs-comment\"># 编译器相关</span><br>CC\t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>gcc<br>LD\t\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>ld<br>OBJCOPY\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objcopy<br>OBJDUMP\t\t\t:= <span class=\"hljs-variable\">$(CROSS_COMPILE)</span>objdump<br><br><span class=\"hljs-comment\"># include dir</span><br>INCDIRS\t\t\t:=  imx6ul  \\<br>\t\t\t\t\tbsp/clk \\<br>\t\t\t\t\tbsp/led \\<br>\t\t\t\t\tbsp/delay<br><br><span class=\"hljs-comment\"># sourc dir</span><br>SRCDIRS \t\t:=  project \\<br>\t\t\t\t\tbsp/clk \\<br>\t\t\t\t\tbsp/led \\<br>\t\t\t\t\tbsp/delay<br><br><span class=\"hljs-comment\"># 这里用到了 patsubst 函数 通过这个函数给 INCDIRS 前面加了一个 -I</span><br><span class=\"hljs-comment\"># 展开 INCLUDE := -I imx6ul -I bsp/clk -I bsp/led -I bsp/delay</span><br>INCLUDE \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, -I %, <span class=\"hljs-variable\">$(INCDIRS)</span>)</span><br><br><span class=\"hljs-comment\"># 这里用到了 foreach 和 wildcard 函数</span><br><span class=\"hljs-comment\"># 展开 SFILES := project/start.S</span><br><span class=\"hljs-comment\"># 展开 CFILES := project/main.c bsp/clk/bsp_clk.c bsp/led/bsp_led.c bsp/delay/bsp_delay.c</span><br>SFILES \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">foreach</span> <span class=\"hljs-built_in\">dir</span>, <span class=\"hljs-variable\">$(SRCDIRS)</span>, $(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(dir)</span>/*.S)</span>)<br>CFILES \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">foreach</span> <span class=\"hljs-built_in\">dir</span>, <span class=\"hljs-variable\">$(SRCDIRS)</span>, $(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(dir)</span>/*.c)</span>)<br><br><span class=\"hljs-comment\"># 这里用到了 notdir 函数 除去路径函数</span><br><span class=\"hljs-comment\"># 展开 SFILENDIR := start.S</span><br><span class=\"hljs-comment\"># 展开 CFILENDIR := main.c bsp_clk.c bsp_led.c bsp_delay.c</span><br>SFILENDIR \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> <span class=\"hljs-variable\">$(SFILES)</span>)</span><br>CFILENDIR \t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> <span class=\"hljs-variable\">$(CFILES)</span>)</span><br><br><span class=\"hljs-comment\"># 展开 SOBJS := obj/start.o</span><br><span class=\"hljs-comment\"># 展开 COBJS := obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o</span><br><span class=\"hljs-comment\"># 展开 OBJS  := obj/start.o obj/main.o obj/bsp_clk.o obj/bsp_led.o obj/bsp_delay.o</span><br>SOBJS \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, obj/%, $(SFILENDIR:.S=.o)</span>)<br>COBJS \t\t\t:= <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %, obj/%, $(CFILENDIR:.c=.o)</span>)<br>OBJS \t\t\t:= <span class=\"hljs-variable\">$(SOBJS)</span> <span class=\"hljs-variable\">$(COBJS)</span><br><br>VPATH \t\t\t:= <span class=\"hljs-variable\">$(SRCDIRS)</span><br><br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: clean</span><br><br><span class=\"hljs-variable\">$(TARGET)</span>.bin : <span class=\"hljs-variable\">$(OBJS)</span><br>\t<span class=\"hljs-variable\">$(LD)</span> -Timx6ul.lds -o <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$^</span><br>\t<span class=\"hljs-variable\">$(OBJCOPY)</span> -O binary -S <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$@</span><br>\t<span class=\"hljs-variable\">$(OBJDUMP)</span> -D -m arm <span class=\"hljs-variable\">$(TARGET)</span>.elf &gt; <span class=\"hljs-variable\">$(TARGET)</span>.dis<br><br><span class=\"hljs-variable\">$(SOBJS)</span> : obj/%.o : %.S<br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 <span class=\"hljs-variable\">$(INCLUDE)</span> -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-variable\">$(COBJS)</span> : obj/%.o : %.c<br>\t<span class=\"hljs-variable\">$(CC)</span> -Wall -nostdlib -c -O2 <span class=\"hljs-variable\">$(INCLUDE)</span> -o <span class=\"hljs-variable\">$@</span> <span class=\"hljs-variable\">$&lt;</span><br><br><span class=\"hljs-section\">clean:</span><br>\trm -rf <span class=\"hljs-variable\">$(TARGET)</span>.elf <span class=\"hljs-variable\">$(TARGET)</span>.dis <span class=\"hljs-variable\">$(TARGET)</span>.bin <span class=\"hljs-variable\">$(COBJS)</span> <span class=\"hljs-variable\">$(SOBJS)</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Board-Support\"><a href=\"#Board-Support\" class=\"headerlink\" title=\"Board Support\"></a>Board Support</h1><ul>\n<li>正点原子的 I.MX6ULL EMMC 核心板上 FSL_SDHC(0)接的 SD(TF)卡，FSL_SDHC(1)接的 EMMC。</li>\n</ul>\n<h1 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h1><h2 id=\"Ubuntu-交叉编译工具链安装\"><a href=\"#Ubuntu-交叉编译工具链安装\" class=\"headerlink\" title=\"Ubuntu 交叉编译工具链安装\"></a>Ubuntu 交叉编译工具链安装</h2><blockquote>\n<p>交叉编译器有很多种，我们使用 Linaro 出品的交叉编译器，Linaro 是一间非营利性质的开放源代码软件工程公司，Linaro 开发了很多软件，最著名的就是 Linaro GCC 编译工具链(编译器)</p>\n</blockquote>\n<p>Linaro 编译器7.5.0下载<a href=\"https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/\">链接</a></p>\n<ol>\n<li><p>有很多种 GCC 交叉编译工具链，因为我们所使用的 I.MX6U-ALPHA 开发板是一个 Cortex-A7 内核的开发板，因此选择 arm-linux-gnueabihf</p>\n<blockquote>\n<p>aarch64-elf<br>aarch64-linux-gnu<br>aarch64_be-elf<br>aarch64_be-linux-gnu<br>arm-eabi<br>arm-linux-gnueabi<br><strong>arm-linux-gnueabihf</strong><br>armeb-eabi<br>armeb-linux-gnueabihf<br>armv8l-linux-gnueabihf</p>\n</blockquote>\n</li>\n<li><p><code>gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz</code> 这个文件就是7.5.0版本的GCC交叉编译器，用于X86——64位的linux上运行</p>\n<ol>\n<li><strong>需要注意的是</strong>，这个开发板用的是4.9.4版本的编译器，过高版本的编译器会有一些问题。</li>\n<li><a href=\"https://releases.linaro.org/components/toolchain/binaries/4.9-2017.01/arm-linux-gnueabihf/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz\">Linaro 4.9.4 下载链接</a></li>\n</ol>\n</li>\n<li><p>下载好编译器之后需要做的就是将编译器添加到环境变量，使得可以在任何目录下调用编译器。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir /usr/local/arm<br><br>sudo cp gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz /usr/local/arm/ -f<br><br>sudo tar -vxf gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf.tar.xz<br><br>sudo vi /etc/profile<br><br>export PATH=$PATH:/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/bin<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>搞定环境变量之后需要安装一些其他的编译库</p>\n<ol>\n<li><code>sudo apt-get install lsb-core lib32stdc++6</code></li>\n</ol>\n</li>\n<li><p>验证编译器</p>\n<ol>\n<li>任意目录输入<code>arm-linux-gnueabihf-gcc -v</code> 即可查看编译器版本号</li>\n<li>arm 表示这是编译 arm 架构代码的编译器。<br> linux 表示运行在 linux 环境下。<br> gnueabihf 表示嵌入式二进制接口。<br> gcc 表示是 gcc 工具</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"烧写程序\"><a href=\"#烧写程序\" class=\"headerlink\" title=\"烧写程序\"></a>烧写程序</h1><h2 id=\"烧写Uboot\"><a href=\"#烧写Uboot\" class=\"headerlink\" title=\"烧写Uboot\"></a>烧写Uboot</h2><h3 id=\"烧写到SD卡，通过ta启动uboot\"><a href=\"#烧写到SD卡，通过ta启动uboot\" class=\"headerlink\" title=\"烧写到SD卡，通过ta启动uboot\"></a>烧写到SD卡，通过ta启动uboot</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">chmod 777 imxdownload<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">烧写到 SD 卡，注意区别设备号 不能烧写到/dev/sda 或 sda1 设备里面！</span><br>./imxdownload u-boot.bin /dev/sdd<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">烧写uboot之后就可以通过网络的方式加载 linux kernel 和 rootfs 参考boot章节</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者通过mfg工具将准备好的固件打包下载到特定存储介质上</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"烧写到EMMC-NAND，通过ta启动uboot\"><a href=\"#烧写到EMMC-NAND，通过ta启动uboot\" class=\"headerlink\" title=\"烧写到EMMC&#x2F;NAND，通过ta启动uboot\"></a>烧写到EMMC&#x2F;NAND，通过ta启动uboot</h3><h1 id=\"U-Boot\"><a href=\"#U-Boot\" class=\"headerlink\" title=\"U-Boot\"></a>U-Boot</h1><p>uboot 的全称是 Universal Boot Loader。</p>\n<p>Linux 系统要启动就必须需要一个 bootloader 程序，也就说芯片上电以后先运行一段bootloader 程序。这段 bootloader程序会先初始化 DDR等外设，然后将Linux 内核从flash(NAND，NOR FLASH，SD，MMC 等)拷贝到 DDR 中，最后启动 Linux 内核。当然了，bootloader 的实际工作要复杂的多，但是它最主要的工作就是启动 Linux 内核，bootloader 和 Linux 内核的关系就跟 PC 上的 BIOS 和 Windows 的关系一样，bootloader 就相当于 BIOS。所以我们要先搞定bootloader，很庆幸，有很多现成的 bootloader 软件可以使用，比如 U-Boot、vivi、RedBoot 等等，其中以 U-Boot 使用最为广泛。</p>\n<p>U-Boot分为以下几种</p>\n<ul>\n<li>第一种，uboot官方维护的uboot代码，更新最快，包含所有常用芯片。</li>\n<li>第二种，半导体厂商维护的uboot代码，例如NXP的uboot，针对性更强，对自己家芯片的支持性更好</li>\n<li>第三种，产品开发公司维护的uboot代码，使用芯片的公司自己添加了一些支持，boot移植就是讲的这个</li>\n</ul>\n<p><a href=\"https://github.com/nxp-imx/uboot-imx\">NXP uboot-imx 链接</a></p>\n<blockquote>\n<p><span style=\"color:red\"><strong>！注意！</strong></span></p>\n<ul>\n<li>只能在 uboot 中 ping 其他的机器，其他机器不能 ping uboot，因为 uboot 没有对 ping命令做处理，如果用其他的机器 ping uboot 的话会失败！</li>\n<li>uboot 命令中的数字都是十六进制的！不是十进制的！</li>\n<li>EMMC 核心板 uboot 环境变量的存储起始地址就是第1536(0x600)block。1536*512&#x3D;786432</li>\n<li><code>u-boot.imx</code>是从第0个分区的第2个block开始的。</li>\n<li>千万不要写 SD 卡或者 EMMC 的前两个块(扇区)，里面保存着分区表！</li>\n</ul>\n</blockquote>\n<h2 id=\"Uboot的编译\"><a href=\"#Uboot的编译\" class=\"headerlink\" title=\"Uboot的编译\"></a>Uboot的编译</h2><ol>\n<li><p>安装库 <code>sudo apt-get install libncurses5-dev</code></p>\n</li>\n<li><p>解压对应的uboot代码 <code>tar -vxjf uboot-imx-2016.03-2.1.0-g8b546e4.tar.bz2</code></p>\n</li>\n<li><p>使用脚本编译uboot代码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用了 make 命令，用于清理工程，也就是每次在编译 uboot 之前都清理一下工程。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里的 make 命令带有三个参数，第一个是 ARCH，也就是指定架构，这里肯定是 arm；</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">第二个参数 CROSS_COMPILE 用于指定编译器，只需要指明编译器前缀就行了，比如 arm-linux-gnueabihf-gcc 编译器的前缀就是“arm-linux-gnueabihf-”</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">最后一个参数 distclean 就是清除工程</span><br>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设定配置文件为 mx6ull_14x14_ddr512_emmc_defconfig</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这个配置文件在 uboot 源码的 configs 目录中</span><br>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_alientek_emmc_defconfig<br>make V=1 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j16<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>　uboot 是 bootloader 的一种，可以用来引导Linux，但是 uboot 除了引导 Linux 以外还可以引导其它的系统，而且 uboot 还支持其它的架构和外设，比如 USB、网络、SD 卡等。这些都是可以配置的，需要什么功能就使能什么功能。所以在编译 uboot 之前，一定要根据自己的需求配置 uboot。而这个配置文件在上面的例子中就是<code>mx6ull_alientek_emmc_defconfig</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"Uboot的启动\"><a href=\"#Uboot的启动\" class=\"headerlink\" title=\"Uboot的启动\"></a>Uboot的启动</h2><p>通过前面介绍过的烧写程序的方法将uboot烧写到设备，修改启动方式，启动对应设备内的uboot程序。</p>\n<p>接上串口，不出意外就会出现下面的提示。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">指示了uboot版本 和 编译时间</span><br>U-Boot 2016.03-g0ae7e33 (Aug 14 2022 - 19:42:45 +0800)<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">指示cpu型号 和 运行频率</span><br>CPU:   Freescale i.MX6ULL rev1.1 792 MHz (running at 396 MHz)<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">CPU温度范围 和 当前温度</span><br>CPU:   Industrial temperature grade (-40C to 105C) at 47C<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">复位原因 当前的复位原因是 POR。I.MX6ULL 芯片上有个 POR_B 引脚，将这个引脚拉低即可复位。</span><br>Reset cause: POR<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">board name</span><br>Board: I.MX6U ALPHA|MINI<br>I2C:   ready<br>DRAM:  512 MiB<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">当前有两个 MMC/SD 卡控制器：FSL_SDHC(0)和 FSL_SDHC(1)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">正点原子的 I.MX6ULL EMMC 核心板上 FSL_SDHC(0)接的 SD(TF)卡 FSL_SDHC(1)接的 EMMC。</span><br>MMC:   FSL_SDHC: 0, FSL_SDHC: 1<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">标准输入、标准输出和标准错误所使用的终端，这里都使用串口(serial)作为终端。</span><br>In:    serial<br>Out:   serial<br>Err:   serial<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">切换到 emmc 的第 0 个分区上，因为当前的 uboot 是 emmc 版本的，也就是从 emmc 启动的。</span><br>switch to partitions #0, OK<br>mmc1(part 0) is current device<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">网口信息，提示我们当前使用的 FEC1 这个网口，I.MX6ULL 支持两个网口。</span><br>Net:   FEC1<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">提示正常启动，也就是说 uboot 要从 emmc 里面读取环境变量和参数信息启动 Linux内核了。</span><br>Normal Boot<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">倒计时结束之前按下任意键就会进入Linux命令行模式。如果在倒计时结束以后没有按下，那么Linux内核就会启动，Linux内核一旦启动，uboot就会寿终正寝。</span><br>Hit any key to stop autoboot: 2<br></code></pre></td></tr></table></figure>\n\n<p>如果在 3 秒倒计时结束之前按下任意键，那么就会进入 uboot 的命令行模式。</p>\n<h2 id=\"Uboot的命令及相关操作\"><a href=\"#Uboot的命令及相关操作\" class=\"headerlink\" title=\"Uboot的命令及相关操作\"></a>Uboot的命令及相关操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 <span class=\"hljs-built_in\">help</span> 或者 ? 即可查看当前uboot支持的命令</span><br>==&gt; help<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 ? <span class=\"hljs-built_in\">env</span> 或者 <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">help</span> 即可查看 <span class=\"hljs-built_in\">env</span> 命令的使用方法</span><br>==&gt; env help<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bdinfo\"><a href=\"#bdinfo\" class=\"headerlink\" title=\"bdinfo\"></a>bdinfo</h4><p>DRAM 的起始地址和大小、启动参数保存起始地址、波特率、sp(堆栈指针)起始地址等信息。</p>\n<h4 id=\"△-env\"><a href=\"#△-env\" class=\"headerlink\" title=\"△ env\"></a>△ env</h4><ul>\n<li><code>env print</code> 输出环境变量</li>\n<li><strong><code>env set</code> 设置环境变量，设置为空就是删除环境变量</strong><ul>\n<li>示例 设置serverip <code>env set serverip 192.168.192.100</code></li>\n<li>示例 带空格的环境变量 <code>env set teest_args &#39;xxx xxx xxx&#39;</code></li>\n</ul>\n</li>\n<li><code>env save</code> 用set设定的环境变量只是临时的，使用save命令将环境变量固化到非易失存储器内。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>环境变量名</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bootdelay</td>\n<td>boot的延迟等待时间</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>bootcmd</td>\n<td>前面说过 uboot 倒计时结束以后就会启动 Linux 系统，其实就是执行的 bootcmd 中的启动命令。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ipaddr</td>\n<td>开发板 ip 地址，可以不设置，使用 dhcp 命令来从路由器获取 IP 地址。</td>\n</tr>\n<tr>\n<td>ethaddr</td>\n<td>开发板的 MAC 地址，一定要设置。</td>\n</tr>\n<tr>\n<td>gatewayip</td>\n<td>网关地址。</td>\n</tr>\n<tr>\n<td>netmask</td>\n<td>子网掩码。</td>\n</tr>\n<tr>\n<td>serverip</td>\n<td>服务器 IP 地址，也就是 Ubuntu 主机 IP 地址，用于调试代码。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">setenv ipaddr 192.168.192.120<br>setenv ethaddr b8:ae:1d:01:00:00<br>setenv gatewayip 192.168.192.1<br>setenv netmask 255.255.255.0<br>setenv serverip 192.168.192.100<br>saveenv<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"md-DRAM查看\"><a href=\"#md-DRAM查看\" class=\"headerlink\" title=\"md DRAM查看\"></a>md DRAM查看</h4><p>md 命令用于显示内存值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">md[.b, .w, .l] address [# of objects]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[.b .w .l]对应 byte、word 和 long</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">address 就是要查看的内存起始地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[# of objects]表示要查看的数据长度 16进制 单位是前面的bwl</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从0x80000000 查看 0x10 个 long 的数据</span><br>md.l 80000000 10<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"nm-DRAM修改\"><a href=\"#nm-DRAM修改\" class=\"headerlink\" title=\"nm DRAM修改\"></a>nm DRAM修改</h4><p>地址不自增</p>\n<h4 id=\"mm-DRAM修改\"><a href=\"#mm-DRAM修改\" class=\"headerlink\" title=\"mm DRAM修改\"></a>mm DRAM修改</h4><p>mm 命令用于修改指定地址的内存值，地址自增。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mm[.b, .w, .l] address<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改 0x80000000 的数据</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入 q 即可退出修改</span><br>=&gt; mm.l 80000010<br>80000010: 00000000 ? _<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mw-填充DRAM\"><a href=\"#mw-填充DRAM\" class=\"headerlink\" title=\"mw 填充DRAM\"></a>mw 填充DRAM</h4><p>命令 mw 用于使用一个指定的数据填充一段内存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mw[.b, .w, .l] address value [count]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br>=&gt; mw.l 80000010 faaffaaf 4<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"cp-copy\"><a href=\"#cp-copy\" class=\"headerlink\" title=\"cp copy\"></a>cp copy</h4><p>cp 是数据拷贝命令，用于将 DRAM 中的数据从一段内存拷贝到另一段内存中，或者把 NorFlash 中的数据拷贝到 DRAM 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cp[.b, .w, .l] source target count<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">source</span> 为源地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">target 为目的地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">count 为拷贝的数量 单位是前面的bwl</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"dhcp\"><a href=\"#dhcp\" class=\"headerlink\" title=\"dhcp\"></a>dhcp</h4><p>dhcp 用于从路由器获取 IP 地址</p>\n<h4 id=\"△-nfs\"><a href=\"#△-nfs\" class=\"headerlink\" title=\"△ nfs\"></a>△ nfs</h4><p>nfs - boot image via network using NFS protocol</p>\n<p>Usage:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nfs [loadAddress] [[hostIPaddr:]bootfilename]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">loadAddress 是要保存的 DRAM 地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[[hostIPaddr:]bootfilename]是要下载的文件地址</span><br><br>nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/u-boot.imx<br>nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage<br>nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"△-tftp-tftpboot\"><a href=\"#△-tftp-tftpboot\" class=\"headerlink\" title=\"△ tftp &amp; tftpboot\"></a>△ tftp &amp; tftpboot</h4><p>tftpboot - boot image via network using TFTP protocol</p>\n<p>Usage:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tftpboot [loadAddress] [[hostIPaddr:]bootfilename]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">loadAddress 是要保存的 DRAM 地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[[hostIPaddr:]bootfilename]是要下载的文件地址</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"△-mmc\"><a href=\"#△-mmc\" class=\"headerlink\" title=\"△ mmc\"></a>△ mmc</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mmc info<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">△ 显示当前mmc的信息</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- display info of the current MMC device</span><br><br>mmc read addr blk# cnt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">addr 是数据读取到 DRAM 中的地址</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">blk 是要读取的块起始地址(十六进制)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">cnt 是块计数</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">=&gt; mmc <span class=\"hljs-built_in\">read</span> 80800000 600 10</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从mmc的第0x600个block开始，读取0x10个block，到DRAM的0x80800000处</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意从mmc info可以看到一个block的大小是512Byte</span><br><br>mmc write addr blk# cnt<br>mmc erase blk# cnt<br>mmc rescan<br><br>mmc part<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">△ 显示分区</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- lists available partition on current mmc device</span><br><br>mmc dev [dev] [part]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">△ 显示或者切换当前的设备</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[dev] 设备号，mmc list可以查看</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">[part] 分区号，mmc part可以查看</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- show or <span class=\"hljs-built_in\">set</span> current mmc device [partition]</span><br><br>mmc list <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- lists available devices</span><br><br>mmc hwpartition [args...] <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- does hardware partitioning</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"> arguments (sizes <span class=\"hljs-keyword\">in</span> 512-byte blocks):</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   [user [enh start cnt] [wrrel &#123;on|off&#125;]] - sets user data area attributes</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   [gp1|gp2|gp3|gp4 cnt [enh] [wrrel &#123;on|off&#125;]] - general purpose partition</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">   [check|<span class=\"hljs-built_in\">set</span>|complete] - mode, complete <span class=\"hljs-built_in\">set</span> partitioning completed</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"> WARNING: Partitioning is a write-once setting once it is <span class=\"hljs-built_in\">set</span> to complete.</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"> Power cycling is required to initialize partitions after <span class=\"hljs-built_in\">set</span> to complete.</span><br><br>mmc bootbus dev boot_bus_width reset_boot_bus_width boot_mode<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- Set the BOOT_BUS_WIDTH field of the specified device</span><br><br>mmc bootpart-resize &lt;dev&gt; &lt;boot part size MB&gt; &lt;RPMB part size MB&gt;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- Change sizes of boot and RPMB partitions of specified device</span><br><br>mmc partconf dev boot_ack boot_partition partition_access<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- Change the bits of the PARTITION_CONFIG field of the specified device</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">说明：设置启动分区</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">dev：mmc设备编号</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">boot_ack：是否应答</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">boot_partition：用户选择发送到主机的引导数据</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">partition_access：用户选择要访问的分区</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">=&gt; mmc partconf 1 1 0 0</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将mmc dev 1 设置为启动分区</span><br><br>mmc rst-function dev value<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- Change the RST_n_FUNCTION field of the specified device</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">  WARNING: This is a write-once field and 0 / 1 / 2 are the only valid values.</span><br><br>mmc setdsr &lt;value&gt; <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">- <span class=\"hljs-built_in\">set</span> DSR register value</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>在Uboot中更新uboot程序</strong></p>\n<blockquote>\n<p>思路就是先通过网络把文件存在DRAM中（nfs、tftp），再将文件写入到特定位置（mmc write）。</p>\n<p>如果 EMMC 里面烧写了 Linux 系统的话，EMMC 是有 3 个分区的</p>\n<ul>\n<li>第 0 个分区存放 uboot，</li>\n<li>第 1 个分区存放Linux 镜像文件和设备树，</li>\n<li>第 2 个分区存放根文件系统。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mmc dev 1 0              # 切换到 EMMC 分区 0<br>tftp 80800000 u-boot.imx # 下载 u-boot.imx 到 DRAM<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或 nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/u-boot.imx</span><br>mmc write 80800000 2 32E # 烧写 u-boot.imx 到 EMMC 中 (注意这里是block的数量，xxx Byte/512Byte)<br>mmc partconf 1 1 0 0     # 分区配置，EMMC 需要这一步！ SD卡不需要。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"fatinfo\"><a href=\"#fatinfo\" class=\"headerlink\" title=\"fatinfo\"></a>fatinfo</h4><p>fatinfo 命令用于查询指定 MMC 设备分区的文件系统信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fatinfo &lt;interface&gt; [&lt;dev[:part]&gt;]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interface 表示接口，比如 mmc，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">dev 是查询的设备号，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">part 是要查询的分区。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查询 EMMC 分区 1 的文件系统信息，命令如下：</span><br>=&gt; fatinfo mmc 1:1<br>Interface:  MMC<br>  Device 1: Vendor: Man 000015 Snr 3ee65248 Rev: 0.6 Prod: 8GTF4R<br>            Type: Removable Hard Disk<br>            Capacity: 7456.0 MB = 7.2 GB (15269888 x 512)<br>Filesystem: FAT32 &quot;NO NAME    &quot;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"fstype-查看文件系统格式\"><a href=\"#fstype-查看文件系统格式\" class=\"headerlink\" title=\"fstype 查看文件系统格式\"></a>fstype 查看文件系统格式</h4><p>fstype 用于查看 MMC 设备某个分区的文件系统格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fstype &lt;interface&gt; &lt;dev&gt;:&lt;part&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">正点原子 EMMC 核心板上的 EMMC 默认有 3 个分区，我们来查看一下这三个分区的文件系统格式</span><br>=&gt; fstype mmc 1:0<br>Failed to mount ext2 filesystem...<br>** Unrecognized filesystem type **<br>=&gt; fstype mmc 1:1<br>fat<br>=&gt; fstype mmc 1:2<br>ext4<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从上可以看出，分区 0 格式未知，因为分区 0 存放的 uboot，并且分区 0 没有格式化，所以文件系统格式未知。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">分区 1 的格式为 fat，分区 1 用于存放 linux 镜像和设备树。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">分区 2 的格式为 ext4，用于存放 Linux 的根文件系统(rootfs)。</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"fatls-fat列出文件\"><a href=\"#fatls-fat列出文件\" class=\"headerlink\" title=\"fatls fat列出文件\"></a>fatls fat列出文件</h4><p>fatls 命令用于查询 FAT 格式设备的目录和文件信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fatls &lt;interface&gt; [&lt;dev[:part]&gt;] [directory]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interface 是要查询的接口，比如 mmc，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">dev 是要查询的设备号，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">part 是要查询的分区，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">directory是要查询的目录。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查询 EMMC 分区 1 中的所有的目录和文件，输入命令：</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">分区1中存放着dts文件，通过这个命令可以查看到</span><br>=&gt; fatls mmc 1:1 /<br>  6785480   zimage<br>    39459   imx6ull-14x14-emmc-4.3-480x272-c.dtb<br>    39459   imx6ull-14x14-emmc-4.3-800x480-c.dtb<br>    39459   imx6ull-14x14-emmc-7-800x480-c.dtb<br>    39459   imx6ull-14x14-emmc-7-1024x600-c.dtb<br>    39459   imx6ull-14x14-emmc-10.1-1280x800-c.dtb<br>    40295   imx6ull-14x14-emmc-hdmi.dtb<br>    40203   imx6ull-14x14-emmc-vga.dtb<br><br>8 file(s), 0 dir(s)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"fatload-设备文件load到DRAM\"><a href=\"#fatload-设备文件load到DRAM\" class=\"headerlink\" title=\"fatload 设备文件load到DRAM\"></a>fatload 设备文件load到DRAM</h4><p>fatload 命令用于将指定的文件读取到 DRAM 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fatload &lt;interface&gt; [&lt;dev[:part]&gt; [&lt;addr&gt; [&lt;filename&gt; [bytes [pos]]]]]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interface 为接口，比如 mmc，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">dev 是设备号，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">part 是分区，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">addr 是保存在 DRAM 中的起始地址，filename 是要读取的文件名字。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">bytes 表示读取多少字节的数据，如果 bytes 为 0 或者省略的话表示读取整个文件。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">pos 是要读的文件相对于文件首地址的偏移，如果为 0 或者省略的话表示从文件首地址开始读取。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">我们将 EMMC 分区 1 中的 zImage 文件读取到 DRAM 中的 0X80800000 地址处，命令如下：</span><br>fatload mmc 1:1 80800000 zImage<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"fatwrite-文件写入设备\"><a href=\"#fatwrite-文件写入设备\" class=\"headerlink\" title=\"fatwrite 文件写入设备\"></a>fatwrite 文件写入设备</h4><p>fatwirte 命令用于将 DRAM 中的数据写入到 MMC 设备中</p>\n<ul>\n<li>我们可以通过 fatwrite 命令在 uboot 中更新 linux 镜像文件和设备树。</li>\n<li>注意！uboot 默认没有使能 fatwrite 命令，需要修改板子配置头文件。找到自己开发板对应的配置头文件然后添加如下一行宏定义来使能 fatwrite 命令：<br>  <code>#define CONFIG_FAT_WRITE /* 使能 fatwrite 命令 */</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">fatwrite &lt;interface&gt; &lt;dev[:part]&gt; &lt;addr&gt; &lt;filename&gt; &lt;bytes&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interface 为接口，比如 mmc，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">dev 是设备号，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">part 是分区，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">addr 是要写入的数据在 DRAM 中的起始地址，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">filename 是写入的数据文件名字，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">bytes 表示要写入多少字节的数据。</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把位于 0x80800000 的 0x6788f8 字节的 zimage 文件 写入到 mmc 1:1 中</span><br>fatwrite mmc 1:1 80800000 zImage 6788f8<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ext4ls-ext4列出文件\"><a href=\"#ext4ls-ext4列出文件\" class=\"headerlink\" title=\"ext4ls ext4列出文件\"></a>ext4ls ext4列出文件</h4><h4 id=\"ext4load\"><a href=\"#ext4load\" class=\"headerlink\" title=\"ext4load\"></a>ext4load</h4><h4 id=\"ext4write\"><a href=\"#ext4write\" class=\"headerlink\" title=\"ext4write\"></a>ext4write</h4><h4 id=\"reset-重启\"><a href=\"#reset-重启\" class=\"headerlink\" title=\"reset 重启\"></a>reset 重启</h4><h4 id=\"go-执行指定地址的程序\"><a href=\"#go-执行指定地址的程序\" class=\"headerlink\" title=\"go 执行指定地址的程序\"></a>go 执行指定地址的程序</h4><h4 id=\"△-run-运行环境变量中的脚本\"><a href=\"#△-run-运行环境变量中的脚本\" class=\"headerlink\" title=\"△ run 运行环境变量中的脚本\"></a>△ run 运行环境变量中的脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">run bootcmd<br><br><br>setenv boot2nfs &#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&#x27;<br>setenv boot2nfs &#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&#x27;<br>run boot2nfs<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mtest-DRAM-test\"><a href=\"#mtest-DRAM-test\" class=\"headerlink\" title=\"mtest DRAM test\"></a>mtest DRAM test</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mtest [start [end [pattern [iterations]]]]<br><br>=&gt; mtest 80000000 80001000<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Uboot的BOOT操作\"><a href=\"#Uboot的BOOT操作\" class=\"headerlink\" title=\"Uboot的BOOT操作\"></a>Uboot的BOOT操作</h2><p>uboot 的本质工作是引导 Linux，所以 uboot 肯定有相关的 boot(引导)命令来启动 Linux。常用的跟 boot 有关的命令有：bootz、bootm 和 boot。</p>\n<blockquote>\n<p>我们也可以通过设置环境变量，通过run指令来执行环境变量的方式来启动预定义的linux系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">run bootcmd<br><br><br>setenv boot2nfs &#x27;nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000&#x27;<br>run boot2nfs<br><br><br><br>setenv serverip &quot;192.168.3.5’<br>setenv ipaddr &#x27;192.168.3.135&#x27;<br>setenv gatewayip &#x27;192.168.3.1&#x27;<br>setenv netmask &#x27;255.255.255.0&#x27;<br>setenv oikiou_zImage &#x27;/home/frank/linuxMini/nfs_dir/oikiou_zImage&#x27;<br>setenv oikiou_dtbp &#x27;/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb&#x27;<br>setenv oikiou_rootfs &#x27;/home/frank/linuxMini/nfs_dir/rootfs_oikiou_buildroot&#x27;<br>setenv oikiou_netargs &#x27;setenv bootargs console=ttymxc0,115200 root=/dev/nfs nfsroot=$&#123;serverip&#125;:$&#123;oikiou_rootfs&#125;,proto=tcp rw ip=$&#123;ipaddr&#125;:$&#123;serverip&#125;:$&#123;gatewayip&#125;:$&#123;netmask&#125;::eth0:off&#x27;<br>setenv onetboot &#x27;echo Booting from net ...; run oikiou_netargs; nfs $&#123;loadaddr&#125; $&#123;serverip&#125;:$&#123;oikiou_zImage&#125;; nfs $&#123;fdt_addr&#125; $&#123;serverip&#125;:$&#123;oikiou_dtbp&#125;; bootz $&#123;loadaddr&#125; - $&#123;fdt_addr&#125;;&#x27;<br>run onetboot<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h4 id=\"bootz\"><a href=\"#bootz\" class=\"headerlink\" title=\"bootz\"></a>bootz</h4><p>要启动 Linux，需要先将 Linux 镜像文件拷贝到 DRAM 中，如果使用到设备树的话也需要将设备树拷贝到 DRAM 中。</p>\n<p>可以从 EMMC 或者 NAND 等存储设备中将 Linux 镜像和设备树文件拷贝到 DRAM，也可以通过 nfs 或者 tftp 将 Linux 镜像文件和设备树文件下载到 DRAM 中。<br>不管用那种方法，只要能将 Linux 镜像和设备树文件存到 DRAM 中就行，然后使用 bootz 命令来启动linux</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bootz [addr [initrd[:size]] [fdt]]<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">addr 是 Linux 镜像文件在 DRAM 中的位置，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">initrd 是 initrd 文件在DRAM 中的地址，如果不使用 initrd 的话使用‘-’代替即可，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">fdt 就是设备树文件在 DRAM 中的地址。</span><br></code></pre></td></tr></table></figure>\n\n<p>网络方式通过bootz启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage<br>nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb<br>bootz 80800000 - 83000000<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bootm\"><a href=\"#bootm\" class=\"headerlink\" title=\"bootm\"></a>bootm</h4><p>bootm 和 bootz 功能类似，但是 bootm 用于启动 uImage 镜像文件。</p>\n<h4 id=\"boot\"><a href=\"#boot\" class=\"headerlink\" title=\"boot\"></a>boot</h4><p>boot 命令也是用来启动 Linux 系统的，只是 boot 是通过读取环境变量 bootcmd 来启动 Linux 系统。</p>\n<p>原始的<code>bootcmd</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">run findfdt;<br>mmc dev $&#123;mmcdev&#125;;<br>mmc dev $&#123;mmcdev&#125;;<br>if mmc rescan;<br>then if run loadbootscript;<br>then run bootscript;<br>else if run loadimage;<br>then run mmcboot;<br>else run netboot;<br>fi; <br>fi; <br>else run netboot; <br>fi<br><br>&#x27;run findfdt;mmc dev $&#123;mmcdev&#125;;mmc dev $&#123;mmcdev&#125;;if mmc rescan;then if run loadbootscript;then run bootscript;else if run loadimage;then run mmcboot;else run netboot;fi;fi;else run netboot;fi&#x27;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Linux-Kernel-内核\"><a href=\"#Linux-Kernel-内核\" class=\"headerlink\" title=\"Linux Kernel 内核\"></a>Linux Kernel 内核</h1><p>Linux 由 Linux 基金会管理与发布，Linux 官网为 <a href=\"https://www.kernel.org/\">https://www.kernel.org</a></p>\n<p>Linux内核和Uboot也是类似，有linux原生代码，和NXP维护测试ok的代码。</p>\n<h2 id=\"Kernel的编译\"><a href=\"#Kernel的编译\" class=\"headerlink\" title=\"Kernel的编译\"></a>Kernel的编译</h2><p>编译内核之前需要先在 ubuntu 上安装 <code>lzop</code> 库，否则内核编译会失败！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install lzop<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Kernel文件解析\"><a href=\"#Kernel文件解析\" class=\"headerlink\" title=\"Kernel文件解析\"></a>Kernel文件解析</h2><h3 id=\"arch\"><a href=\"#arch\" class=\"headerlink\" title=\"arch\"></a>arch</h3><p><code>arch/arm/configs</code> 中就包含有 I.MX6U-ALPHA 开发板的默认配置文件。</p>\n<p><code>arch/arm/boot/dts</code> 目录里面是对应开发平台的设备树文件(.dtb文件)。</p>\n<p><strong><code>arch/arm/boot</code> 目录下会保存编译出来的 Im age 和 zImage 镜像文件，而 zImage 就是我们要用的 linux 镜像文件。</strong><br><code>arch/arm/mach-xxx</code> 目录分别为相应平台的驱动和初始化文件，比如 mach-imx 目录里面就是 I.MX 系列 CPU 的驱动和初始化文件。</p>\n<h3 id=\"drivers\"><a href=\"#drivers\" class=\"headerlink\" title=\"drivers\"></a>drivers</h3><p>驱动目录文件，此目录根据驱动类型的不同，分门别类进行整理，比如 drivers&#x2F;i2c 就是 I2C相关驱动目录，<code>drivers/gpio</code> 就是 GPIO 相关的驱动目录，这是我们学习的重点。</p>\n<h1 id=\"Rootfs-根文件系统\"><a href=\"#Rootfs-根文件系统\" class=\"headerlink\" title=\"Rootfs 根文件系统\"></a>Rootfs 根文件系统</h1><p>Linux 中的根文件系统更像是一个文件夹或者叫做目录，在这个目录里面会有很多的子目录。根目录下和子目录中会有很多的文<br>件，这些文件是 Linux 运行所必须的，比如库、常用的软件和命令、设备文件、配置文件等等。</p>\n<p>根文件系统是内核启动时所mount的第一个文件系统，内核代码映像文件保存在根文件系统中，而系统引导启动程序会在根文件系统挂载之后从中把一些基本的初始化脚本和服务等加载到内存中去运行。</p>\n<h2 id=\"rootfs的构建-busybox\"><a href=\"#rootfs的构建-busybox\" class=\"headerlink\" title=\"rootfs的构建 (busybox)\"></a>rootfs的构建 (busybox)</h2><p>usyBox 是一个集成了大量的 Linux 命令和工具的软件，像 ls、mv、ifconfig 等命令 BusyBox 都会提供。BusyBox 就是一<br>个大的工具箱，这个工具箱里面集成了 Linux 的许多工具和命令。一般下载 BusyBox 的源码，然后配置 BusyBox，选择自己想要的功能，最后编译即可。</p>\n<p>BusyBox 官网：<a href=\"https://busybox.net/\">https://busybox.net/</a></p>\n<ol>\n<li><p>我们自己下载对应版本的busybox，这里示例版本是<code>busybox-1.35.0</code>。<br> 对于现在2023年7月25日来说<code>busybox-1.36.1</code>这个版本太新了容易有一些问题，暂时不用。</p>\n</li>\n<li><p>下载对应版本的源码后我们先编辑顶层<code>Makefile</code>，编辑<code>CROSS_COMPILE ?= arm-linux-gnueabihf-</code>，指定编译器。</p>\n</li>\n<li><p><code>busybox</code>的官方不支持中文，所以需要修改一些代码来完成对中文的支持。</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">diff -Nura a/libbb/printable_string.c b/libbb/printable_string.c<br>--- a/libbb/printable_string.c <span class=\"hljs-number\">2021</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-12</span> <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">27</span>:<span class=\"hljs-number\">20.785120436</span> <span class=\"hljs-number\">-0500</span><br>+++ b/libbb/printable_string.c <span class=\"hljs-number\">2021</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-12</span> <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">37.481954486</span> <span class=\"hljs-number\">-0500</span><br>@@ <span class=\"hljs-number\">-28</span>,<span class=\"hljs-number\">8</span> +<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">10</span> @@<br>&#125;<br><span class=\"hljs-keyword\">if</span> (c &lt; <span class=\"hljs-string\">&#x27; &#x27;</span>)<br>    <span class=\"hljs-keyword\">break</span>;<br>-  <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-number\">0x7f</span>)<br>+  <span class=\"hljs-comment\">/*support chinese display*/</span><br>+  <span class=\"hljs-comment\">/*if (c &gt;= 0x7f)</span><br><span class=\"hljs-comment\">    break;</span><br><span class=\"hljs-comment\">+  */</span><br>s++;<br>&#125;<br><br>@@ <span class=\"hljs-number\">-42</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">9</span> @@<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> c = *d;<br>    <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)<br>    <span class=\"hljs-keyword\">break</span>;<br>-   <span class=\"hljs-keyword\">if</span> (c &lt; <span class=\"hljs-string\">&#x27; &#x27;</span> || c &gt;= <span class=\"hljs-number\">0x7f</span>)<br>+   <span class=\"hljs-comment\">/*support chinese display*/</span><br>+   <span class=\"hljs-comment\">/*if (c &lt; &#x27; &#x27; || c &gt;= 0x7f)*/</span><br>+   <span class=\"hljs-keyword\">if</span> (c &lt; <span class=\"hljs-string\">&#x27; &#x27;</span> )<br>    *d = <span class=\"hljs-string\">&#x27;?&#x27;</span>;<br>    d++;<br>&#125;<br>diff -Nura a/libbb/unicode.c b/libbb/unicode.c<br>--- a/libbb/unicode.c <span class=\"hljs-number\">2021</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-12</span> <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">37.601117822</span> <span class=\"hljs-number\">-0500</span><br>+++ b/libbb/unicode.c <span class=\"hljs-number\">2021</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-12</span> <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">44</span>:<span class=\"hljs-number\">05.502420078</span> <span class=\"hljs-number\">-0500</span><br>@@ <span class=\"hljs-number\">-1019</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">1019</span>,<span class=\"hljs-number\">9</span> @@<br>    <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-type\">int</span>)--width &gt;= <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>-    *d++ = (c &gt;= <span class=\"hljs-string\">&#x27; &#x27;</span> &amp;&amp; c &lt; <span class=\"hljs-number\">0x7f</span>) ? c : <span class=\"hljs-string\">&#x27;?&#x27;</span>;<br>+    <span class=\"hljs-comment\">/*support chinese display*/</span><br>+    <span class=\"hljs-comment\">/**d++ = (c &gt;= &#x27; &#x27; &amp;&amp; c &lt; 0x7f) ? c : &#x27;?&#x27;;*/</span><br>+    *d++ = (c &gt;= <span class=\"hljs-string\">&#x27; &#x27;</span>) ? c : <span class=\"hljs-string\">&#x27;?&#x27;</span>;<br>    src++;<br>    &#125;<br>    *d = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>@@ <span class=\"hljs-number\">-1027</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">1029</span>,<span class=\"hljs-number\">9</span> @@<br>    d = dst = xstrndup(src, width);<br>    <span class=\"hljs-keyword\">while</span> (*d) &#123;<br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> c = *d;<br>-    <span class=\"hljs-keyword\">if</span> (c &lt; <span class=\"hljs-string\">&#x27; &#x27;</span> || c &gt;= <span class=\"hljs-number\">0x7f</span>)<br>+    <span class=\"hljs-comment\">/* support chinese display*/</span><br>+    <span class=\"hljs-comment\">/*if (c &lt; &#x27; &#x27; || c &gt;= 0x7f)*/</span><br>+    <span class=\"hljs-keyword\">if</span> (c &lt; <span class=\"hljs-string\">&#x27; &#x27;</span>)<br>    *d = <span class=\"hljs-string\">&#x27;?&#x27;</span>;<br>    d++;<br>    &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>busybox</code>的配置。</p>\n<ol>\n<li><p>先对busybox进行默认选项配置，再在这个基础上进行微调。</p>\n</li>\n<li><p>运行<code>make defconfig</code>，进行默认选项配置。<br> busybox有以下几种配置选项。</p>\n<ol>\n<li>defconfig，缺省配置，也就是默认配置选项。</li>\n<li>allyesconfig，全选配置，也就是选中 busybox 的所有功能。</li>\n<li>allnoconfig，最小配置。</li>\n</ol>\n</li>\n<li><p>打开图像界面进行微调，<code>make menuconfig</code>。</p>\n<ol>\n<li><p>选中 这些选项</p>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">Settings-&gt; [*] vi-style line editing commands<br>Settings-&gt; [*] Support Unicode<br>Settings-&gt; [*] Check $LC_ALL, $LC_CTYPE and $LANG environment variables<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>配置结束</p>\n</li>\n</ol>\n</li>\n<li><p><code>busybox</code>的编译安装</p>\n<ol>\n<li><p>配置好 busybox 以后就可以编译了，我们要将编译结果存储到前面创建的 rootfs 目录中，之后将这个目录作为nfs的server文件夹，用于开发板的rootfs挂载。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">make<br>make install CONFIG_PREFIX=/home/frank/linuxMini/nfs_dir/rootfs<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>我们查看rootfs的输出文件夹 <code>/home/frank/linuxMini/nfs_dir/rootfs</code>。</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span></span><br>bin  linuxrc  sbin  usr<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">rootfs 目录下有 bin、sbin 和 usr 这三个目录，以及 linuxrc 这个文件。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">前面说过 Linux 内核 init 进程最后会查找用户空间的 init 程序，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">找到以后就会运行这个用户空间的 init 程序，从而切换到用户态。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果 bootargs 设置 init=/linuxrc，那么 linuxrc 就是可以作为用户空间的 init 程序，</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">所以用户态空间的 init 程序是 busybox 来生成的</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><code>busybox</code>完善</p>\n<ol>\n<li><p>可以看出来这个rootfs缺失很多文件，lib，ev、proc、mnt、sys、tmp 和 root 等</p>\n</li>\n<li><p>创建缺失的文件夹</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir dev proc mnt sys tmp root lib usr/lib -p<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>先添加lib文件，为了方便直接将所有的库文件都拷贝进去，这块后续可以根据用到的库文件做优化。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝 /lib</span><br>cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-<br>gnueabihf/libc/lib<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">“-d”表示拷贝符号链接</span><br>cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/lib/ -d<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ld-linux-armhf.so.3 会链接到 ld-2.19-2014.08-1-git.so 上我们将这个符号链接删掉，<span class=\"hljs-built_in\">cp</span>一份原来的文件代替</span><br>cd /home/frank/linuxMini/nfs_dir/rootfs/lib/<br>rm ld-linux-armhf.so.3<br>cp ld-2.19-2014.08-1-git.so ld-linux-armhf.so.3<br><br>cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/lib<br>cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/lib/ -d<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝 /usr/lib</span><br>cd /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/lib<br>cp *so* *.a /home/frank/linuxMini/nfs_dir/rootfs/usr/lib/ -d<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>给rootfs添加<code>/etc/init.d/rcS</code>文件</p>\n<ol>\n<li><p>创建<code>/etc/init.d/rcS</code>文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br><br>PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH<br>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib:/usr/lib<br>export PATH LD_LIBRARY_PATH<br>mount -a<br>mkdir /dev/pts<br>mount -t devpts devpts /dev/pts<br><br>echo /sbin/mdev &gt; /proc/sys/kernel/hotplug<br>mdev -s<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>rcS 是个 shell 脚本，Linux 内核启动以后需要启动一些服务，而 rcS 就是规定启动哪些文件的脚本文件。</p>\n<p>第 1 行，表示这是一个 shell 脚本。<br>第 3 行，PATH 环境变量保存着可执行文件可能存在的目录，这样我们在执行一些命令或 者可执行文件的时候就不会提示找不到文件这样的错误。<br>第 4 行，LD_LIBRARY_PATH 环境变量保存着库文件所在的目录。<br>第 5 行，使用 export 来导出上面这些环境变量，相当于声明一些“全局变量”。<br>第 7 行，使用 mount 命令来挂载所有的文件系统，这些文件系统由文件&#x2F;etc&#x2F;fstab 来指定， 所以我们一会还要创建&#x2F;etc&#x2F;fstab 文件。<br>第 8 和 9 行，创建目录&#x2F;dev&#x2F;pts，然后将 devpts 挂载到&#x2F;dev&#x2F;pts 目录中。<br>第 11 和 12 行，使用 mdev 来管理热插拔设备，通过这两行，Linux 内核就可以在&#x2F;dev 目录下自动创建设备节点。</p>\n</blockquote>\n</li>\n<li><p>将上面文件存储到<code>/etc/init.d/rcS</code>文件中，并给它加上可执行权限。</p>\n</li>\n</ol>\n</li>\n<li><p>给rootfs添加<code>/etc/fstab</code>文件</p>\n<ul>\n<li>fstab 在 Linux 开机以后自动配置哪些需要自动挂载的分区，格式如下：</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">&lt;file system&gt; &lt;mount point&gt; &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br>proc            /proc        proc    defaults   0      0<br>tmpfs           /tmp         tmpfs   defaults   0      0<br>sysfs           /sys         sysfs   defaults   0      0<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;file system&gt; &lt;mount point&gt; &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\"># &lt;file system&gt;：要挂载的特殊的设备，也可以是块设备，比如/dev/sda 等等。</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;mount point&gt;：挂载点。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;<span class=\"hljs-built_in\">type</span>&gt;：文件系统类型，比如 ext2、ext3、proc、romfs、tmpfs 等等。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;options&gt;：挂载选项，在 Ubuntu 中输入“man mount”命令可以查看具体的选项。一般使用 defaults，也就是默认选项，defaults 包含了 rw、suid、 dev、 <span class=\"hljs-built_in\">exec</span>、 auto、 nouser 和 async。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;dump&gt;：为 1 的话表示允许备份，为 0 不备份，一般不备份，因此设置为 0。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;pass&gt;：磁盘检查设置，为 0 表示不检查。根目录‘/’设置为 1，其他的都不能设置为 1，其他的分区从 2 开始。一般不在 fstab 中挂载根目录，因此这里一般设置为 0。</span><br></code></pre></td></tr></table></figure>\n\n</li>\n<li><p>给rootfs添加<code>/etc/inittab</code>文件</p>\n<ul>\n<li>init 程序会读取&#x2F;etc&#x2F;inittab这个文件，inittab 由若干条指令组成。每条指令的结构都是一样的，由以“:”分隔的 4 个段组成</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">etc/inittab</span><br>::sysinit:/etc/init.d/rcS<br>console::askfirst:-/bin/sh<br>::restart:/sbin/init<br>::ctrlaltdel:/sbin/reboot<br>::shutdown:/bin/umount -a -r<br>::shutdown:/sbin/swapoff -a<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;<span class=\"hljs-built_in\">id</span>&gt;:&lt;runlevels&gt;:&lt;action&gt;:&lt;process&gt;</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;<span class=\"hljs-built_in\">id</span>&gt;：每个指令的标识符，不能重复。但是对于 busybox 的 init 来说，&lt;<span class=\"hljs-built_in\">id</span>&gt;有着特殊意义。对于 busybox 而言&lt;<span class=\"hljs-built_in\">id</span>&gt;用来指定启动进程的控制 <span class=\"hljs-built_in\">tty</span>，一般我们将串口或者 LCD 屏幕设置为控制 <span class=\"hljs-built_in\">tty</span>。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;runlevels&gt;：对 busybox 来说此项完全没用，所以空着。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;action&gt;：动作，用于指定&lt;process&gt;可能用到的动作。</span><br>    sysinit<br>        在系统初始化的时候 process 才会执行一次。<br>    respawn<br>        当 process 终止以后马上启动一个新的。<br>    askfirst<br>        和 respawn 类似，在运行 process 之前在控制台上显示“Please press Enter to activate this console.”。只要用户按下“Enter”键以后才会执行 process。<br>    wait<br>        告诉 init，要等待相应的进程执行完以后才能继续执行。<br>    once<br>        仅执行一次，而且不会等待 process 执行完成。<br>    restart<br>        当 init 重启的时候才会执行 procee。<br>    ctrlaltdel<br>        当按下 ctrl+alt+del 组合键才会执行 process。<br>    shutdown<br>        关机的时候执行 process。<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;process&gt;：具体的动作，比如程序、脚本或命令等。</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><code>busybox</code>搭建完成。</p>\n</li>\n</ol>\n<h2 id=\"buildroot-配置-rootfs\"><a href=\"#buildroot-配置-rootfs\" class=\"headerlink\" title=\"buildroot 配置 rootfs\"></a>buildroot 配置 rootfs</h2><blockquote>\n<p>《第三篇 系统移植篇》我们最后讲解了如何使用 busybox 构建文件系统，busybox 仅仅只是帮我们构建好了一些常用的命令和文件，像 lib 库、&#x2F;etc 目录下的一些文件都需要我们自己手动创建，而且 busybox 构建的根文件系统默认没有用户名和密码设置。在后续的实验中，我们还要自己去移植一些第三方软件和库，比如 alsa、iperf、mplayer 等等。那么有没有一种傻瓜式的方法或软件，它不仅包含了 busybox 的功能，而且里面还集成了各种软件，需要什么软件就选择什么软件，不需要我们去移植。答案肯定是有的，buildroot 就是这样一种工具，buildroot 比 busybox 更上一层楼，buildroot 不仅集成了 busybox，而且还集成了各种常见的第三方库和软件，需要什么就选择什么，就跟我们去吃自助餐一样，想吃什么就拿什么。buildroot 极大的方便了我们嵌入式 Linux 开发人员构建实用的根文件系统。</p>\n</blockquote>\n<ol>\n<li><p>下载buildroot <a href=\"https://buildroot.org/\">https://buildroot.org/</a></p>\n<ol>\n<li>解压</li>\n</ol>\n</li>\n<li><p><code>make menuconfig</code> 执行配置</p>\n<p> 1. </p>\n<pre><code class=\"hljs\"> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里主要是配置架构相关的内容</span><br>Target options<br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Target Architecture = ARM (little endian)</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Target Binary Format = ELF</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Target Architecture Variant = cortex-A7</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Target ABI = EABIhf</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Floating point strategy = NEON/VFPv4</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">ARM instruction <span class=\"hljs-built_in\">set</span> = ARM</span><br></code></pre></td></tr></table></figure>\n</code></pre>\n<p> 2. </p>\n<pre><code class=\"hljs\"> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Toolchain 这里主要是配置交叉编译链</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里设置为我们自己所使用的交叉编译器即可。buildroot 其实是可以自动下载交叉编译器的，但是都是从国外服务器下载的，鉴于国内的网络环境，强烈推荐大家设置成自己所使用的交叉编译器。</span><br><br>Toolchain<br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Toolchain <span class=\"hljs-built_in\">type</span> = External toolchain</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Toolchain = Custom toolchain <span class=\"hljs-comment\">#用户自己的交叉编译器</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Toolchain origin = Pre-installed toolchain <span class=\"hljs-comment\">#预装的编译器</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Toolchain path =/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf  <span class=\"hljs-comment\"># 绝对路径</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Toolchain prefix = $(ARCH)-linux-gnueabihf <span class=\"hljs-comment\">#置交叉编译器前缀，要根据自己实际所使用的交叉编译器来设置，比如我们使用的是 arm-linux-gnueabihf-gcc，因此前缀就是$(ARCH)-linux-gnueabihf，其中 ARCH我们前面已经设置为了 arm。</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">External toolchain gcc version = 4.9.x</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">External toolchain kernel headers series = 4.1.x</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">External toolchain C library = glibc/eglibc</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] Toolchain has SSP support? (NEW) <span class=\"hljs-comment\">#选中</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] Toolchain has RPC support? (NEW) <span class=\"hljs-comment\">#选中</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] Toolchain has C++ support? <span class=\"hljs-comment\">#选中</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] Enable MMU support (NEW) <span class=\"hljs-comment\">#选中</span></span><br></code></pre></td></tr></table></figure>\n</code></pre>\n<p> 3. </p>\n<pre><code class=\"hljs\"> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">系统配置</span><br>System configuration<br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">System hostname = alpha_imx6ull <span class=\"hljs-comment\">#平台名字，自行设置</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">System banner = Welcome to alpha i.mx6ull <span class=\"hljs-comment\">#欢迎语</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Init system = BusyBox <span class=\"hljs-comment\">#使用 busybox</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">/dev management = Dynamic using devtmpfs + mdev <span class=\"hljs-comment\">#使用 mdev</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] Enable root login with password (NEW) <span class=\"hljs-comment\">#使能登录密码</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Root password = 123456 <span class=\"hljs-comment\">#登录密码为 123456</span></span><br></code></pre></td></tr></table></figure>\n</code></pre>\n<p>  4. </p>\n<pre><code class=\"hljs\"> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">此选项配置我们最终制作的根文件系统为什么格式的</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Filesystem images</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] ext2/3/4 root filesystem <span class=\"hljs-comment\">#如果是 EMMC 或 SD 卡的话就用 ext3/ext4</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">ext2/3/4 variant = ext4 <span class=\"hljs-comment\">#选择 ext4 格式</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[*] ubi image containing an ubifs root filesystem <span class=\"hljs-comment\">#如果使用 NAND 的话就用 ubifs</span></span><br></code></pre></td></tr></table></figure>\n</code></pre>\n<p>  5. </p>\n<pre><code class=\"hljs\"> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">buildroot 不仅仅能构建根文件系统，也可以编译 linux 内核和 uboot。当配置 buildroot，使能 linux 内核和 uboot 以后 buildroot 就会自动下载最新的 linux 内核和 uboot 源码并编译。但是我们一般都不会使用 buildroot 下载的 linux 内核和 uboot，因为 buildroot 下载的 linux 和 uboot官方源码，里面会缺少很多驱动文件，而且最新的 linux 内核和 uboot 会对编译器版本号有要求，可能导致编译失败。因此我们需要配置 buildroot，关闭 linux 内核和 uboot 的编译，只使用 buildroot 来构建根文件系统</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Kernel</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[ ] Linux Kernel <span class=\"hljs-comment\">#不要选择编译 Linux Kernel 选项！</span></span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">Bootloaders</span><br><span class=\"hljs-meta prompt_\">-&gt; </span><span class=\"language-bash\">[ ] U-Boot <span class=\"hljs-comment\">#不要选择编译 U-Boot 选项！</span></span><br></code></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"6\">\n<li><p>接下来就是 Target packages 用来配置第三方库和软件</p>\n</li>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">iperf3<br>netools<br>Target packages-&gt;Networking applications-&gt;openssh<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>编译 buildroot</p>\n<ol>\n<li><code>sudo make</code> 注意，一定要加 sudo，而且不能通过-jx 来指定多核编译<ol>\n<li>编译过程可能会下载很多组件，可以考虑给wget添加代理</li>\n</ol>\n</li>\n<li>编译完成后会在<code>output/images</code>生成根文件系统<ol>\n<li>其中 rootfs.tar 就是打包好的根文件系统</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Yocto-构建-rootfs\"><a href=\"#Yocto-构建-rootfs\" class=\"headerlink\" title=\"Yocto 构建 rootfs\"></a>Yocto 构建 rootfs</h2><h2 id=\"Yocto-和-buildroot-构建-rootfs-的差异\"><a href=\"#Yocto-和-buildroot-构建-rootfs-的差异\" class=\"headerlink\" title=\"Yocto 和 buildroot 构建 rootfs 的差异\"></a>Yocto 和 buildroot 构建 rootfs 的差异</h2><p>值得注意的是，Yocto 和 Buildroot 本身并不是 Linux 发行版，它们只是帮助开发人员构建基于 Linux 的嵌入式系统（选择 Yocto，您可以构建 Linux 发行版；选择 Buildroot，您可以开发用于构建发行版的根文件系统）。</p>\n<blockquote>\n<p><strong>为什么应该选择 Yocto</strong></p>\n<p>尽管 Yocto 操作更复杂，但它也有很明显的优势。或许其中最大的优势就是 Yocto 拥有广泛的用户群体和支持，开发社区非常活跃，为其创建了各种新的工具、层级和特性。此外，它由 Linux 基金会出资扶持，因而也更得人心。</p>\n<p>Yocto 的另一大好处则是它可以实现层级，用于各种任务，从功能添加，到项目版本中不可用平台的定位等，都可以实现。此外，还可以添加特殊功能，例如自定义浏览器，以便实现 Yocto 本身进一步的功能定制化。</p>\n<p>Yocto 获得了多家半导体和电路板生产商的支持，在同类项目中，可以兼容的设备最多。也就是说，除了充满活力的 Yocto 生态系统之外，自定义 Yocto 构建还可以添加大量的 SDK、工具和功能。</p>\n<p>正是有了这些要素，Yocto 实现了高度可定制，同时还拥有强劲的支持，可供计划构建嵌入式系统的开发人员使用。</p>\n<p><strong>Yocto 的缺点</strong></p>\n<p>即便如此，Yocto 也有一些缺点。一方面，入门时的学习曲线稍微有点陡峭。对于时间有限的小型单个项目或小型团队来说，使用这个工具可能根本没有意义。另一方面，众所周知，Yocto 的构建时间很长。这就降低了迭代频率，如用在时间紧迫的项目中，效果可能会不太理想。</p>\n<p><strong>为什么应该选择 Buildroot</strong></p>\n<p>Buildroot 的构建很简单——从运行方式到输出，都非常简便快捷。它的核心构建系统采用 Make 语言编写而成，语言十分简短，开发人员不需要学习，就能轻松理解。正如上文所述，Buildroot 使用标准的 Makefiles 和 kconfig 进行配置。Makefiles 和 kconfig 是 Linux 内核社区制作的两个工具，它们获得了广泛应用和支持。</p>\n<p>Buildroot 要求的“企业”参与度较低，因此它也是开源社区的“宠儿”。这样就会实现更高的可定制性以及更多的能力，从而尽可能开发具有针对性的系统，满足开发团队的需求。</p>\n<p>最后，Buildroot 还有一项极其有用的功能——它禁用了可选的构建时间设置，选择以即开即用的方式，创建尽可能小的镜像。这样大幅缩短了构建时间，减少了所需的必要计算资源（不过无法实现更灵活的构建）。对于小型团队或资源有限的团队而言，这可能是一种理想的解决方案。</p>\n<p><strong>Buildroot 的缺点</strong></p>\n<p>首先必须要讨论的就是它最明显的缺点——缺乏公司支持。尽管对于许多开发人员来说，这可能是一个好处，但其实它也有一些明显的不足。即，社区较小，且生态系统不太活跃。也就是说，它没有那么多的支持。由于许多开发人员更愿意专注研究应用更广泛的工具，因此，如果您遇到问题，您可能必须自己处理或学习如何解决。</p>\n<p>Buildroot 的另一个主要缺点是它不支持增量构建。每当您需要进行更新，即使是很小的更新，您都必须从头开始重新制作镜像。这样必定会使开发周期延长，增加不必要的时间。</p>\n<p>此外，Buildroot 最大的亮点就是其注重简约，但这也意味着，相比 Yocto，Buildroot 定制和特殊系统搭建会困难得多。<br><strong>Buildroot 和 yocto的对比</strong></p>\n<p><strong>对比内容：</strong><br>（1） 嵌入式构建系统<br>目标是构建一个完整的，客制化的嵌入式Linux系统<br>包括root filesystem， toolchain， kernel， bootloader<br>（2） 从源代码开始<br>（3） 使用交叉编译工具链<br>（4） 非常活跃的维护和开发工程<br>（5） 工业界广泛使用<br>（6） 有文档和培训课程<br>（7） 自由软件</p>\n<p><strong>buildroot的通用信条</strong><br>（1） 专注于简单化<br>（2） 使用简单，理解简单，扩展简单<br>（3） 通过扩展脚本而不是buildroot本身来处理特殊情况<br>（4） 使用现存的技术&#x2F;语言：kconfig， make. (值得投入时间去学习)<br>（5） 默认小<br>（6） 目的无关的（Purpose-agnostic）<br>（7） 开放社区，没有供应商、官僚&#x2F;公司的管理</p>\n<p><strong>yocto的通用信条</strong><br>（1） 支持主要的CPU架构<br>OpenEmbedded：仅qemu<br>Yocto Project：为一小部分机器增加支持<br>（2） 只提供核心方法，使用layers来支持更多的package和机器<br>（3） 客户的改动应该在一个单独的layer<br>（4） 多用途的构建系统：尽可能灵活的处理更多的使用情况<br>（5） 开放社区，但是该工程被公司赞助商发起的Yocto Project Advisory Board监管<br>（6） OpenEmbedded 是一个独立社区驱动的工程。</p>\n<p><strong>buildroot 输出</strong><br>（1） 主要是根文件系统镜像<br>同时包含：工具链， 内核镜像， bootloader等<br>（2） 支持多种格式：ext2&#x2F;3&#x2F;4， ubifs， iso9600等<br>（3） 没有二进制包， 没有包管理系统<br>一些人称之为一个firmware generator<br>通过包不可能更新<br>更新需要一个完整的系统更新，像Andorid一样<br>认为部分更新是有害的</p>\n<p><strong>Yocto 输出</strong><br>（1） 构建distribution，主要的输出是一个package feed<br>包管理系统是可选的<br>装载和更新系统的一部分是可能的<br>（2） 通过安装一些包，也可以产生根文件系统镜像。支持ext2&#x2F;3&#x2F;4， ubifs， iso9600等，也支持VM镜像：vmdk，vdi，qcow2<br>（3） 最终，镜像类或者工具，wic可用来构建磁盘镜像<br>（4） 生成image时也可以生成SDK，可以让应用开发者编译和测试他们的应用（不用集成到build中）。但是SDK必须要和image匹配。</p>\n<p><strong>Buildroot 配置</strong><br>（1） 和Linux kernel一样使用kconfig<br>（2） 简单的{menu，x，n，g}配置接口<br>（3） 整个配置保存在一个文件 .config&#x2F;defconfig<br>（4） 定义系统的各个方面：架构，内核版本&#x2F;内核配置，bootloader，用户空间package等等。<br>（5） make menuconfig， make<br>（6） 为不同的机器构建通用的系统：单独处理<br>一个可以从fragment中构建出defconfig的工具<br>可行的，但是并非超级简单<br>每台机器完全独立的构建</p>\n<p><strong>Yocto 配置</strong><br>（1） 配置分成几个部分：<br>Distribution 配置 （package配置，toolchain和libc选择…）<br>Machine Configuration （定义架构， CPU功能， BSP）<br>Image recipe （target安装什么package）<br>Local配置 （Distribution和默认machine选择， 编译时使用多少个线程， 是否删除build artifact）<br>（2） 有必要收集将要被使用的layers，并宣布它们。<br>（3） 允许为不同的机器构建相同的镜像，或者为同一个机器构建不同的distribution或镜像。</p>\n<p><strong>Buildroot layers</strong><br>（1） 没有layer的概念<br>（2） 所有的包在官方repository中维护<br>（3） 添加BR2_EXTERNAL<br>允许存储包定义、配置和其他人工文件<br>一个BR2_EXTERNAL<br>通常用作专有的&#x2F;客制化的包和配置<br>仅增加包，不覆盖buildroot中的包</p>\n<p><strong>yocto layers</strong><br>（1） layer机制允许修改和增加新package或image<br>（2） core build system， BSP和custome modifications之间明确分离<br>（3） 第三方提供为它们layers提供BSP，或者一套处理专用应用程序的方法<br>（4） Layers需要兼容和使用相同的OE branch base<br>（5） 谨防layer quality， 检查不是系统性的<br>（6） OpenEmbedded Metadata Index 列出了可用的layers，recipes，machines：<a href=\"https://link.zhihu.com/?target=http://layers.openembedded.org/layerindex/\">http://layers.openembedded.org/layerindex/</a><br>（7） 此外，有一个强大的override机制，可以基于machine或者distribution调整recipe variables</p>\n<p><strong>buildroot&#x2F;yocto toolchain</strong><br>相同的功能：<br>（1） 构建自己的toolchain，基于gcc、C库（glibc， uClibc， musl）<br>（2） 使用external toolchain， 对于buildroot更简单，因为内置有这个功能，对于yocto，只有在additional vendor layers正真完全支持。</p>\n<p><strong>buildroot new package</strong><br>涉及三个文件 Config.in xxx.mk xxx.hash</p>\n<p><strong>yocto new package</strong><br>涉及一个文件×××.bb</p>\n<p><strong>buildroot: complexity</strong><br>（1） 设计成简单使用<br>（2） 对于core，每个建议的功能以有用性&#x2F;复杂度比来分析<br>（3） core逻辑完全使用make编写，少于1000行的code包含了230行注释：确实容易理解what、why、how；几乎和一个shell脚本一个接一个地下载、提取、构建、安装软件那样简单。<br>（4） 文档很充分，有很多资源可用<br>（5） 一个小时的talk足以描述所有内部实现（ELCE 2014）<br>（6） IRC上典型的反馈：来自Yocto，非常惊喜，使用起来这么简单。这是让我为难的第一件事。</p>\n<p><strong>Yocto Project: complexity</strong><br>（1） 有点陡峭的学习曲线<br>（2） 核心是bitbake， 一个用python编写的单独项目（60千行代码）<br>（3） 一套class定义common task<br>（4） recipe 使用 bitbake specific language， python 和 shell 混合编写<br>（5） 日志和调试可帮助理解每个task具体做了什么<br>（6） 详细的文档，但是有很多不同的配置变量<br>（7） 并不总是容易理解最佳实践（比如， Poky 不能用于 production， distro&#x2F;image 修改不能在local.conf中做， 删除tmp&#x2F;）<br>（8） 人们依然对一些术语感到疑惑（Yocto Project， Poky， OpenEmbedded， bitbake）</p>\n<p><strong>Buildroot packages</strong><br>（1） 1800+ packages<br>（2） Graphics: X.org, Wayland, Qt4&#x2F;Qt5, Gtk2&#x2F;Gtk3, EFL<br>（3） Multimedia: Gstreamer 0.10&#x2F;1.x, ffmpeg, Kodi, OpenGL<br>（4） Languages: Python2&#x2F;3, PHP, Lua, Perl, Erlang, Mono, Ruby, Node.js<br>（5） Networking: Apache, Samba, Dovecot, Exim, CUPS, lots of servers&#x2F;tools<br>（6） Init systems: Busybox(default), initsysv, systemd<br>（7） No support for a toolchain on the target</p>\n<p><strong>Yocto Project packages</strong><br>（1） 几千个recipes: 对于oe-core， meta-openembedded， meta-qt5大约2200个。通过Metadata Index知道多余8400<br>（2） 大部分和buildroot一样<br>（3） 更多的语言: Java, Go, Rust, smalltalk<br>（4） 对于Qt3仍有一个起作用的layer<br>（5） meta-virtualization（Docker， KVM， LXC， Xen）和 meta-openstack layers</p>\n<p><strong>Buildroot 依赖方法</strong><br>（1） 极简依赖， 如果一个功能可以关闭，那么默认关闭<br>（2） 很多自动依赖，比如，如果你开启OpenSSL，将自动从其他可提供SSL支持的enabled的包中获得SSL支持<br>（3） 默认毫不费力的的得到小的根文件系统</p>\n<p><strong>Yocto Project 依赖方法</strong><br>（1） 在distribution级进行package 配置<br>开启OpenSSL将对所有package打开，但是可以对一些package关闭，相反，也可以对选定的pacakge开启一些功能。<br>（2） 可以在machine级进行修改，但是应该避免这样做<br>（3） 每个recipe可以定义自己的默认功能集，一个稳健的默认配置。</p>\n<p><strong>Buildroot 更新&#x2F;安全</strong><br>（1） 每三个月release，两个月开发，一个月稳定<br>（2） release包含package版本更新：security 更新和major 更新<br>（3） 核心架构也可能潜在性的发生改变<br>（4） 没有LTS版本，用于需要自己处理<br>（5） 正在提供一个脚本来评估给定buildroot配置中未解决的CVE （Common Vulnerabilities &amp; Exposures）</p>\n<p><strong>Yocto Project 更新&#x2F;安全</strong><br>（1） 每6个月release，一次在4月，一次在10月<br>（2） 可通过wiki: <a href=\"https://link.zhihu.com/?target=https://wiki.yoctoproject.org/wiki/Yocto_Project_v2.1_Status\">https://wiki.yoctoproject.org/wiki/Yocto_Project_v2.1_Status</a>了解planning和roadmap<br>（3） 在M1和最终release之间的三个月内包含4个milestone<br>（4） 至少先前和当前release的版本有指定维护者，他们获取安全和重要的解决方法，但是没有recipe更新<br>（5） 旧版本由社区维护</p>\n<p><strong>Buildroot 检测配置修改</strong><br>（1） Buildroot不很智能<br>（2） 当修改配置是，它不尝试检测哪些需要rebuild<br>（3） 一旦build一个package，buildroot将不rebuild它，除非你强制<br>（4） 大的配置修改需要full rebuild<br>（5） 小的配置修改可以不需要full rebuild<br>（6） 一个配置，一个build，不能配置间不能分享</p>\n<p><strong>Yocto Project 检测配置修改</strong><br>（1） bitbake 维护一个shared State Cache允许增加的builds<br>（2） 它通过创建inputs的checksum检测task的input修改<br>（3） 该cache可在所有的builds间共享， 对于类似的machines，build很快<br>（4） 可以跨主机分享该cache，比如一个夜间服务器和一个开发机，大大加快full build</p>\n<p><strong>Buildroot: architecture support</strong><br>（1） 支持很多架构<br>（2） ARM（64）， MIPS， PowerPC（64）， x86&#x2F;x86-64<br>（3） 也支持很多更专用的架构：Xtensa, Blackfin, ARC, m68k, SPARC, Microblaze, NIOSII; ARM noMMU, especially ARMv7-M<br>（4） 架构供应商提供援助: Imagination Technologies的MIPS, IBM的PowerPC64， Synopsys的ARC， Analog Devices的Blackfin</p>\n<p><strong>Yocto Project: architecture support</strong><br>（1） core中， ARM， MIPS， PowerPC， X86，以及它们64bit 系列<br>（2） separate layers：Microblaze， NIOSII<br>（3） 通常芯片厂商维护他们自己的BSP layer：meta-intell， meta-altera （ARM &amp; NIOSII）， meta-atmel， meta-fsl， meta-ti， mtea-xilinx …<br>（4） 社区提供：meta-rockchip， meta-sunxi</p>\n<p><strong>Buildroot: minimal build</strong><br>最小的build花费15分25秒，image size 2.2MB</p>\n<p><strong>yocto project: minimal build</strong><br>最小build花费50分47秒， image size为4.9MB。如果有存在的sstate-cache，花费1分21秒</p>\n<p><strong>License</strong><br>（1） 都可以创建一个使用许可证的列表<br>（2） 都能够检测到许可证更改<br>（3） Yocto项目可以剔除GPLv3</p>\n<p><strong>Buildroot &amp; Yocto 选择</strong><br><strong>Buildroot</strong><br>（1） 非常专用的CPU架构<br>（2） 非常小的rootfs &lt; 8M<br>（3） 对工程师没有很大的要求<br>（4） 不支持各种mechines或者类似的系统<br>（5） 不需要包&#x2F;部分系统的更新<br>（6） 小系统</p>\n<p><strong>yocto</strong><br>（1） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。<br>（2） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。支持几种类似的系统<br>（3） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。需要更新包和部分系统<br>（4） 不是非常特殊的CPU架构，不是非常小的rootfs，需要有经验的工程师。非常大的系统</p>\n</blockquote>\n<h2 id=\"Ubuntu-Base-rootfs构建\"><a href=\"#Ubuntu-Base-rootfs构建\" class=\"headerlink\" title=\"Ubuntu-Base rootfs构建\"></a>Ubuntu-Base rootfs构建</h2><blockquote>\n<p>Ubuntu是 Linux 系统的一种，可以简单的将 Ubuntu 理解为一个根文件系统，和我们用 busybox、buildroot制作的根文件系统一样。</p>\n<p>根文件系统下载地址 <a href=\"http://cdimage.ubuntu.com/\">http://cdimage.ubuntu.com/</a> (ubuntu-base)</p>\n<p>Ubuntu 针对不同的 CPU 架构提供相应的 ubuntu base 根文件系统，有 amd64(64 位 X86)、armhf、i386(32 位 X86)、powerpc、ppc64el 等系统的。I.MX6ULL 是 Cortex-A7 内核的 CPU，并且有硬件浮点运算单元，因此选择 <strong>armhf</strong> 版本。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">解压</span><br>tar -vxf ubuntu-base-16.04.6-base-armhf.tar.gz -C rootfs_ubuntu_1604<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装qemu虚拟机</span><br>sudo apt-get install qemu-user-static<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 qemu-user-static 拷贝到ubuntu base目录下</span><br>cd rootfs_ubuntu_1604<br>sudo cp /usr/bin/qemu-arm-static ./usr/bin/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置开发板用的rootfs</span><br>cd rootfs_ubuntu_1604<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从主机复制 DNS配置文件</span><br>sudo cp /etc/resolv.conf ./etc/resolv.conf<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">换源 修改开发板 rootfs 的源</span><br>./etc/apt/sources.list<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在主机(虚拟机(当前执行指令的设备))中挂载根文件系统(刚刚下载的，给开发板用的根文件系统)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">相当于把主机的根文件系统改成了开发板用的根文件系统</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把下面的脚本保存下来并添加运行权限</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">挂载脚本 例如保存为 mount.sh</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>sudo mount -t proc /proc /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/proc<br>sudo mount -t sysfs /sys /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/sys<br>sudo mount -o bind /dev /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev<br>sudo mount -o bind /dev/pts /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev/pts<br>sudo chroot /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">卸载脚本 unmount.sh</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/proc<br>sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/sys<br>sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev/pts<br>sudo umount /home/frank/linuxMini/nfs_dir/rootfs_ubuntu_1604/dev<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">挂载</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行脚本之后发现shell变了</span><br>./mount.sh<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装软件</span><br>apt update<br>apt install sudo<br>apt install vim<br>apt install net-tools<br>apt install ethtool<br>apt install net-tools<br>apt install openssh-server openssh-client<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置root密码</span><br>passwd root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置 hostname</span><br>echo &quot;ubuntu1604&quot; &gt; /etc/hostname<br>echo &quot;127.0.0.1 localhost&quot; &gt;&gt; /etc/hosts<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置串口终端</span><br>ln -s /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@ttymxc0.service<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置ssh</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意一下这些配置项</span><br>PermitRootLogin yes<br>PubkeyAuthentication yes<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">退出</span><br>exit<br>./unmount.sh<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">至此 ubuntu 配置完成 在uboot内更改启动参数就可以对这个根文件系统进行测试了</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用NFS挂载rootfs\"><a href=\"#使用NFS挂载rootfs\" class=\"headerlink\" title=\"使用NFS挂载rootfs\"></a>使用NFS挂载rootfs</h2><p>uboot 里面的 bootargs 环境变量会设置“root”的值，所以我们将 root 的值改为 NFS 挂载即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root=/dev/nfs nfsroot=[&lt;server-ip&gt;:]&lt;root-dir&gt;[,&lt;nfs-options&gt;] ip=&lt;client-ip&gt;:&lt;server-ip&gt;:&lt;gw-ip&gt;:&lt;netmask&gt;:&lt;hostname&gt;:&lt;device&gt;:&lt;autoconf&gt;:&lt;dns0-ip&gt;:&lt;dns1-ip&gt;<br><br>&lt;server-ip&gt;：服务器 IP 地址，也就是存放根文件系统主机的 IP 地址，那就是 Ubuntu 的 IP地址，比如我的 Ubuntu 主机 IP 地址为 192.168.1.250。<br>&lt;root-dir&gt;：根文件系统的存放路径，比如我的就是/home/zuozhongkai/linux/nfs/rootfs。<br>&lt;nfs-options&gt;：NFS 的其他可选选项，一般不设置。<br>&lt;client-ip&gt;：客户端 IP 地址，也就是我们开发板的 IP 地址，Linux 内核启动以后就会使用此 IP 地址来配置开发板。此地址一定要和 Ubuntu 主机在同一个网段内，并且没有被其他的设备使用，在 Ubuntu 中使用 ping 命令 ping 一下就知道要设置的 IP 地址有没有被使用，如果不能ping 通就说明没有被使用，那么就可以设置为开发板的 IP 地址，比如我就可以设置为192.168.1.251。<br>&lt;server-ip&gt;：服务器 IP 地址，前面已经说了。<br>&lt;gw-ip&gt;：网关地址，我的就是 192.168.1.1。<br>&lt;netmask&gt;：子网掩码，我的就是 255.255.255.0。<br>&lt;hostname&gt;：客户机的名字，一般不设置，此值可以空着。<br>&lt;device&gt;：设备名，也就是网卡名，一般是 eth0，eth1….，正点原子的 I.MX6U-ALPHA 开发板的 ENET2 为 eth0，ENET1 为 eth1。如果你的电脑只有一个网卡，那么基本只能是 eth0。这里我们使用 ENET2，所以网卡名就是 eth0。<br>&lt;autoconf&gt;：自动配置，一般不使用，所以设置为 off。<br>&lt;dns0-ip&gt;：DNS0 服务器 IP 地址，不使用。<br>&lt;dns1-ip&gt;：DNS1 服务器 IP 地址，不使用。<br></code></pre></td></tr></table></figure>\n\n<p>根据上面的格式 bootargs 环境变量的值如下：</p>\n<p>“proto&#x3D;tcp”表示使用 TCP 协议，“rw”表示 nfs 挂载的根文件系统为可读可写。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设定 bootargs 环境变量</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">linux kernel是通过读取这个环境变量来启动rootfs的</span><br>=&gt; env set bootargs &#x27;console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.192.100:/home/frank/linuxMini/nfs_dir/rootfs,proto=tcp rw ip=192.168.192.80:192.168.192.100:192.168.192.100:255.255.255.0::eth0:off&#x27;<br><br><br>=&gt; env print boot2nfs<br>boot2nfs=nfs 80800000 192.168.192.100:/home/frank/linuxMini/nfs_dir/zImage; nfs 83000000 192.168.192.100:/home/frank/linuxMini/nfs_dir/imx6ull-14x14-emmc-4.3-480x272-c.dtb; bootz 80800000 - 83000000<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">运行boot2nfs</span><br>=&gt; run boot2nfs<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Drive-驱动\"><a href=\"#Drive-驱动\" class=\"headerlink\" title=\"Drive 驱动\"></a>Drive 驱动</h1><blockquote>\n<p>Linux 中的驱动分为三大类：<strong>字符设备驱动、块设备驱动、网络设备驱动</strong>。</p>\n<p><strong>一个设备有可能属于多种设备类型</strong>，比如 USB WIFI，其使用 USB 接口，所以属于字符设备，但是其又能上网，所以也属于网络设备驱动。</p>\n<h3 id=\"字符设备驱动\"><a href=\"#字符设备驱动\" class=\"headerlink\" title=\"字符设备驱动\"></a>字符设备驱动</h3><p>是占用篇幅最大的一类驱动，因为字符设备最多，从最简单的点灯到 I2C、SPI、音频等都属于字符设备驱动的类型。</p>\n<h3 id=\"块设备驱动\"><a href=\"#块设备驱动\" class=\"headerlink\" title=\"块设备驱动\"></a>块设备驱动</h3><p>所谓的块设备驱动就是存储器设备的驱动，比如 EMMC、NAND、SD 卡和 U 盘等存储设备，因为这些存储设备的特点是以<strong>存储块为基础</strong>，因此叫做块设备</p>\n<h3 id=\"网络设备驱动\"><a href=\"#网络设备驱动\" class=\"headerlink\" title=\"网络设备驱动\"></a>网络设备驱动</h3><p>网络设备驱动，不管是有线的还是无线的，都属于网络设备驱动的范畴</p>\n</blockquote>\n<h2 id=\"字符设备驱动-1\"><a href=\"#字符设备驱动-1\" class=\"headerlink\" title=\"字符设备驱动\"></a>字符设备驱动</h2><h3 id=\"驱动调用流程\"><a href=\"#驱动调用流程\" class=\"headerlink\" title=\"驱动调用流程\"></a>驱动调用流程</h3><p><img src=\"/2021/9b4105ad/image-20231107151921777.png\" alt=\"字符设备的函数调用\"></p>\n<p>在 Linux 中一切皆为文件，<strong>驱动加载成功以后</strong>会在“&#x2F;dev”目录下生成一个相应的文件，应用程序通过对这个名为“&#x2F;dev&#x2F;xxx”(xxx 是具体的驱动文件名字)的文件进行相应的操作即可实现对硬件的操作。</p>\n<p>应用程序运行在用户空间，而 Linux 驱动属于内核的一部分，驱动运行于内核空间。</p>\n<p>当我们在用户空间想要实现对内核的操作，比如使用 open 函数打开&#x2F;dev&#x2F;led 这个驱动，因为<strong>用户空间不能直接对内核进行操作</strong>，因此必须使用一个叫做“<strong>系统调用</strong>”的方法来实现从用户空间“陷入”到内核空间，这样才能实现对底层驱动的操作。</p>\n<p>open 函数调用流程:</p>\n<p><img src=\"/2021/9b4105ad/image-20231107162628528.png\" alt=\"open 函数调用流程\"></p>\n<h3 id=\"驱动API函数\"><a href=\"#驱动API函数\" class=\"headerlink\" title=\"驱动API函数\"></a>驱动API函数</h3><p>每一个系统调用，在驱动中都有与之对应的一个驱动函数，在 Linux 内核文件 <code>include/linux/fs.h</code> 中有个叫做 <strong><code>file_operations</code></strong> 的结构体，此结构体就是 Linux 内核驱动操作函数集合，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">file_operations</span> &#123;</span><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">module</span> *<span class=\"hljs-title\">owner</span>;</span><br> <span class=\"hljs-type\">loff_t</span> (*llseek) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">loff_t</span>, <span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">ssize_t</span> (*read) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">char</span> __user *, <span class=\"hljs-type\">size_t</span>, <span class=\"hljs-type\">loff_t</span> *);<br> <span class=\"hljs-type\">ssize_t</span> (*write) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> __user *, <span class=\"hljs-type\">size_t</span>, <span class=\"hljs-type\">loff_t</span> *);<br> <span class=\"hljs-type\">ssize_t</span> (*read_iter) (<span class=\"hljs-keyword\">struct</span> kiocb *, <span class=\"hljs-keyword\">struct</span> iov_iter *);<br> <span class=\"hljs-type\">ssize_t</span> (*write_iter) (<span class=\"hljs-keyword\">struct</span> kiocb *, <span class=\"hljs-keyword\">struct</span> iov_iter *);<br> <span class=\"hljs-type\">int</span> (*iterate) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-keyword\">struct</span> dir_context *);<br> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-title function_\">int</span> <span class=\"hljs-params\">(*poll)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-keyword\">struct</span> poll_table_struct *)</span>;<br> <span class=\"hljs-type\">long</span> (*unlocked_ioctl) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>);<br> <span class=\"hljs-type\">long</span> (*compat_ioctl) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>);<br> <span class=\"hljs-type\">int</span> (*mmap) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-keyword\">struct</span> vm_area_struct *);<br> <span class=\"hljs-type\">int</span> (*mremap)(<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-keyword\">struct</span> vm_area_struct *);<br> <span class=\"hljs-type\">int</span> (*open) (<span class=\"hljs-keyword\">struct</span> inode *, <span class=\"hljs-keyword\">struct</span> file *);<br> <span class=\"hljs-type\">int</span> (*flush) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">fl_owner_t</span> id);<br> <span class=\"hljs-type\">int</span> (*release) (<span class=\"hljs-keyword\">struct</span> inode *, <span class=\"hljs-keyword\">struct</span> file *);<br> <span class=\"hljs-type\">int</span> (*fsync) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">loff_t</span>, <span class=\"hljs-type\">loff_t</span>, <span class=\"hljs-type\">int</span> datasync);<br> <span class=\"hljs-type\">int</span> (*aio_fsync) (<span class=\"hljs-keyword\">struct</span> kiocb *, <span class=\"hljs-type\">int</span> datasync);<br> <span class=\"hljs-type\">int</span> (*fasync) (<span class=\"hljs-type\">int</span>, <span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">int</span> (*lock) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-keyword\">struct</span> file_lock *);<br> <span class=\"hljs-type\">ssize_t</span> (*sendpage) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-keyword\">struct</span> page *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">size_t</span>, <span class=\"hljs-type\">loff_t</span> *, <span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-title function_\">long</span> <span class=\"hljs-params\">(*get_unmapped_area)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>)</span>;<br> <span class=\"hljs-type\">int</span> (*check_flags)(<span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">int</span> (*flock) (<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-keyword\">struct</span> file_lock *);<br> <span class=\"hljs-type\">ssize_t</span> (*splice_write)(<span class=\"hljs-keyword\">struct</span> pipe_inode_info *, <span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">loff_t</span> *, <span class=\"hljs-type\">size_t</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">ssize_t</span> (*splice_read)(<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">loff_t</span> *, <span class=\"hljs-keyword\">struct</span> pipe_inode_info *, <span class=\"hljs-type\">size_t</span>, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span>);<br> <span class=\"hljs-type\">int</span> (*setlease)(<span class=\"hljs-keyword\">struct</span> file *, <span class=\"hljs-type\">long</span>, <span class=\"hljs-keyword\">struct</span> file_lock **, <span class=\"hljs-type\">void</span> **);<br> <span class=\"hljs-type\">long</span> (*fallocate)(<span class=\"hljs-keyword\">struct</span> file *file, <span class=\"hljs-type\">int</span> mode, <span class=\"hljs-type\">loff_t</span> offset, <span class=\"hljs-type\">loff_t</span> len);<br> <span class=\"hljs-type\">void</span> (*show_fdinfo)(<span class=\"hljs-keyword\">struct</span> seq_file *m, <span class=\"hljs-keyword\">struct</span> file *f);<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> CONFIG_MMU</span><br> <span class=\"hljs-type\">unsigned</span> (*mmap_capabilities)(<span class=\"hljs-keyword\">struct</span> file *);<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>简单介绍一下 file_operation 结构体中比较重要的、常用的函数：<br><strong>owner 拥有该结构体的模块的指针，一般设置为 THIS_MODULE。</strong><br><strong>llseek 函数</strong>用于修改文件当前的读写位置。<br><strong>read 函数用于读取设备文件。</strong><br><strong>write 函数用于向设备文件写入(发送)数据。</strong><br><strong>poll 函数</strong>是个轮询函数，用于查询设备是否可以进行非阻塞的读写。<br><strong>unlocked_ioctl 函数</strong>提供对于设备的控制功能，与应用程序中的 ioctl 函数对应。<br><strong>compat_ioctl 函数</strong>与 unlocked_ioctl 函数功能一样，区别在于在 64 位系统上，32 位的应用程序调用将会使用此函数。在 32 位的系统上运行 32 位的应用程序调用的是unlocked_ioctl。<br><strong>mmap 函数</strong>用于将设备的内存映射到进程空间中(也就是用户空间)，一般帧缓冲设备会使用此函数，比如 LCD 驱动的显存，将帧缓冲(LCD 显存)映射到用户空间中以后应用程序就可以直接操作显存了，这样就不用在用户空间和内核空间之间来回复制。<br><strong>open 函数用于打开设备文件。</strong><br><strong>release 函数</strong>用于释放(关闭)设备文件，与应用程序中的 close 函数对应。<br><strong>fasync 函数</strong>用于刷新待处理的数据，用于将缓冲区中的数据刷新到磁盘中。<br><strong>aio_fsync 函数</strong>与 fasync 函数的功能类似，只是 aio_fsync 是异步刷新待处理的数据。</p>\n<p>这些函数并不是全部都需要实现的，可以只实现需要的部分函数。</p>\n</blockquote>\n<h3 id=\"驱动的加载卸载\"><a href=\"#驱动的加载卸载\" class=\"headerlink\" title=\"驱动的加载卸载\"></a>驱动的加载卸载</h3><p><strong>驱动的加载和卸载</strong></p>\n<p>Linux 驱动有两种运行方式</p>\n<ul>\n<li><p>第一种是将驱动编译进 Linux 内核中</p>\n<ul>\n<li>当 Linux 内核启动的时候就会自动运行驱动程序</li>\n</ul>\n</li>\n<li><p>第二种就是将驱动编译成模块(Linux 下模块扩展名为.ko)</p>\n<ul>\n<li><p>在Linux 内核启动以后使“insmod”命令加载驱动模块。</p>\n</li>\n<li><blockquote>\n<p>在调试驱动的时候一般都选择将其编译为模块，这样我们修改驱动以后只需要编译一下驱动代码即可，不需要编译整个 Linux 代码。</p>\n<p>而且在调试的时候只需要加载或者卸载驱动模块即可，不需要重启整个系统。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>将驱动编译为模块最大的好处就是方便开发，当驱动开发完成，确定没有问题以后就可以将驱动编译进 Linux 内核中，当然也可以不编译进 Linux 内核中，具体看自己的需求。</p>\n<p>模块有加载和卸载两种操作，我们在编写驱动的时候需要注册这两种操作函数，模块的加载和卸载注册函数如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">module_init(xxx_init);   <span class=\"hljs-comment\">//注册模块加载函数</span><br>module_exit(xxx_exit);   <span class=\"hljs-comment\">//注册模块卸载函数</span><br></code></pre></td></tr></table></figure>\n\n<p>module_init() 函数用来向 Linux 内核注册一个模块<strong>加载函数</strong>，参数 xxx_init 就是需要注册的具体函数，当使用<code>insmod</code>命令加载驱动的时候，xxx_init 这个函数就会被调用。</p>\n<p>module_exit()函数用来向 Linux 内核注册一个模块<strong>卸载函数</strong>，参数 xxx_exit 就是需要注册的具体函数，当使用<code>rmmod</code>命令卸载具体驱动的时候 xxx_exit 函数就会被调用。</p>\n<p>驱动加载函数和卸载函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* 驱动入口函数 */</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> __init <span class=\"hljs-title function_\">xxx_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br> <span class=\"hljs-comment\">/* 入口函数具体内容 */</span><br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-comment\">/* 驱动出口函数 */</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> __exit <span class=\"hljs-title function_\">xxx_exit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br> <span class=\"hljs-comment\">/* 出口函数具体内容 */</span><br>&#125;<br><span class=\"hljs-comment\">/* 将上面两个函数指定为驱动的入口和出口函数 */</span><br>module_init(xxx_init);<br>module_exit(xxx_exit);<br></code></pre></td></tr></table></figure>\n\n<p>驱动编译完成后，编译出来的文件名为<code>.ko</code>我们可以通过命令去将这个文件加载、卸载。</p>\n<p><strong>驱动加载命令</strong></p>\n<p>驱动的加载有两个命令：</p>\n<ul>\n<li><p>insmod</p>\n<ul>\n<li><pre><code class=\"shell\">     insmod drv.ko\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><br>  - insmod 命令不能解决模块的依赖关系，比如 drv<span class=\"hljs-selector-class\">.ko</span> 依赖 first<span class=\"hljs-selector-class\">.ko</span> 这个模块，就必须先使用insmod 命令加载 first<span class=\"hljs-selector-class\">.ko</span> 这个模块，然后再加载 drv<span class=\"hljs-selector-class\">.ko</span> 这个模块。<br><br>- modprobe<br><br>  - ```shell<br>        modprobe drv.ko<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>modprobe 会分析模块的依赖关系，然后会将所有的依赖模块都加载到内核中。</p>\n</li>\n<li><p>modprobe 命令主要智能在提供了模块的依赖性分析、错误检查、错误报告等功能</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>驱动的卸载</strong></p>\n<p>对应的驱动的卸载有两个命令：</p>\n<ul>\n<li><p>rmmod</p>\n<ul>\n<li><pre><code class=\"shell\">    rmmod drv.ko\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><br><span class=\"hljs-bullet\">  -</span> 对应的 rmmod 也是卸载单一的驱动。<br><br><span class=\"hljs-bullet\">-</span> modprobe -r<br><br><span class=\"hljs-bullet\">  -</span> <span class=\"hljs-code\">```shell</span><br><span class=\"hljs-code\">        modprobe -r drv.ko</span><br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>使用 modprobe 命令可以卸载掉驱动模块所依赖的其他模块。</p>\n</li>\n<li><p>需要注意的是这些被依赖的模块需要确保已经没有被其他模块所使用，否则就不能使用 modprobe 来卸载驱动模块。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"驱动-字符设备-的注册和注销\"><a href=\"#驱动-字符设备-的注册和注销\" class=\"headerlink\" title=\"驱动(字符设备)的注册和注销\"></a>驱动(字符设备)的注册和注销</h3><p>对于字符设备驱动而言，当驱动模块加载成功以后需要注册字符设备，同样，卸载驱动模块的时候也需要注销掉字符设备。</p>\n<p>驱动注册函数和注销函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 原型</span><br><span class=\"hljs-comment\">// major：主设备号，Linux 下每个设备都有一个设备号，设备号分为主设备号和次设备号两部分，这里是主设备号</span><br><span class=\"hljs-comment\">// name：设备名字，指向一串字符串</span><br><span class=\"hljs-comment\">// fops：结构体 file_operations 类型指针，指向设备的操作函数集合变量</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">register_chrdev</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> major, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *name, <span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">struct</span> file_operations *fops)</span>;<br><br><span class=\"hljs-comment\">// major：要注销的设备对应的主设备号</span><br><span class=\"hljs-comment\">// name：要注销的设备对应的设备名</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">unregister_chrdev</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> major, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *name)</span>;<br><br><span class=\"hljs-comment\">// 定义 file_operations 结构的变量。这个就是操作函数集合。定义在linux内核的include/linux/fs.h中</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">file_operations</span> <span class=\"hljs-title\">test_fops</span>;</span><br><span class=\"hljs-comment\">/* 驱动入口函数 */</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> __init <span class=\"hljs-title function_\">xxx_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-comment\">/* 入口函数具体内容 */</span><br>    <span class=\"hljs-type\">int</span> retvalue = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">/* 注册字符设备驱动 */</span><br>    <span class=\"hljs-comment\">// 注册设备号为 200 名为 &quot;chrtest&quot;</span><br>    retvalue = register_chrdev(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;chrtest&quot;</span>, &amp;test_fops);<br> <span class=\"hljs-keyword\">if</span>(retvalue &lt; <span class=\"hljs-number\">0</span>) &#123;<br>  <span class=\"hljs-comment\">/* 字符设备注册失败,自行处理 */</span><br> &#125;<br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/* 驱动出口函数 */</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> __exit <span class=\"hljs-title function_\">xxx_exit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-comment\">/* 注销字符设备驱动 */</span><br>    unregister_chrdev(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;chrtest&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">/* 将上面两个函数指定为驱动的入口和出口函数 */</span><br>module_init(xxx_init);<br>module_exit(xxx_exit);<br></code></pre></td></tr></table></figure>\n\n<p><strong>设备号的动态分配</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 申请设备号</span><br><span class=\"hljs-comment\">// dev：保存申请到的设备号</span><br><span class=\"hljs-comment\">// baseminor：次设备号起始地址，alloc_chrdev_region 可以申请一段连续的多个设备号，这些设备号的主设备号一样，但是次设备号不同，次设备号以 baseminor 为起始地址地址开始递增。一般 baseminor 为 0，也就是说次设备号从 0 开始。</span><br><span class=\"hljs-comment\">// count：要申请的设备号数量（次设备号的差别）</span><br><span class=\"hljs-comment\">// name：设备名字。</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">alloc_chrdev_region</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dev_t</span> *dev, <span class=\"hljs-type\">unsigned</span> baseminor, <span class=\"hljs-type\">unsigned</span> count, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *name)</span><br><br><span class=\"hljs-comment\">// 释放掉设备</span><br><span class=\"hljs-comment\">// from：要释放的设备号</span><br><span class=\"hljs-comment\">// count：表示从 from 开始，要释放的设备号数量</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">unregister_chrdev_region</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dev_t</span> from, <span class=\"hljs-type\">unsigned</span> count)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"驱动文件的整体实现\"><a href=\"#驱动文件的整体实现\" class=\"headerlink\" title=\"驱动文件的整体实现\"></a>驱动文件的整体实现</h3><p>参考代码仓库</p>\n<h3 id=\"驱动测试\"><a href=\"#驱动测试\" class=\"headerlink\" title=\"驱动测试\"></a>驱动测试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">输入如下命令加载 chrdev_demo.ko 驱动文件：</span><br>insmod chrdev_demo.ko<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果使用 modprobe 加载驱动</span> <br>modprobe chrdev_demo.ko<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前系统中存在的模块</span><br>lsmod<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看系统中的设备 可以看到 chrdev_demo.ko 的主设备号和设备名</span><br>cat /proc/devices<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建设备节点文件</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">驱动加载成功需要在/dev 目录下创建一个与之对应的设备节点文件，应用程序就是通过操作这个设备节点文件来完成对具体设备的操作。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">其中 <span class=\"hljs-built_in\">mknod</span> 是创建节点命令，/dev/chrdev_demo 是要创建的节点文件，c 表示这是个字符设备，237 是设备的主设备号，0 是设备的次设备号</span><br>mknod /dev/chrdev_demo c 237 0<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">卸载驱动模块</span><br>rmmod chrdev_demo.ko<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Q-A\"><a href=\"#Q-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><p><strong>什么是设备号？</strong></p>\n<blockquote>\n<p>设备号是Linux系统用来管理设备的一种方式，它由**主设备号(Major Device Number)<strong>和</strong>次设备号(Minor Device Number)**组成。</p>\n<p>主设备号用来区分不同种类的设备，如<strong>字符设备</strong>、<strong>块设备</strong>、<strong>网络设备</strong>等，它用来表示一个特定的驱动程序。</p>\n<p>次设备号用来区分同一类型的多个设备，如不同的硬盘、串口、网卡等，它用来表示使用该驱动程序的特定设备。</p>\n<blockquote>\n<p>以磁盘为例：在同一个系统中，磁盘设备的主设备号是唯一的。比如：scsi设备。次设备号只是在提供给scsi驱动程序内部使用，系统内核直接把次设备号传递给应用程序，scsi设备由驱动程序管理，我们可能有多个scsi设备，每个scsi设备都会分配一个次设备号。</p>\n<blockquote>\n<p>注：</p>\n<p>主设备对应一个特定的驱动程序，所以一个系统里面所有的scsi硬盘使用的都是scsi驱动，所以他们的主设备号是一致的。</p>\n<p>而不同的硬盘通过次设备号来做区分，保证它们的唯一性。</p>\n<p>主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。</p>\n</blockquote>\n</blockquote>\n<p>设备号可以用一个<strong>32位</strong>的无符号整数表示，其中<strong>高12位</strong>是主设备号，<strong>低20位</strong>是次设备号。</p>\n<p>设备号可以通过<code>/dev</code>目录下的设备文件来访问，也可以通过<code>/proc/devices</code>文件来查看当前配置的设备号。<code>/proc/devices</code>类似一个类别，而<code>/dev/</code>下是某个类别下的项，由他们两个最终确定了一对多关系。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看主设备号</span><br>cat /proc/devices<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看次设备号</span><br>ll /dev/<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">c 代表 char 设备  89 主设备 0 次设备</span><br>crw------- 1 root root   89,   0 Nov  7 08:23 i2c-0<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">b 代表 block 设备  179 主设备 1 次设备</span><br>brw-rw---- 1 root disk  179,   1 Nov  7 08:23 mmcblk1p1<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>设备号的分配和使用有一定的规则和约定，以保证设备的唯一性和通用性。</p>\n<ul>\n<li>静态设备号：有一些常用的设备号已经被 Linux 内核开发者给分配掉了，具体分配的内容可以查看文档 Documentation&#x2F;devices.txt。</li>\n<li>动态设备号：Linux 社区推荐使用动态分配设备号，在注册字符设备之前先申请一个设备号，系统会自动给你一个没有被使用的设备号，这样就避免了冲突。</li>\n</ul>\n<p><strong>常见设备名称：</strong></p>\n<blockquote>\n<p>fb::frame缓冲<br>fd:—–:软驱<br>hd:—–:IDE 硬盘&#x2F;光驱<br>md:—–:RAID设备(Metadisk)<br>dm:—–:LVM设备(DeviceMapper)<br>xd:—–:虚拟机中的硬盘驱动器<br>tty:—–:终端设备<br>psaux:—–:PS&#x2F;2 鼠标设备<br>lp:—–:打印机<br>par:—–:并口<br>pt:—–:伪终端</p>\n<p>s:—–:SCSI设备<br>scd:—–:SCSI音频光驱<br>sd:—–:SCSI硬盘<br>sg:—–:SCSI通用设备<br>sr:—–:SCSI数据光驱<br>st:—–:SCSI磁带<br>cdrom:—–:光驱的符号链接<br>mouse:—–:鼠标设备的符号链接<br>gpmdata:—–:伪设备<br>null:—–:写入消失<br>zero:—–:一直产生零</p>\n</blockquote>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://www.cnblogs.com/aozhejin/p/15874504.html\">linux设备管理之主设备号与次设备号 - jinzi - 博客园 (cnblogs.com)</a></p>\n</blockquote>\n<h1 id=\"外设\"><a href=\"#外设\" class=\"headerlink\" title=\"外设\"></a>外设</h1><h2 id=\"LCD\"><a href=\"#LCD\" class=\"headerlink\" title=\"LCD\"></a>LCD</h2><p><strong>VSYNC 垂直同步脉冲（Vertical synchronization, Vsync</strong>）是加在两帧之间。跟水平同步脉冲类似，但它指示着前一帧的结束，和新一帧的开始。 垂直同步脉冲是一个持续时间比较长的脉冲。</p>\n<p><strong>HSYNC 水平同步脉冲（Horizontal synchronization pulse, Hsync）</strong>加在两个扫描行之间。它是一个短小的脉冲，在一行扫描完成之后，它就会出现，指示着这一行扫描完成，同时它也指示着下一行将要开始。</p>\n<h3 id=\"LCD屏幕的数据总线接口类型\"><a href=\"#LCD屏幕的数据总线接口类型\" class=\"headerlink\" title=\"LCD屏幕的数据总线接口类型\"></a>LCD屏幕的数据总线接口类型</h3><p><strong>MCU-LCD和RGB-LCD的主要差别</strong></p>\n<blockquote>\n<ol>\n<li>RGB-LCD的显存(GRAM)由系统RAM充当。而MCU-LCD的显存由驱动IC决定。</li>\n<li>显存的不一致直接导致了他们更新速率上的差异，MCU-LCD需要发送画点指令来修改驱动IC的显存，而RGB-LCD直接操作系统RAM，由DMA搬运到驱动IC。</li>\n</ol>\n</blockquote>\n<h4 id=\"串口屏-UART-接口\"><a href=\"#串口屏-UART-接口\" class=\"headerlink\" title=\"串口屏 UART 接口\"></a>串口屏 UART 接口</h4><h4 id=\"SPI-接口\"><a href=\"#SPI-接口\" class=\"headerlink\" title=\"SPI 接口\"></a>SPI 接口</h4><h4 id=\"MCU-MPU接口\"><a href=\"#MCU-MPU接口\" class=\"headerlink\" title=\"MCU MPU接口\"></a>MCU MPU接口</h4><p>LCD液晶屏的MCU接口主要针对单片机的领域。</p>\n<p>MCU接口的标准是因特尔提出的8080总线标准，因此在很多文档中用<strong>I80</strong>来指MCU接口屏。</p>\n<p>MCU接口模式分为<strong>I(intel) 8080模式</strong>和<strong>M(Motorola) 6800</strong>模式，主要是时序的区别。数据位传输有8位，16位，18位，24位。</p>\n<p>连线分为：CS&#x2F;RS&#x2F;RD&#x2F;WR&#x2F;。</p>\n<p>优点是控制简单方便，无需时钟和同步信号。</p>\n<p>缺点是要<strong>耗费GRAM</strong>，所以难以做到大屏，一般都用在4寸以下。</p>\n<blockquote>\n<p>i80</p>\n<ul>\n<li>CS 片选信号</li>\n<li>RS (D&#x2F;I 数据&#x2F;指令选择线, 置1为写数据, 置0为写命令)</li>\n<li>&#x2F;WR (为0表示写数据)</li>\n<li>&#x2F;RD (为0表示读数据)</li>\n<li>RESET 复位LCD(用固定命令系列 0 1 0来复位)</li>\n</ul>\n<p>m6800</p>\n<ul>\n<li>CS 片选信号</li>\n<li>RS (D&#x2F;I 数据&#x2F;指令选择线, 置1为写数据, 置0为写命令)</li>\n<li>&#x2F;WR (读写信号)</li>\n<li>E (锁存信号)</li>\n<li>RESET 复位LCD(用固定命令系列来复位)</li>\n</ul>\n<p>m6800其实际设计思想是与 I80 的思想是一样的，主要区别就是该模式的总线控制读写信号组合在一个引脚上（&#x2F;WR），而增加了一个锁存信号(E)</p>\n</blockquote>\n<p><img src=\"/2021/9b4105ad/c8e0872247ff49de99539712b5b6237f.png\" alt=\"img\"></p>\n<h4 id=\"RGB接口\"><a href=\"#RGB接口\" class=\"headerlink\" title=\"RGB接口\"></a>RGB接口</h4><p>LCD液晶屏的RGB接口通过对红(R)、绿(G)、蓝(B)三个颜色通道的变化以及三者组合来得到丰富多彩的颜色。</p>\n<p><strong>RGB-LCD的显存“GRAM”是由系统内存充当的，因此其大小只受限于系统内存的大小</strong>，这样RGB-LCD可以做出较大尺寸</p>\n<p>所以LCD液晶屏的RGB接口就是分三原色输入的视频接口 。</p>\n<p>通常一个颜色通道由8bit表示, 即每个颜色通道值得范围是0~255, 通常称<strong>RGB888&#x2F;RGB24</strong>。三个颜色通道总共能组合出约1678(256×256×256)万种色彩, 简称为1600万色或千万色, 也称为24位色。</p>\n<p>在实际的使用中, 除了<strong>RGB888&#x2F;RGB24</strong>, 还有**RGB555、RGB565、RGB32、RGB666、RGB16、RGB24、RGB32、ARGB32(A就是alpha，透明度通道)**等等。</p>\n<p><img src=\"/2021/9b4105ad/f5acc963e742489185cd4cf5d1bc774f.png\" alt=\"img\"></p>\n<h4 id=\"LVDS接口\"><a href=\"#LVDS接口\" class=\"headerlink\" title=\"LVDS接口\"></a>LVDS接口</h4><p>LCD液晶屏的LVDS接口即Low Voltage Differential Signaling，是一种低压差分信号技术接口。</p>\n<p>克服以TTL电平方式传输宽带高码率数据时功耗大、EMI电磁干扰大等缺点而研制的一种数字视频信号传输方式。</p>\n<p>LVDS输出接口利用非常低的电压摆幅（约350mV）在两条PCB走线或一对平衡电缆上通过差分进行数据的传输，即低压差分信号传输。</p>\n<p>采用LVDS输出接口，可以使得信号在差分PCB线或平衡电缆上以几百Mbit／s的速率传输，由于采用低压和低电流驱动方式，因此，实现了低噪声和低功耗。</p>\n<h4 id=\"MIPI接口\"><a href=\"#MIPI接口\" class=\"headerlink\" title=\"MIPI接口\"></a>MIPI接口</h4><p>LCD液晶屏的MIPI接口是Mobile Industry Processor Interface的缩写。</p>\n<p>MIPI（移动行业处理器接口）是MIPI联盟发起的为移动应用处理器制定的开放标准。</p>\n<p>MIPI是一个比较新的标准，其规范也在不断修改和改进，目前比较成熟的接口应用有DSI(显示接口)和CSI（摄像头接口）。CSI&#x2F;DSI分别是指其承载的是针对Camera或Display应用，都有复杂的协议结构。</p>\n<h3 id=\"RGB-驱动原理\"><a href=\"#RGB-驱动原理\" class=\"headerlink\" title=\"RGB 驱动原理\"></a>RGB 驱动原理</h3><p>主要信号线：</p>\n<table>\n<thead>\n<tr>\n<th>信号线</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R[7:0]</td>\n<td>8 根红色数据线</td>\n</tr>\n<tr>\n<td>G[7:0]</td>\n<td></td>\n</tr>\n<tr>\n<td>B[7:0]</td>\n<td></td>\n</tr>\n<tr>\n<td>DE</td>\n<td>数据使能线 Data Enable</td>\n</tr>\n<tr>\n<td>VSYNC</td>\n<td>垂直同步信号线 Vertical synchronization, Vsync</td>\n</tr>\n<tr>\n<td>HSYNC</td>\n<td>水平同步信号线 Horizontal synchronization pulse, Hsync</td>\n</tr>\n<tr>\n<td>PCLK</td>\n<td>像素时钟信号线</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>RESET</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>同步信号示意图：</p>\n<p><img src=\"/2021/9b4105ad/image-20230821122002797.png\" alt=\"image-20230821122002797\"></p>\n<p>Timing 示意图(摘录于GC9503V)：</p>\n<blockquote>\n<p>在很多情况下PCLK时钟是不停歇 持续产生的。</p>\n<p>The Pixel clock (PCLK) is running all the time without stopping, it is used for entering VS, HS, DE and DB [23:0] states when there is a rising edge of the PCLK.The PCLK can not be used as the internal clock for other functions of the display module.</p>\n</blockquote>\n<p><img src=\"/2021/9b4105ad/image-20230818180021537.png\" alt=\"image-20230818180021537\"><img src=\"/2021/9b4105ad/image-20230818180129919.png\" alt=\"image-20230818180129919\"></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>HSYNC</strong></td>\n<td><strong>Horizontal synchronization pulse, Hsync</strong></td>\n<td><strong>水平同步信号线</strong></td>\n</tr>\n<tr>\n<td>HLW&#x2F;HSPW&#x2F;THP</td>\n<td>Horizontal Low Pulse width</td>\n<td>HSYNC 信号宽度，也就是 HSYNC 信号持续时间。</td>\n</tr>\n<tr>\n<td>HBP&#x2F;THB</td>\n<td>Horizontal Back Porch</td>\n<td>行同步信号后肩</td>\n</tr>\n<tr>\n<td>HACT&#x2F;HOZVAL&#x2F;THD</td>\n<td>Horizontal</td>\n<td>显示一行数据所需的时间</td>\n</tr>\n<tr>\n<td>HFP&#x2F;THF</td>\n<td>Horizontal Front Porch</td>\n<td>行同步信号前肩</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>VSYNC</strong></td>\n<td><strong>Vertical synchronization, Vsync</strong></td>\n<td><strong>垂直同步信号线</strong></td>\n</tr>\n<tr>\n<td>VLW&#x2F;VSPW&#x2F;TVP</td>\n<td>Vertical Low Pulse width</td>\n<td></td>\n</tr>\n<tr>\n<td>VBP&#x2F;TVB</td>\n<td>Vertical Back Porch</td>\n<td>帧同步信号后肩</td>\n</tr>\n<tr>\n<td>VACT&#x2F;LINE</td>\n<td>Vertical</td>\n<td>显示一帧有效数据所需的时间</td>\n</tr>\n<tr>\n<td>VFP&#x2F;TVF</td>\n<td>Vertical Front Porch</td>\n<td>帧同步信号前肩</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DCLK</td>\n<td>Data Clock</td>\n<td>像素时钟</td>\n</tr>\n</tbody></table>\n<p><strong>显示一行所需要的时间就是：</strong></p>\n<p><code>HLW + HBP + HACT + HFP</code></p>\n<p><strong>显示一帧所需要的时间就是：</strong></p>\n<p><code>(HLW + HBP+ HACT + HFP)*(VLW + VBP + VACT + VFP)</code></p>\n<p><strong>DCLK时钟的计算：</strong></p>\n<p>根据上面的公式计算出一帧数据的时钟数假定未Vclock，帧数为Vfps。</p>\n<p><code>DCLK = Vclock * Vfps</code></p>\n<p>例如一帧需要<code>853440</code>个CLOCK，帧数设定为<code>60</code>，那么PCLK时钟就要设置成为<code>853440*60=51206400=51.2064M</code></p>\n<p><strong>最小显存的计算：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">853*480 分辨率   RGB888 模式</span><br>853*480*3 = 1,228,320 Byte = 1.1714 MByte<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1024*600 分辨率  ARGB8888 模式</span><br>1024*600*4 = 2457600Byte = 2.4 MByte<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "linux",
                "alpha_mini",
                "正点原子"
            ]
        },
        {
            "id": "https://www.oikiou.top/2020/d4436089/",
            "url": "https://www.oikiou.top/2020/d4436089/",
            "title": "Linux 杂乱学习笔记",
            "date_published": "2020-10-29T05:12:15.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>Uboot、根文件系统、Linux</li>\n<li>Linux驱动分为三大类，字符设备驱动、块设备驱动、网络设备驱动</li>\n</ul>\n<h1 id=\"linux-入门\"><a href=\"#linux-入门\" class=\"headerlink\" title=\"linux 入门\"></a>linux 入门</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p><code>user@machine: ~$</code></p>\n<ul>\n<li>$ 代表当前用户是普通用户</li>\n<li># 代表当前用户是root</li>\n</ul>\n<h2 id=\"rootfs-根文件系统\"><a href=\"#rootfs-根文件系统\" class=\"headerlink\" title=\"rootfs 根文件系统\"></a>rootfs 根文件系统</h2><blockquote>\n<p>  <strong>&#x2F;bin</strong><br>  存储一些二进制可执行命令文件，<code>/usr/bin</code>也存放了一些基于用户的命令文件。</p>\n<p>  在这里，我们可以找到准备执行的 Linux 命令，如ls、cp和echo ，以及bash和csh等 shell 。</p>\n<p>  <strong>&#x2F;sbin</strong><br>  此目录页用户存放一些可执行文件，但是此目录下的文件或者说命令只有管理员才能使用。 <code>/usr/sbin</code>也存储了许多系统命令。</p>\n<p>  <strong>&#x2F;root</strong><br>  超级用户 root的根目录文件。 </p>\n<p>  <strong>&#x2F;home</strong><br>  普通用户默认目录，在该目录下，每个用户都有一以本名命的文件夹。 </p>\n<p>  <strong>&#x2F;boot</strong><br>  存放 Ubuntu系统<strong>内核镜像和引导加载文件</strong>。 </p>\n<p>  <strong>&#x2F;media</strong><br>  <em>&#x2F;media</em>目录包含当我们将<strong>任何可移动媒体设备连接到系统时用作安装点的子目录。</strong></p>\n<p>  <strong>&#x2F;mnt</strong><br>  通常包括系统引导后被挂载的文件点。 通常包括系统引导后被挂载的文件点。</p>\n<p>  与&#x2F;media不同，系统会<strong>自动挂载</strong>可移动媒体，而&#x2F;mnt下我们需要<strong>手动挂载</strong>。</p>\n<p>  <strong>&#x2F;dev</strong><br>  dev 是 device 的缩写，所以此目录下的文件都是和设备有关的，此目录下的文件都是设备文件。在 Linux 下一切皆文件，即使是硬件设备，也是以文件的形式存在的。</p>\n<p>  <strong>&#x2F;etc</strong><br>  保存系统管理所需的<strong>配置文件</strong>和目录。 </p>\n<p>  <strong>&#x2F;lib</strong><br>  lib 是 library 的简称，保存系统程序运行所需的库文件， <code>/usr/lib</code>下存放了一些用于普通用户的库文件。<strong>这些</strong><br>  <strong>库文件是共享库</strong>，命令和用户编写的应用程序要使用这些库文件。</p>\n<p>  <strong>&#x2F;lost+found</strong><br>  一般为空，当系统非正常关机以后此文件夹会保存些零散文件。</p>\n<p>  <strong>&#x2F;var</strong> (variable 可变动的)<br>  存储一些不断变化的文件 ，比如日志文件 。</p>\n<p>  <strong>&#x2F;usr</strong>  (Unix Software Resource)<br>   Unix 操作系统软件资源目录。包括与系统用户直接有关的文件和目录，比如应程序所需库。 </p>\n<p>  <strong>&#x2F;proc</strong><br>  虚拟目录，不实际存储在磁盘上通常用来保系统信息和进程。此目录一般是空的，当 Linux 系统启动以后会将此目录作为 proc 文件系统的挂载点，proc 是个虚拟文件系统，没有实际的存储设备。</p>\n<p>  <strong>&#x2F;tmp</strong><br>  存储系统和用户的临时文件，该夹对所有都提供读写权限。 </p>\n<p>  <strong>&#x2F;opt</strong><br>  可选第三方程序的存放目录。 </p>\n<p>  <strong>&#x2F;sys</strong><br>  系统启动以后此目录作为 <strong><code>sysfs</code></strong> 文件系统的挂载点，sysfs 是一个类似于 proc 文件系统的特殊文件系统，sysfs 也是基于 ram 的文件系统，也就是说它也没有实际的存储设备。此目录是系统设备管理的重要目录，此目录通过一定的组织结构向用户提供详细的内核数据结构信息。</p>\n</blockquote>\n<h2 id=\"Shell-基本操作\"><a href=\"#Shell-基本操作\" class=\"headerlink\" title=\"Shell 基本操作\"></a>Shell 基本操作</h2><h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>^x(Ctrl+x)</p>\n<p>^C\t终止前面运行程序</p>\n<p>^D\t退出exit</p>\n<p>^L\t清屏</p>\n<p>^A\t光标移到到最前面</p>\n<p>^E\t光标移到到最后面</p>\n<p>^U\t删除光标前面所有字符</p>\n<p>^K\t删除光标前面所有字符</p>\n<p>Alt+Backspace 删除一个单词</p>\n<p>^R\t搜索历史命令</p>\n<p>Alt+.\t引用最后一个命令的参数等价于!$</p>\n<p>Esc  . \t同上</p>\n<h3 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h3><ul>\n<li># history </li>\n<li>光标上下</li>\n<li>^R\t搜索历史命令</li>\n<li>!200     特定序号</li>\n<li>!字符串     以某字符串开头的</li>\n<li>!$     引用最后一个命令的参数</li>\n</ul>\n<blockquote>\n<p>  按<code>Ctrl+R</code>可以调出 bash中曾经的历史命令,</p>\n<p>  再次按<code>Ctrl+R</code>可以切换匹配的内容</p>\n<p>  光标会停留在 第一次被匹配的字符上, (即使后面你再输入被匹配的字符, 光标也不移动)</p>\n<p>  然后, 根据你的需要 来进行任何一次的操作, 都表示接受: (也就是说, 这个时候, 你就可以当作 你已经输入了这样的命令, 你就可以直接对该命令进行操作&#x2F;编辑&#x2F;修改了….)</p>\n<p>  如:<br>  向前, 向后进行编辑: <code>ctrl+F</code>, <code>ctrl+B</code><br>  删除前面,后面的字符: <code>ctrl+D</code>,<code> ctrl+H</code><br>  移动到命令结尾,开头:<code>ctrl+E</code>,  <code>ctrl+A</code></p>\n</blockquote>\n<h2 id=\"初窥文件系统\"><a href=\"#初窥文件系统\" class=\"headerlink\" title=\"初窥文件系统\"></a>初窥文件系统</h2><p>在 Windows 下有 FAT、NTFS 和 exFAT 这样的文件系统，在 Linux 下的文件系统主要有 ext2、ext3、ext4 等文件系统。</p>\n<p>Linux 还支持其他的 UNIX 文件系统，比如 XFS、JFS、UFS 等，也支持 Windows 的 FAT 文件系统和网络文件系统 NFS 等。</p>\n<blockquote>\n<p>  格式化：在windows 下的<strong>格式化</strong>其实我们应该理解成<strong>更换（或者说更新）文件系统</strong>，而<strong>格式化</strong>就是理解成把<strong>磁盘等等硬件设备</strong>按照<strong>文件系统的要求的格式</strong>进行划分。每个文件系统的规则都是不一样的，这也是为什么格式化之后文件都没了，因为新的文件系统规则是无法兼容旧的文件系统规则的，所以自然也就无法读取旧的文件系统的数据。</p>\n</blockquote>\n<p>在windows下磁盘的分区是根据盘符来加以区分，而在linux下是根据磁盘分区的挂载点（<code>mount</code>命令）来确定位置。</p>\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><blockquote>\n<p>  linux下磁盘的操作主要是通过 fdisk 命令</p>\n<p>  通过 fdisk 建立的磁盘 我们需要给他创建(构建)一个文件系统 创建文件系统后就能存放文件，这里用的就是 mkfs 命令去构建文件系统</p>\n<p>  在linux下和windows下不一样的是，windows会自动分配盘符给你，但是linux需要“手动分配盘符”，linux下是没有盘符的概念，linux是基于根目录<code>/</code>的根概念，所以我们可以认为linux只有一个盘符，我们只能把磁盘挂在“树的枝叶”上，也就是某个目录，这就涉及到了mount和unmount挂载和卸载的命令。</p>\n</blockquote>\n<p><a href=\"#fdisk\">点击转到 fdisk 命令</a></p>\n<p><a href=\"#mkfs\">点击转到 mkfs 命令</a></p>\n<p><a href=\"#mount\">点击转到 mount 命令</a></p>\n<h2 id=\"文件类型-权限\"><a href=\"#文件类型-权限\" class=\"headerlink\" title=\"文件类型&amp;权限\"></a>文件类型&amp;权限</h2><h3 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> -l</span><br>drwxr-xr-x 1 root root    4096 May 21  2019 vmware-tools<br>lrwxrwxrwx 1 root root      23 May 21  2019 vtrgb -&gt; /etc/alternatives/vtrgb<br>-rw-r--r-- 1 root root    4942 Apr  9  2019 wgetrc <br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>第一个字母</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-</td>\n<td>普通文件</td>\n</tr>\n<tr>\n<td>d</td>\n<td>目录文件</td>\n</tr>\n<tr>\n<td>c</td>\n<td>字符设备文件，串口，音频等</td>\n</tr>\n<tr>\n<td>b</td>\n<td>块设备文件，U盘，硬盘等</td>\n</tr>\n<tr>\n<td>l</td>\n<td>符号链接</td>\n</tr>\n<tr>\n<td>s</td>\n<td>套接字文件</td>\n</tr>\n<tr>\n<td>p</td>\n<td>管道文件 FIFO</td>\n</tr>\n</tbody></table>\n<h3 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h3><p>其后九个字母，每三个为一组。</p>\n<ul>\n<li>第一组表示用户的权限</li>\n<li>第二组表示用户组的权限</li>\n<li>第三组表示其他用户的权限</li>\n</ul>\n<p>列如<code>-rw-r--r-- 1 root root    4942 Apr  9  2019 wgetrc</code></p>\n<ul>\n<li>root用户权限是<code>rw-</code></li>\n<li>root组的权限是<code>r--</code></li>\n<li>其他用户权限是<code>r--</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>二进制</th>\n<th>值</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>100</td>\n<td>4</td>\n<td>可读权限: 如果目录没有可读权限,则无法用 ls 等命令查看目录中的文件内容.</td>\n</tr>\n<tr>\n<td>w</td>\n<td>010</td>\n<td>2</td>\n<td>可写权限: 如果目录没有可写权限,则无法在目录中创建文件, 也无法在目录中删除文件.</td>\n</tr>\n<tr>\n<td>x</td>\n<td>001</td>\n<td>1</td>\n<td>可执行权限：如果没有目录可执行权限，则无法 cd 到目录中</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>归属</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>all user</td>\n</tr>\n<tr>\n<td>u</td>\n<td>user</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group user</td>\n</tr>\n<tr>\n<td>o</td>\n<td>other user</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;</td>\n<td>拥有权限</td>\n</tr>\n<tr>\n<td>+</td>\n<td>增加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>删除权限</td>\n</tr>\n</tbody></table>\n<h4 id=\"chmod-文件权限修改\"><a href=\"#chmod-文件权限修改\" class=\"headerlink\" title=\"chmod 文件权限修改\"></a>chmod 文件权限修改</h4><p>chmod [参数 ] [文件名 &#x2F;目录名]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>类似-v，回显更改的部分</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>不显示错误信息</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示执行过程</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>粘滞位</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改权限</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">test_dir文件夹权限更改为 rwxrwxrwx</span><br>chmod 777 test_dir<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">向组用户添加rwx权限</span> <br>chmod g+rwx<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">递归更改为rwx权限</span><br>chmod -R 777 test_dir<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">755</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">drwxr-xr-x</span><br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>  <strong>粘滞位</strong></p>\n<p>  other用户可以在特定的目录下创建文件并写入，但是不想让任何人删除掉自己的文件</p>\n</blockquote>\n<h4 id=\"chown-文件夹归属修改\"><a href=\"#chown-文件夹归属修改\" class=\"headerlink\" title=\"chown 文件夹归属修改\"></a>chown 文件夹归属修改</h4><p>chown [参数 ] [用户名 .&lt;组名 &gt;] [文件名 &#x2F;目录 ]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>类似-v，回显更改的部分</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>不显示错误信息</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>只对符号链接修改</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示执行过程</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">递归修改<span class=\"hljs-built_in\">dir</span>文件夹归属者为 frank</span><br>sudo chown -Rv frank.frank dir/<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文件夹权限\"><a href=\"#文件夹权限\" class=\"headerlink\" title=\"文件夹权限\"></a>文件夹权限</h3><ul>\n<li>目录的可执行权限是表示你可否在目录下执行命令。</li>\n<li>如果目录没有 - x 权限，则无法对目录执行任何命令，甚至无法 cd 进入目, 即使目录仍然有 - r 读权限（这个地方很容易犯错，认为有读权限就可以进入目录读取目录下的文件）</li>\n<li>而如果目录具有 - x 权限，但没有 - r 权限，则用户可以执行命令，可以 cd 进入目录。但由于没有目录的读权限</li>\n<li>所以在目录下，即使可以执行 ls 命令，但仍然没有权限读出目录下的文档。</li>\n</ul>\n<h2 id=\"压缩命令\"><a href=\"#压缩命令\" class=\"headerlink\" title=\"压缩命令\"></a>压缩命令</h2><p>zip [参数 ] [压缩文件名.zip] [被压缩的文件]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-r</td>\n<td>递归压缩，将指定目录下的所有文件和子一起压缩。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示指令执行过程。</td>\n</tr>\n<tr>\n<td>-num</td>\n<td>压缩率，为 1~9的数值。</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>压缩完成以后删除源文件。</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>将文件压缩入现有压缩文件中，不需要新建。</td>\n</tr>\n<tr>\n<td>-n&lt;字尾符号&gt;</td>\n<td>不压缩特定拓展名文件</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>密码</td>\n</tr>\n</tbody></table>\n<p>unzip [参数 ] [压缩文件名 .zip]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>解压到指定目录</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>密码</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示指令执行过程。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩</span><br>zip -rv -9 a.zip *.jpg<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">解压</span><br>unzip -d a a.zip<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>.bz2 .gz .xz文件</strong></p>\n<p>一般来说<code>bz2</code>的压缩率最高, 但是速度太慢了, <code>gz</code>压缩率比较均衡速度也比较快, <code>tar</code>只会打包不会压缩.</p>\n<p>tar [参数 ] [压缩文件名] [被压缩文件名]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td><strong>打包(将所有文件变成一个文件 Create  a new archive)</strong></td>\n</tr>\n<tr>\n<td>-x</td>\n<td><strong>解压缩, 解包</strong></td>\n</tr>\n<tr>\n<td>-j</td>\n<td>tar生成压缩文件 ，bzip2压缩</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>tar生成压缩文件，gzip压缩</td>\n</tr>\n<tr>\n<td>-f&lt;文件名&gt;</td>\n<td>指定压缩文件</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示执行过程</td>\n</tr>\n<tr>\n<td>-C,–directory&#x3D;DIR</td>\n<td>执行任何操作前请先更改为DIR。 该选项是顺序敏感的，即它影响后面的所有选项。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩 bzip2</span><br>tar -cjvf 1.tar.bz2 *.*<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">☆压缩 gzip</span><br>tar -czvf 1.tar.gz *.*<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">压缩 = c</span><br>tar -cvf a.tar /etc<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">解压 = x</span><br>tar -jxvf 1.tar.bz2<br>tar -zxvf 1.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">tar会自动检测压缩类型，并且解压缩包文件。同样的命令可以用来解压缩使用其他算法，例如：.tar.gz 或者.tar.bz2 压缩的文件。</span><br>tar -v -x -f archive.tar.xz<br>tar -v -x -f archive.tar.xz -C ./dir1<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"用户和组-管理\"><a href=\"#用户和组-管理\" class=\"headerlink\" title=\"用户和组 管理\"></a>用户和组 管理</h2><h3 id=\"etc-passwd文件\"><a href=\"#etc-passwd文件\" class=\"headerlink\" title=\"/etc/passwd文件\"></a><code>/etc/passwd</code>文件</h3><p>Linux 系统中的 <code>/etc/passwd</code> 文件，是系统用户配置文件，存储了系统中所有用户的基本信息，并且所有用户都可以对此文件执行读操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看用户和用户组</span><br>sudo cat /etc/passwd<br></code></pre></td></tr></table></figure>\n\n<p>每行用户信息都以 “：” 作为分隔符，划分为 7 个字段，每个字段所表示的含义如下：</p>\n<blockquote>\n<p>  <strong>用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</strong></p>\n</blockquote>\n<p><img src=\"/2020/d4436089/63d0f703918fa0ece0691081209759ee3c6ddb94.jpg\"></p>\n<blockquote>\n<p>  读者可能会问，Linux 系统中默认怎么会有这么多的用户？这些用户中的绝大多数是系统或服务正常运行所必需的用户，这种用户通常称为系统用户或伪用户。系统用户无法用来登录系统，但也不能删除，因为一旦删除，依赖这些用户运行的服务或程序就不能正常执行，会导致系统问题。</p>\n</blockquote>\n<h4 id=\"UID-用户ID\"><a href=\"#UID-用户ID\" class=\"headerlink\" title=\"UID 用户ID\"></a>UID 用户ID</h4><p>UID，也就是用户 ID。每个用户都有唯一的一个 UID，Linux 系统通过 UID 来识别不同的用户。</p>\n<p>实际上，UID 就是一个 0~65535 之间的数，不同范围的数字表示不同的用户身份，具体如表 1 所示。</p>\n<table>\n<thead>\n<tr>\n<th>UID 范围</th>\n<th>用户身份</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>超级用户。UID 为 0 就代表这个账号是管理员账号。在 Linux 中，如何把普通用户升级成管理员呢？只需把其他用户的 UID 修改为 0 就可以了，这一点和 Windows 是不同的。不过不建议建立多个管理员账号。</td>\n</tr>\n<tr>\n<td>1~499</td>\n<td>系统用户（伪用户）。也就是说，此范围的 UID 保留给系统使用。其中，1<del>99 用于系统自行创建的账号；100</del>499 分配给有系统账号需求的用户。  其实，除了 0 之外，其他的 UID 并无不同，这里只是默认 500 以下的数字给系统作为保留账户，只是一个公认的习惯而已。</td>\n</tr>\n<tr>\n<td>500~65535</td>\n<td>普通用户。通常这些 UID 已经足够用户使用了。但不够用也没关系，2.6.x 内核之后的 Linux 系统已经可以支持 232 个 UID 了。</td>\n</tr>\n</tbody></table>\n<h4 id=\"GID-组ID\"><a href=\"#GID-组ID\" class=\"headerlink\" title=\"GID 组ID\"></a>GID 组ID</h4><p>全称“Group ID”，简称“组ID”，表示用户初始组的组 ID 号。这里需要解释一下初始组和附加组的概念。</p>\n<p>初始组，指用户登陆时就拥有这个用户组的相关权限。每个用户的初始组只能有一个，通常就是将和此用户的用户名相同的组名作为该用户的初始组。比如说，我们手工添加用户 lamp，在建立用户 lamp 的同时，就会建立 lamp 组作为 lamp 用户的初始组。</p>\n<p>附加组，指用户可以加入多个其他的用户组，并拥有这些组的权限。每个用户只能有一个初始组，除初始组外，用户再加入其他的用户组，这些用户组就是这个用户的附加组。附加组可以有多个，而且用户可以有这些附加组的权限。</p>\n<p>举例来说，刚刚的 lamp 用户除属于初始组 lamp 外，我又把它加入了 users 组，那么 lamp 用户同时属于 lamp 组和 users 组，其中 lamp 是初始组，users 是附加组。</p>\n<p>当然，初始组和附加组的身份是可以修改的，但是我们在工作中不修改初始组，只修改附加组，因为修改了初始组有时会让管理员逻辑混乱。</p>\n<p>需要注意的是，在 &#x2F;etc&#x2F;passwd 文件的第四个字段中看到的 ID 是这个用户的初始组。</p>\n<h3 id=\"etc-shadow-文件\"><a href=\"#etc-shadow-文件\" class=\"headerlink\" title=\"/etc/shadow 文件\"></a><code>/etc/shadow</code> 文件</h3><p><code>/etc/shadow</code> 文件，用于存储 Linux 系统中用户的密码信息，又称为“影子文件”。</p>\n<p><a href=\"http://c.biancheng.net/view/840.html\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看密码文件</span> <br>sudo cat /etc/shadow<br></code></pre></td></tr></table></figure>\n\n<p>每行用户信息被划分为 9 个字段。每个字段的含义如下(时间的单位是天)：</p>\n<blockquote>\n<p>  <strong>用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">frank@ubuntu-hyper:~$ sudo cat /etc/shadow<br>root:!:19361:0:99999:7:::<br>daemon:*:19235:0:99999:7:::<br>...<br>frank:$strstrstrssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss/:19361:0:99999:7:::<br>...<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"最后一次修改时间\"><a href=\"#最后一次修改时间\" class=\"headerlink\" title=\"最后一次修改时间\"></a>最后一次修改时间</h4><p>此字段表示最后一次修改密码的时间，可是，为什么 root 用户显示的是15775 呢？</p>\n<p>这是因为，Linux 计算日期的时间是以1970 年1 月1 日（UTC&#x2F;GMT的午夜）作为1 不断累加得到的时间，到1971 年1 月1 日，则为366 天。这里显示15775 天，也就是说，此 root 账号在1970 年1 月1 日之后的第15775 天修改的 root 用户密码。</p>\n<p>那么，到底15775 代表的是哪一天呢？可以使用如下命令进行换算：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">frank@ubuntu-hyper:~$ date -d &quot;1970-01-01 19361 days&quot;<br>2023年 01月 04日 星期三 00:00:00 CST<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，通过以上命令，即可将其换算为我们习惯的系统日期。</p>\n<h3 id=\"etc-group文件\"><a href=\"#etc-group文件\" class=\"headerlink\" title=\"/etc/group文件\"></a><code>/etc/group</code>文件</h3><p>&#x2F;ect&#x2F;group 文件是用户组配置文件，即用户组的所有信息都存放在此文件中。</p>\n<p>此文件是记录组 ID（GID）和组名相对应的文件。前面讲过，etc&#x2F;passwd 文件中每行用户信息的第四个字段记录的是用户的初始组 ID，那么，此 GID 的组名到底是什么呢？就要从 &#x2F;etc&#x2F;group 文件中查找。</p>\n<p>各用户组中，还是以 “：” 作为字段之间的分隔符，分为 4 个字段，每个字段对应的含义为：</p>\n<blockquote>\n<p>  <strong>组名：密码：GID：该用户组中的用户列表</strong></p>\n</blockquote>\n<h3 id=\"user用户管理\"><a href=\"#user用户管理\" class=\"headerlink\" title=\"user用户管理\"></a>user用户管理</h3><h4 id=\"su-切换root\"><a href=\"#su-切换root\" class=\"headerlink\" title=\"su 切换root\"></a>su 切换root</h4><p>切换成root用户</p>\n<p>“sudo su 用户名 ”即可切换回去</p>\n<p>第一次运行root没有密码需要先设置一个密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs linux\">sudo passwd root #输入密码就行了<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看用户\"><a href=\"#查看用户\" class=\"headerlink\" title=\"查看用户\"></a>查看用户</h4><ul>\n<li>cat &#x2F;etc&#x2F;passwd文件就行了</li>\n<li>看第三个参数:1000以上的,就是后面建的用户了.其它则为系统的用户</li>\n</ul>\n<h4 id=\"adduser添加用户-优\"><a href=\"#adduser添加用户-优\" class=\"headerlink\" title=\"adduser添加用户(优)\"></a>adduser添加用户(优)</h4><p>添加用户（需要Root权限）</p>\n<p>会自动为创建的用户指定主目录、系统shell版本，会在创建时输入用户密码。</p>\n<h4 id=\"useradd-添加用户\"><a href=\"#useradd-添加用户\" class=\"headerlink\" title=\"useradd 添加用户\"></a>useradd 添加用户</h4><p>需要使用参数选项指定上述基本设置，如果不使用任何参数，则创建的用户无密码、无主目录、没有指定shell版本。</p>\n<h4 id=\"deluser删除用户\"><a href=\"#deluser删除用户\" class=\"headerlink\" title=\"deluser删除用户\"></a>deluser删除用户</h4><p>删除用户（需要Root权限）</p>\n<h4 id=\"userdel-删除用户\"><a href=\"#userdel-删除用户\" class=\"headerlink\" title=\"userdel  删除用户\"></a>userdel  删除用户</h4><h4 id=\"◬-usermod-修改账号设定\"><a href=\"#◬-usermod-修改账号设定\" class=\"headerlink\" title=\"◬ usermod 修改账号设定\"></a><strong>◬ usermod 修改账号设定</strong></h4><p><strong>参数说明</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">  -b, --badnames                allow bad names<br>  -c, --comment 注释            GECOS 字段的新值<br>  -d, --home HOME_DIR           用户的新主目录<br>  -e, --expiredate EXPIRE_DATE  设定帐户过期的日期为 EXPIRE_DATE<br>  -f, --inactive INACTIVE       过期 INACTIVE 天数后，设定密码为失效状态<br>  -g, --gid GROUP               强制使用 GROUP 为新主组<br>◬ -G, --groups GROUPS           新的附加组列表 GROUPS<br>  -a, --append GROUP            将用户追加至上边 -G 中提到的附加组中，<br>                                并不从其它组中删除此用户<br>  -h, --help                    显示此帮助信息并推出<br>  -l, --login LOGIN             新的登录名称<br>  -L, --lock                    锁定用户帐号<br>  -m, --move-home               将家目录内容移至新位置 (仅于 -d 一起使用)<br>  -o, --non-unique              允许使用重复的(非唯一的) UID<br>  -p, --password PASSWORD       将加密过的密码 (PASSWORD) 设为新密码<br>  -R, --root CHROOT_DIR         chroot 到的目录<br>  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files<br>  -s, --shell SHELL             该用户帐号的新登录 shell<br>  -u, --uid UID                 用户帐号的新 UID<br>  -U, --unlock                  解锁用户帐号<br>  -v, --add-subuids FIRST-LAST  添加子 UID 范围<br>  -V, --del-subuids FIRST-LAST  移除子 UID 范围<br>  -w, --add-subgids FIRST-LAST  添加子 GID 范围<br>  -W, --del-subgids FIRST-LAST  移除子 GID 范围<br>  -Z, --selinux-user  SEUSER       用户账户的新 SELinux 用户映射<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">示例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 userA 加入到 groupB 中</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Note 当时这个权限修改了但是没有生效 可能是要重开 ssh 我当时是重启主机解决的</span><br>usermod -aG userA groupB<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改用户说明</span><br>usermod -c &quot;test user&quot; lamp <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"passwd-设置修改密码\"><a href=\"#passwd-设置修改密码\" class=\"headerlink\" title=\"passwd 设置修改密码\"></a>passwd 设置修改密码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> passwd root<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"id查看用户UID-GID-归属-组\"><a href=\"#id查看用户UID-GID-归属-组\" class=\"headerlink\" title=\"id查看用户UID GID 归属 组\"></a>id查看用户UID GID 归属 组</h4><h4 id=\"groupadd-添加用户组\"><a href=\"#groupadd-添加用户组\" class=\"headerlink\" title=\"groupadd 添加用户组\"></a>groupadd 添加用户组</h4><h4 id=\"groupdel-删除用户组\"><a href=\"#groupdel-删除用户组\" class=\"headerlink\" title=\"groupdel 删除用户组\"></a>groupdel 删除用户组</h4><h4 id=\"groupmod修改用户组信息\"><a href=\"#groupmod修改用户组信息\" class=\"headerlink\" title=\"groupmod修改用户组信息\"></a>groupmod修改用户组信息</h4><h3 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h3><h4 id=\"给用户添加sudo权限-以及免除密码\"><a href=\"#给用户添加sudo权限-以及免除密码\" class=\"headerlink\" title=\"给用户添加sudo权限 以及免除密码\"></a>给用户添加sudo权限 以及免除密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将用户添加一个附加<span class=\"hljs-built_in\">sudo</span>群组就好</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">下面有两种方法</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1 修改group</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看<span class=\"hljs-built_in\">sudo</span>群组的<span class=\"hljs-built_in\">id</span></span><br>cat /etc/group | grep &#x27;sudo&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">给new_username增加一个<span class=\"hljs-built_in\">sudo</span>群组</span><br>usermod -G 27 new_username<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">id</span>可以看到new_username多了一个群组</span><br>id new_username<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">2 修改sudoers</span><br>vim /etc/sudoers<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后在root ALL=(ALL:ALL) ALL下面添加上：</span> <br>new_username ALL=(ALL:ALL) ALL<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">免除全部密码</span><br>your_user_name ALL=(ALL) NOPASSWD: ALL<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">免除部分命令的密码</span><br>your_user_name   ALL= (root) NOPASSWD: /sbin/mount, (root) NOPASSWD: /bin/umount, (root) NOPASSWD: /mnt/mount, (root) NOPASSWD: /bin/rm, (root) NOPASSWD: /usr/bin/make, (root) NOPASSWD: /bin/ln, (root) NOPASSWD: /bin/sh, (root) NOPASSWD: /bin/mv, (root) NOPASSWD: /bin/chown, (root) NOPASSWD: /bin/chgrp, (root) NOPASSWD: /bin/cp, (root) NOPASSWD: /bin/chmod<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-apt包管理\"><a href=\"#ubuntu-apt包管理\" class=\"headerlink\" title=\"ubuntu apt包管理\"></a>ubuntu apt包管理</h2><h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 一键更换国内软件源脚本</span><br><span class=\"hljs-comment\"># https://github.com/SuperManito/LinuxMirrors</span><br>bash &lt;(curl -sSL https:<span class=\"hljs-regexp\">//gi</span>tee.com<span class=\"hljs-regexp\">/SuperManito/</span>LinuxMirrors<span class=\"hljs-regexp\">/raw/m</span>ain/ChangeMirrors.sh)<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">源网站list</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">https://www.raspbian.org/RaspbianMirrors</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">examp</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mirrors.shu.edu.cn/raspbian/raspbian/</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">http://mirrors.aliyun.com/raspbian/raspbian/</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\"></span><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">先备份</span><br>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> vim /etc/apt/sources.list</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">改成如下 32bit OS</span><br>deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib rpi<br>deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib rpi<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">64bit OS</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian buster main contrib non-free<br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ buster/updates main contrib non-free<br>deb https://mirrors.tuna.tsinghua.edu.cn/debian buster-updates main contrib non-free<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">先备份</span><br>sudo cp /etc/apt/sources.list.d/raspi.list  /etc/apt/sources.list.d/raspi.list.bak<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> nano /etc/apt/sources.list.d/raspi.list</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">改成如下</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">debian 10.x (buster)</span><br>deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main ui<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">or</span> <br>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main ui<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">debian 11.x (bullseye)</span><br>deb http://mirrors.aliyun.com/raspbian/raspbian/ bullseye main<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ubuntu 20.04</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">添加阿里源</span><br>deb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"换源后出现证书问题\"><a href=\"#换源后出现证书问题\" class=\"headerlink\" title=\"换源后出现证书问题\"></a>换源后出现证书问题</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">Err:<span class=\"hljs-number\">22</span> https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal <span class=\"hljs-keyword\">Release</span><br>  Certificate verification failed: The certificate <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">trusted</span>. The certificate chain uses expired certificate.  Could <span class=\"hljs-keyword\">not</span> handshake: Error <span class=\"hljs-keyword\">in</span> the certificate verification. [IP: <span class=\"hljs-number\">101.6</span><span class=\"hljs-number\">.15</span><span class=\"hljs-number\">.130</span> <span class=\"hljs-number\">443</span>]<br># 证书验证失败:证书不受信任。证书链使用过期的证书。无法握手:证书验证中出现错误。<br></code></pre></td></tr></table></figure>\n\n<p>原因为未安装<code>ca-certificates</code></p>\n<p>可以先使用http代替掉https，然后安装<code>ca-certificates</code>。</p>\n<p>安装 ca-certificates.</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo apt-<span class=\"hljs-built_in\">get</span> install ca-certificates<br></code></pre></td></tr></table></figure>\n\n<p>再次 <code>sudo apt-get update</code> 发现问题已经消失.</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">sudo gpg <span class=\"hljs-params\">--keyserver</span> keyserver.ubuntu.com <span class=\"hljs-params\">--recv</span> 5523BAEEB01FA116 <span class=\"hljs-string\">//</span><span class=\"hljs-params\">(这个公钥根据提示来写的)</span><br><span class=\"hljs-comment\"># eg.</span><br><span class=\"hljs-comment\"># sudo gpg --keyserver keyserver.ubuntu.com --recv 648ACFD622F3D138 0E98404D386FA1D9 DCC9EFBF77E11517 112695A0E562B32A  54404762BBB6E853</span><br> <br>sudo gpg <span class=\"hljs-params\">--export</span> <span class=\"hljs-params\">--armor</span> 5523BAEEB01FA116 | sudo apt-key add -<br><span class=\"hljs-comment\"># eg.</span><br><span class=\"hljs-comment\"># sudo gpg --export --armor 648ACFD622F3D138 0E98404D386FA1D9 DCC9EFBF77E11517 112695A0E562B32A  54404762BBB6E853 | sudo apt-key add -</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装指定版本的包</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> apt-get install package=version</span><br>sudo apt-get install python3=3.7.3-1<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">列出所有包 apt-cache madison package</span><br>apt-cache madison python3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">搜索相关r</span><br>apt-cache search &lt;keyword&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"更新源-包\"><a href=\"#更新源-包\" class=\"headerlink\" title=\"更新源&amp;包\"></a>更新源&amp;包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">更新源</span><br>sudo apt-get update<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">更新软件包</span><br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除包</span><br>sudo apt-get remove nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查找 xx 相关软件</span><br>dpkg --get-selections|grep nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除包及其配置</span><br>sudo apt-get --purge remove nginx<br>sudo apt-get purge --auto-remove nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除不使用的包</span><br>sudo apt-get autoremove<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">清除缓存</span><br>sudo apt-get clean<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"linux-进阶\"><a href=\"#linux-进阶\" class=\"headerlink\" title=\"linux 进阶\"></a>linux 进阶</h1><h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p><a href=\"https://zhuanlan.zhihu.com/p/139381645\">https://zhuanlan.zhihu.com/p/139381645</a></p>\n<p><a href=\"https://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97\">https://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装</span><br><span class=\"hljs-built_in\">sudo</span> apt-get install ufw<br><span class=\"hljs-comment\"># 启动</span><br><span class=\"hljs-built_in\">sudo</span> ufw <span class=\"hljs-built_in\">enable</span><br><span class=\"hljs-comment\"># 以下这条命令 我们设置默认的规则为allow， 这样除非指明打开的端口， 否则所有端口默认都是关闭的。</span><br><span class=\"hljs-built_in\">sudo</span> ufw default deny <br><span class=\"hljs-comment\"># 查看状态</span><br><span class=\"hljs-built_in\">sudo</span> ufw status<br><span class=\"hljs-comment\"># 查看状态和规则编号</span><br><span class=\"hljs-built_in\">sudo</span> ufw status numbered<br><br> ufw  [--dry-run]  route [delete] [insert NUM] allow|deny|reject|<span class=\"hljs-built_in\">limit</span> [<span class=\"hljs-keyword\">in</span>|out on  INTERFACE] [<span class=\"hljs-built_in\">log</span>|log-all] [proto PROTOCOL] [from ADDRESS [port PORT]] [to ADDRESS [port PORT]]<br><br><span class=\"hljs-built_in\">sudo</span> ufw allow 80 允许外部访问80端口<br><span class=\"hljs-comment\"># 这个好像最大一次性只能开一百个</span><br><span class=\"hljs-built_in\">sudo</span> ufw allow 50000:50100/tcp 允许外部访问端口范围<br><br><span class=\"hljs-comment\"># 允许eth0的所有流量</span><br><span class=\"hljs-built_in\">sudo</span> ufw allow <span class=\"hljs-keyword\">in</span> on eth0<br><br><span class=\"hljs-comment\"># 删除允许访问 80 端口的规则</span><br><span class=\"hljs-built_in\">sudo</span> ufw delete allow 80 <br><span class=\"hljs-comment\"># 删除编号为 66 的规则</span><br><span class=\"hljs-built_in\">sudo</span> ufw delete 66<br><br><span class=\"hljs-built_in\">sudo</span> ufw allow from 192.168.1.1 允许此IP访问所有的本机端口<br><br><span class=\"hljs-built_in\">sudo</span> ufw deny smtp 禁止外部访问smtp服务<br><br><span class=\"hljs-comment\"># 想要允许连接通过指定网络接口，使用allow in on 和 网络接口的名字：</span><br><span class=\"hljs-built_in\">sudo</span> ufw allow <span class=\"hljs-keyword\">in</span> on eth2 to any port 3306<br><br><span class=\"hljs-built_in\">sudo</span> ufw delete allow smtp 删除上面建立的某条规则<br><br><span class=\"hljs-comment\"># 要拒绝所有的TCP流量从10.0.0.0/8 到192.168.0.1地址的22端口</span><br><span class=\"hljs-built_in\">sudo</span> ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22 <br> <br><span class=\"hljs-comment\"># 可以允许所有RFC1918网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级）：</span><br><span class=\"hljs-built_in\">sudo</span> ufw allow from 10.0.0.0/8<br><br><span class=\"hljs-built_in\">sudo</span> ufw allow from 172.16.0.0/12<br><br><span class=\"hljs-built_in\">sudo</span> ufw allow from 192.168.0.0/16<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ol>\n<li>echo 查看单个环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOME</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>env 查看全部环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">env</span><br><span class=\"hljs-built_in\">env</span> | grep SSH<br><br><span class=\"hljs-comment\"># export 也可以查看</span><br><span class=\"hljs-built_in\">export</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>set 查看本地定义的环境变量</li>\n</ol>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">set</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>export 设置一个新的环境变量(临时的，重启后消失)</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">HELLO</span>=<span class=\"hljs-string\">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>unset 清除环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">unset</span> HELLO<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>readonly 设定只读环境变量</li>\n</ol>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">readonly HELLO<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>添加环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 将/usr/local/nginx/sbin/目录临时添加到环境变量中</span><br><span class=\"hljs-built_in\">export</span> PATH=/usr/local/nginx/sbin/:<span class=\"hljs-variable\">$PATH</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>设定永久环境变量（其实就是<strong>开机</strong>&#x2F;<strong>启动bash</strong>等等这些操作之前会运行一个脚本，我们的思路就是在这个脚本）</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">编辑后面的特定位置的文件  示例是当前用户的bash的启动执行的脚本  如果是其他终端则修改的是对应的脚本  比如zsh 修改的是.zshrc</span><br>vim ~/.bashrc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">加上环境变量</span><br>export DONT_PROMPT_WSL_INSTALL=1<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"一些常见环境变量\"><a href=\"#一些常见环境变量\" class=\"headerlink\" title=\"一些常见环境变量\"></a>一些常见环境变量</h3><ol>\n<li>PATH：决定了shell将到哪些目录中寻找命令或程序</li>\n<li>HOME：指定用户的主目录（即用户登录到Linux系统时的默认目录）</li>\n<li>HISTSIZE：保存历史命令记录的条数</li>\n<li>LOGNAME：显示当前用户的登录名   （同 指令logname）</li>\n<li>HOSTNAME：显示主机的名字 （同 指令hostname）</li>\n<li>SHELL：指当前用户使用的shell类型</li>\n<li>LANG&#x2F;LANGUGE：语言相关的环境变量，多语言可以修改此环境变量</li>\n</ol>\n<h3 id=\"环境变量存放的位置\"><a href=\"#环境变量存放的位置\" class=\"headerlink\" title=\"环境变量存放的位置\"></a>环境变量存放的位置</h3><ol>\n<li><code>etc/profile</code> （所有用户）</li>\n</ol>\n<p>这个文件是<strong>每个用户登录时都会运行的环境变量设置</strong>，当用户第一次登陆时该文件被执行*(这就是用户启动执行特定程序的原理了)*，并从<code>/etc/profile.d</code>目录的配置文件中搜索shell的设置。这个文件的作用就是当用户登录的时候用于获取系统的环境变量，只在登录的时候获取一次。</p>\n<p>所以说，在<code>/etc/profile</code>文件中添加的变量，<strong>对所有用户永久的生效</strong>。</p>\n<ol start=\"2\">\n<li><code>~/.bash_profile </code>（单个用户）</li>\n</ol>\n<p><strong>每个用户都可以使用该文件输入自己专用的shell信息，当用户登录时，该文件仅仅执行一次</strong>。默认情况下，它设置一些环境变量，执行用户的.bashrc文件。单个用户对此文件的修改只会影响到它以后的每一次登录。</p>\n<p>也就是说，在用户目录下的.bash_profile文件中增加变量，<strong>仅对当前用户永久生效，</strong> <strong>操作同 &#x2F;etc&#x2F;profile</strong></p>\n<ol start=\"3\">\n<li><code>/etc/bashrc </code>（所有用户）</li>\n</ol>\n<p>在执行完 &#x2F;etc&#x2F;profile 内容后，如果用户运行 bash shell 的话，则就执行这个文件，当**每次一个新的bash shell 被打开时，该文件被读取**。****所以，如果每打开一个bash都执行某些操作，就可以在这个文件里面设置。</p>\n<ol start=\"4\">\n<li><code>~/.bashrc</code>  （单个用户）</li>\n</ol>\n<p>该文件只包含专用于你的bash信息，<strong>当你登录时以及每次打开新的shell时，该文件就会自动被读取</strong>。</p>\n<ol start=\"5\">\n<li><code>~/.bash_logout</code><strong>每次在退出shell的时候会执行该文件</strong></li>\n</ol>\n<p><strong>每次在退出shell的时候会执行该文件</strong>，它提供了定制用户环境的功能，比如删除账号内的临时文件等命令就可以放在bash_logout 文件内，如果这个文件不存在的话则就执行其他的命令。</p>\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p><a href=\"https://www.runoob.com/linux/linux-comm-xargs.html\">https://www.runoob.com/linux/linux-comm-xargs.html</a></p>\n<p>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</p>\n<p><strong>命令格式：</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">somecommand |xargs -<span class=\"hljs-keyword\">item</span>  <span class=\"hljs-keyword\">command</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>-a file 从文件中读入作为 stdin</li>\n<li>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li>\n<li>-p 当每次执行一个argument的时候询问一次用户。</li>\n<li>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li>\n<li>-t 表示先打印命令，然后再执行。</li>\n<li>-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li>\n<li>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li>\n<li>-s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li>\n<li>-L num 从标准输入一次读取 num 行送给 command 命令。</li>\n<li>-l 同 -L。</li>\n<li>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li>\n<li>-x exit的意思，主要是配合-s使用。。</li>\n<li>-P 修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧。</li>\n</ul>\n<p><strong>Example</strong></p>\n<p>复制所有图片文件到 <code>/data/images</code> 目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">ls</span> *.jpg | xargs -n1 -I &#123;&#125; <span class=\"hljs-built_in\">cp</span> &#123;&#125; /data/images<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"inode\"><a href=\"#inode\" class=\"headerlink\" title=\"inode\"></a>inode</h2><p>参考: </p>\n<ul>\n<li><p>&lt;鸟哥的linux私房菜&gt; -&gt; 第七章、Linux 磁盘与文件系统管理 -&gt; 7.1.3 Linux 的 EXT2 文件系统（inode）</p>\n</li>\n<li><p><a href=\"https://ty-chen.github.io/linux-kernel-fs/\">Linux操作系统学习笔记（十一）文件系统</a></p>\n</li>\n</ul>\n<blockquote>\n<p>  <em>inode(index node)</em> 是 UNIX 操作系统中的一种数据结构，其本质是[<strong>结构体</strong>]，它包含了与文件系统中各个文件相关的一些重要信息。在 UNIX 中创建文件系统时，同时将会创建大量的 inode 。通常，文件系统磁盘空间中大约百分之一空间分配给了 inode 表。</p>\n</blockquote>\n<p><strong>inode主要是记录文件的元信息，比如文件权限信息、文件的大小、文件修改信息、文件位置信息(data block id)等等，我们可以理解为是文件的索引(index)。</strong></p>\n<blockquote>\n<p>  如何通过inode找到文件数据的位置?</p>\n<p>  ext2文件系统中，inode存在<strong>12个直接指针</strong>，<strong>1个间接指针</strong>(可以理解为指针)，<strong>1个双重间接块指针</strong>(可以理解为指向指针的指针 两重指针)，<strong>1个三重间接块指针</strong>(可以理解为 三重指针)，通过这几个指针的索引我们就能找到对应的文件存放的位置。</p>\n<p>  <strong>我们假定每个指针占用4Byte的空间，每个Blocks大小为4KB(SSD的4K对齐应该也是指的这个)。</strong></p>\n<ul>\n<li>直接块指针：<ul>\n<li>前12个直接指针，直接指向存储数据的区域。blocks大小为4KB，前12个直接指针就可以保存<strong>48KB</strong>的文件</li>\n</ul>\n</li>\n<li>间接块指针(一级间接快指针)：<ul>\n<li>每个指针占用4Byte，则间接快指针指向的Blocks可以保存(4*1024)&#x2F;4&#x3D;1024个记录(或者称为直接指针)，也就是对应1024个Blocks，那么间接块指针可存储文件数据大小为1024*4KB&#x3D;<strong>4MB</strong></li>\n</ul>\n</li>\n<li>双重间接块指针(二级间接快指针)：<ul>\n<li>同理，双重间接块指针可以储存文件数据大小为1024*1024*4KB&#x3D;<strong>4GB</strong></li>\n</ul>\n</li>\n<li>三重间接块指针(三级间接快指针)：<ul>\n<li>同理，三重间接块指针可以储存文件数据大小为1024*1024*1024*4KB&#x3D;<strong>4TB</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"/2020/d4436089/123.png\" alt=\"操作系统：文件系统- 掘金\"></p>\n<blockquote>\n<p>  <strong>弊端</strong></p>\n<p>  该存储结构带来的问题是对于大型文件，我们需要多次调用才可以访问对应块的内容，因此访问速度较慢。为此，<strong>ext4</strong>提出了新的解决方案：<a href=\"https://en.wikipedia.org/wiki/Extent_(file_systems)\">Extents</a>。简单的说，<strong>Extents以一个树形结构来连续存储文件块，从而提高访问速度，大致结构如下图所示。</strong></p>\n<p>  <img src=\"/2020/d4436089/1-s2.0-S1742287617300270-gr2.jpg\" alt=\"AFEIC: Advanced forensic Ext4 inode carving - ScienceDirect\"></p>\n</blockquote>\n<blockquote>\n<p>  <strong>冷知识:</strong></p>\n<p>  同一个文件在磁盘上的物理位置可能不会是连续的, 大概率都是分散开的, 散落在磁盘的各个位置.</p>\n<p>  <img src=\"/2020/d4436089/image-20230107231700676.png\" alt=\"image-20230107231700676\"></p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h4><p>我们可以通过<code>df</code>命令查看所有已挂载的文件系统中已使用的 inode 的数目，以及文件系统中总体使用情况的百分比。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">❯ df -i<br>Filesystem       Inodes   IUsed    IFree IUse% Mounted on<br>/dev/sdc       67108864  556871 66551993    1% /<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h4><p>我们可以通过stat命令查看文件(包括目录)的inode信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">❯ stat use_proxy.sh<br>  File: use_proxy.sh<br>  Size: 720             Blocks: 8          IO Block: 4096   regular file<br>Device: 820h/2080d      Inode: 552923      Links: 1<br>Access: (0644/-rw-r--r--)  Uid: ( 1000/   frank)   Gid: ( 1000/   frank)<br>Access: 2022-12-11 22:29:33.000000000 +0800<br>Modify: 2022-10-31 17:10:16.000000000 +0800<br>Change: 2022-12-11 22:31:28.141006225 +0800<br> Birth: -<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><p>我们可以通过find命令找特定inode号的文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">根目录的inode号为2</span><br>❯ find / -inum 2<br>/<br><br>❯ ll -li ~<br>total 16K<br>552923 -rw-r--r-- 1 frank frank  720 10月 31 17:10 xxx.sh<br>❯ find ~ -inum 552923<br>/home/frank/xxx.sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"硬链接-和-软连接-符号链接\"><a href=\"#硬链接-和-软连接-符号链接\" class=\"headerlink\" title=\"硬链接 和 软连接(符号链接)\"></a>硬链接 和 软连接(符号链接)</h2><p>参考:<a href=\"https://www.cnblogs.com/Peter2014/p/7594504.html\">Linux硬链接和软连接的区别与总结</a>,<a href=\"https://www.cnblogs.com/sanjun/p/9971993.html\">硬链接和软连接（符号链接）的区别</a>,<a href=\"https://www.zhihu.com/question/443459832/answer/1723706381\">linux中软链接和硬链接是什么意思？</a></p>\n<p>硬链接（Hard Link） 和软链接（Symbolic Link）</p>\n<p><img src=\"/2020/d4436089/1192583-20170925225909964-1496152149.png\" alt=\"img\"></p>\n<h3 id=\"硬链接（Hard-Link）\"><a href=\"#硬链接（Hard-Link）\" class=\"headerlink\" title=\"硬链接（Hard Link）\"></a>硬链接（Hard Link）</h3><p>硬链接是多个目录项中的「索引节点」指向一个文件，也就是<strong>指向同一个 inode</strong>，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以硬链接是不可用于跨文件系统的。由于多个目录项都是指向一个 inode，那么只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。 </p>\n<p><img src=\"/2020/d4436089/v2-7cf8cec396a66dca2dd1fcd6dadab537_720w.webp\" alt=\"img\"></p>\n<blockquote>\n<h3 id=\"有关硬链接的总结\"><a href=\"#有关硬链接的总结\" class=\"headerlink\" title=\"有关硬链接的总结\"></a>有关硬链接的总结</h3><ol>\n<li><strong>不可以在不同文件系统的文件间建立链接</strong>(Inode范围问题)</li>\n<li>只有超级用户才可以为目录创建硬链接。</li>\n<li>具有相同inode节点号的多个文件互为硬链接文件；</li>\n<li>删除硬链接文件或者删除源文件任意之一，文件实体并未被删除；<strong>只有删除了源文件和所有对应的硬链接文件，文件实体才会被删除；</strong></li>\n<li>硬链接文件是文件的另一个入口；</li>\n<li>可以通过给文件设置硬链接文件来防止重要文件被误删；</li>\n<li>创建硬链接命令 ln 源文件 硬链接文件；</li>\n<li>硬链接文件是普通文件，可以用rm删除；</li>\n<li>对于静态文件（没有进程正在调用），当硬链接数为0时文件就被删除。<em>注意：如果有进程正在调用，则无法删除或者即使文件名被删除但空间不会释放。</em></li>\n</ol>\n</blockquote>\n<h3 id=\"软链接（Symbolic-Link）\"><a href=\"#软链接（Symbolic-Link）\" class=\"headerlink\" title=\"软链接（Symbolic Link）\"></a>软链接（Symbolic Link）</h3><p>软链接相当于重新创建一个文件，这个文件<strong>有独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，<strong>实际上相当于访问到了另外一个文件</strong>，所以软链接是可以跨文件系统的，甚至目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。 </p>\n<p><img src=\"/2020/d4436089/v2-5606413e1b5d2c727399711d347617a2_720w.webp\" alt=\"img\"></p>\n<blockquote>\n<h3 id=\"有关软链接的总结\"><a href=\"#有关软链接的总结\" class=\"headerlink\" title=\"有关软链接的总结\"></a>有关软链接的总结</h3><ol>\n<li>软链接类似windows系统的快捷方式；</li>\n<li><strong>软连接的目标文件建议使用绝对路径，否则软连接被移动后将会失效。</strong></li>\n<li><strong>软链接里面存放的是源文件的<em>路径</em>，指向源文件；</strong></li>\n<li>删除源文件，软链接依然存在，但无法访问源文件内容；</li>\n<li>软链接失效时一般是白字红底闪烁；</li>\n<li>软链接和源文件是不同的文件，文件类型也不同，inode号也不同 <strong>是两个不同的文件</strong>；</li>\n<li>软链接的文件类型是“l”，可以用rm删除。</li>\n</ol>\n</blockquote>\n<h3 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h3><blockquote>\n<h3 id=\"硬链接和软链接的区别\"><a href=\"#硬链接和软链接的区别\" class=\"headerlink\" title=\"硬链接和软链接的区别\"></a>硬链接和软链接的区别</h3><p>  原理上，硬链接和源文件的inode节点号相同，两者互为硬链接。软连接和源文件的inode节点号不同，进而指向的block也不同，软连接block中存放了源文件的路径名。</p>\n<p>  实际上，硬链接和源文件是同一份文件，而软连接是独立的文件，类似于快捷方式，存储着源文件的位置信息便于指向。</p>\n<p>  使用限制上，不能对目录创建硬链接，不能对不同文件系统创建硬链接，不能对不存在的文件创建硬链接；可以对目录创建软连接，可以跨文件系统创建软连接，可以对不存在的文件创建软连接。</p>\n</blockquote>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p><strong>硬链接</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> -lhi</span><br>1180598 -rw-rw-r-- 3 frank frank    5 2月  12 22:31 123.txt<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">stat</span> *.txt</span><br>  文件：123.txt<br>  大小：5               块：8          IO 块：4096   普通文件<br>设备：805h/2053d        Inode：1180598     硬链接：1<br>...<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用 <span class=\"hljs-built_in\">ln</span> 命令创建链接 先看看语法</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ln</span> --<span class=\"hljs-built_in\">help</span></span><br>用法：ln [选项]... 目标... 目录<br>在指定&lt;目录&gt;中创建指向指定&lt;目标&gt;的链接。<br>默认创建硬链接，当使用--symbolic 时创建符号链接。<br>默认情况下，创建每个目标时不应存在与新链接的名称相同的文件。<br>创建硬链接时，每个指定的&lt;目标&gt;都必须存在。符号链接可以指向任意的位置；<br>当链接解析正常时，将其解析为一个相对于其父目录的相对链接。<br>...<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在当前目录下创建一个 硬链接 <span class=\"hljs-string\">&#x27;123.ln.txt&#x27;</span>指向<span class=\"hljs-string\">&#x27;123.txt&#x27;</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ln</span> 123.txt ./123.ln.txt</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> -lhi</span><br>1180598 -rw-rw-r-- 3 frank frank    5 2月  12 22:31 123.ln.txt<br>1180598 -rw-rw-r-- 3 frank frank    5 2月  12 22:31 123.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">我们可以看到 <span class=\"hljs-string\">&#x27;123.txt&#x27;</span> 和 <span class=\"hljs-string\">&#x27;123.ln.txt&#x27;</span> 的Inode指向同一个位置 自然他们的大小也是一致的</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">并且 <span class=\"hljs-string\">&#x27;硬链接&#x27;</span> 的数目由1变成了2</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果 <span class=\"hljs-built_in\">rm</span> 其中一个文件, 只是删除了文件指针文件内容并不会删除, 也就是说只有等到 硬链接 数目变成0了内核才会将文件内容删除</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">stat</span> *.txt</span><br>  文件：123.ln.txt<br>  大小：5               块：8          IO 块：4096   普通文件<br>设备：805h/2053d        Inode：1180598     硬链接：2<br>...<br>  文件：123.txt<br>  大小：5               块：8          IO 块：4096   普通文件<br>设备：805h/2053d        Inode：1180598     硬链接：2<br>...<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">加 -s 参数 创建一个 软链接</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在当前目录下创建一个 软链接 <span class=\"hljs-string\">&#x27;123.soft.txt&#x27;</span>指向<span class=\"hljs-string\">&#x27;123.txt&#x27;</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ln</span> -s 123.txt ./123.soft.txt</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意看 软件链接 的类型是 l</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> -hli</span><br>1180598 -rw-rw-r-- 3 frank frank    5 2月  12 22:31 123.ln.txt<br>1181799 lrwxrwxrwx 1 frank frank    7 2月  12 22:41 123.soft.txt -&gt; 123.txt<br>1180598 -rw-rw-r-- 3 frank frank    5 2月  12 22:31 123.txt<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">stat</span> *.txt</span><br>  文件：123.ln.txt<br>  大小：5               块：8          IO 块：4096   普通文件<br>设备：805h/2053d        Inode：1180598     硬链接：3<br>...<br>  文件：123.soft.txt -&gt; 123.txt<br>  大小：7               块：0          IO 块：4096   符号链接<br>设备：805h/2053d        Inode：1181799     硬链接：1<br>...<br>  文件：123.txt<br>  大小：5               块：8          IO 块：4096   普通文件<br>设备：805h/2053d        Inode：1180598     硬链接：3<br>...<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"linux-常用命令\"><a href=\"#linux-常用命令\" class=\"headerlink\" title=\"linux 常用命令\"></a>linux 常用命令</h1><blockquote>\n<p>  <span style=\"color:red\">TODO 将这些命令进行分类！</span></p>\n</blockquote>\n<p>查看支持的shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> /etc/shells<br></code></pre></td></tr></table></figure>\n\n<p>查看当前使用哪个shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SHELL</span><br></code></pre></td></tr></table></figure>\n\n<p>更改用户的默认shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">chsh -s /bin/zsh  [用户名:模认当前用户]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"alias-起别名\"><a href=\"#alias-起别名\" class=\"headerlink\" title=\"alias 起别名\"></a>alias 起别名</h3><p><strong>命名别名</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">起别名</span><br>alias 别名=“路径” <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">取消别名</span><br>unalias 别名  <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看命令类型</span><br>type -a ls  <br></code></pre></td></tr></table></figure>\n\n<p><strong>别名优先级最高</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">别名优先</span><br>ls<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">跳过别名</span><br>\\ls<br>&quot;ls&quot;<br>&#x27;ls&#x27;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ls-list-file\"><a href=\"#ls-list-file\" class=\"headerlink\" title=\"ls list file\"></a>ls list file</h3><ul>\n<li><p>ls -l 显示文件的详细信息，文件目录具有的权限，当前权限文件的数量，拥有者，所属的群组，文件目录的大小，创建或者修改时间，文件目录的名字。可以使用ls -la</p>\n</li>\n<li><p>ls -R 递归列出目录所有文件</p>\n</li>\n<li><p>ls -a 显示所有文件以及子目录，包括“.”开头的隐藏文件</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><ul>\n<li>cd &#x2F; 进入根目录</li>\n<li>cd .. 返回上一级</li>\n<li>cd ~ 返回当前用户主目录</li>\n</ul>\n<h3 id=\"pwd显示路径\"><a href=\"#pwd显示路径\" class=\"headerlink\" title=\"pwd显示路径\"></a>pwd显示路径</h3><p>显示当前文件目录的绝对路径</p>\n<h3 id=\"uname系统信息查看\"><a href=\"#uname系统信息查看\" class=\"headerlink\" title=\"uname系统信息查看\"></a>uname系统信息查看</h3><ul>\n<li>-r 列出当前系统的具体内核版本号。 </li>\n<li>-s 列出系统内核名称。 </li>\n<li>-o 列出系统信息。</li>\n</ul>\n<ul>\n<li><strong>ubuntu版本查看</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> /etc/lsb-release<br>lsb_release -a<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"clear清屏\"><a href=\"#clear清屏\" class=\"headerlink\" title=\"clear清屏\"></a>clear清屏</h3><p>快捷键 <strong>Ctrl+l(小写的L)</strong>  同clear</p>\n<h3 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h3><p>暂时提升到root权限</p>\n<p>su可以直接变成管理员</p>\n<ul>\n<li>-h help</li>\n<li>-p 改变询问密码的提示符（不知道是啥）</li>\n</ul>\n<h3 id=\"wc-WordCount\"><a href=\"#wc-WordCount\" class=\"headerlink\" title=\"wc WordCount\"></a>wc WordCount</h3><blockquote>\n<p>  用法</p>\n<ul>\n<li><code>wc -l &lt;文件名&gt;</code> 输出行数统计</li>\n<li><code>wc -c &lt;文件名&gt;</code> 输出字节数统计</li>\n<li><code>wc -m &lt;文件名&gt;</code> 输出字符数统计</li>\n<li><code>wc -L &lt;文件名&gt;</code> 输出文件中最长一行的长度</li>\n<li><code>wc -w &lt;file name&gt;</code> 显示一个文件的字数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\"><span class=\"hljs-built_in\">wc</span> 123.txt</span><br>   7   11   117  123.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">依次是</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">行数 单词数 字节数 文件名称。</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"cat-文本输出命令\"><a href=\"#cat-文本输出命令\" class=\"headerlink\" title=\"cat  文本输出命令\"></a>cat  文本输出命令</h3><p>-n 由1开始对所有行进行编号</p>\n<p>-b 类似-n不对空行编号</p>\n<p>-s 遇到两行空行以上时合并成一个空行</p>\n<h3 id=\"ifconfig-显示网络配置\"><a href=\"#ifconfig-显示网络配置\" class=\"headerlink\" title=\"ifconfig  显示网络配置\"></a>ifconfig  显示网络配置</h3><ul>\n<li>sudo ifconfig ens33 192.168.128.128     修改ip</li>\n</ul>\n<h3 id=\"man-系统帮助-查命令\"><a href=\"#man-系统帮助-查命令\" class=\"headerlink\" title=\"man 系统帮助-查命令\"></a>man 系统帮助-查命令</h3><h3 id=\"reboot-重启\"><a href=\"#reboot-重启\" class=\"headerlink\" title=\"reboot  重启\"></a>reboot  重启</h3><h3 id=\"poweroff-关机\"><a href=\"#poweroff-关机\" class=\"headerlink\" title=\"poweroff 关机\"></a>poweroff 关机</h3><h3 id=\"install-安装软件命令\"><a href=\"#install-安装软件命令\" class=\"headerlink\" title=\"install 安装软件命令\"></a>install 安装软件命令</h3><h3 id=\"apt-get\"><a href=\"#apt-get\" class=\"headerlink\" title=\"apt-get\"></a>apt-get</h3><p>APT工具可以实现软件的自动下载、配置、安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查找有哪些版本</span><br>apt-cache madison &lt;&lt;package name&gt;&gt;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装指定版本</span><br>apt-get install &lt;&lt;package name&gt;&gt;=&lt;&lt;version&gt;&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fdisk-磁盘工具\"><a href=\"#fdisk-磁盘工具\" class=\"headerlink\" title=\"fdisk 磁盘工具\"></a>fdisk 磁盘工具</h3><p><a id=\"fdisk\">linux  磁盘管理 fdisk</a></p>\n<blockquote>\n<p>  Linux fdisk 是一个创建和维护分区表的程序，它兼容 DOS 类型的分区表、BSD 或者 SUN 类型的磁盘列表。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">fdisk <span class=\"hljs-selector-attr\">[必要参数]</span><span class=\"hljs-selector-attr\">[选择参数]</span><br></code></pre></td></tr></table></figure>\n\n<p>  <strong>必要参数：</strong></p>\n<ul>\n<li>-l 列出素所有分区表</li>\n<li>-u 与 <strong>-l</strong> 搭配使用，显示分区数目</li>\n</ul>\n<p>  <strong>选择参数：</strong></p>\n<ul>\n<li>-s&lt;分区编号&gt; 指定分区</li>\n<li>-v 版本信息</li>\n</ul>\n<p>  <strong>菜单操作说明</strong></p>\n<ul>\n<li>m ：显示菜单和帮助信息</li>\n<li>a ：活动分区标记&#x2F;引导分区</li>\n<li>d ：删除分区</li>\n<li>l ：显示分区类型</li>\n<li>n ：新建分区</li>\n<li>p ：显示分区信息</li>\n<li>q ：退出不保存</li>\n<li>t ：设置分区号</li>\n<li>v ：进行分区检查</li>\n<li>w ：保存修改</li>\n<li>x ：扩展应用，高级功能</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> fdisk /dev/sdb</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看帮助</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">m</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除分区</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">d</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">新建分区</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">n</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">写入分区表</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">w</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这个时候虽然分区分好了但是还不能使用, 因为没有分配文件系统</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">mkfs</span><br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h3 id=\"mkfs-格式化-建立文件系统\"><a href=\"#mkfs-格式化-建立文件系统\" class=\"headerlink\" title=\"mkfs 格式化(建立文件系统)\"></a>mkfs 格式化(建立文件系统)</h3><p><a id=\"mkfs\">linux 构造文件系统 mkfs</a></p>\n<p>Linux mkfs（英文全拼：make file system）命令用于在特定的分区上建立 linux 文件系统。</p>\n<blockquote>\n<p>  <strong>使用方式</strong> :</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkfs [-V] [-t fstype] [fs-options] filesys [blocks]<br></code></pre></td></tr></table></figure>\n\n<p>  <strong>参数</strong> ：</p>\n<ul>\n<li>选项：</li>\n<li>-t, –type&#x3D;&lt;类型&gt;  文件系统类型；若不指定，将使用 ext2<br> fs-options     实际文件系统构建程序的参数<br> &lt;设备&gt;         要使用设备的路径<br> &lt;大小&gt;         要使用设备上的块数</li>\n<li>-V, –verbose      解释正在进行的操作；<br>                  多次指定 -V 将导致空运行(dry-run)</li>\n<li>-h, –help         display this help</li>\n<li>-V, –version      display version</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>  将sda6分区格式化为ext3格式</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkfs -t ext3 /dev/sda6  <br></code></pre></td></tr></table></figure>\n\n<p>  <strong>注意</strong>：这里的文件系统是要指定的，比如 ext3 ；reiserfs ；ext2 ；fat32 ；msdos 等。</p>\n</blockquote>\n<h3 id=\"df-磁盘信息\"><a href=\"#df-磁盘信息\" class=\"headerlink\" title=\"df 磁盘信息\"></a>df 磁盘信息</h3><p>disk free</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">df -h<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-h</td>\n<td>可读显示</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>all</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>本地文件系统</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>Type 文件系统类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"du-磁盘使用分析\"><a href=\"#du-磁盘使用分析\" class=\"headerlink\" title=\"du 磁盘使用分析\"></a>du 磁盘使用分析</h3><p>disk usaged</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">du</span> --max-depth=1 -BM | <span class=\"hljs-built_in\">sort</span> -rn<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>  -h：以人类可读的方式显示。<br>  -a：显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小。<br>  -s：只显示<strong>目录占用的磁盘空间</strong>大小，<strong>不显示其子目录和文件</strong>占用的磁盘空间大小。<br>  -c：显示几个<strong>目录或文件占用的磁盘</strong>空间大小，还要统计它们的总和。<br>  –apparent-size：显示<strong>目录或文件自身的大小</strong>。<br>  -l ：统计硬链接占用磁盘空间的大小。<br>  -L：统计符号链接所指向的文件占用的磁盘空间大小。</p>\n<p>  -B: 单位修改 -BM &#x3D; 用MB   -BG&#x3D;用GB</p>\n<p>  –max-depth: –max-depth&#x3D;1列出目录的深度为1</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># ** du命令还可以对结果进行排序，以方便快速找出占用空间最多目录。 **</span><br><br><span class=\"hljs-built_in\">du</span> -s 目录 | <span class=\"hljs-built_in\">sort</span> -rn        <span class=\"hljs-comment\">#这是按字节排序</span><br><span class=\"hljs-built_in\">du</span> -sh 目录 | <span class=\"hljs-built_in\">sort</span> -rn        <span class=\"hljs-comment\">#这是按兆（M）来排序</span><br><span class=\"hljs-comment\">#由于-sh大小显示看起来是乱的，因此建议使用du -s|sort -nr</span><br><span class=\"hljs-built_in\">du</span> -s 目录 | <span class=\"hljs-built_in\">sort</span> -rn | <span class=\"hljs-built_in\">head</span>        <span class=\"hljs-comment\">#选出排在前面的10个</span><br><span class=\"hljs-built_in\">du</span> -s 目录 | <span class=\"hljs-built_in\">sort</span> -rn | <span class=\"hljs-built_in\">tail</span>        <span class=\"hljs-comment\">#选出排在后面的10个</span><br><br><span class=\"hljs-comment\"># ** 统计总数大小 **</span><br><span class=\"hljs-built_in\">du</span> -sh xmldb/<br><span class=\"hljs-built_in\">du</span> -sm * | <span class=\"hljs-built_in\">sort</span> -n //统计当前目录大小 并安大小 排序<br><span class=\"hljs-built_in\">du</span> -sk * | <span class=\"hljs-built_in\">sort</span> -n<br><span class=\"hljs-built_in\">du</span> -sk * | grep guojf //看一个人的大小<br><span class=\"hljs-built_in\">du</span> -m | <span class=\"hljs-built_in\">cut</span> -d <span class=\"hljs-string\">&quot;/&quot;</span> -f 2 //看第二个/ 字符前的文字<br><br><span class=\"hljs-comment\"># ** 查看此文件夹有多少文件 /*/*/* 有多少文件 **</span><br><span class=\"hljs-built_in\">du</span> xmldb/<br><span class=\"hljs-built_in\">du</span> xmldb/*/*/* |<span class=\"hljs-built_in\">wc</span> -l<br><span class=\"hljs-comment\"># wc [-lmw]说明</span><br><span class=\"hljs-comment\"># 参数说明：-l :多少行;  -m:多少字符;　-w:多少字</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"touch-创建新文件\"><a href=\"#touch-创建新文件\" class=\"headerlink\" title=\"touch 创建新文件\"></a>touch 创建新文件</h3><h3 id=\"mkdir-创建文件夹\"><a href=\"#mkdir-创建文件夹\" class=\"headerlink\" title=\"mkdir 创建文件夹\"></a>mkdir 创建文件夹</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-p</td>\n<td>递归创建, 前面的不存在, 就会创建</td>\n</tr>\n</tbody></table>\n<h3 id=\"rmdir-删除文件夹\"><a href=\"#rmdir-删除文件夹\" class=\"headerlink\" title=\"rmdir 删除文件夹\"></a>rmdir 删除文件夹</h3><h3 id=\"rm-删除\"><a href=\"#rm-删除\" class=\"headerlink\" title=\"rm 删除\"></a>rm 删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 删除folder文件之外的所有文件</span><br><span class=\"hljs-built_in\">rm</span> -rf !(folder)<br><span class=\"hljs-comment\">#删除folder1和folder2文件之外的所有文件</span><br><span class=\"hljs-built_in\">rm</span> -rf !(folder1 | folder2) <br><span class=\"hljs-comment\">#删除keep文件之外的所有文件</span><br><span class=\"hljs-built_in\">ls</span> | grep -v keep | xargs <span class=\"hljs-built_in\">rm</span> <br><span class=\"hljs-comment\"># 说明： ls先得到当前的所有文件和文件夹的名字， grep -v keep，进行grep正则匹配查找keep，-v参数决定了结果为匹配之外的结果，也就是的到了keep之外的所有文件名，然后 xargs用于从 标准输入获得参数 并且传递给后面的命令，这里使用的命令是 rm，然后由rm删除前面选择的文件。</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>直接把要删除的目录硬连数据成 0 ，删除该目录。</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>直接把要删除的目录硬连数据成 0 ，删除该目录。</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>删除文件或者夹 (目录 )之前先询问用户。</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归删除，指定文件夹 (目录 )下的所有文件和子夹全部删除掉。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示删除过程。</td>\n</tr>\n</tbody></table>\n<h3 id=\"cp-复制\"><a href=\"#cp-复制\" class=\"headerlink\" title=\"cp 复制\"></a>cp 复制</h3><p>cp [参数 ] [源地址 ] [目的地址 ]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-r</td>\n<td>递归处理，指定目录下一并处理</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强行复制文件，不管要的是否已经存在于目标录。</td>\n</tr>\n</tbody></table>\n<h3 id=\"mv-文件移动-重命名\"><a href=\"#mv-文件移动-重命名\" class=\"headerlink\" title=\"mv 文件移动 重命名\"></a>mv 文件移动 重命名</h3><p>mv [参数 ] [源地址 ] [目的地址 ]</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>如果要覆盖文件的话前先进行备份。</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>若目标文件或录与现在的重复，直接覆盖。</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>在覆盖之前询问用户。</td>\n</tr>\n</tbody></table>\n<h3 id=\"find-查找\"><a href=\"#find-查找\" class=\"headerlink\" title=\"find 查找\"></a>find 查找</h3><p>find [路径 ] [参数 ] [关键字 ]</p>\n<ul>\n<li>-name&lt;filename&gt;  按照文件名称查找，与 filename匹配的文件，可使用通符。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">find /etc -name *.config<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"grep-文件中搜内容\"><a href=\"#grep-文件中搜内容\" class=\"headerlink\" title=\"grep 文件中搜内容\"></a>grep 文件中搜内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">grep -r -i code<br></code></pre></td></tr></table></figure>\n\n<p>Linux grep 命令用于查找文件里符合条件的字符串。</p>\n<p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 **-**，则 grep 指令会从标准输入设备读取数据。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li>\n<li><strong>-C&lt;显示行数&gt; 或 –context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li>\n<li><strong>-d &lt;动作&gt; 或 –directories&#x3D;&lt;动作&gt;</strong> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li>\n<li><strong>-n 或 –line-number</strong> : 在显示符合样式的那一行之前，标示出该行的列数编号。</li>\n<li><strong>-r 或 –recursive</strong> : 此参数的效果和指定”-d recurse”参数相同。</li>\n<li><strong>-i 或 –ignore-case</strong> : 忽略字符大小写的差别。</li>\n<li><strong>-v 或 –invert-match</strong> : 显示不包含匹配文本的所有行。</li>\n</ul>\n<p>我们可以通过管道操作来让grep变得更强大，管道操作就是把前面一条命令的输出作为后面一条命令的输入，从而把很多简单的命令组合起来完成复杂的功能。例如，如果我们想查找包含apple的行，但又想过滤掉pineapple，可以用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">grep apple fruitlist.txt | grep -v pineapple<br></code></pre></td></tr></table></figure>\n\n<p>如果我们想把搜索结果保存起来，那么可以把命令的标准输出重定向到文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">grep apple fruitlist.txt | grep -v pineapple &gt; apples.txt<br></code></pre></td></tr></table></figure>\n\n<p>重定向符号&gt;和管道操作符号|的区别是，重定向后面接的是一个文件，它后面不能再接任何文件或命令了；而管道操作后面接的是命令，可以无限地接下去。如果想以追加方式写到文件，可以用&gt;&gt;。管道操作是Linux命令行的一种哲学，它是计算机技术中少有的能沿用几十年的技术之一。通过管道操作，一行命令可以完成Windows下上千行程序也不能完成的文本处理功能。</p>\n<p>grep [参数 ] 关键字 文件列表</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>无视大小写</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归查找</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>反转，只显示不匹配</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>全匹配 match whole word</td>\n</tr>\n<tr>\n<td>–exclude-dir</td>\n<td>排除文件夹</td>\n</tr>\n<tr>\n<td>–exclude</td>\n<td>排除文件</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">grep -ir &quot;ubuntu&quot; /etc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意 如果 <span class=\"hljs-string\">&quot;双引号内带有--&quot;</span> 可能会有不可预知的情况</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">grep -ir <span class=\"hljs-string\">&quot;--ubuntu&quot;</span> /etc 这种写法会出问题</span><br><br>grep -ir &quot;Application_Initialize&quot; /a_usr/rosemaryCR/mikan/ --exclude-dir=out<br>grep -ir &quot;CARRIER_HOME_REVERSAL&quot; ./ --exclude=GRTAGS --exclude=mechapi.c<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"grep-搜索正则表达式并列出\"><a href=\"#grep-搜索正则表达式并列出\" class=\"headerlink\" title=\"grep 搜索正则表达式并列出\"></a>grep 搜索正则表达式并列出</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">| grep 22</span><br>sudo netstat -ntlp | grep 22<br>sudo apt list | grep php<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>print work directory 输出当前目录</p>\n<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p>在当前命令窗口输出文件</p>\n<h3 id=\"nano\"><a href=\"#nano\" class=\"headerlink\" title=\"nano\"></a>nano</h3><p>文本编辑器</p>\n<h3 id=\"mount-unmount-挂载卸载\"><a href=\"#mount-unmount-挂载卸载\" class=\"headerlink\" title=\"mount unmount 挂载卸载\"></a>mount unmount 挂载卸载</h3><p><a id=\"mount\">linux 挂载 mount</a></p>\n<h4 id=\"mount-挂载\"><a href=\"#mount-挂载\" class=\"headerlink\" title=\"mount 挂载\"></a>mount 挂载</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">需要先创建一个挂载点</span><br>sudo mkdir /mnt/usb<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">挂载</span><br>sudo mount /dev/sda1 /mnt/usb<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mount 中文乱码</span><br>sudo mount -o iocharset=utf8 /dev/sda1 /mnt/usb<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"umount-卸载\"><a href=\"#umount-卸载\" class=\"headerlink\" title=\"umount 卸载\"></a>umount 卸载</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">卸载</span><br>sudo umount /mnt/usb<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">卸载的时候出错注意是不是文件夹正在使用中</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"树莓派自动挂载\"><a href=\"#树莓派自动挂载\" class=\"headerlink\" title=\"树莓派自动挂载\"></a>树莓派自动挂载</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开文件 添加以下 这个带有超时,可以避免拔掉U盘开不了机</span><br>sudo nano /etc/fstab<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">/dev/sda1 /mnt/usb    auto     defaults,nofail,x-systemd.device-timeout=1,noatime  0   0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"mkdir-创建文件夹-1\"><a href=\"#mkdir-创建文件夹-1\" class=\"headerlink\" title=\"mkdir 创建文件夹\"></a>mkdir 创建文件夹</h3><h3 id=\"rmdir-删除文件夹-1\"><a href=\"#rmdir-删除文件夹-1\" class=\"headerlink\" title=\"rmdir 删除文件夹\"></a>rmdir 删除文件夹</h3><h3 id=\"rm-rf\"><a href=\"#rm-rf\" class=\"headerlink\" title=\"rm -rf\"></a>rm -rf</h3><p><strong>功能说明：删除文件或目录。</strong></p>\n<p>语法：rm [-dfirv][–help][–version][文件或目录]</p>\n<p>补充说明：执行rm指令可删除文件或目录，如欲删除目录必须加上参数”-r”，否则预设仅会删除文件。</p>\n<p>参数：</p>\n<ul>\n<li><p>-d 或 –directory 　直接把欲删除的目录的硬连接数据删成0，删除该目录。</p>\n</li>\n<li><p>-f 或 –force 　强制删除文件或目录。</p>\n</li>\n<li><p>-i 或 –interactive 　删除既有文件或目录之前先询问用户。</p>\n</li>\n<li><p>-r 或 -R 或 –recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。</p>\n</li>\n<li><p>-v 或 –verbose 　显示指令执行过程。</p>\n</li>\n</ul>\n<h3 id=\"netstat-列出网络\"><a href=\"#netstat-列出网络\" class=\"headerlink\" title=\"netstat 列出网络\"></a>netstat 列出网络</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">列出所有</span><br>sudo netstat -ntlp<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查找</span><br>netstat -ntlp | grep 80<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ln-文件夹链接\"><a href=\"#ln-文件夹链接\" class=\"headerlink\" title=\"ln 文件夹链接\"></a>ln 文件夹链接</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">软链接 现有a 链接到b(没有的,目标的)</span><br>ln -s a b<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"dd-读取、转换并输出数据\"><a href=\"#dd-读取、转换并输出数据\" class=\"headerlink\" title=\"dd 读取、转换并输出数据\"></a>dd 读取、转换并输出数据</h3><p>dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。</p>\n<p><strong>参数说明:</strong></p>\n<ul>\n<li>if&#x3D;文件名：输入文件名，默认为标准输入。即指定源文件。</li>\n<li>of&#x3D;文件名：输出文件名，默认为标准输出。即指定目的文件。</li>\n<li>ibs&#x3D;bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。<br>obs&#x3D;bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。<br>bs&#x3D;bytes：同时设置读入&#x2F;输出的块大小为bytes个字节。</li>\n<li>cbs&#x3D;bytes：一次转换bytes个字节，即指定转换缓冲区大小。</li>\n<li>skip&#x3D;blocks：从输入文件开头跳过blocks个块后再开始复制。</li>\n<li>seek&#x3D;blocks：从输出文件开头跳过blocks个块后再开始复制。</li>\n<li>count&#x3D;blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。</li>\n<li>conv&#x3D;&lt;关键字&gt;，关键字可以有以下11种：<ul>\n<li>conversion：用指定的参数转换文件。</li>\n<li>ascii：转换ebcdic为ascii</li>\n<li>ebcdic：转换ascii为ebcdic</li>\n<li>ibm：转换ascii为alternate ebcdic</li>\n<li>block：把每一行转换为长度为cbs，不足部分用空格填充</li>\n<li>unblock：使每一行的长度都为cbs，不足部分用空格填充</li>\n<li>lcase：把大写字符转换为小写字符</li>\n<li>ucase：把小写字符转换为大写字符</li>\n<li>swap：交换输入的每对字节</li>\n<li>noerror：出错时不停止</li>\n<li>notrunc：不截短输出文件</li>\n<li>sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。</li>\n</ul>\n</li>\n<li>–help：显示帮助信息</li>\n<li>–version：显示版本信息</li>\n</ul>\n<h4 id=\"dd-进行测速\"><a href=\"#dd-进行测速\" class=\"headerlink\" title=\"dd 进行测速\"></a>dd 进行测速</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以下两条Shell分别测试写入和读取1G的文件从/mnt/usb/目录，就是U盘的挂载点（硬盘测试也可以这样）：</span><br><br>time dd if=/dev/zero of=/mnt/usb/1g bs=1024 count=1000000<br>time dd if=/mnt/usb/1g bs=128k | dd of=/dev/null<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"source-刷新环境变量\"><a href=\"#source-刷新环境变量\" class=\"headerlink\" title=\"source 刷新环境变量\"></a>source 刷新环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 刷新环境变量</span><br><span class=\"hljs-built_in\">source</span> ~/.profile<br><span class=\"hljs-built_in\">source</span> 后面接文件<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"tail-循环读取log\"><a href=\"#tail-循环读取log\" class=\"headerlink\" title=\"tail 循环读取log\"></a>tail 循环读取log</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">tail</span> -f filename<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"file-辨识文件类型\"><a href=\"#file-辨识文件类型\" class=\"headerlink\" title=\"file 辨识文件类型\"></a>file 辨识文件类型</h3><blockquote>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">file <span class=\"hljs-selector-attr\">[-bcLvz]</span><span class=\"hljs-selector-attr\">[-f &lt;名称文件&gt;]</span><span class=\"hljs-selector-attr\">[-m &lt;魔法数字文件&gt;...]</span><span class=\"hljs-selector-attr\">[文件或目录...]</span><br></code></pre></td></tr></table></figure>\n\n<p>  <strong>参数</strong>：</p>\n<ul>\n<li>-b 　列出辨识结果时，不显示文件名称。</li>\n<li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li>\n<li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li>\n<li>-L 　直接显示符号连接所指向的文件的类别。</li>\n<li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li>\n<li>-v 　显示版本信息。</li>\n<li>-z 　尝试去解读压缩文件的内容。</li>\n<li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li>\n</ul>\n</blockquote>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><p><strong>-x</strong></p>\n<p>每次访问时都需要写代理参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -x socks5://127.0.0.1:1024 http://www.google.com <span class=\"hljs-comment\"># -x 参数等同于 --proxy</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>-v</strong></p>\n<p><code>curl -v</code>参数会输出请求中访问的路由信息，方便确定是否设置成功，请求有没有代理</p>\n<p><strong>-w</strong></p>\n<p>[使用 curl 测试网站加载速度](##使用 curl 测试网站加载速度)</p>\n<p>该选项在请求结束之后打印本次请求的统计数据到标准输出。</p>\n<blockquote>\n<p>  首先，我们定义控制打印行为的格式化字符串。新建文本文件 <code>fmt.txt</code>，并填入下面的内容：</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">\\n<br><span class=\"hljs-title class_\">Response</span> <span class=\"hljs-title class_\">Time</span> <span class=\"hljs-symbol\">for:</span> <span class=\"hljs-string\">%&#123;url_effective&#125;</span>\\n\\n<br><span class=\"hljs-variable constant_\">DNS</span> <span class=\"hljs-title class_\">Lookup</span> <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_namelookup&#125;</span>s\\n<br><span class=\"hljs-title class_\">Redirection</span> <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_redirect&#125;</span>s\\n<br><span class=\"hljs-title class_\">Connection</span> <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_connect&#125;</span>s\\n<br><span class=\"hljs-title class_\">App</span> <span class=\"hljs-title class_\">Connection</span> <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_appconnect&#125;</span>s\\n<br><span class=\"hljs-title class_\">Pre</span>-transfer <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_pretransfer&#125;</span>s\\n<br><span class=\"hljs-title class_\">Start</span>-transfer <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t<span class=\"hljs-string\">%&#123;time_starttransfer&#125;</span>s\\n\\n<br><span class=\"hljs-title class_\">Total</span> <span class=\"hljs-title class_\">Time</span><span class=\"hljs-symbol\">:</span>\\t\\t\\t<span class=\"hljs-string\">%&#123;time_total&#125;</span>s\\n<br></code></pre></td></tr></table></figure>\n\n<p>  curl 提供了很多置换变量，可以在格式化字符串中通过 <code>%&#123;var&#125;</code> 的形式使用。完整的变量列表可以在 curl 的 manpage 中查看。简单介绍一下我们使用的这几个变量：</p>\n<ul>\n<li><code>url_effective</code>: 执行完地址重定向之后的最终 URL；</li>\n<li><code>time_namelookup</code>: 从请求开始至完成名称解析所花的时间，单位为秒，下同；</li>\n<li><code>time_redirect</code>: 执行所有重定向所花的时间；</li>\n<li><code>time_connect</code>: 从请求开始至建立 TCP 连接所花的时间；</li>\n<li><code>time_appconnect</code>: 从请求开始至完成 SSL&#x2F;SSH 握手所花的时间；</li>\n<li><code>time_pretransfer</code>: 从请求开始至服务器准备传送文件所花的时间，包含了传送协商时间；</li>\n<li><code>time_starttransfer</code>: 从请求开始至服务器准备传送第一个字节所花的时间；</li>\n<li><code>time_total</code>: 完整耗时。</li>\n</ul>\n<p>  然后执行请求，通过 <code>@filename</code> 指定保存了格式化字符串的文件：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">curl -L -s -w @fmt.txt -o /dev/null http://www.google.com</span><br></code></pre></td></tr></table></figure>\n\n<p>  输出：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">Response Time <span class=\"hljs-keyword\">for</span>: http:<span class=\"hljs-comment\">//www.google.co.jp/?gfe_rd=cr&amp;dcr=0&amp;ei=cjIaWpTkHeiQ8QfnxYzoBA</span><br><br>DNS Lookup Time:        <span class=\"hljs-number\">0.000038</span>s<br>Redirection Time:       <span class=\"hljs-number\">0.207271</span>s<br>Connection Time:        <span class=\"hljs-number\">0.000039</span>s<br>App Connection Time:    <span class=\"hljs-number\">0.000039</span>s<br>Pre-transfer Time:      <span class=\"hljs-number\">0.000067</span>s<br>Start-transfer Time:    <span class=\"hljs-number\">0.260115</span>s<br><br>Total Time:             <span class=\"hljs-number\">0.467691</span>s<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>通过type 命令可以查看命令类型：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">$ <span class=\"hljs-built_in\">type</span> <span class=\"hljs-keyword\">echo</span><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> <span class=\"hljs-keyword\">shell</span> builtin<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h3><blockquote>\n<h1 id=\"Linux-whereis命令\"><a href=\"#Linux-whereis命令\" class=\"headerlink\" title=\"Linux whereis命令\"></a>Linux whereis命令</h1><p>  Linux whereis命令用于查找文件。</p>\n<p>  该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。</p>\n<p>  该指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。</p>\n<h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">whereis <span class=\"hljs-selector-attr\">[-bfmsu]</span><span class=\"hljs-selector-attr\">[-B &lt;目录&gt;...]</span><span class=\"hljs-selector-attr\">[-M &lt;目录&gt;...]</span><span class=\"hljs-selector-attr\">[-S &lt;目录&gt;...]</span><span class=\"hljs-selector-attr\">[文件...]</span><br></code></pre></td></tr></table></figure>\n\n<p>  <strong>参数</strong>：</p>\n<p>  -b 　只查找二进制文件。</p>\n<p>  -B&lt;目录&gt; 　只在设置的目录下查找二进制文件。</p>\n<p>  -f 　不显示文件名前的路径名称。</p>\n<p>  -m 　只查找说明文件。</p>\n<p>  -M&lt;目录&gt; 　只在设置的目录下查找说明文件。</p>\n<p>  -s 　只查找原始代码文件。</p>\n<p>  -S&lt;目录&gt; 　只在设置的目录下查找原始代码文件。</p>\n<p>  -u 　查找不包含指定类型的文件。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>  使用指令”whereis”查看指令”bash”的位置，输入如下命令：</p>\n  <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>whereis bash <br></code></pre></td></tr></table></figure>\n\n<p>  上面的指令执行后，输出信息如下所示：</p>\n  <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">bash:</span><span class=\"hljs-keyword\">/bin/</span>bash<span class=\"hljs-keyword\">/etc/</span>bash.bashrc<span class=\"hljs-keyword\">/usr/</span>share<span class=\"hljs-keyword\">/man/</span>man1/bash<span class=\"hljs-number\">.1</span>.gz <br></code></pre></td></tr></table></figure>\n\n<p>  注意：以上输出信息从左至右分别为查询的程序名、bash路径、bash的man 手册页路径。</p>\n<p>  如果用户需要单独查询二进制文件或帮助文件，可使用如下命令：</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$ whereis -<span class=\"hljs-keyword\">b </span><span class=\"hljs-keyword\">bash </span><br>$ whereis -m <span class=\"hljs-keyword\">bash </span><br></code></pre></td></tr></table></figure>\n\n<p>  输出信息如下：</p>\n  <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">$ whereis -b bash               <span class=\"hljs-meta\">#显示bash 命令的二进制程序  </span><br><span class=\"hljs-symbol\">bash:</span> <span class=\"hljs-keyword\">/bin/</span>bash <span class=\"hljs-keyword\">/etc/</span>bash.bashrc <span class=\"hljs-keyword\">/usr/</span>share/bash    <span class=\"hljs-meta\"># bash命令的二进制程序的地址  </span><br>$ whereis -m bash               <span class=\"hljs-meta\">#显示bash 命令的帮助文件  </span><br><span class=\"hljs-symbol\">bash:</span> <span class=\"hljs-keyword\">/usr/</span>share<span class=\"hljs-keyword\">/man/</span>man1/bash<span class=\"hljs-number\">.1</span>.gz  <span class=\"hljs-meta\">#bash命令的帮助文件地址  </span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h3><ul>\n<li>设置开机自启动 <code>systemctl enable</code> </li>\n<li>停止开机自启动 <code>systemctl disable</code></li>\n<li>验证一下是否为开机启动 <code>systemctl is-enabled</code></li>\n<li>启动服务 <code>systemctl start xxxxx.service</code></li>\n<li>停止服务 <code>systemctl stop xxxxx.service</code></li>\n<li>重启服务 <code>systemctl restart xxxxx.service</code></li>\n<li>查看服务状态 <code>systemctl status xxxxx.service</code></li>\n<li>查看所有已启动的服务 <code>systemctl list-units --type=service</code></li>\n</ul>\n<h3 id=\"sed-流编辑器\"><a href=\"#sed-流编辑器\" class=\"headerlink\" title=\"sed 流编辑器\"></a>sed 流编辑器</h3><p>UNIX 中的 SED 命令代表流编辑器，它可以对文件执行许多功能，如搜索、查找和替换、插入或删除。尽管 UNIX 中 SED 命令的最常见用途是用于替换或查找和替换。通过使用 SED，您甚至可以在不打开文件的情况下编辑文件，这是一种在文件中查找和替换某些内容的方法，比先在 VI 编辑器中打开该文件然后进行更改要快得多。</p>\n<ul>\n<li>SED 是一个强大的文本流编辑器。可以进行插入、删除、搜索和替换（替换）。</li>\n<li>unix 中的 SED 命令支持正则表达式，允许它执行复杂的模式匹配。</li>\n</ul>\n<p><strong>Syntax:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sed OPTIONS... [SCRIPT] [INPUTFILE...] <br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>OPTIONS</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong><code>-b</code></strong>,<strong><code>--binary</code></strong></td>\n<td>以二进制模式打开输入文件以考虑以换行符结束的行。</td>\n</tr>\n<tr>\n<td><strong><code>--debug</code></strong></td>\n<td>切换到调试模式以规范形式打印输入并注释程序执行。</td>\n</tr>\n<tr>\n<td><strong><code>--follow-symlinks</code></strong></td>\n<td>如果指定文件是符号链接，则编辑最终目标。它仅在与**<code>-i</code>**选项结合使用时才有效。</td>\n</tr>\n<tr>\n<td><strong><code>--help</code></strong></td>\n<td>显示使用信息。</td>\n</tr>\n<tr>\n<td><strong><code>--i</code></strong>,<strong><code>--in-place [=SUFFIX]</code></strong></td>\n<td>通过覆盖原始文件就地执行编辑。</td>\n</tr>\n<tr>\n<td><strong><code>--posix</code></strong></td>\n<td>禁用对 POSIX 的所有扩展**<code>sed</code>** 以简化编写可移植脚本。</td>\n</tr>\n<tr>\n<td><strong><code>--version</code></strong></td>\n<td>**<code>sed</code>**显示系统运行的版本。</td>\n</tr>\n<tr>\n<td><strong><code>-E</code></strong>, <strong><code>-r</code></strong>,<strong><code>--regexp-extended</code></strong></td>\n<td>使用扩展的正则表达式。</td>\n</tr>\n<tr>\n<td><strong><code>-e script</code></strong>,<strong><code>--expression=script</code></strong></td>\n<td>添加指定的脚本以与命令一起运行。</td>\n</tr>\n<tr>\n<td><strong><code>-f script-file</code></strong></td>\n<td>添加指定脚本文件的内容以与命令一起运行。</td>\n</tr>\n<tr>\n<td><strong><code>-l N</code></strong>,<strong><code>--line-length=N</code></strong></td>\n<td>为命令定义所需的换行长度**<code>l</code>**（默认值为 70）。</td>\n</tr>\n<tr>\n<td><strong><code>-n</code></strong>, <strong><code>--quiet</code></strong>,<strong><code>--silent</code></strong></td>\n<td>禁用输出打印。</td>\n</tr>\n<tr>\n<td><strong><code>-s</code></strong>,<strong><code>--separate</code></strong></td>\n<td>将指定的文件视为单独的文件，而不是作为单个连续的长流。</td>\n</tr>\n<tr>\n<td><strong><code>--sandbox</code></strong></td>\n<td>禁用运行外部程序并仅在命令行上对输入文件进行操作。</td>\n</tr>\n<tr>\n<td><strong><code>-u</code></strong>,<strong><code>--unbuffered</code></strong></td>\n<td>最小化输入和输出缓冲区。</td>\n</tr>\n<tr>\n<td><strong><code>-z</code></strong>, <strong><code> --null-data</code></strong>,<strong><code> --zero-terminated</code></strong></td>\n<td>将输入视为一组行，每行都以零字节结尾。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">---------------------------- 替换 ----------------------------</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用 sed 命令替换字符串</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">语法</span><br>sed &#x27;s/old_string/new_string/&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将box 替换成bin</span><br>sed &#x27;s/box/bin/&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将box 全部 替换成bin</span><br>sed &#x27;s/box/bin/g&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">sed 命令替换字符串并忽略大小写</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用 i 指示忽略大小写</span><br>sed &#x27;s/fox/cow/i&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用 sed 命令替换一行中的特定某次匹配</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">语法 “#”代表数字例如1、2、</span><br>sed &#x27;s/old_string/new_string/#&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将在每行第2次出现的 box 替换成 bin</span><br>sed &#x27;s/box/bin/2&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用 sed 命令替换特定行中的字符串</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">该sed命令允许您通过将行号作为前缀添加到子命令来替换特定行中的字符串：</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">语法</span><br>sed &#x27;# s/old_string/new_string/&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以下命令将文本第四行 中的socks替换为sandals</span><br>sed &#x27;4 s/socks/sandals/&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">sed 命令仅替换特定行范围内的字符串</span><br>sed &#x27;#,# s/old_string/new_string/&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 4-6 行的 socks 替换成 sandals</span> <br>sed &#x27;4,6 s/socks/sandals/&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">---------------------------- 删除 ----------------------------</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除特定行</span><br>sed &#x27;#,#d&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除第二行</span><br>sed &#x27;2d&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除 2-4行</span><br>sed &#x27;2,4d&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从特定行删除到最后一行</span><br>sed &#x27;#,$d&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从第3行删除到末尾</span><br>sed &#x27;3,$d&#x27; foxinbox.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">---------------------------- Misc ----------------------------</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">仅打印带有替换文本的行</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-n选项禁用自动打印，而命令p指示sed打印发生替换的行。</span><br>sed -n &#x27;s/old_string/new_string/p&#x27; filename.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">实例</span><br>sed -n &#x27;s/box/bin/p&#x27; foxinbox.txt<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"linux-内核原理入土\"><a href=\"#linux-内核原理入土\" class=\"headerlink\" title=\"linux 内核原理入土\"></a>linux 内核原理入土</h1><h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a>namespace</h2><h2 id=\"cgroup\"><a href=\"#cgroup\" class=\"headerlink\" title=\"cgroup\"></a>cgroup</h2><h1 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h1><h2 id=\"通过-shell-使用-uart\"><a href=\"#通过-shell-使用-uart\" class=\"headerlink\" title=\"通过 shell 使用 uart\"></a>通过 shell 使用 uart</h2><ol>\n<li>获取串口号 <code>ls -lha /dev/tty* </code> 一版串口名为 串口5 <code>ttyS5</code> 串口3 <code>ttyS3</code>  也有部分是 <code>ttyAS3</code>。</li>\n<li><code>cat /dev/ttyS3</code> 接收串口3的数据。</li>\n<li><code>echo helloword &gt; /dev/ttyS3</code> 向串口3发送数据。</li>\n</ol>\n<h2 id=\"通过-shell-使用-tcp\"><a href=\"#通过-shell-使用-tcp\" class=\"headerlink\" title=\"通过 shell 使用 tcp\"></a>通过 shell 使用 tcp</h2><blockquote>\n<p>  linux 设备里面有个比较特殊的文件:</p>\n<p>  <code>/dev/[tcp|upd]/host/port</code> 只要读取或者写入这个文件，相当于系统会尝试连接 host 这台机器，对应port端口。如果主机以及端口存在，就建立一个socket 连接。</p>\n<p>  将在，<code>/proc/self/fd</code>目录下面，有对应的 fd 文件序号出现。</p>\n</blockquote>\n<ol>\n<li><p><strong>请使用 bash</strong> <em>zsh似乎不支持此操作</em> </p>\n</li>\n<li><p><code>cat &lt; /dev/tcp/127.0.0.1/22</code>  </p>\n<ol>\n<li>接收从127.0.0.1:22 端口发送来的数据。<code>&lt;</code> 代表只读通道。</li>\n</ol>\n</li>\n<li><p><code>exec 64&lt;&gt; /dev/tcp/127.0.0.1/22</code> </p>\n<ol>\n<li><p>使用指定的文件描述符 <code>64</code> 建立可读写通道<code>&lt;&gt;</code> 连接 127.0.0.1:22 </p>\n</li>\n<li><p><code>ls /proc/self/fd -lh </code> 可以看到文件描述符 <code>64</code> 的文件</p>\n</li>\n<li><p>发送数据 <code>echo hello &gt;&amp;64</code>  将数据重定向输出到 <code>&amp;64</code> 文件描述符</p>\n<ol>\n<li><blockquote>\n<p>  其实 2&gt;&amp;1 的原理和这个是一致的   文件描述符2是stderr 文件描述符1是stdout</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>接收数据 <code>cat &lt;&amp;64</code> 将数据重定向输入到<code>&amp;64</code>文件描述符</p>\n</li>\n<li><p>关闭通道 <code>exec 64&gt;&amp;-</code>   使用<code>&gt;&amp;-</code>来关闭指定文件描述符</p>\n<ol>\n<li><code>exec 64&lt;&amp;-</code> 也可以用来关闭</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>  <strong>从时间服务器读取时间：</strong></p>\n<p>  <code>cat&lt;/dev/tcp/time.nist.gov/13</code></p>\n<p>  <strong>获取网页：</strong></p>\n<ul>\n<li><p>创建tcp连接 </p>\n<ul>\n<li><code>exec 64&lt;&gt; /dev/tcp/www.baidu.com/80</code></li>\n</ul>\n</li>\n<li><p>发送http请求头</p>\n<ul>\n<li><code>echo -e &quot;HEAD / HTTP/1.1\\n\\n\\n\\n\\n&quot;&gt;&amp;64</code></li>\n</ul>\n</li>\n<li><p>获取返回信息</p>\n<ul>\n<li><p><code> cat &lt;&amp;64</code></p>\n</li>\n<li><p>返回值示例</p>\n</li>\n<li><pre><code class=\"shell\">HTTP/1.1 302 Found\nConnection: keep-alive\nContent-Length: 17931\nContent-Type: text/html\nDate: Wed, 27 Dec 2023 10:13:53 GMT\nEtag: &quot;54d9748e-460b&quot;\nServer: bfe/1.0.8.18\n        \nHTTP/1.1 400 Bad Request\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br><br><br><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># `&gt;&gt;`、`&gt;`、`&lt;`、`2&gt;&amp;1`</span></span><br><br>```shell<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&gt; 和 &gt;&gt; 是将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的）重定向其它输出设备（文件，打开文件操作符，或打印机等等）</span><br><span class=\"hljs-meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;\t<span class=\"hljs-comment\">#追加内容（原有内容保留）</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">覆盖内容</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt; 命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</span><br>&lt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将产生的所有信息丢弃</span><br><span class=\"hljs-meta prompt_\">&gt;</span><span class=\"language-bash\">/dev/null</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将错误输出 重定向到 标准输出</span><br><span class=\"hljs-meta prompt_\">2&gt;</span><span class=\"language-bash\">&amp;1</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">0 表示stdin标准输入</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1 表示stdout标准输出</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">2 表示stderr标准错误</span><br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"Editor\"><a href=\"#Editor\" class=\"headerlink\" title=\"Editor\"></a>Editor</h1><h2 id=\"VIM\"><a href=\"#VIM\" class=\"headerlink\" title=\"VIM\"></a>VIM</h2><ul>\n<li>命令模式（Command mode）</li>\n<li>插入模式（Insert mode）</li>\n<li>底线命令模式（Last line mode）</li>\n</ul>\n<h3 id=\"指令模式\"><a href=\"#指令模式\" class=\"headerlink\" title=\"指令模式\"></a>指令模式</h3><p>(n)&#x3D;数字</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>i</td>\n<td>前面插入</td>\n</tr>\n<tr>\n<td></td>\n<td>I</td>\n<td>行首插入</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>后面插入</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>行尾插入</td>\n</tr>\n<tr>\n<td></td>\n<td>o</td>\n<td>下方新建一行</td>\n</tr>\n<tr>\n<td></td>\n<td>O</td>\n<td>上面新建一行</td>\n</tr>\n<tr>\n<td></td>\n<td>s</td>\n<td>删除字符</td>\n</tr>\n<tr>\n<td></td>\n<td>r</td>\n<td>替换字符</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>hjkl</td>\n<td>光标移动</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>(n)G</td>\n<td>光标移动到第n行 跳转到行</td>\n</tr>\n<tr>\n<td></td>\n<td>(n)+</td>\n<td>下移n行</td>\n</tr>\n<tr>\n<td></td>\n<td>(n)-</td>\n<td>上移n行</td>\n</tr>\n<tr>\n<td></td>\n<td>Ctrl+f</td>\n<td>上一页</td>\n</tr>\n<tr>\n<td></td>\n<td>Ctrl+b</td>\n<td>下一页</td>\n</tr>\n<tr>\n<td></td>\n<td>cc</td>\n<td>删除整行，并修改</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>dd</td>\n<td>删除整行</td>\n</tr>\n<tr>\n<td></td>\n<td>(n)dd</td>\n<td>删除n行</td>\n</tr>\n<tr>\n<td></td>\n<td>x</td>\n<td>删除光标所在字符</td>\n</tr>\n<tr>\n<td></td>\n<td>X</td>\n<td>删除光标前一个字符</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>yy</td>\n<td>复制整行</td>\n</tr>\n<tr>\n<td></td>\n<td>(n)yy</td>\n<td>复制n行</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>v</td>\n<td>选择 开始<br>按下 <code>v</code> 来选择字符。<br>（也可以用 <code>V</code> 来选择整行，<code>Ctrl-v</code> 来选择矩形块）</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>d</td>\n<td>剪切 结束<br/>光标移动到结束剪切的位置。 <br>按下 <code>d</code> 来剪切。</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>y</td>\n<td>复制 结束<br/>光标移动到结束复制的位置。 <br/>按下 <code>y</code> 来复制。</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>p</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>∆</td>\n<td>u</td>\n<td>撤销</td>\n</tr>\n<tr>\n<td></td>\n<td>^r</td>\n<td>重做</td>\n</tr>\n</tbody></table>\n<h3 id=\"底行模式\"><a href=\"#底行模式\" class=\"headerlink\" title=\"底行模式\"></a>底行模式</h3><h4 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\": 指令\"></a>: 指令</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>保存退出</td>\n</tr>\n<tr>\n<td>q!</td>\n<td>不保存强制退出</td>\n</tr>\n<tr>\n<td>(n)</td>\n<td>跳转到行<code>:n 需要回车</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"&#x2F; 搜索\"></a>&#x2F; 搜索</h4><ul>\n<li>查看下一个匹配，按下n(小写n)</li>\n<li>跳转到上一个匹配，按下N（大写N）</li>\n<li>noh或者set noh 高亮</li>\n</ul>\n<h2 id=\"VIM-Note\"><a href=\"#VIM-Note\" class=\"headerlink\" title=\"VIM Note\"></a>VIM Note</h2><h3 id=\"跳转到行\"><a href=\"#跳转到行\" class=\"headerlink\" title=\"跳转到行\"></a>跳转到行</h3><ul>\n<li>指令模式 <code>(n)G</code>  光标移动到第n行 跳转到行</li>\n<li>底行模式 <code>:n</code> （跳转到文件第n行，需要回车）</li>\n<li><code>vim +n filename</code> （在打开文件后，跳转到文件的第n行）</li>\n</ul>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><blockquote>\n<p>  :[range]s&#x2F;from&#x2F;to&#x2F;[flags]</p>\n<p>  range:搜索范围，如果没有指定范围，则作用于但前行。</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">:1,10s/<span class=\"hljs-keyword\">from</span>/<span class=\"hljs-keyword\">to</span>/ 表示在第1到第10行（包含第1，第10行）之间搜索替换；<br>:10s/<span class=\"hljs-keyword\">from</span>/<span class=\"hljs-keyword\">to</span>/ 表示只在第10行搜索替换；<br>:%s/<span class=\"hljs-keyword\">from</span>/<span class=\"hljs-keyword\">to</span>/ 表示在所有行中搜索替换；<br>:1,<span class=\"hljs-variable\">$s</span>/<span class=\"hljs-keyword\">from</span>/<span class=\"hljs-keyword\">to</span>/ 同上。<br></code></pre></td></tr></table></figure>\n\n<p>  flags 有如下四个选项：</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">c confirm，每次替换前询问；<br>e error， 不显示错误；<br><span class=\"hljs-selector-tag\">g</span> globle，不询问，整行替换。如果不加<span class=\"hljs-selector-tag\">g</span>选项，则只替换每行的第一个匹配到的字符串；<br><span class=\"hljs-selector-tag\">i</span> ignore，忽略大小写。<br></code></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>vim 中可用 :s 命令来替换字符串，具体如下：</p>\n<ul>\n<li><code>:s/str1/str2/</code> 替换当前行第一个 str1 为 str2</li>\n<li><code>:s/str1/str2/g</code> 替换当前行中所有 str1 为 str2</li>\n<li><code>:m,ns/str1/str2/</code> 替换第 n 行开始到最后一行中每一行的第一个 str1 为 str2</li>\n<li><code>:m,ns/str1/str2/g</code> 替换第 n 行开始到最后一行中所有的 str1 为 str2<br>(注：m和n 为数字，若m为 .，表示为当前行开始；若n为$，则表示到最后一行结束)<br>如果使用 # 作为分隔符，则中间出现的 &#x2F; 不会作为分隔符，比如：<br><code>:s#str1/#str2/#</code> 替换当前行第一个 str1&#x2F; 为 str2&#x2F;<br><code>:%s+/oradata/apras/+/user01/apras1+</code> (使用+ 来 替换 &#x2F; )： &#x2F;oradata&#x2F;apras&#x2F;替换成&#x2F;user01&#x2F;apras1&#x2F;</li>\n</ul>\n</li>\n<li><p>其他:</p>\n</li>\n</ol>\n<ul>\n<li><code>%s/str1/str2/</code>（等同于 :g&#x2F;str1&#x2F;s&#x2F;&#x2F;str2&#x2F;） 替换每一行的第一个 str1 为 str2</li>\n<li><code>:%s/str1/str2/g</code>（等同于 :g&#x2F;str1&#x2F;s&#x2F;&#x2F;str2&#x2F;g 和 :1,$ s&#x2F;str1&#x2F;str2&#x2F;g ） 替换文中所有 str1 为 str2<br>从替换命令可以看到，g 放在命令末尾，表示对搜索字符串的每次出现进行替换；不加 g，表示只对搜索</li>\n</ul>\n<h4 id=\"正则表达式替换\"><a href=\"#正则表达式替换\" class=\"headerlink\" title=\"正则表达式替换\"></a>正则表达式替换</h4><h5 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h5><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配任意字符</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>匹配方括号中的任意一个字符，可用-表示字符范围。如[a-z0-9]匹配小写字母和数字</td>\n</tr>\n<tr>\n<td><code>[^abc]</code></td>\n<td>匹配除方括号中字符之外的任意字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配阿拉伯数字，等同于[0-9]</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td><code>匹配阿拉伯数字之外的任意字符，等同于[^0-9]</code></td>\n</tr>\n<tr>\n<td>\\x</td>\n<td>匹配十六进制数字，等同于[0-9A-Fa-f]</td>\n</tr>\n<tr>\n<td>\\X</td>\n<td><code>匹配十六进制数字之外的任意字符，等同于[^0-9A-Fa-f]</code></td>\n</tr>\n<tr>\n<td>\\l</td>\n<td>匹配[a-z]</td>\n</tr>\n<tr>\n<td>\\L</td>\n<td><code>匹配[^a-z]</code></td>\n</tr>\n<tr>\n<td>\\u</td>\n<td>匹配[A-Z]</td>\n</tr>\n<tr>\n<td>\\U</td>\n<td><code>匹配[^A-Z]</code></td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配单词字母，等同于[0-9A-Za-z_]</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td><code>匹配单词字母之外的任意字符，等同于[^0-9A-Za-z_]</code></td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配空白字符，等同于[\\t]</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td><code>匹配非空白字符，等同于[^\\t]</code></td>\n</tr>\n</tbody></table>\n<h5 id=\"需转义的普通字符\"><a href=\"#需转义的普通字符\" class=\"headerlink\" title=\"需转义的普通字符\"></a>需转义的普通字符</h5><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配 * 字符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配 . 字符</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>匹配 &#x2F; 字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>匹配 \\ 字符</td>\n</tr>\n<tr>\n<td>[</td>\n<td>匹配 [ 字符</td>\n</tr>\n<tr>\n<td>]</td>\n<td>匹配 ] 字符</td>\n</tr>\n</tbody></table>\n<h5 id=\"表示数量的元字符\"><a href=\"#表示数量的元字符\" class=\"headerlink\" title=\"表示数量的元字符\"></a>表示数量的元字符</h5><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配0-任意个</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配1-任意个</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配0-1个</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配n-m个</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>匹配n个</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>匹配n-任意个</td>\n</tr>\n<tr>\n<td>{,m}</td>\n<td>匹配0-m个</td>\n</tr>\n</tbody></table>\n<h5 id=\"表示位置的元字符\"><a href=\"#表示位置的元字符\" class=\"headerlink\" title=\"表示位置的元字符\"></a>表示位置的元字符</h5><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$</td>\n<td>匹配行尾</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配行首</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>匹配单词词首</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>匹配单词词尾</td>\n</tr>\n</tbody></table>\n<hr>\n<h5 id=\"替换变量\"><a href=\"#替换变量\" class=\"headerlink\" title=\"替换变量\"></a>替换变量</h5><p>在正则式中以“”以及“”以及“”括起来的正则表达式，在后面使用的时候可以用“\\1”、“\\2”等变量来访问“”以及“”以及“”中的内容。</p>\n<p>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">删除行尾空格：                         :%s/\\s+$//g<br>删除行首多余空格：                      :%s/^\\s*// 或者 %s/^ *//<br>删除沒有內容的空行：                    :%s/^$// 或者 g/^$/d<br>删除包含有空格组成的空行                 :%s/^\\s*$// 或者 g/^\\s*$/d<br>删除以空格或TAB开头到结尾的空行：         :%s/^[ |\\t]*$// 或者 g/^[ |\\t]*$/d<br><br>把文中的所有字符串“abc……xyz”替换为“xyz……abc”可以有下列写法<br>:%s/abc\\(.*\\)xyz/xyz\\1abc/g<br>:%s/\\(abc\\)\\(.*\\)\\(xyz\\)/\\3\\2\\1/g<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"vim-编辑二进制\"><a href=\"#vim-编辑二进制\" class=\"headerlink\" title=\"vim 编辑二进制\"></a>vim 编辑二进制</h3><ol>\n<li><code>vim -b binary_file</code> <code>-b</code> 这个参数设定了 ‘binary’ 选项。</li>\n<li>输入<code>:%!xxd</code>把文件内容以常见的字节偏移 十六进制 ASCII码的版面显示</li>\n<li>然后输入<code>R</code>进入改写模式，即可按照版面格式进行编辑。<br>注意：只有十六进制部分的修改才会被采用。右边ASCII文本部分的修改无效。</li>\n<li>编辑完成以后<code>:%!xxd -r</code>把刚才的编辑格式转换会原始文本格式。</li>\n<li>输入<code>:wq</code>保存退出。</li>\n</ol>\n<h3 id=\"vim-复制-剪切-粘贴\"><a href=\"#vim-复制-剪切-粘贴\" class=\"headerlink\" title=\"vim 复制 剪切 粘贴\"></a>vim 复制 剪切 粘贴</h3><p><a href=\"https://harttle.land/2022/03/19/vim-copy-paste.html\">https://harttle.land/2022/03/19/vim-copy-paste.html</a></p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置 tab = 4 空格</span><br>set ts=4<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示行号</span><br>set nu<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Nano\"><a href=\"#Nano\" class=\"headerlink\" title=\"Nano\"></a>Nano</h2><p>alt+6 复制</p>\n<p>ctrl+u 粘贴</p>\n<h2 id=\"gedit\"><a href=\"#gedit\" class=\"headerlink\" title=\"gedit\"></a>gedit</h2><h1 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a>GCC</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-o</td>\n<td><code>gcc main.c -o main</code></td>\n<td>指定输出文件名</td>\n</tr>\n<tr>\n<td>-c</td>\n<td><code>gcc main.c -c</code></td>\n<td>只编译输出.o不生成.out可执行文件</td>\n</tr>\n<tr>\n<td>-g</td>\n<td></td>\n<td>生成调试所需的符号信息</td>\n</tr>\n<tr>\n<td>-O&amp;-O2</td>\n<td></td>\n<td>优化&amp;更优化</td>\n</tr>\n<tr>\n<td>-Wall</td>\n<td></td>\n<td><strong>显示警告</strong></td>\n</tr>\n<tr>\n<td>-std&#x3D;<standard></td>\n<td><code>-std=c99</code></td>\n<td>使用C99标准</td>\n</tr>\n</tbody></table>\n<h1 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h1><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># 依赖main.o input.o calcu.o生成 main ,如果依赖文件不存在就会根据规则生成相应的 *.o 文件</span><br><span class=\"hljs-section\">main: main.o input.o calcu.o</span><br>\tgcc -o main main.o input.o calcu.o<br><br><span class=\"hljs-section\">main.o: main.c</span><br>\tgcc -c main.c<br><span class=\"hljs-section\">input.o: input.c</span><br>\tgcc -c input.c<br><span class=\"hljs-section\">calcu.o: calcu.c</span><br>\tgcc -c calcu.c<br><br><span class=\"hljs-section\">clean:</span><br>\trm *.o<br>\trm main<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&#x3D;\"></a>&#x3D;</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">name = sss<br>cur = <span class=\"hljs-variable\">$(name)</span><br>name = ppp<br><br><span class=\"hljs-section\">print:</span><br>\t@echo cur: <span class=\"hljs-variable\">$(cur)</span><br><br><span class=\"hljs-comment\"># 这里会输出 ppp</span><br></code></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;</td>\n<td>类似指针,值等于其真实值</td>\n</tr>\n<tr>\n<td>:&#x3D;</td>\n<td>类似赋值,等于其赋值时的值</td>\n</tr>\n<tr>\n<td>?&#x3D;</td>\n<td>如果变量没有赋值,就赋后面的值</td>\n</tr>\n<tr>\n<td>+&#x3D;</td>\n<td>类似字符串后面追加一个字符串</td>\n</tr>\n<tr>\n<td>%</td>\n<td>代表非空字符串,可用于匹配文件名</td>\n</tr>\n</tbody></table>\n<h2 id=\"自动化变量\"><a href=\"#自动化变量\" class=\"headerlink\" title=\"自动化变量\"></a>自动化变量</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>自动化变量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$@</td>\n<td>规则中的目标集合，在模式规则中，如果有多个目标的话，“ $@”表示匹配模式中定义的目标集合。</td>\n</tr>\n<tr>\n<td>$&lt;</td>\n<td>所有依赖文件的集合， 使用空格分开， 如果在依赖文件中有多个重复的文件，“$^”会去除重复的依赖文件，值保留一份。</td>\n</tr>\n<tr>\n<td>$^</td>\n<td>依赖文件集合中的第一个，如果依赖文件是以模式 (即“ %”)定义的，那么 “$&lt;”就是符合模式的一系列文件集。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>所有比目标新的依赖集合，以空格分开。</td>\n</tr>\n<tr>\n<td>$%</td>\n<td>当目标是函数库的时候表示规则中成员名， 如果目标不是函数库文件，那么其值为空。</td>\n</tr>\n<tr>\n<td>$+</td>\n<td>和“ $^”类似，但是当依赖文件存在重复的话不会去除重复的依赖文件。</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>这个变量表示目标模式中”%”及其之前的部分，如果目标是 test&#x2F;a.test.c，目标模 ，目标模为 a.%.c，那么“ $*”就是test&#x2F;a.test。</td>\n</tr>\n<tr>\n<td>$(XX)</td>\n<td>类似替换成XX的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"伪目标\"><a href=\"#伪目标\" class=\"headerlink\" title=\"伪目标\"></a>伪目标</h2><p>例如，目录内存在clean文件运行 make clean 则运行的是clean文件的规则，如果将Makefile文件内的clean定义为伪目标则不管如何都是执行Makefile内的指令。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objects = main.o input.o calcu.o<br><span class=\"hljs-section\">main: <span class=\"hljs-variable\">$(objects)</span></span><br>\tgcc -o main <span class=\"hljs-variable\">$(objects)</span> <br><span class=\"hljs-comment\"># 声明伪目标</span><br>.PHONY : clean<br><br>%.o : %.c<br>\tgcc -c <span class=\"hljs-variable\">$&lt;</span><br><br><span class=\"hljs-section\">clean:</span><br>\trm *.o<br>\trm main<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><ul>\n<li>ifeq 比较参数是否相等</li>\n<li>ifneq</li>\n<li>ifdef 判断变量是否为真</li>\n<li>ifndef</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"subst-字符串替换\"><a href=\"#subst-字符串替换\" class=\"headerlink\" title=\"subst 字符串替换\"></a>subst 字符串替换</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">$(subst&lt;from&gt;,&lt;to&gt;,&lt;text&gt;)<br><span class=\"hljs-comment\"># 字符串替换</span><br><span class=\"hljs-comment\"># 将text中的from替换成to,函数返回替换以后的字符串</span><br><br><span class=\"hljs-comment\">#例</span><br><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">subst</span> ppp,lll,my name is ppp)</span><br><span class=\"hljs-comment\"># my name is lll</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"patsubst-模式字符串替换\"><a href=\"#patsubst-模式字符串替换\" class=\"headerlink\" title=\"patsubst 模式字符串替换\"></a>patsubst 模式字符串替换</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span><br><span class=\"hljs-comment\"># 查找text单词是否符合模式pattern,符合就用replacement替换</span><br><br><span class=\"hljs-comment\"># 例</span><br><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.c,%.o,a.c b.c c.c)</span><br><span class=\"hljs-comment\"># “a.o b.o c.o”</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"dir-获取目录\"><a href=\"#dir-获取目录\" class=\"headerlink\" title=\"dir 获取目录\"></a>dir 获取目录</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">dir</span> &lt;names…&gt;)</span><br><span class=\"hljs-comment\"># 此函数用来从文件名序列&lt;names&gt;中提取出目录部分</span><br><br><span class=\"hljs-comment\"># 例</span><br><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">dir</span> &lt;/src/a.c&gt;)</span><br><span class=\"hljs-comment\"># /src</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"notdir-去除文件中目录部分\"><a href=\"#notdir-去除文件中目录部分\" class=\"headerlink\" title=\"notdir 去除文件中目录部分\"></a>notdir 去除文件中目录部分</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> &lt;names…&gt;)</span><br><span class=\"hljs-comment\"># 此函数用与从文件名序列&lt;names&gt;中提取出文件名非目录部分</span><br><br><span class=\"hljs-comment\"># 例</span><br><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">notdir</span> &lt;/src/a.c&gt;)</span><br><span class=\"hljs-comment\"># a.c</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"freach-循环\"><a href=\"#freach-循环\" class=\"headerlink\" title=\"freach 循环\"></a>freach 循环</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">foreach</span> &lt;var&gt;, &lt;list&gt;,&lt;text&gt;)</span><br><span class=\"hljs-comment\"># foreach函数用来完成循环，用法如下</span><br><span class=\"hljs-comment\"># 此函数的意思就是把参数&lt;list&gt;中的单词逐一取出来放到参数&lt;var&gt;中，然后再执行&lt;text&gt;所包含的表达式。每次&lt;text&gt;都会返回一个字符串，循环的过程中，&lt;text&gt;中所包含的每个字符串会以空格隔开,最后但整个循环结束时,&lt;text&gt;所返回的每个字符串所组成的整个字符串将会是函数foreach函数的返回值。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"wildcard-函数\"><a href=\"#wildcard-函数\" class=\"headerlink\" title=\"wildcard 函数\"></a>wildcard 函数</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> PATTERN…)</span><br><span class=\"hljs-comment\">#通配符“ 通配符“ %”只能用在规则中， 只有在规则中它才会展开，如果在变量定义和函数使用时通配符不会自动展开，这个时候就要用到函数wildcard</span><br><br><span class=\"hljs-comment\"># 例</span><br><span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> *.c)</span><br><span class=\"hljs-comment\">#上面的代码是用来获取当前目录下所有.c文件，类似“%”</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"一些包\"><a href=\"#一些包\" class=\"headerlink\" title=\"一些包\"></a>一些包</h1><h2 id=\"iperf-网络流量测试\"><a href=\"#iperf-网络流量测试\" class=\"headerlink\" title=\"iperf 网络流量测试\"></a>iperf 网络流量测试</h2><p><a href=\"https://blog.csdn.net/bingyu9875/article/details/105700655/\">https://blog.csdn.net/bingyu9875/article/details/105700655/</a></p>\n<p><strong>官方网站：</strong><a href=\"https://iperf.fr/\">https://iperf.fr/</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Usage: iperf [-s|-c host] [options]<br>       iperf [-h|--help] [-v|--version]<br><br>Server or Client:<br>  -p, --port      #         server port to listen on/connect to<br>  -f, --format    [kmgKMG]  format to report: Kbits, Mbits, KBytes, MBytes<br>  -i, --interval  #         seconds between periodic bandwidth reports<br>  -F, --file name           xmit/recv the specified file<br>  -A, --affinity n/n,m      set CPU affinity<br>  -B, --bind      &lt;host&gt;    bind to a specific interface<br>  -V, --verbose             more detailed output<br>  -J, --json                output in JSON format<br>  -d, --debug               emit debugging output<br>  -v, --version             show version information and quit<br>  -h, --help                show this message and quit<br>Server specific:<br>  -s, --server              run in server mode<br>  -D, --daemon              run the server as a daemon<br>  -1, --one-off             handle one client connection then exit<br>Client specific:<br>  -c, --client    &lt;host&gt;    run in client mode, connecting to &lt;host&gt;<br>  -u, --udp                 use UDP rather than TCP<br>  -b, --bandwidth #[KMG][/#] target bandwidth in bits/sec (0 for unlimited)<br>                            (default 1 Mbit/sec for UDP, unlimited for TCP)<br>                            (optional slash and packet count for burst mode)<br>  -t, --time      #         time in seconds to transmit for (default 10 secs)<br>  -n, --bytes     #[KMG]    number of bytes to transmit (instead of -t)<br>  -k, --blockcount #[KMG]   number of blocks (packets) to transmit (instead of -t or -n)<br>  -l, --len       #[KMG]    length of buffer to read or write<br>                            (default 128 KB for TCP, 8 KB for UDP)<br>  -P, --parallel  #         number of parallel client streams to run<br>  -R, --reverse             run in reverse mode (server sends, client receives)<br>  -w, --window    #[KMG]    set window size / socket buffer size<br>  -C, --linux-congestion &lt;algo&gt;  set TCP congestion control algorithm (Linux only)<br>  -M, --set-mss   #         set TCP maximum segment size (MTU - 40 bytes)<br>  -N, --nodelay             set TCP no delay, disabling Nagle&#x27;s Algorithm<br>  -4, --version4            only use IPv4<br>  -6, --version6            only use IPv6<br>  -S, --tos N               set the IP &#x27;type of service&#x27;<br>  -L, --flowlabel N         set the IPv6 flow label (only supported on Linux)<br>  -Z, --zerocopy            use a &#x27;zero copy&#x27; method of sending data<br>  -O, --omit N              omit the first n seconds<br>  -T, --title str           prefix every output line with this string<br>  --get-server-output       get results from server<br><br>[KMG] indicates options that support a K/M/G suffix for kilo-, mega-, or giga-<br><br>iperf3 homepage at: http://software.es.net/iperf/<br>Report bugs to:     https://github.com/esnet/iperf<br></code></pre></td></tr></table></figure>\n\n<p>​\t</p>\n<h2 id=\"speedometer-网络监控工具\"><a href=\"#speedometer-网络监控工具\" class=\"headerlink\" title=\"speedometer 网络监控工具\"></a>speedometer 网络监控工具</h2><h2 id=\"s-tui-cpu温度使用监测\"><a href=\"#s-tui-cpu温度使用监测\" class=\"headerlink\" title=\"s-tui cpu温度使用监测\"></a>s-tui cpu温度使用监测</h2><h2 id=\"htop-进程查看器\"><a href=\"#htop-进程查看器\" class=\"headerlink\" title=\"htop 进程查看器\"></a>htop 进程查看器</h2><h2 id=\"sysbench-性能测试工具\"><a href=\"#sysbench-性能测试工具\" class=\"headerlink\" title=\"sysbench 性能测试工具\"></a>sysbench 性能测试工具</h2><p>Sysbench的测试主要包括以下几个方面：</p>\n<p>1、磁盘io性能</p>\n<p>2、cpu性能</p>\n<p>3、内存分配及传输速度</p>\n<p>4、POSIX线程性能</p>\n<p>5、调度程序性能</p>\n<p>6、数据库性能(OLTP基准测试).</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">4线程 测试cpu 找20000前的所有素数</span><br>sysbench --test=cpu --num-threads=4 --cpu-max-prime=20000 run<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"crontab-定期执行程序\"><a href=\"#crontab-定期执行程序\" class=\"headerlink\" title=\"crontab 定期执行程序\"></a>crontab 定期执行程序</h2><p><a href=\"https://www.runoob.com/linux/linux-comm-crontab.html\">https://www.runoob.com/linux/linux-comm-crontab.html</a></p>\n<p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</p>\n<h3 id=\"语法-3\"><a href=\"#语法-3\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">crontab [ -u user ] file<br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">crontab [ -u user ] &#123; -l | -r | -e &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong></p>\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n<p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li>\n<li>-r : 删除目前的时程表</li>\n<li>-l : 列出目前的时程表</li>\n</ul>\n<p>时间格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">f1 f2 f3 f4 f5 program<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li>\n<li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li>\n<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li>\n<li>当 f1 为 *&#x2F;n 时表示每 n 分钟个时间间隔执行一次，f2 为 *&#x2F;n 表示每 n 小时个时间间隔执行一次，其馀类推</li>\n<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">*    *    *    *    *<br>-    -    -    -    -<br>|    |    |    |    |<br>|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)<br>|    |    |    +---------- 月份 (1 - 12) <br>|    |    +--------------- 一个月中的第几天 (1 - 31)<br>|    +-------------------- 小时 (0 - 23)<br>+------------------------- 分钟 (0 - 59)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>每一分钟执行一次 &#x2F;bin&#x2F;ls：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * /bin/ls<br></code></pre></td></tr></table></figure>\n\n<p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 &#x2F;usr&#x2F;bin&#x2F;backup：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">0 6-12/3 * 12 * /usr/bin/backup<br></code></pre></td></tr></table></figure>\n\n<p>周一到周五每天下午 5:00 寄一封信给 <a href=\"mailto:&#97;&#x6c;&#101;&#120;&#x40;&#100;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#x6e;&#97;&#x6d;&#x65;\">&#97;&#x6c;&#101;&#120;&#x40;&#100;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#x6e;&#97;&#x6d;&#x65;</a>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">0 17 * * 1-5 mail -s &quot;hi&quot; alex@domain.name &lt; /tmp/maildata<br></code></pre></td></tr></table></figure>\n\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">20 0-23/2 * * * echo &quot;haha&quot;<br></code></pre></td></tr></table></figure>\n\n<p>下面再看看几个具体的例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache <br><br>50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 <br><br>50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 <br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Note-1\"><a href=\"#Note-1\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h2 id=\"增加开机启动项\"><a href=\"#增加开机启动项\" class=\"headerlink\" title=\"增加开机启动项\"></a>增加开机启动项</h2><h3 id=\"raspberry\"><a href=\"#raspberry\" class=\"headerlink\" title=\"raspberry\"></a>raspberry</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo nano /etc/rc.local<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在打开的rc.local找到<span class=\"hljs-built_in\">exit</span> 0，在<span class=\"hljs-built_in\">exit</span> 0 之前添加即可</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行这段代码时是使用root用户权限的，注意当前的用户权限，以免因权限问题导致脚本执行失败。</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><h4 id=\"service-方式\"><a href=\"#service-方式\" class=\"headerlink\" title=\"service 方式\"></a>service 方式</h4><p>Ubuntu 20.04的服务管理是基于systemd的，因此设置服务自启动最推荐的方法是创建一个systemd服务文件，配置好要执行的服务。</p>\n<ol>\n<li>创建我们需要开机自启动的脚本，例如<code>start.sh</code>，其内容如下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><br><span class=\"hljs-built_in\">cd</span> /tmp<br><span class=\"hljs-built_in\">touch</span> 11111111111.txt<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>/etc/systemd/system</code>目录下创建一个systemd服务文件, 命名为<code>xxxxxx.service</code>, 内容如下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[Unit]<br>Description=frank rc Service<br>After=network.service nss-lookup.target<br><br>[Service]<br>User=frank<br>ExecStart=/home/hqc/test.sh<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>After表示服务何时启动，After&#x3D;network.service 表示网络连接完成后，启动我们的服务；</p>\n</li>\n<li><p>User 表示使用哪个用户去执行，这里最好去设定特定的用户防止使用root执行</p>\n</li>\n<li><p>ExecStart表示我们的脚本（步骤1中的test.sh)的路径；注意要填绝对路径</p>\n</li>\n<li><p>WantedBy默认填default.target。</p>\n</li>\n<li><p><strong>xxxxxx.service 内容释义</strong></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[Unit]:服务的说明<br>Description:描述服务<br>After:描述服务类别<br><br>[Service]服务运行参数的设置<br>Type=forking            是后台运行的形式<br>ExecStart               为服务的具体运行命令<br>ExecReload              为服务的重启命令<br>ExecStop                为服务的停止命令<br>PrivateTmp=True         表示给服务分配独立的临时空间<br>注意：启动、重启、停止命令全部要求使用绝对路径<br><br>[Install]               服务安装的相关设置，可设置为多用户<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>给脚本增加运行权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重新加载系统的systemd服务文件，并启用我们自己写的<code>xxxxxx.service</code>文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> systemctl daemon-reload<br><span class=\"hljs-comment\"># /etc/systemd/user 目录创建用这个命令</span><br>systemctl --user <span class=\"hljs-built_in\">enable</span> xxxxxx.service <br><span class=\"hljs-comment\"># /etc/systemd/system 目录创建用这个命令</span><br><span class=\"hljs-built_in\">sudo</span> systemctl <span class=\"hljs-built_in\">enable</span> xxxxxx.service <br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <em>用systemd启动的服务默认是root权限，放脚本很不安全，如果只需要登录用户的权限，改成user service (systemctl –user)更好，如果有桌面环境，还可以用XDG Autostart</em></p>\n<p>  改成 (systemctl –user) 似乎这个用户不登陆这个脚本就没法执行了</p>\n<p>  用脚本执行多个程序，如果脚本退出了，程序也就退出了</p>\n</blockquote>\n<h4 id=\"profile-d\"><a href=\"#profile-d\" class=\"headerlink\" title=\"profile.d\"></a>profile.d</h4><p>将写好的脚本（.sh文件）放到目录 &#x2F;etc&#x2F;profile.d&#x2F; 下，系统启动后就会自动执行该目录下的所有shell脚本。</p>\n<blockquote>\n<p>  Ubuntu 20.04.4 LTS service </p>\n<p>  放在这个目录里面似乎要在用户登录了之后才会启动服务</p>\n</blockquote>\n<h2 id=\"zerotier\"><a href=\"#zerotier\" class=\"headerlink\" title=\"zerotier\"></a>zerotier</h2><p><strong>官方定义的名词</strong></p>\n<ul>\n<li>PLANET 行星服务器，Zerotier 根服务器 </li>\n<li>MOON 卫星服务器，用户自建的私有根服务器，起到代理加速的作用 </li>\n<li>LEAF  叶子节点，网络客户端，就是每台连接到网络节点。</li>\n</ul>\n<p><strong>下载安装</strong></p>\n<p><a href=\"https://www.zerotier.com/download/\">https://www.zerotier.com/download/</a></p>\n<p>查看安装zerotier版本<br><code>sudo zerotier-cli status</code></p>\n<p>加入一个netWork<br><code>sudo zerotier-cli join ################（networkid）</code></p>\n<p>查看加入的网络的信息，比如network<br><code>sudo zerotier-cli listnetworks</code></p>\n<p>退出加入的network网段<br><code>sudo zerotier-cli leave ################（networkid）</code></p>\n<h3 id=\"搭建moon节点\"><a href=\"#搭建moon节点\" class=\"headerlink\" title=\"搭建moon节点\"></a>搭建moon节点</h3><p><strong>搭建moon节点的需求</strong></p>\n<ul>\n<li>需要一台公网服务器</li>\n<li>公网服务器需要加入网络</li>\n</ul>\n<p><strong>搭建步骤</strong></p>\n<ol>\n<li><p>生成moon模板</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /var/lib/zerotier-one<br>zerotier-idtool initmoon identity.public &gt; moon.json<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改moon配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi moon.json<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>修改”stableEndpoints”为 vps 的公网的 IP,例如”stableEndpoints”: [“1.1.1.1&#x2F;9993”]</li>\n</ul>\n</li>\n<li><p>生成签名文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">zerotier-idtool genmoon moon.json<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行之后会生产一个000000xxxx.moon的文件，将这个文件用Winscp等工具从vps上下载下来。</li>\n</ul>\n</li>\n<li><p>将moon节点加入网络, 这一步公网服务器和其他所有的主机都需要操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">zerotier-one目录下操作</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Windows:</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">C:\\ProgramData\\ZeroTier\\One</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Linux:</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">/var/lib/zerotier-one</span><br>mkdir moons.d<br>mv ./*.moon ./moons.d/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启服务</span><br>service zerotier-one restart<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否成功连上节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">zerotier-cli listpeers<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>&lt;role&gt;<strong>里面有出现</strong>MOON</strong>那就是<strong>成功加入了</strong></li>\n</ul>\n</li>\n</ol>\n<p><strong>OpenWrt加moon节点有所不同</strong></p>\n<p>OpenWrt需要修改一个脚本，因为其var目录时一个内存虚拟的临时目录，重启后原有配置不会保留。通过ssh连接OpenWrt（ssh功能可在系统-&gt;管理权中开启）。</p>\n<p>执行命令：<code>vi /etc/init.d/zerotier</code>，在“add_join() {”上方插入两行代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$CONFIG_PATH</span>/moons.d<br><span class=\"hljs-built_in\">cp</span> /home/moons.d/* <span class=\"hljs-variable\">$CONFIG_PATH</span>/moons.d/<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/d4436089/5e3e5278d08a31313.png_e1080.jpg\" alt=\"修改OpenWrt中ZeroTier的启动脚本\"></p>\n<p>脚本修改完成后，在&#x2F;home目录下新建一个moons.d文件夹，将000000xxxx.moon文件上传到该文件夹，在Web页面上重启ZeroTier即可。</p>\n<h2 id=\"添加sudo管理员权限\"><a href=\"#添加sudo管理员权限\" class=\"headerlink\" title=\"添加sudo管理员权限\"></a>添加sudo管理员权限</h2><p>1.切换到root用户下<br>2.添加sudo文件的写权限,命令是:</p>\n<p>sudo chmod u+w &#x2F;etc&#x2F;sudoers<br>3.编辑sudoers文件</p>\n<p>sudo nano &#x2F;etc&#x2F;sudoers<br>找到这行 root ALL&#x3D;(ALL) ALL,在他下面添加</p>\n<p>xxx ALL&#x3D;(ALL) ALL (这里的xxx是你的用户名)<br>4.撤销sudoers文件写权限,命令:</p>\n<p>sudo chmod u-w &#x2F;etc&#x2F;sudoers</p>\n<h2 id=\"允许root账号登录-并修改root密码\"><a href=\"#允许root账号登录-并修改root密码\" class=\"headerlink\" title=\"允许root账号登录 并修改root密码\"></a>允许root账号登录 并修改root密码</h2><ol>\n<li>允许root登录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure>\n<p>将 <code>#PermitRootLogin prohibit password</code> 修改为 <code>PermitRootLogin yes</code></p>\n<ol start=\"2\">\n<li>修改root密码</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">synouser --setpw root password<br><br>reboot<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看端口被占用情况\"><a href=\"#查看端口被占用情况\" class=\"headerlink\" title=\"查看端口被占用情况\"></a>查看端口被占用情况</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">lsof is a <span class=\"hljs-built_in\">command</span> listing open files.</span><br>lsof -i<br>lsof -i:80<br><br>netstat -tunlp<br>netstat -tunlp|grep 80<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"windows远程\"><a href=\"#windows远程\" class=\"headerlink\" title=\"windows远程\"></a>windows远程</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo apt-<span class=\"hljs-built_in\">get</span> install xrdp<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"route-路由\"><a href=\"#route-路由\" class=\"headerlink\" title=\"route 路由\"></a>route 路由</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Note:</span><br>直接可达, 用 dev 配置路由, 标识符 U<br>间接可达, 用 gw 配置网关路由, 标识符 UG<br></code></pre></td></tr></table></figure>\n\n<p><strong>route 输出结果解析：</strong></p>\n<ul>\n<li>Destination：目标网络或目标主机</li>\n<li>Gateway：网关地址或 ‘*’ （如未设置）</li>\n<li>Genmask：目标网络的子网掩码；’255.255.255.255’为主机，’0.0.0.0’为缺省路由</li>\n<li>Flags：路由标志<ul>\n<li>U (route is up) ：路由正常</li>\n<li>H (target is a host) ：主机路由</li>\n<li>G (use gateway) ：使用网关的间接路由</li>\n<li>R (reinstate route for dynamic routing) ：为动态选路恢复路由</li>\n<li>D (dynamically installed by daemon or redirect) ：该路由由选路进程或重定向动态创建</li>\n<li>M (modified from routing daemon or rederict) ：该路由已由选路进程或重定向修改</li>\n<li>! (reject route) ：阻塞路由</li>\n</ul>\n</li>\n<li>Metric：通向目标的距离(通常以跳来计算)</li>\n<li>Ref：使用此路由的活动进程个数(Linux内核并不使用)</li>\n<li>Use：查找此路由的次数。根据-F 和 -C的使用，此数值是路由缓存的损失数或采样数</li>\n<li>Iface：使用此路由发送分组的接口（网卡名字）</li>\n<li>MSS：基于此路由的TCP连接的缺省最大报文段长度</li>\n<li>Window：基于此路由的TCP连接的缺省窗口长度</li>\n<li>irtt：初始往返时间。内核用它来猜测最佳TCP协议参数而无须等待(可能很慢的)应答</li>\n<li>HH (cached only)：为缓存过的路由而访问硬件报头缓存的ARP记录和缓存路由的数量。如果缓存过路由的接口(如lo)无须硬件地址则值为-1</li>\n<li>Arp (cached only)：无论缓存路由所用的硬件地址情况如何都进行更新</li>\n</ul>\n<p>route命令从<code>/proc/net/route</code>文件中取数据，设备名不变、目的地址从右到左每两位十六进制显示，标志位有1、3两种，分别是U和UG，掩码和目的地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">frank@OIKIOU-PQ:~$ <span class=\"hljs-built_in\">cat</span> /proc/net/route<br>Iface   Destination     Gateway         Flags   RefCnt  Use     Metric  Mask            MTU     Window  IRTT                                       <br>eth0    00000000        011015AC        0003    0       0       0       00000000        0       0       0                                          <br>docker0 000011AC        00000000        0001    0       0       0       0000FFFF        0       0       0                                          <br>eth0    001015AC        00000000        0001    0       0       0       00F0FFFF        0       0       0                                          <br>frank@OIKIOU-PQ:~$ route<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>default         OIKIOU-PQ.mshom 0.0.0.0         UG    0      0        0 eth0<br>172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0<br>172.21.16.0     0.0.0.0         255.255.240.0   U     0      0        0 eth0<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除默认路由</span><br>route del default<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">linux静态路由查看</span><br>route -n<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置指定网段路由</span><br>route add -net 192.168.3.0 netmask 255.255.255.0 gw 192.168.6.66<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者</span><br>route add -net 192.168.3.0/24 gw 192.168.6.66<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者 添加特定接口的路由</span><br>route add -net 10.1.1.0/24 dev ztrfyiymyx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除指定网段路由</span><br>route del -net 192.168.3.0 netmask 255.255.255.0<br></code></pre></td></tr></table></figure>\n\n<p>用电脑代替路由器，必须要启用电脑的IP转发功能，改&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward里的内容为1（默认为0），用下面的命令完成<code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code><br>网络重启后，上面的文件自动改为0</p>\n<p><strong>永久修改路由：</strong><br>直接执行route命令来添加路由，是不会永久保存的，当网卡重启或者机器重启之后，该路由就失效了。要想永久保存，可以保存到配置文件。linux 默认只支持一条默认路由，当重新启动网口时，会把其他默认路由去掉，只剩下一条该网口生成的默认路由。</p>\n<ol>\n<li><code>/etc/sysconfig/static-routes</code>文件为路由固化文件，但是linux系统一般不会自动生成，需要手动创建。</li>\n<li>在文件内编辑路由，路由格式是固定的：<ul>\n<li>添加默认路由：<code>any net 0.0.0.0 netmask 0.0.0.0 gw 10.60.60.1</code></li>\n<li>添加网络路由：<code>any net 1.1.1.0 netmask 255.255.255.0 gw 10.60.60.1</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">添加到主机的路由：<br>any host 192.168.101.200 gw 192.168.101.1<br>添加到网络的路由：<br>any net 192.168.101.0/24 gw 192.168.101.1<br>any net 1.1.1.0 netmask 255.255.255.0 gw 10.60.60.1<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"samba-文件共享\"><a href=\"#samba-文件共享\" class=\"headerlink\" title=\"samba 文件共享\"></a>samba 文件共享</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br>sudo apt-get install samba<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置</span><br>sudo nano /etc/samba/smb.conf<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在末尾加入如下内容</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">分享名称</span><br>[Pi]<br>    # 说明信息<br>    comment = PiStorage<br>    # 可以访问的用户<br>    valid users = pi,root<br>    # 共享文件的路径,raspberry pi 会自动将连接到其上的外接存储设备挂载到/media/pi/目录下。<br>    path = /media/pi/<br>    # 可被其他人看到资源名称（非内容）<br>    browseable = yes<br>    # 可写<br>    writable = yes<br>    # 新建文件的权限为 664<br>    create mask = 0664<br>    # 新建目录的权限为 775<br>    directory mask = 0775<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">测试配置文件是否有错误，根据提示做相应修改</span><br>testparm<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加登陆账户并创建密码，必须是 linux 已存在的用户</span><br>sudo smbpasswd -a pi<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启 samba 服务</span><br>sudo service smbd restart<br><br>sudo /etc/init.d/samba restart<br>sudo /etc/init.d/smbd restart<br>sudo /etc/init.d/nmbd restart<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"attention\"><a href=\"#attention\" class=\"headerlink\" title=\"attention\"></a>attention</h3><p>出现过win10无法访问，</p>\n<p>“gpedit.msc” “计算机配置”“管理模板”“网络”“Lanman工作站”“启用不安全的来宾登录”&#x3D;“已启用”</p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p>在客户端Linux系统上，使用<code>mount</code>命令临时挂载Samba共享。基本语法如下：</p>\n<p><code>sudo mount -t cifs //&lt;server&gt;/&lt;share&gt; &lt;mount-point&gt; -o &lt;options&gt;</code></p>\n<p>例如，要将位于<code>192.168.0.100/shared</code>的Samba共享挂载到<code>/mnt/samba</code>目录，可以使用：</p>\n<p><code>sudo mount -t cifs //192.168.0.100/shared /mnt/samba -o username=&lt;username&gt;,password=&lt;password&gt;</code></p>\n<p>在Ubuntu 22.04上，您需要安装<code>cifs-utils</code>包来挂载SMB共享，并创建一个凭证文件以安全地存储用户名和密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt install cifs-utils -y<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为了安全地存储访问 Samba 共享所需的用户名和密码 创建一个凭证文件。</span><br>sudo nano /root/.smbcredentials<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加以下内容</span><br>username=&lt;username&gt;<br>password=&lt;password&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">确保只有 root 用户可以读取</span><br>sudo chmod 600 /root/.smbcredentials<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>手动挂载</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mount -t cifs //server/share /mnt/samba_share -o uid=1000,gid=1000,credentials=/root/.smbcredentials,vers=3.0<br></code></pre></td></tr></table></figure>\n<p>其中 <code>//server/share</code> 是 Samba 服务器的共享路径，<code>/mnt/samba_share</code> 是挂载点。<code>credentials</code> 选项指定了凭证文件的位置，<code>vers=3.0</code> 指定了使用的 SMB 版本</p>\n<p><strong>自动挂载</strong><br>在<code>/etc/fstab</code>文件中添加挂载信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//server/share /mnt/samba_share cifs uid=1000,gid=1000,vers=3.0,credentials=/root/.smbcredentials<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里制定了用户名和用户组</span><br></code></pre></td></tr></table></figure>\n<p>测试挂载是否成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mount -a<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"NFS-网络文件系统\"><a href=\"#NFS-网络文件系统\" class=\"headerlink\" title=\"NFS 网络文件系统\"></a>NFS 网络文件系统</h2><p>网络文件系统 (Network File System)</p>\n<h2 id=\"TFTP-文件传输\"><a href=\"#TFTP-文件传输\" class=\"headerlink\" title=\"TFTP 文件传输\"></a>TFTP 文件传输</h2><p><em>TFTP</em>（Trivial File Transfer Protocol,简单文件传输协议）</p>\n<h2 id=\"固定ip\"><a href=\"#固定ip\" class=\"headerlink\" title=\"固定ip\"></a>固定ip</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ens33 是网卡名</span><br>vi /etc/sysconfig/network-scripts/ifcfg-eth0<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 BOOTPROTO=dhcp</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">改成</span><br>BOOTPROTO=static3<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">增加</span><br>IPADDR=192.168.2.2<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.2.1<br>DNS1=223.5.5.5<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Raspberry</span><br><span class=\"hljs-built_in\">sudo</span> nano /etc/dhcpcd.conf<br><br><span class=\"hljs-comment\"># 找到如下内容 对应修改即可</span><br><span class=\"hljs-comment\"># Example static IP configuration:</span><br><span class=\"hljs-comment\">#interface eth0</span><br><span class=\"hljs-comment\">#static ip_address=192.168.0.10/24</span><br><span class=\"hljs-comment\">#static ip6_address=fd51:42f8:caae:d92e::ff/64</span><br><span class=\"hljs-comment\">#static routers=192.168.0.1</span><br><span class=\"hljs-comment\">#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1</span><br><br><span class=\"hljs-comment\"># eg.</span><br>interface wlan0<br>static ip_address=192.168.31.222/24<br>static routers=192.168.31.254<br>static domain_name_servers=223.5.5.5 192.168.31.254<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"后台执行程序\"><a href=\"#后台执行程序\" class=\"headerlink\" title=\"后台执行程序\"></a>后台执行程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">基本形式</span><br>nohup command &amp;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">eg.</span><br>nohup ping 1.1.1.1 &amp;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重定向输出</span><br>nohup command &gt; myout.file 2&gt;&amp;1 &amp;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">eg.</span><br>nohup ping 1.1.1.1 &gt; \\myout.file 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"开启路由转发\"><a href=\"#开启路由转发\" class=\"headerlink\" title=\"开启路由转发\"></a>开启路由转发</h2><p>临时生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">方法1</span><br>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">方法2</span><br>sudo sh -c &#x27;echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">马上生效</span><br>sysctl -p<br></code></pre></td></tr></table></figure>\n<p>永久生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /etc/sysctl.conf<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改设置</span><br>net.ipv4.ip_forward = 1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"aria2-安装\"><a href=\"#aria2-安装\" class=\"headerlink\" title=\"aria2 安装\"></a>aria2 安装</h2><h3 id=\"aria2\"><a href=\"#aria2\" class=\"headerlink\" title=\"aria2\"></a>aria2</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">首先，安装：</span><br>sudo apt-get install aria2<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建 Aria2 的配置文件夹：</span><br>sudo mkdir /etc/aria2<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建 session 和配置文件：</span><br>sudo touch /etc/aria2/aria2.session<br>sudo touch /etc/aria2/aria2.conf<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">编辑 /etc/aria2/aria2.conf：</span><br>sudo nano /etc/aria2/aria2.conf<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 文件保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 文件保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 文件保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">文件保存目录 此处文件保存目录自行设定</span><br>dir=/mnt/usb/aria2<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br>disk-cache=32M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">断点续传</span><br>continue=true<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">falloc和trunc则需要文件系统和内核支持</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">file-allocation=falloc</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 下载连接相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 下载连接相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 下载连接相关 ##</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">max-concurrent-downloads=5</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">同一服务器连接数, 添加时可指定, 默认:1</span><br>max-connection-per-server=15<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">整体下载速度限制, 运行时可修改, 默认:0（不限制）</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">max-overall-download-limit=0</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">单个任务下载速度限制, 默认:0（不限制）</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">max-download-limit=0</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">整体上传速度限制, 运行时可修改, 默认:0（不限制）</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">max-overall-upload-limit=0</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">单个任务上传速度限制, 默认:0（不限制）</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">max-upload-limit=0</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">禁用IPv6, 默认:<span class=\"hljs-literal\">false</span></span><br>disable-ipv6=true<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br>min-split-size=10M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">单个任务最大线程数, 添加时可指定, 默认:5</span><br>split=10<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 进度保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 进度保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># 进度保存相关 ##</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从会话文件中读取下载任务</span><br>input-file=/etc/aria2/aria2.session<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在Aria2退出时保存错误的、未完成的下载任务到会话文件</span><br>save-session=/etc/aria2/aria2.session<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br>save-session-interval=60<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># RPC相关设置 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># RPC相关设置 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># RPC相关设置 ##</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启用RPC, 默认:<span class=\"hljs-literal\">false</span></span><br>enable-rpc=true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">允许所有来源, 默认:<span class=\"hljs-literal\">false</span></span><br>rpc-allow-origin-all=true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">允许外部访问, 默认:<span class=\"hljs-literal\">false</span></span><br>rpc-listen-all=true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">RPC端口, 仅当默认端口被占用时修改</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">rpc-listen-port=6800</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">rpc-secret=&lt;TOKEN&gt;</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># BT/PT下载相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># BT/PT下载相关 ##</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-comment\"># BT/PT下载相关 ##</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:<span class=\"hljs-literal\">true</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">follow-torrent=<span class=\"hljs-literal\">true</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">客户端伪装, PT需要</span><br>peer-id-prefix=-TR2770-<br>user-agent=Transmission/2.77<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">强制保存会话, 即使任务已经完成, 默认:<span class=\"hljs-literal\">false</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">force-save=<span class=\"hljs-literal\">false</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">继续之前的BT任务时, 无需再次校验, 默认:<span class=\"hljs-literal\">false</span></span><br>bt-seed-unverified=true<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">保存磁力链接元数据为种子文件(.torrent文件), 默认:<span class=\"hljs-literal\">false</span></span><br>bt-save-metadata=true<br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo aria2c --conf-path=/etc/aria2/aria2.conf -D<br></code></pre></td></tr></table></figure>\n\n<p>没有任何提示则表示成功。接下来添加开机自启：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo touch /etc/init.d/aria2c<br>sudo nano /etc/init.d/aria2c<br></code></pre></td></tr></table></figure>\n\n<p>添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-comment\">### BEGIN INIT INFO</span><br><span class=\"hljs-comment\"># Provides:          aria2</span><br><span class=\"hljs-comment\"># Required-Start:    remotefsnetwork</span><br><span class=\"hljs-comment\"># Required-Stop:     remotefsnetwork</span><br><span class=\"hljs-comment\"># Default-Start:     2 3 4 5</span><br><span class=\"hljs-comment\"># Default-Stop:      0 1 6</span><br><span class=\"hljs-comment\"># Short-Description: Aria2 Downloader</span><br><span class=\"hljs-comment\">### END INIT INFO</span><br> <br><span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$1</span>&quot;</span> <span class=\"hljs-keyword\">in</span><br>start)<br>    <span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">&quot;Starting aria2c&quot;</span><br>    <span class=\"hljs-built_in\">sudo</span> aria2c --conf-path=/etc/aria2/aria2.conf -D<br><br>;;<br>stop)<br>    <span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">&quot;Shutting down aria2c &quot;</span><br>    killall aria2c<br>;;<br>restart)<br>    <span class=\"hljs-comment\"># killall aria2c</span><br>    <span class=\"hljs-built_in\">sudo</span> aria2c --conf-path=/etc/aria2/aria2.conf -D<br><br>;;<br><span class=\"hljs-keyword\">esac</span><br><span class=\"hljs-built_in\">exit</span><br></code></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo chmod +x /etc/init.d/aria2c<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装aria2的web管理界面（AriaNg）\"><a href=\"#安装aria2的web管理界面（AriaNg）\" class=\"headerlink\" title=\"安装aria2的web管理界面（AriaNg）\"></a>安装aria2的web管理界面（AriaNg）</h3><p>这里需要用到一个第三方的工具，这个是通过rpc接口来管理aria2下载的工具。</p>\n<p>安装git和nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt install -y git nginx<br></code></pre></td></tr></table></figure>\n\n<p>下载aira-ng</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/aria-ng-1.1.4.zip -O aira-ng.zip<br></code></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">unzip aira-ng.zip -d aira-ng<br></code></pre></td></tr></table></figure>\n\n<p>将aira-ng放到nginx的&#x2F;var&#x2F;www&#x2F;html&#x2F;目录下，然后设置开机启动nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mv aira-ng /var/www/html/<br>sudo systemctl enable nginx<br></code></pre></td></tr></table></figure>\n\n<p>用浏览器访问树莓派IP下的aira-ng，即：<a href=\"https://links.jianshu.com/go?to=http://ip/aira-ng\">http://ip/aira-ng</a></p>\n<p>然后在系统设置点击AriaNg设置 –&gt; 全局 –&gt; 设置语言为中文 –&gt; 点击RPC–&gt;修改为 rpc 密钥：secret</p>\n<h3 id=\"aria2-自动更新tracker\"><a href=\"#aria2-自动更新tracker\" class=\"headerlink\" title=\"aria2 自动更新tracker\"></a>aria2 自动更新tracker</h3><p><a href=\"https://www.moerats.com/archives/374/\">https://www.moerats.com/archives/374/</a></p>\n<h2 id=\"安装SSH服务端\"><a href=\"#安装SSH服务端\" class=\"headerlink\" title=\"安装SSH服务端\"></a>安装SSH服务端</h2><h3 id=\"WSL-Ubuntu\"><a href=\"#WSL-Ubuntu\" class=\"headerlink\" title=\"WSL Ubuntu\"></a>WSL Ubuntu</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置root的口令（密码），用作后续登陆使用</span><br>sudo passwd root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装openssh-server（ubuntu自带已安装，但是我使用有问题，没找到原因）</span><br>sudo apt remove openssh-server<br>sudo apt install openssh-client openssh-server<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">备份原始的sshd_config</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ssh_config是针对客户端的配置文件</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">sshd_config是针对服务端的配置文件</span><br>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak<br>sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config.bak<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">使用vim进行编辑，按i进入insert模式</span><br>sudo vim /etc/ssh/sshd_config<br><br>在vim中找到对应项并修改，ESC，输入`wq`保存退出：<br>Port 2222<br>ListenAddress 0.0.0.0        # 如果需要指定监听的IP则去除最左侧的井号，并配置对应IP，默认即监听PC所有IP<br>PermitRootLogin no           # 如果你需要用 root 直接登录系统则此处改为 yes<br>PasswordAuthentication yes    # 将 no 改为 yes 表示使用帐号密码方式登录<br>TCPKeepAlive yes             # <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动ssh，查看status</span><br>sudo service ssh start             #启动SSH服务<br>sudo service ssh status            #检查状态<br>sudo systemctl enable ssh          #开机自动启动ssh命令，WSL下无效<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果出错了可以用下面的命令查看错误信息</span><br>sshd -T<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"SSH主动断开连接\"><a href=\"#SSH主动断开连接\" class=\"headerlink\" title=\"SSH主动断开连接\"></a>SSH主动断开连接</h2><blockquote>\n<p>  network error: software caused connection abort</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-built_in\">sudo</span> vim /etc/ssh/sshd_config</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">找到TCPKeepAlive将其配置为<span class=\"hljs-built_in\">yes</span> 保持TCP的连接</span><br>TCPKeepAlive yes<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 ‘ClientAliveInterval’ 设定成 60s</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每分钟发送一次，然后客户端响应，这样就保持长连接了。</span><br>ClientAliveInterval 60<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ClientAliveCountMax，使用默认值3即可。ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值，就自动断开</span><br>ClientAliveCountMax 3<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SSH连接Linux时自动启动某个脚本\"><a href=\"#SSH连接Linux时自动启动某个脚本\" class=\"headerlink\" title=\"SSH连接Linux时自动启动某个脚本\"></a>SSH连接Linux时自动启动某个脚本</h2><p>etc目录下有一个profile文件，在文件末尾加上脚本命令，或者脚本目录地址。(切换root用户)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> vim /etc/profile<br></code></pre></td></tr></table></figure>\n<p>在 <code>/etc/ssh/</code> 目录下面创建一个 <code>sshrc</code> 的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置-SSH-密钥登录-免密码\"><a href=\"#配置-SSH-密钥登录-免密码\" class=\"headerlink\" title=\"配置 SSH 密钥登录(免密码)\"></a>配置 SSH 密钥登录(免密码)</h2><blockquote>\n<p>  <strong>一、第一次登录远程主机流程</strong></p>\n<p>  第一次ssh到远程主机时远程主机会发送它的公钥到客户端主机，客户机确认继续连接后会把远程主机的公钥保存到.ssh&#x2F;known_hosts文件，下次再连接此远程主机时会去.ssh&#x2F;known_hosts查看，如果是已经保存的公钥证明是信任主机，即不会告警并直接提示输入用户名密码登录。</p>\n<ul>\n<li>如果中途SSH提示你对方的密钥指纹发生了变化那这个时候你就要担心了, 可能存在MITM(Man-In-The-Middle-Attack 中间人攻击)<ul>\n<li>远程主机的这些操作会导致密钥指纹发生变化</li>\n<li>重新安装了操作系统</li>\n<li>重新安装了openssh或者手动更新了&#x2F;etc&#x2F;ssh下的密钥对</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>   虽然有著名的DH密钥交换算法，但SSH<strong>原理上</strong>不能抵御中间人攻击。然而实际上，SSH使用<a href=\"https://en.wikipedia.org/wiki/Trust_on_first_use\">TOFU</a>安全模型等同于做到了防中间人攻击。SSH的首次连接会下载服务端的公钥，用户确认后公钥将被保存并信任。下次访问时客户端将会核对服务端发来的公钥和本地保存的是否相同，不同就发出中间人攻击的警告拒绝连接，除非用户手动清除已保存的公钥。所以，<strong>如果首次连接没有中间人，之后的连接就无需担心中间人</strong>，因为中间人给出的公钥和服务端给出的公钥相同的可能性可以忽略。如果首次连接就有中间人攻击，那么恭喜你中奖了。</p>\n</blockquote>\n<p>  <strong>二、密码登录流程</strong></p>\n<p>  远程主机收到客户端请求后会把自己的公钥发送给客户端，客户端通过公钥加密之后将密码发送给远程主机，远程主机用密钥解密，密码如果正确则登录成功。</p>\n<p>  <strong>三、公钥登录（免密登录）流程</strong></p>\n<p>  公钥登录原理就是客户端将自己的公钥存储到远程主机的.ssh&#x2F;authorized_keys中，客户端发起登录时，远程主机会发送一段随机字符串给客户端，客户端用自己的私钥加密后重新发回远程主机，远程主机用存储的客户端公钥解密之后对比之前发送给客户端的字符串，相同的话即认为客户机认证，不在需要输入密码直接登录系统。</p>\n</blockquote>\n<ol>\n<li><p>client机器生成密钥</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ssh-keygen<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者</span><br>ssh-keygen -t rsa<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意 RSA 现阶段不再建议使用了, 改成ed25519生成</span><br>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;<br></code></pre></td></tr></table></figure>\n<p> <a href=\"https://confluence.atlassian.com/bitbucketserverkb/ssh-rsa-key-rejected-with-message-no-mutual-signature-algorithm-1026057701.html\">RSA 现阶段不再建议使用了</a></p>\n</li>\n<li><p>client查看<code>~/.ssh/id_rsa.pub</code>文件内容, 并复制</p>\n</li>\n<li><p>server编辑SSH的配置<code>vim /etc/ssh/sshd_config</code></p>\n<ol>\n<li>将<code>PubkeyAuthentication</code> 配置成<code>yes</code>, 允许密钥登录</li>\n<li>重启ssh服务 <code>systemctl restart sshd</code></li>\n</ol>\n</li>\n<li><p>server生成密钥</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">ssh-keygen</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>server创建<code>~/.ssh/authorized_keys</code>文件, 并将client的公钥(<code>~/.ssh/id_rsa.pub</code>)内容粘贴进去</p>\n<ul>\n<li>需要注意的是<code>.ssh文件夹的权限应当为700，authorized_keys文件的权限应该为600</code></li>\n<li>可以直接使用命令<code>cat .ssh/id_rsa.pub | ssh user_name@xxx.xxx.xxx.xx &#39;cat &gt;&gt; .ssh/authorized_keys&#39;</code></li>\n</ul>\n</li>\n<li><p>client使用指定私钥登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ssh -i /root/.ssh/id_rsa user@ip_or_domain<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>测试登录OK后建议关闭密码登录(不安全), 同时Root用户也建议禁止登录</p>\n<p><code>PasswordAuthentication no</code>, <code>PermitRootLogin no</code></p>\n</li>\n</ol>\n<h2 id=\"SSH-config\"><a href=\"#SSH-config\" class=\"headerlink\" title=\"SSH config\"></a>SSH config</h2><p>SSH 的配置文件有两个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">~/.ssh/config            <span class=\"hljs-comment\"># 用户配置文件</span><br>/etc/ssh/ssh_config      <span class=\"hljs-comment\"># 系统配置文件</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-comment\"># comment! </span><br>Host pq.github.com<br>  HostName github.com           <span class=\"hljs-comment\"># 目标服务器地址</span><br>  <span class=\"hljs-keyword\">User</span> <span class=\"hljs-title\">git</span>                      <span class=\"hljs-comment\"># 用户名</span><br>  Port <span class=\"hljs-number\">22</span>                       <span class=\"hljs-comment\"># 端口</span><br>  IdentityFile ~/.ssh/id_rsa    <span class=\"hljs-comment\"># 密钥-&gt;私钥</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<h3 id=\"配置项说明\"><a href=\"#配置项说明\" class=\"headerlink\" title=\"配置项说明\"></a>配置项说明</h3><p>  SSH 的配置文件有两个：</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-variable\">$ </span>~<span class=\"hljs-regexp\">/.ssh/config</span>            <span class=\"hljs-comment\"># 用户配置文件</span><br><span class=\"hljs-variable\">$ </span>/etc/ssh/ssh_config      <span class=\"hljs-comment\"># 系统配置文件</span><br></code></pre></td></tr></table></figure>\n\n<p>  下面来看看常用的配置参数。</p>\n<p>  <strong>Host</strong><br>  用于我们执行 SSH 命令的时候如何匹配到该配置。</p>\n<ul>\n<li><code>*</code>，匹配所有主机名。</li>\n<li><code>*.example.com</code>，匹配以 .example.com 结尾。</li>\n<li><code>!*.dialup.example.com,*.example.com</code>，以 ! 开头是排除的意思。</li>\n<li><code>192.168.0.?</code>，匹配 192.168.0.[0-9] 的 IP。</li>\n</ul>\n<p>  <strong>AddKeysToAgent</strong><br>  是否自动将 key 加入到 <code>ssh-agent</code>，值可以为 no(default)&#x2F;confirm&#x2F;ask&#x2F;yes。</p>\n<p>  如果是 yes，key 和密码都将读取文件并以加入到 agent ，就像 <code>ssh-add</code>。其他分别是询问、确认、不加入的意思。添加到 ssh-agent 意味着将私钥和密码交给它管理，让它来进行身份认证。</p>\n<p>  <strong>AddressFamily</strong><br>  指定连接的时候使用的地址族，值可以为 any(default)&#x2F;inet(IPv4)&#x2F;inet6(IPv6)。</p>\n<p>  <strong>BindAddress</strong><br>  指定连接的时候使用的本地主机地址，只在系统有多个地址的时候有用。在 UsePrivilegedPort 值为 yes 的时候无效。</p>\n<p>  <strong>ChallengeResponseAuthentication</strong><br>  是否响应支持的身份验证 chanllenge，yes(default)&#x2F;no。</p>\n<p>  <strong>Compression</strong><br>  是否压缩，值可以为 no(default)&#x2F;yes。</p>\n<p>  <strong>CompressionLevel</strong><br>  压缩等级，值可以为 1(fast)-9(slow)。6(default)，相当于 gzip。</p>\n<p>  <strong>ConnectionAttempts</strong><br>  退出前尝试连接的次数，值必须为整数，1(default)。</p>\n<p>  <strong>ConnectTimeout</strong><br>  连接 SSH 服务器超时时间，单位 s，默认系统 TCP 超时时间。</p>\n<p>  <strong>ControlMaster</strong><br>  是否开启单一网络共享多个 session，值可以为 no(default)&#x2F;yes&#x2F;ask&#x2F;auto。需要和 ControlPath 配合使用，当值为 yes 时，ssh 会监听该路径下的 control socket，多个 session 会去连接该 socket，它们会尽可能的复用该网络连接而不是重新建立新的。</p>\n<p>  <strong>ControlPath</strong><br>  指定 control socket 的路径，值可以直接指定也可以用一下参数代替：</p>\n<ul>\n<li>%L 本地主机名的第一个组件</li>\n<li>%l 本地主机名（包括域名）</li>\n<li>%h 远程主机名（命令行输入）</li>\n<li>%n 远程原始主机名</li>\n<li>%p 远程主机端口</li>\n<li>%r 远程登录用户名</li>\n<li>%u 本地 ssh 正在使用的用户名</li>\n<li>%i 本地 ssh 正在使用 uid</li>\n<li>%C 值为 %l%h%p%r 的 hash</li>\n</ul>\n<p>  请最大限度的保持 ControlPath 的唯一。至少包含 %h，%p，%r（或者 %C）。</p>\n<p>  <strong>ControlPersist</strong><br>  结合 ControlMaster 使用，指定连接打开后后台保持的时间。值可以为 no&#x2F;yes&#x2F;整数，单位 s。如果为 no，最初的客户端关闭就关闭。如果 yes&#x2F;0，无限期的，直到杀死或通过其它机制，如：ssh -O exit。</p>\n<p>  <strong>GatewayPorts</strong><br>  指定是否允许远程主机连接到本地转发端口，值可以为 no(default)&#x2F;yes。默认情况，ssh 为本地回环地址绑定了端口转发器。</p>\n<p>  <strong>HostName</strong><br>  真实的主机名，默认值为命令行输入的值（允许 IP）。你也可以使用 %h，它将自动替换，只要替换后的地址是完整的就 ok。</p>\n<p>  <strong>IdentitiesOnly</strong><br>  指定 ssh 只能使用配置文件指定的 identity 和 certificate 文件或通过 ssh 命令行通过身份验证，即使 ssh-agent 或 PKCS11Provider 提供了多个 identities。值可以为 no(default)&#x2F;yes。</p>\n<p>  <strong>IdentityFile</strong><br>  指定读取的认证文件路径，允许 DSA，ECDSA，Ed25519 或 RSA。值可以直接指定也可以用一下参数代替：</p>\n<ul>\n<li>%d，本地用户目录 ~</li>\n<li>%u，本地用户</li>\n<li>%l，本地主机名</li>\n<li>%h，远程主机名</li>\n<li>%r，远程用户名</li>\n</ul>\n<p>  <strong>LocalCommand</strong><br>  指定在连接成功后，本地主机执行的命令（单纯的本地命令）。可使用 %d，%h，%l，%n，%p，%r，%u，%C 替换部分参数。只在 PermitLocalCommand 开启的情况下有效。</p>\n<p>  <strong>LocalForward</strong><br>  指定本地主机的端口通过 ssh 转发到指定远程主机。格式：LocalForward [bind_address:]post host:hostport，支持 IPv6。</p>\n<p>  <strong>PasswordAuthentication</strong><br>  是否使用密码进行身份验证，yes(default)&#x2F;no。</p>\n<p>  <strong>PermitLocalCommand</strong><br>  是否允许指定 LocalCommand，值可以为 no(default)&#x2F;yes。</p>\n<p>  <strong>Port</strong><br>  指定连接远程主机的哪个端口，22(default)。</p>\n<p>  <strong>ProxyCommand</strong><br>  指定连接的服务器需要执行的命令。%h，%p，%r</p>\n<p>  如：ProxyCommand &#x2F;usr&#x2F;bin&#x2F;nc -X connect -x 192.0.2.0:8080 %h %p</p>\n<p>  <strong>User</strong><br>  登录用户名</p>\n</blockquote>\n<h2 id=\"查看ssh登录失败记录\"><a href=\"#查看ssh登录失败记录\" class=\"headerlink\" title=\"查看ssh登录失败记录\"></a>查看ssh登录失败记录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看并筛选 失败次数大于3次的 ip</span><br>sudo lastb |awk &#x27;&#123;print $3&#125;&#x27;|sort |uniq -c|awk &#x27;&#123;if ($1 &gt; 3) print $2&#125;&#x27;<br>sudo lastb |awk &#x27;&#123;print $3&#125;&#x27;|sort |uniq -c|sort -bn|awk &#x27;&#123;if ($1 &gt; 3) print&#125;&#x27;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">写一个脚本 统计一下ip 将这些ip禁止</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-------------------------------</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>list=$( sudo lastb |awk &#x27;&#123;print $3&#125;&#x27;|sort |uniq -c|awk &#x27;&#123;if ($1 &gt; 3) print $2&#125;&#x27; )<br>for ip in $&#123;list&#125;<br>do<br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$&#123;ip&#125;</span></span><br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\">下面这个是加入黑名单</span><br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> ALL: <span class=\"hljs-variable\">$&#123;ip&#125;</span> &gt;&gt; /etc/hosts.deny <span class=\"hljs-comment\">#加入黑名单</span></span><br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\">这个是加入防火墙的禁止规则</span><br>\tufw deny from $&#123;ip&#125;<br>done<br>echo &gt; /var/log/btmp    #清空失败记录，防止脚本下次执行重复统计IP<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">-------------------------------</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定时执行 ssh密码错误没找到回调函数, 这里要是有回调函数处理起来就很及时了</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">crontab -e</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">内容为每天12:12执行一次脚本</span><br>12 12 * * * /bin/bash /home/xx/xx.sh<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"hosts文件\"><a href=\"#hosts文件\" class=\"headerlink\" title=\"hosts文件\"></a>hosts文件</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/ets/</span>hosts<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"服务器测试工具\"><a href=\"#服务器测试工具\" class=\"headerlink\" title=\"服务器测试工具\"></a>服务器测试工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash<br></code></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"搭建简易文件服务器http-server-wget下载\"><a href=\"#搭建简易文件服务器http-server-wget下载\" class=\"headerlink\" title=\"搭建简易文件服务器http server wget下载\"></a>搭建简易文件服务器http server wget下载</h2><p>两台服务器之间传递文件，可以使用http server，参考文章：<a href=\"https://www.jianshu.com/p/f61151abb7a5\">python开启http服务传输文件</a>.<br>在需要提供服务的主机中运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Python &lt;= 2.3</span><br>python -c <span class=\"hljs-string\">&quot;import SimpleHTTPServer as s; s.test();&quot;</span> 8000<br><br><span class=\"hljs-comment\"># Python &gt;= 2.4</span><br>python -m SimpleHTTPServer 8000<br><br><span class=\"hljs-comment\"># Python 3.x</span><br>python -m http.server 8000<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果目录有一个名为index.html的文件，该文件将作为初始文件。如果没有index.html，则将列出目录中的文件。</p>\n</blockquote>\n<p>访问：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget ip:8080/filename<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看支持的shell\"><a href=\"#查看支持的shell\" class=\"headerlink\" title=\"查看支持的shell\"></a>查看支持的shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> /etc/shells<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"uninx-资源管理器\"><a href=\"#uninx-资源管理器\" class=\"headerlink\" title=\"uninx 资源管理器\"></a>uninx 资源管理器</h2><h3 id=\"Glances\"><a href=\"#Glances\" class=\"headerlink\" title=\"Glances\"></a>Glances</h3><p>适合运维、云端开发人员或命令行爱好者</p>\n<p><img src=\"/2020/d4436089/webp.webp\" alt=\"img\"></p>\n<p>安装：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-variable\">$ </span>sudo pip3 install glances<br></code></pre></td></tr></table></figure>\n\n<p>启动：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-variable\">$ </span>sudo glances<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Sysmontask\"><a href=\"#Sysmontask\" class=\"headerlink\" title=\"Sysmontask\"></a>Sysmontask</h3><p>适合桌面端用户，界面仿照 <code>Win10</code> 资源管理器，提供更多信息更直观</p>\n<p><img src=\"/2020/d4436089/webp-16552860429952.webp\" alt=\"img\"></p>\n<p>安装：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-variable\">$ </span>sudo pip3 install sysmontask<br></code></pre></td></tr></table></figure>\n\n<p>启动:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-variable\">$ </span>sudo sysmontask<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"bpytop\"><a href=\"#bpytop\" class=\"headerlink\" title=\"bpytop\"></a>bpytop</h3><p>github: <a href=\"https://github.com/aristocratos/bpytop\">https://github.com/aristocratos/bpytop</a></p>\n<p><img src=\"/2020/d4436089/main-16552870928465.png\" alt=\"main\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/aristocratos/bpytop.git<br><span class=\"hljs-built_in\">cd</span> bpytop<br><span class=\"hljs-built_in\">sudo</span> make install<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"清理RAM-Cache\"><a href=\"#清理RAM-Cache\" class=\"headerlink\" title=\"清理RAM Cache\"></a>清理RAM Cache</h2><hr>\n<p><em><strong>Sync</strong></em></p>\n<blockquote>\n<p>  操作系统在运行过程中,会把访问到的文件放到buffer中。为了避免断电,等故障造成数据丢失,我们需要把buffer中的缓存数据写入到磁盘</p>\n</blockquote>\n<hr>\n<p><em><strong>手动释放内存的命令</strong></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> 3 &gt; /proc/sys/vm/drop_caches<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  drop_caches的值可以是0-3之间的数字，代表不同的含义：</p>\n</blockquote>\n<ul>\n<li>0：不释放（系统默认值）</li>\n<li>1：释放页缓存</li>\n<li>2：释放dentries和inodes</li>\n</ul>\n<hr>\n<h2 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h2><p>编辑文件&#x2F;etc&#x2F;profile，增加如下两行, 临时使用直接export即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">http_proxy</span>=http://proxy.com:8080/<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">https_proxy</span>=http://proxy.com:8080/<br></code></pre></td></tr></table></figure>\n\n<p>然后更新一下环境文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> /etc/profile<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">环境变量</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">值示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">http_proxy</td>\n<td align=\"left\">为http变量设置代理；默认不填开头以http协议传输</td>\n<td align=\"left\">10.0.0.51:8080 user:<a href=\"mailto:&#112;&#97;&#x73;&#115;&#64;&#x31;&#x30;&#46;&#x30;&#46;&#48;&#x2e;&#49;&#48;\">&#112;&#97;&#x73;&#115;&#64;&#x31;&#x30;&#46;&#x30;&#46;&#48;&#x2e;&#49;&#48;</a>:8080 socks4:&#x2F;&#x2F;10.0.0.51:1080 socks5:&#x2F;&#x2F;192.168.1.1:1080</td>\n</tr>\n<tr>\n<td align=\"left\">https_proxy</td>\n<td align=\"left\">为https变量设置代理；</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">ftp_proxy</td>\n<td align=\"left\">为ftp变量设置代理；</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">all_proxy</td>\n<td align=\"left\">全部变量设置代理，设置了这个时候上面的不用设置</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">no_proxy</td>\n<td align=\"left\">无需代理的主机或域名； 可以使用通配符； 多个时使用“,”号分隔；</td>\n<td align=\"left\"><em>.aiezu.com,10.</em>.<em>.</em>,192.168.<em>.</em>, *.local,localhost,127.0.0.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"脚本为WSL设置代理\"><a href=\"#脚本为WSL设置代理\" class=\"headerlink\" title=\"脚本为WSL设置代理\"></a>脚本为WSL设置代理</h3><p><strong>WSL 中获取宿主机 IP</strong></p>\n<p>WSL 每次启动的时候都会有不同的 IP 地址，所以并不能直接用静态的方式来设置代理。WSL2 会把 IP 写在 <code>/etc/resolv.conf</code>中，因此可以用 <code>cat /etc/resolv.conf | grep nameserver | awk &#39;&#123; print $2 &#125;&#39;</code> 这条指令获得宿主机 IP 。</p>\n<p><strong>设置代理</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>hostip=$(<span class=\"hljs-built_in\">cat</span> /etc/resolv.conf | grep nameserver | awk <span class=\"hljs-string\">&#x27;&#123; print $2 &#125;&#x27;</span>)<br>wslip=$(hostname -I | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>)<br>http_port=&lt;PORT&gt;<br>socks5_port=&lt;PORT&gt;<br><br>PROXY_HTTP=<span class=\"hljs-string\">&quot;http://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:<span class=\"hljs-variable\">$&#123;http_port&#125;</span>&quot;</span><br>PROXY_SOCKS5=<span class=\"hljs-string\">&quot;socks5://<span class=\"hljs-variable\">$&#123;hostip&#125;</span>:<span class=\"hljs-variable\">$&#123;socks5_port&#125;</span>&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">set_proxy</span></span>()&#123;<br>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br><br>    <span class=\"hljs-built_in\">export</span> https_proxy=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br>    <span class=\"hljs-built_in\">export</span> HTTPS_PROXY=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br><br>    <span class=\"hljs-built_in\">export</span> all_proxy=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_SOCKS5&#125;</span>&quot;</span><br>    <span class=\"hljs-built_in\">export</span> ALL_PROXY=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;PROXY_SOCKS5&#125;</span>&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">unset_proxy</span></span>()&#123;<br>    <span class=\"hljs-built_in\">unset</span> http_proxy<br>    <span class=\"hljs-built_in\">unset</span> HTTP_PROXY<br>    <span class=\"hljs-built_in\">unset</span> https_proxy<br>    <span class=\"hljs-built_in\">unset</span> HTTPS_PROXY<br>    <span class=\"hljs-built_in\">unset</span> all_proxy<br>    <span class=\"hljs-built_in\">unset</span> ALL_PROXY<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">test_setting</span></span>()&#123;<br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Host ip:&quot;</span> <span class=\"hljs-variable\">$&#123;hostip&#125;</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;WSL ip:&quot;</span> <span class=\"hljs-variable\">$&#123;wslip&#125;</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Current https_proxy:&quot;</span> <span class=\"hljs-variable\">$https_proxy</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Current all_proxy:&quot;</span> <span class=\"hljs-variable\">$all_proxy</span><br>&#125;<br><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$1</span>&quot;</span> = <span class=\"hljs-string\">&quot;set&quot;</span> ]<br><span class=\"hljs-keyword\">then</span><br>    set_proxy<br><br><span class=\"hljs-keyword\">elif</span> [ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$1</span>&quot;</span> = <span class=\"hljs-string\">&quot;unset&quot;</span> ]<br><span class=\"hljs-keyword\">then</span><br>    unset_proxy<br><br><span class=\"hljs-keyword\">elif</span> [ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$1</span>&quot;</span> = <span class=\"hljs-string\">&quot;test&quot;</span> ]<br><span class=\"hljs-keyword\">then</span><br>    test_setting<br><span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Unsupported arguments.&quot;</span><br><span class=\"hljs-keyword\">fi</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>!!注意!!</strong></p>\n<p>之后运行 <code>. ./proxy.sh set</code> 就可以自动设置代理了。<code>unset</code> 可以取消代理，test 可以查看代理状态，能够用来检查环境变量是否被正确修改。</p>\n<p>运行的时候不要忘记之前的 <code>.</code>，或者使用 <code>source ./proxy.sh set</code>，只有这样才能够修改环境变量</p>\n<p>直接运行例如 <code>./proxy.sh set</code> 或者 <code>sh proxy.sh set</code>，这样会是运行在一个子 shell 中，对当前 shell 没有效果</p>\n<p>另外可以在 <code>~/.bashrc</code> 中选择性的加上下面两句话，记得将里面的路径修改成你放这个脚本的路径。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alias proxy=&quot;source /path/to/proxy.sh&quot;<br>. /path/to/proxy.sh set<br></code></pre></td></tr></table></figure>\n\n<p>第一句话可以为这个脚本设置别名 proxy，这样在任何路径下都可以通过 proxy 命令使用这个脚本了，之后在任何路径下，都可以随时都可以通过输入<code>proxy unset</code> 来暂时取消代理。</p>\n<p>第二句话就是在每次 shell 启动的时候运行该脚本实现自动设置代理，这样以后不用额外操作就默认设置好代理啦~</p>\n<h2 id=\"获取IP归属地\"><a href=\"#获取IP归属地\" class=\"headerlink\" title=\"获取IP归属地\"></a>获取IP归属地</h2><blockquote>\n<p>  <a href=\"http://ip-[api](https://so.csdn.net/so/search?q=api&spm=1001.2101.3001.7020).com/json/\">http://ip-[api](https://so.csdn.net/so/search?q=api&amp;spm=1001.2101.3001.7020).com/json/</a>         # 国际化英文显示</p>\n<p>  <a href=\"http://ip-api.com/json/?lang=zh-CN\">http://ip-api.com/json/?lang=zh-CN</a>　　# 中文显示</p>\n<p>  <a href=\"http://ip-api.com/json/8.8.8.8?lang=zh-CN\">http://ip-api.com/json/8.8.8.8?lang=zh-CN</a>    #查询某个ip的信息</p>\n</blockquote>\n<h2 id=\"使用-curl-测试网站加载速度\"><a href=\"#使用-curl-测试网站加载速度\" class=\"headerlink\" title=\"使用 curl 测试网站加载速度\"></a>使用 curl 测试网站加载速度</h2><p> <a href=\"###curl\">参考Curl章节-w参数</a></p>\n<h2 id=\"rsync-同步工具\"><a href=\"#rsync-同步工具\" class=\"headerlink\" title=\"rsync 同步工具\"></a>rsync 同步工具</h2><p><a href=\"https://wiki.archlinux.org/title/Rsync#Full_system_backup\">Full system backup</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\">rsync 用法教程_阮一峰</a></p>\n<p>备份远程主机 <code>192.168.1.1</code> 的 <code>/</code>目录, 到本地<code>./xx_backup/</code> , 并排除一些文件, 生成日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">rsync -a -e &quot;ssh -p 22&quot; --exclude=&#123;&quot;/dev/*&quot;,&quot;/proc/*&quot;,&quot;/sys/*&quot;,&quot;/tmp/*&quot;,&quot;/run/*&quot;,&quot;/mnt/*&quot;,&quot;/media/*&quot;,&quot;/lost+found&quot;&#125; user@192.168.1.1:/ ./xx_backup | tee ./xx_backup.log<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">&quot;ssh -p 22&quot;</span>         22 = port = 端口号</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">user@192.168.1.1  user = user = 用户名</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">192.168.1.1       = ip</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"r-参数\"><a href=\"#r-参数\" class=\"headerlink\" title=\"-r 参数\"></a><code>-r</code> 参数</h3><p>本机使用 rsync 命令时，可以作为<code>cp</code>和<code>mv</code>命令的替代方法，将源目录同步到目标目录。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -r <span class=\"hljs-built_in\">source</span> destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令中，<code>-r</code>表示递归，即包含子目录。注意，<code>-r</code>是必须的，否则 rsync 运行不会成功。<code>source</code>目录表示源目录，<code>destination</code>表示目标目录。</p>\n<p>如果有多个文件或目录需要同步，可以写成下面这样。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -r source1 source2 destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令中，<code>source1</code>、<code>source2</code>都会被同步到<code>destination</code>目录。</p>\n<h3 id=\"a-参数\"><a href=\"#a-参数\" class=\"headerlink\" title=\"-a 参数\"></a><code>-a</code> 参数</h3><p><code>-a</code>参数可以替代<code>-r</code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以<code>-a</code>比<code>-r</code>更有用。下面的用法才是常见的写法。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -a <span class=\"hljs-built_in\">source</span> destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>目标目录<code>destination</code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录<code>source</code>被完整地复制到了目标目录<code>destination</code>下面，即形成了<code>destination/source</code>的目录结构。</p>\n<p>如果只想同步源目录<code>source</code>里面的内容到目标目录<code>destination</code>，则需要在源目录后面加上斜杠。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -a <span class=\"hljs-built_in\">source</span>/ destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令执行后，<code>source</code>目录里面的内容，就都被复制到了<code>destination</code>目录里面，并不会在<code>destination</code>下面创建一个<code>source</code>子目录。</p>\n<h3 id=\"n-参数\"><a href=\"#n-参数\" class=\"headerlink\" title=\"-n 参数\"></a><code>-n</code> 参数</h3><p>对比两个目录下文件，想知道目标目录下哪些文件被修改或增加删除了，rsync提供了一个只校验文件但不实际同步目录内容的参数 <code>--dry-run</code>或<code>-n</code>.</p>\n<p>如果不确定 rsync 执行后会产生什么结果，可以先用<code>-n</code>或<code>--dry-run</code>参数模拟执行的结果。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -anv <span class=\"hljs-built_in\">source</span>/ destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令中，<code>-n</code>参数模拟命令执行的结果，并不真的执行命令。<code>-v</code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p>\n<h3 id=\"delete-参数\"><a href=\"#delete-参数\" class=\"headerlink\" title=\"--delete 参数\"></a><code>--delete</code> 参数</h3><p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用<code>--delete</code>参数，这将删除只存在于目标目录、不存在于源目录的文件。</p>\n<blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ rsync -av --delete <span class=\"hljs-built_in\">source</span>/ destination<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令中，<code>--delete</code>参数会使得<code>destination</code>成为<code>source</code>的一个镜像。</p>\n<h2 id=\"ufw-ubuntu防火墙\"><a href=\"#ufw-ubuntu防火墙\" class=\"headerlink\" title=\"ufw ubuntu防火墙\"></a>ufw ubuntu防火墙</h2><p>UFW 只是 iptables 的前端，因此这些日志条目实际上来自 iptables。</p>\n<p>第 1 行：<code>Feb  6 16:27:08 jonasgroenbek kernel: [71910.873115]</code></p>\n<p>日期和时间、您的计算机名称和自引导以来的内核时间。</p>\n<p>第 2 行：<code>[UFW BLOCK] IN=eth0 OUT=</code></p>\n<p>每当 iptables 执行日志条目时，都会有一个可选的<code>--log-prefix</code>，在这种情况下<code>[UFW BLOCK]</code>。UFW 最烦人的一点是，它对每种类型的日志条目都使用相同的前缀，因此很难关联回 iptables 规则集。<code>IN</code>是数据包到达的网络接口名称。是空白的<code>OUT</code>，因为数据包没有被重新传输，如果这是一个路由器应用程序可能就是这种情况。</p>\n<p>第 3 行：<code>MAC=a6:8d:e2:51:62:4c:f0:4b:3a:4f:80:30:08:00</code></p>\n<p>这些是本地目标 (a6:8d:e2:51:62:4c (eth0)) 和源 (f0:4b:3a:4f:80:30) 网络接口卡的机器地址代码。在您的情况下，源可能是您的 ISP 网关 NIC 的 MAC。每个 6 个字节。末尾额外的 2 个字节（08:00）是帧类型，在这种情况下，它表示“以太网帧携带 IPv4 数据报”。</p>\n<p>第 4 行：<code>SRC=77.72.85.26 DST=157.230.26.180</code></p>\n<p>这些是数据包来自哪里的IP地址，SRC，它应该去哪里，DST，应该是你的IP地址。</p>\n<p>第 5 行：<code>LEN=40 TOS=0x00 PREC=0x00 TTL=251 ID=62215 PROTO=TCP</code></p>\n<p>原始数据包的有效载荷部分的长度；服务类型、存在时间、生存时间（在数据包因跳数过多而死亡之前还剩下多少跳）；鉴别; 协议（在本例中为 TCP）。</p>\n<p>第 6 行：<code>SPT=42772 DPT=3194 WINDOW=1024</code></p>\n<p>源端口；探测端口；TCP 窗口大小</p>\n<p>第 7 行：<code>RES=0x00 SYN URGP=0</code></p>\n<p>TCP 标志，这里重要的是“SYN”，意思是它试图建立一个新的连接。此日志条目表示尝试已被阻止。</p>\n<h2 id=\"linux-和-的区别\"><a href=\"#linux-和-的区别\" class=\"headerlink\" title=\"linux &gt;和&gt;&gt;的区别,&lt;号使用\"></a>linux &gt;和&gt;&gt;的区别,&lt;号使用</h2><p><code>&gt;</code>：将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的）重定向其它输出设备（文件，打开文件操作符，或打印机等等）</p>\n<ul>\n<li><p><code>&gt;&gt;</code>：追加内容（原有内容保留）</p>\n</li>\n<li><p><code>&gt;</code>：覆盖内容</p>\n</li>\n</ul>\n<p><code>&lt;</code>：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p>\n<h2 id=\"访问samba\"><a href=\"#访问samba\" class=\"headerlink\" title=\"访问samba\"></a>访问samba</h2><blockquote>\n<p>  Linux用户可以从命令行访问samba共享，使用文件管理器或挂载samba共享。</p>\n<p>  <code>smbclient</code>是一个允许您从命令行访问Samba共享资源的工具。大绝大部分的Linux发行版中，<code>smbclient</code>软件包并不是预先安装的，所以需要在您的发行版软件包管理器中安装它。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt install smbclient<br></code></pre></td></tr></table></figure>\n\n<p>访问Samba共享资源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">smbclient //samba_hostname_or_server_ip/share_name -U username<br></code></pre></td></tr></table></figure>\n\n<p>看到这个提示符就表示成功登录了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Try &quot;help&quot; to get a list of possible commands.<br>smb: \\&gt;<br></code></pre></td></tr></table></figure>\n\n<p>还有一种用的比较多的方法就是直接将<strong>Samba文件夹挂载到系统文件夹</strong>下.</p>\n<h3 id=\"挂载-1\"><a href=\"#挂载-1\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p>我们需要先安装包<code>cifs-utils</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> apt install cifs-utils<br></code></pre></td></tr></table></figure>\n\n<p>创建挂载点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">mkdir</span> /mnt/smbmount<br></code></pre></td></tr></table></figure>\n\n<p>挂载远程共享目录到本地目录&#x2F;mnt&#x2F;smbmount</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -t cifs -o username=my_username //samba_hostname_or_server_ip/sharePath /mnt/smbmount<br></code></pre></td></tr></table></figure>\n\n<p>把远程服务器192.168.20.245上的共享目录<code>share</code>，用户名为<code>frank</code>，挂载到本地目录<code>/mnt/smbmount</code>上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> mount -t cifs -o username=frank //192.168.20.245/share /mnt/smbmount<br></code></pre></td></tr></table></figure>\n\n<p>系统将提示需要输入密码验证：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">Password <span class=\"hljs-keyword\">for</span> <span class=\"hljs-symbol\">frank@</span><span class=\"hljs-comment\">//192.168.20.245/share:  ********</span><br></code></pre></td></tr></table></figure>\n\n<p>查看挂载情况 可以看到已经成功挂载了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">df -h<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  Note:如果提示文件系统错误, 或者远程文件只读错误可以看看是不是没安装<code>cifs-utils</code></p>\n</blockquote>\n<h3 id=\"开机挂载\"><a href=\"#开机挂载\" class=\"headerlink\" title=\"开机挂载\"></a>开机挂载</h3><p>先卸载刚刚挂载的目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">umount /mnt/smbmount<br></code></pre></td></tr></table></figure>\n\n<p>我们要实现开机自动挂载，需要修改配置文件<code>/etc/fstab</code>，假设服务器IP地址为192.168.20.245，共享目录名为share，本地目录为<code>/mnt/smbmount</code>，用户名为<code>frank</code>，密码为123，在配置文件的最后一行添加以下内容：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">20.245</span><span class=\"hljs-regexp\">/share /m</span>nt/smbmount  cifs  username=frank,password=<span class=\"hljs-number\">123</span>,soft,rw  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>测试挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount -a<br></code></pre></td></tr></table></figure>\n\n<p>验证：看看挂载情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<p>接下来查看文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ll /mnt/smbmount<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看文件占用\"><a href=\"#查看文件占用\" class=\"headerlink\" title=\"查看文件占用\"></a>查看文件占用</h2><p>ADD ME</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt install ncdu<br><br>ncdu<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">排除/mnt</span><br>ncdu --exclude /mnt <br><br><br><br>du -h -d 1<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改语言\"><a href=\"#修改语言\" class=\"headerlink\" title=\"修改语言\"></a>修改语言</h2><h3 id=\"CentOS-更改系统语言\"><a href=\"#CentOS-更改系统语言\" class=\"headerlink\" title=\"CentOS 更改系统语言\"></a>CentOS 更改系统语言</h3><p>使用 <code>localectl list-locales</code> 查看已有语言环境。例如切换简中只需运行下面命令，重启系统生效。</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">localectl</span> <span class=\"hljs-built_in\">set-locale</span> <span class=\"hljs-string\">LANG</span>=<span class=\"hljs-string\">zh_CN</span>.<span class=\"hljs-string\">UTF-8</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以手动修改语言配置文件 <code>/etc/locale.conf</code> 设置，效果是一样的。</p>\n<p>某些场景可能只要临时切换语言，仅对当前登录会话生效，这时可用 <code>LANG=zh_CN.UTF-8</code> 命令设置。</p>\n<h3 id=\"Ubuntu-更改系统语言\"><a href=\"#Ubuntu-更改系统语言\" class=\"headerlink\" title=\"Ubuntu 更改系统语言\"></a>Ubuntu 更改系统语言</h3><p>先用 <code>locale -a</code> 查看系统语言环境。按下面命令格式更改语言，注销重新登录生效。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">update-locale <span class=\"hljs-attribute\">LANG</span>=zh_CN.UTF-8<br></code></pre></td></tr></table></figure>\n\n<p>如果系统没有所需语言，先使用下面命令添加，以添加简中语言为例。</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">locale-gen zh_CN.UTF-8 <span class=\"hljs-variable\">&amp;&amp;</span> <span class=\"hljs-keyword\">update</span>-locale<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Debian-更改系统语言\"><a href=\"#Debian-更改系统语言\" class=\"headerlink\" title=\"Debian 更改系统语言\"></a>Debian 更改系统语言</h3><p>用要添加语言的国家地区代码，相应修改如下命令运行，以简中为例。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">LANG</span>=zh_CN.UTF-8<br></code></pre></td></tr></table></figure>\n\n<p>再执行 <code>dpkg-reconfigure locales</code> 命令重新配置语言，用空格键选择，之后重启系统生效。</p>\n<h3 id=\"Docker-内-ubuntu\"><a href=\"#Docker-内-ubuntu\" class=\"headerlink\" title=\"Docker 内 ubuntu\"></a>Docker 内 ubuntu</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">apt-get install language-pack-zh-hans<br>locale-gen zh_CN.UTF-8<br>locale -a<br>echo &quot;export LC_ALL=zh_CN.UTF-8&quot;&gt;&gt; /etc/profile<br>source /etc/profile<br>locale<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"date日期时间和Unix时间戳互转\"><a href=\"#date日期时间和Unix时间戳互转\" class=\"headerlink\" title=\"date日期时间和Unix时间戳互转\"></a>date日期时间和Unix时间戳互转</h2><h3 id=\"将日期转换为Unix时间戳\"><a href=\"#将日期转换为Unix时间戳\" class=\"headerlink\" title=\"将日期转换为Unix时间戳\"></a>将日期转换为Unix时间戳</h3><p>将当前时间以Unix时间戳表示：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\"><span class=\"hljs-keyword\">date</span> +%s<br></code></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">1361542433</span><br></code></pre></td></tr></table></figure>\n\n<p>转换指定日期为Unix时间戳：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">date</span> -d &#x27;<span class=\"hljs-number\">2013</span>-<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">22</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">14</span>&#x27; +%s<br></code></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">1361542440</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将Unix时间戳转换为日期时间\"><a href=\"#将Unix时间戳转换为日期时间\" class=\"headerlink\" title=\"将Unix时间戳转换为日期时间\"></a>将Unix时间戳转换为日期时间</h3><p>不指定日期时间的格式：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\"><span class=\"hljs-keyword\">date</span> -d @1361542596<br></code></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Fri</span> Feb <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">36</span> CST <span class=\"hljs-number\">2013</span><br></code></pre></td></tr></table></figure>\n\n<p>指定日期格式的转换：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">date -d <span class=\"hljs-variable\">@1361542596</span> +<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">%Y</span>-<span class=\"hljs-variable\">%m</span>-<span class=\"hljs-variable\">%d</span> <span class=\"hljs-variable\">%H</span>:<span class=\"hljs-variable\">%M</span>:<span class=\"hljs-variable\">%S</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">2013</span>-<span class=\"hljs-number\">02</span>-<span class=\"hljs-number\">22</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">36</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"固定IP\"><a href=\"#固定IP\" class=\"headerlink\" title=\"固定IP\"></a>固定IP</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">临时 固定ip 重启后失效</span><br>ifconfig eth0 192.168.2.20 netmask 255.255.255.0 up<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加 路由表</span><br>route add gw 192.168.2.254<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Swap-分区大小调整\"><a href=\"#Swap-分区大小调整\" class=\"headerlink\" title=\"Swap 分区大小调整\"></a>Swap 分区大小调整</h2><p>vps磁盘空间比较小，<code>var/swapfile</code>占用空间比较大，调整swap的大小，减小这个文件占用的空间</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">检查 swap 大小<br>free -m<br>关闭swap<br>swapoff -a<br>1.创建交换分区的文件:增加2G大小的交换分区<br>dd if=/dev/zero of=/var/swapfile bs=1M count=2048<br>2.设置交换文件<br>mkswap /var/swapfile<br>3.启用交换分区文件<br>swapon /var/swapfile<br>4.在/etc/fstab添加<br>echo &#x27;/var/swapfile swap swap defaults 0 0&#x27;&gt;&gt;/etc/fstab<br>5.检查<br>free -m<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"CPU调频\"><a href=\"#CPU调频\" class=\"headerlink\" title=\"CPU调频\"></a>CPU调频</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前CPU使用什么 驱动</span><br>cpufreq-info<br>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">常见的有 intel_cpufreq acpu_freq</span><br><br>analyzing CPU 0:<br>  driver: intel_cpufreq<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看可以使用的模式</span><br>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前运行的模式</span><br>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor<br><br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Performance</td>\n<td>性能模式 保持以最大频率运行</td>\n</tr>\n<tr>\n<td>powersave</td>\n<td>只会保持最低频率，节能省电</td>\n</tr>\n<tr>\n<td>userspace</td>\n<td>自定义频率</td>\n</tr>\n<tr>\n<td>ondemand</td>\n<td>一有cpu计算量的任务，就会立即达到最大频率运行，等执行完毕就立即回到最低频率</td>\n</tr>\n<tr>\n<td>conservative</td>\n<td>根据负载状态自动在频率上下限调整 对比于ondemand 他的调整更滞后，更加柔和</td>\n</tr>\n<tr>\n<td>Schedutil</td>\n<td>…</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>参考<a href=\"https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt\">https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"CPU-Driver的修改\"><a href=\"#CPU-Driver的修改\" class=\"headerlink\" title=\"CPU Driver的修改\"></a>CPU Driver的修改</h3><p>修改 <code>/etc/default/grub</code> 可以修改Driver的类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi /etc/default/grub<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">找到quiet那个位置，后面加空格，再加 intel_pstate=<span class=\"hljs-built_in\">disable</span> ，就可以改成 acpu_freq 类型</span><br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;<br><span class=\"hljs-meta prompt_\">-&gt;</span><span class=\"language-bash\"></span><br><span class=\"language-bash\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"hljs-string\">&quot;quiet intel_pstate=disable&quot;</span></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">更新</span><br>update-grub<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">reboot 生效</span><br>reboot<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"intel-cpufreq-TYPE\"><a href=\"#intel-cpufreq-TYPE\" class=\"headerlink\" title=\"intel_cpufreq TYPE\"></a>intel_cpufreq TYPE</h3><p>在这个模式下可以通过修改<code>/etc/default/cpufrequtils</code>文件来修改cpu运行模式和最大最小频率</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi /etc/default/cpufrequtils<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"acpu-freq-TYPE\"><a href=\"#acpu-freq-TYPE\" class=\"headerlink\" title=\"acpu_freq TYPE\"></a>acpu_freq TYPE</h3><p>在这个模式下可以通过修改<code>/etc/init.d/cpufrequtils</code>文件来修改cpu运行模式和最大最小频率</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi /etc/init.d/cpufrequtils<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启服务</span><br>systemctl daemon-reload<br>/etc/init.d/cpufrequtils restart<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"wget-代理\"><a href=\"#wget-代理\" class=\"headerlink\" title=\"wget 代理\"></a>wget 代理</h2><p><strong>方法一、在环境变量中设置代理</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">http_proxy</span>=http://127.0.0.1:8087<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法二、使用配置文件</strong></p>\n<p>为wget使用代理，可以直接修改&#x2F;etc&#x2F;wgetrc，也可以在主文件夹下新建.wgetrc，并编辑相应内容，本文采用后者。</p>\n<p>将&#x2F;etc&#x2F;wgetrc中与proxy有关的几行复制到~&#x2F;.wgetrc，并做如下修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">You can <span class=\"hljs-built_in\">set</span> the default proxies <span class=\"hljs-keyword\">for</span> Wget to use <span class=\"hljs-keyword\">for</span> http, https, and ftp.</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">They will override the value <span class=\"hljs-keyword\">in</span> the environment.</span><br>https_proxy = http://127.0.0.1:8087/<br>http_proxy = http://127.0.0.1:8087/<br>ftp_proxy = http://127.0.0.1:8087/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">If you <span class=\"hljs-keyword\">do</span> not want to use proxy at all, <span class=\"hljs-built_in\">set</span> this to off.</span><br>use_proxy = on<br></code></pre></td></tr></table></figure>\n\n<p> 这里 use_proxy &#x3D; on 开启了代理，如果不想使用代理，每次都修改此文件未免麻烦，我们可以在命令中使用-Y参数来临时设置：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">-Y, --proxy=<span class=\"hljs-keyword\">on</span>/<span class=\"hljs-keyword\">off</span>           打开或关闭代理<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法三、使用-e参数</strong></p>\n<p>wget本身没有专门设置代理的命令行参数，但是有一个”-e”参数，可以在命令行上指定一个原本出现在”.wgetrc”中的设置。于是可以变相在命令行上指定代理：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">-e, <span class=\"hljs-params\">--execute=COMMAND</span>   执行`<span class=\"hljs-string\">.wgetrc</span>&#x27;格式的命令<br></code></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">wget</span> -c -r -np -k -L -p -e <span class=\"hljs-string\">&quot;http_proxy=http://127.0.0.1:8087&quot;</span> http://www.subversion.org.cn/svnbook/<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span>/<br></code></pre></td></tr></table></figure>\n\n<p> 这种方式对于使用一个临时代理尤为方便。</p>\n<h2 id=\"sudo-复杂语句\"><a href=\"#sudo-复杂语句\" class=\"headerlink\" title=\"sudo 复杂语句\"></a>sudo 复杂语句</h2><p>使用管道执行语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &quot;echo 12000 &gt; /dev/null&quot; | sudo sh<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"串口终端-显示不全-stty设置终端宽度\"><a href=\"#串口终端-显示不全-stty设置终端宽度\" class=\"headerlink\" title=\"串口终端 显示不全 stty设置终端宽度\"></a>串口终端 显示不全 stty设置终端宽度</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"hljs-built_in\">stty</span> size可以查看行和列数</span><br>stty size<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">使用<span class=\"hljs-built_in\">stty</span>设置列宽</span><br>stty cols 200<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置 行数</span><br>stty columns 80<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.mkssoftware.com/docs/man1/stty.1.asp\">参考 tty 手册</a></p>\n<h2 id=\"pigz-多线程压缩解压缩\"><a href=\"#pigz-多线程压缩解压缩\" class=\"headerlink\" title=\"pigz 多线程压缩解压缩\"></a>pigz 多线程压缩解压缩</h2><blockquote>\n<p>  Pigz 的功能与 gzip 的功能相同，但在压缩时将工作分散到多个处理器和内核上。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pigz -p 16 --fast<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"linux-备份\"><a href=\"#linux-备份\" class=\"headerlink\" title=\"linux 备份\"></a>linux 备份</h2><p><strong>dd 指令备份</strong></p>\n<blockquote>\n<p>  用 dd 指令全卡备份 有数据无数据的位置都会备份</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看块设备</span><br>sudo lsblk<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看disk</span><br>sudo fdisk -l <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将文件备份</span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">status=progress 是显示进度条</span><br>sudo dd if=/dev/sd&lt;x&gt; status=progress | gzip&gt;./sd_card_backup.gz<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">调用多核压缩</span><br>sudo dd if=/dev/sd&lt;x&gt; status=progress | pigz -p 16 --fast &gt;./sd_card_backup.gz<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">linux 下还原</span><br>sudo gzip -dc ./sd_card_backup.gz | sudo dd of=/dev/sd&lt;x&gt; bs=1M status=progress<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  在找资料的途中发现，<a href=\"https://doc.embedfire.com/linux/imx6/base/zh/latest/building_image/image_backup.html\">野火的linux教程</a>里面有一个骚操作。</p>\n<p>  通过<code>df -h</code> 计算出来 boot 分区和 rootfs两个分区占用的大小。</p>\n<p>  在使用dd指令的时候仅复制特定大小的区块。</p>\n<p>  <code>sudo dd if=/dev/sdc of=./imx6ull_backup.img count=1024 bs=1M conv=sync</code>，比如这里就是复制1G大小。</p>\n<blockquote>\n<p>  文件系统可能会把文件存在存储设备块的后面地址吗？如果会这种方式岂不是会丢文件？</p>\n</blockquote>\n</blockquote>\n<p><strong>备份文件系统</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">tar.gz格式</span><br>tar cvpzf system_backup.tar.gz / --exclude=/proc --exclude=/lost+found --exclude=/system_backup.tar.gz --exclude=/mnt --exclude=/sys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">tar.bz2格式</span><br>tar cvpjf system_backup.tar.bz2 / --exclude=/proc --exclude=/lost+found --exclude=/system_backup.tar.bz2 --exclude=/mnt --exclude=/sys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">恢复系统</span><br>cd /<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">上传文件到根目录下</span><br>tar xvpfz system_backup.tar.gz -C /<br>或<br>tar xvpfj system_backup.tar.bz2 -C /<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建备份时排除的目录</span><br>mkdir proc<br>mkdir lost+found<br>mkdir mnt<br>mkdir sys<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"bash-显示-git-分支名\"><a href=\"#bash-显示-git-分支名\" class=\"headerlink\" title=\"bash 显示 git 分支名\"></a>bash 显示 git 分支名</h2><p>在<code>~/.bashrc</code>文件末尾添加如下代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">function git_branch &#123;<br>    branch=&quot;`git branch 2&gt;/dev/null | grep &quot;^\\*&quot; | sed -e &quot;s/^\\*\\ //&quot;`&quot;<br>    if [ &quot;$&#123;branch&#125;&quot; != &quot;&quot; ];then<br>        if [ &quot;$&#123;branch&#125;&quot; = &quot;(no branch)&quot; ];then<br>            branch=&quot;(`git rev-parse --short HEAD`...)&quot;<br>        fi<br>        echo &quot; ($branch)&quot;<br>    fi<br>&#125;<br>export PS1=&#x27;\\u@\\h \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ &#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"SCP-文件传输\"><a href=\"#SCP-文件传输\" class=\"headerlink\" title=\"SCP 文件传输\"></a>SCP 文件传输</h2><p>目录加<code>-r</code>参数即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">从服务器上下载文件</span><br>scp username@servername:/path/filename /path/filename<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">上传本地文件到服务器</span><br>scp /path/filename username@servername:/path/filename<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">下载整个目录</span><br>scp -r username@servername:/path/ /path<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"系统信息查看\"><a href=\"#系统信息查看\" class=\"headerlink\" title=\"系统信息查看\"></a>系统信息查看</h2><ol>\n<li>◆<strong>uname</strong> - 显示内核信息：<ul>\n<li><code>uname -a</code>：显示所有信息，包括内核版本、主机名、处理器类型等。</li>\n</ul>\n</li>\n<li>◆<strong>lsb_release</strong> - 显示Linux标准基础（LSB）版本信息：<ul>\n<li><code>lsb_release -a</code>：显示LSB和发行版信息。</li>\n</ul>\n</li>\n<li><strong>hostnamectl</strong> - 显示系统主机名和系统信息：<ul>\n<li><code>hostnamectl</code>：显示当前的主机名、操作系统名称、内核版本等。</li>\n</ul>\n</li>\n<li><strong>cat &#x2F;etc&#x2F;release</strong> - 显示发行版信息：<ul>\n<li><code>cat /etc/release</code>：显示类似于lsb_release的信息，但直接从文件中读取。</li>\n</ul>\n</li>\n<li>◆<strong>df</strong> - 显示磁盘空间使用情况：<ul>\n<li><code>df -h</code>：以人类可读的格式显示磁盘空间。</li>\n</ul>\n</li>\n<li>◆<strong>free</strong> - 显示内存使用情况：<ul>\n<li><code>free -m</code>：以MB为单位显示内存使用情况。</li>\n</ul>\n</li>\n<li>◆<strong>top</strong> 或 <strong>htop</strong> - 实时显示系统进程和资源使用情况。</li>\n<li><strong>vmstat</strong> - 显示虚拟内存统计信息。</li>\n<li><strong>iostat</strong> - 显示CPU和输入&#x2F;输出统计信息。</li>\n<li><strong>dmesg</strong> - 显示或控制内核环形缓冲区。</li>\n<li><strong>ifconfig</strong> 或 <strong>ip addr</strong> - 显示网络接口配置。</li>\n<li>◆<strong>lscpu</strong> - 显示CPU信息。</li>\n<li>◆<strong>lsblk</strong> - 列出所有可用的块设备。</li>\n<li>◆<strong>lspci</strong> - 列出所有PCI设备，网卡、硬盘、显示器…。</li>\n<li>◆<strong>lsusb</strong> - 列出所有USB设备。</li>\n<li>◆<strong>lsmod</strong> - 显示已加载的内核模块。</li>\n<li>◆<strong>uptime</strong> - 查询平均负载</li>\n</ol>\n<h2 id=\"sysbench\"><a href=\"#sysbench\" class=\"headerlink\" title=\"sysbench\"></a>sysbench</h2><p><code>sysbench</code> 是一款开源的多用途基准测试实用程序，它可以评估包括 CPU、内存、I&#x2F;O 和数据库（如 MySQL）在内的多个系统组件的性能。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">对cpu进行测试 使用8个线程 测试时间60s</span> <br>sysbench cpu --threads=8 --time=60  run<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"RaspberryPI\"><a href=\"#RaspberryPI\" class=\"headerlink\" title=\"RaspberryPI\"></a>RaspberryPI</h1><h2 id=\"密码\"><a href=\"#密码\" class=\"headerlink\" title=\"密码\"></a>密码</h2><h3 id=\"树莓派OS-默认\"><a href=\"#树莓派OS-默认\" class=\"headerlink\" title=\"树莓派OS 默认\"></a>树莓派OS 默认</h3><blockquote>\n<p>   pi<br>  raspberry</p>\n</blockquote>\n<p>注意！！</p>\n<blockquote>\n<p>  新版树莓派的镜像将没有默认密码</p>\n<p>  <a href=\"https://www.raspberrypi.com/news/raspberry-pi-bullseye-update-april-2022/\">参考</a></p>\n<p>  我们只需要将存储卡插入到PC在<code>boot</code>盘下新建文件<code>userconf</code>或者<code>userconf.txt</code></p>\n<p>  文件内容是<code>username:encrypted-password</code></p>\n<p>  <code>encrypted-password</code>是通过这个命令运算来的</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;mypassword&#x27; | openssl passwd -6 -stdin<br></code></pre></td></tr></table></figure>\n\n<p>  用户名是<code>pi</code>密码是<code>raspberry</code> 那么文件内容形如下面这样</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pi:$6$LXbLeu63.T9FIeWq$rdm2RMzZQLjs1nDI7wiPEx8UKrVWpcEuhSvjFTR4smGXqO9bMow5Imkdgzk.PKdxf.sjxy.dKYDIXneJ0INst/<br></code></pre></td></tr></table></figure>\n\n</blockquote>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"WiFi-网络配置\"><a href=\"#WiFi-网络配置\" class=\"headerlink\" title=\"WiFi 网络配置\"></a>WiFi 网络配置</h3><p>用户可以在未启动树莓派的状态下单独修改 &#x2F;boot&#x2F;wpa_supplicant.conf 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 wpa_supplicant.conf 配置文件连接 WiFi 设备。</p>\n<p>操作方法简单：将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 &#x2F;boot 目录下新建 wpa_supplicant.conf 文件，按照下面的参考格式填入内容并保存 <code>wpa_supplicant.conf</code> 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">country=CN<br>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=1<br> <br>network=&#123;<br>ssid=&quot;WiFi-A&quot;\t\t\t#ssid:网络的ssid<br>psk=&quot;12345678&quot;\t\t\t#psk:密码<br>key_mgmt=WPA-PSK<br>priority=1\t\t\t\t#priority:连接优先级，数字越大优先级越高（不可以是负数）<br>&#125;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">隐藏WiFi</span><br>network=&#123;<br>ssid=&quot;WiFi-B&quot;<br>psk=&quot;12345678&quot;<br>key_mgmt=WPA-PSK<br>priority=2<br>scan_ssid=1\t\t\t\t#scan_ssid:连接隐藏WiFi时需要指定该值为1<br>&#125;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">WiFi 没有密码</span><br>network=&#123;<br>ssid=&quot;你的无线网络名称（ssid）&quot;<br>key_mgmt=NONE<br>&#125;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的 WiFi 使用WEP加密</span><br>network=&#123;<br>ssid=&quot;你的无线网络名称（ssid）&quot;<br>key_mgmt=NONE<br>wep_key0=&quot;你的wifi密码&quot;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"开启-SSH-服务\"><a href=\"#开启-SSH-服务\" class=\"headerlink\" title=\"开启 SSH 服务\"></a>开启 SSH 服务</h3><ul>\n<li>在boot盘下新建<code>ssh</code>文件即可开启ssh</li>\n</ul>\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 树莓派相关配置</span><br><span class=\"hljs-built_in\">sudo</span> raspi-config<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"开关机\"><a href=\"#开关机\" class=\"headerlink\" title=\"开关机\"></a>开关机</h2><h3 id=\"安全关机：\"><a href=\"#安全关机：\" class=\"headerlink\" title=\"安全关机：\"></a>安全关机：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo shutdown -h now<br>sudo halt<br>sudo poweroff<br>sudo init 0<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安全重启：\"><a href=\"#安全重启：\" class=\"headerlink\" title=\"安全重启：\"></a>安全重启：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo reboot<br>shutdown -r now<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"GPIO\"><a href=\"#GPIO\" class=\"headerlink\" title=\"GPIO\"></a>GPIO</h2><p><img src=\"/2020/d4436089/GPIO1.png\" alt=\"GPIO1\"></p>\n<p><img src=\"/2020/d4436089/image-20210801204738591.png\" alt=\"image-20210801204738591\"></p>\n<h1 id=\"RaspberryPI-Note\"><a href=\"#RaspberryPI-Note\" class=\"headerlink\" title=\"RaspberryPI Note\"></a>RaspberryPI Note</h1><h2 id=\"wiringPi-GPIO库\"><a href=\"#wiringPi-GPIO库\" class=\"headerlink\" title=\"wiringPi GPIO库\"></a>wiringPi GPIO库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /tmp<br>wget https://project-downloads.drogon.net/wiringpi-latest.deb<br>sudo dpkg -i wiringpi-latest.deb<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看GPIO编码</span><br>gpio readall<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">树莓派4b 需要版本大于2.52</span><br>gpio -v<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"shell操作\"><a href=\"#shell操作\" class=\"headerlink\" title=\"shell操作\"></a>shell操作</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><p>进入<code>/sys/class/gpio/</code>目录并查看文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /sys/class/gpio/<br>ls<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/d4436089/1889022-20200410121643886-1233996502.png\" alt=\"img\"></p>\n<p>目录<code>export</code>为创建，<code>unexport</code>为删除</p>\n<p>将gpio18重定向用户定义设备，生成gpio18目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo echo 18 &gt; export<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/d4436089/1889022-20200410132825370-786913267.png\" alt=\"img\"></p>\n<p>进入<code>gpio18</code>目录并查看文件</p>\n<p><img src=\"/2020/d4436089/1889022-20200410134354086-537662427.png\" alt=\"img\"></p>\n<p><code>direction</code>设置引脚方向，输入还是输出</p>\n<p><code>value</code>设置引脚状态，高电平还是低电平</p>\n<h4 id=\"输入状态\"><a href=\"#输入状态\" class=\"headerlink\" title=\"输入状态\"></a>输入状态</h4><p>设置引脚状态为输入状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo echo in &gt; direction<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/d4436089/1889022-20200410134655161-2081521744.png\" alt=\"img\"></p>\n<p>查看引脚高低电平</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat value <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输出状态\"><a href=\"#输出状态\" class=\"headerlink\" title=\"输出状态\"></a>输出状态</h4><p>设置引脚状态为输出状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo echo out &gt; direction<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/d4436089/1889022-20200410134856417-744239525.png\" alt=\"img\"></p>\n<p>设置输出高电平</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo echo 1 &gt; value<br></code></pre></td></tr></table></figure>\n\n<p>设置输出低电平</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo echo 0 &gt; value<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>测试完毕之后返回<code>/sys/class/gpio/</code>目录，并将gpio注销</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /sys/class/gpio/<br>sudo echo 18 &gt; /sys/class/gpio/unexport<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"增加开机启动项-1\"><a href=\"#增加开机启动项-1\" class=\"headerlink\" title=\"增加开机启动项\"></a>增加开机启动项</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo nano /etc/rc.local<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在打开的rc.local找到<span class=\"hljs-built_in\">exit</span> 0，在<span class=\"hljs-built_in\">exit</span> 0 之前添加即可</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">执行这段代码时是使用root用户权限的，注意当前的用户权限，以免因权限问题导致脚本执行失败。</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"树莓派自动挂载U盘\"><a href=\"#树莓派自动挂载U盘\" class=\"headerlink\" title=\"树莓派自动挂载U盘\"></a>树莓派自动挂载U盘</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">打开文件 添加以下 这个带有超时,可以避免拔掉U盘开不了机</span><br>sudo nano /etc/fstab<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">/dev/sda1 /mnt/usb    auto     defaults,nofail,x-systemd.device-timeout=1,noatime  0   0</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看温度\"><a href=\"#查看温度\" class=\"headerlink\" title=\"查看温度\"></a>查看温度</h2><p>使用watch命令每秒打印一次cpu温度信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">watch -n 1 cat /sys/class/thermal/thermal_zone0/temp<br></code></pre></td></tr></table></figure>\n\n<p>由于 Raspberry Pi 系列上使用的 SoC 的架构，以及在 Raspberry Pi OS 发行版中使用上游温度监控代码，基于 Linux 的温度测量可能不准确。但是，该<code>vcgencmd</code>命令在直接与 GPU 通信时提供了当前 SoC 温度的准确和即时读数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vcgencmd measure_temp<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"远程桌面\"><a href=\"#远程桌面\" class=\"headerlink\" title=\"远程桌面\"></a>远程桌面</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install xrdp<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"固定IP-1\"><a href=\"#固定IP-1\" class=\"headerlink\" title=\"固定IP\"></a>固定IP</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> nano /etc/dhcpcd.conf<br><br><span class=\"hljs-comment\"># 找到如下内容 对应修改即可</span><br><span class=\"hljs-comment\"># Example static IP configuration:</span><br><span class=\"hljs-comment\">#interface eth0</span><br><span class=\"hljs-comment\">#static ip_address=192.168.0.10/24</span><br><span class=\"hljs-comment\">#static ip6_address=fd51:42f8:caae:d92e::ff/64</span><br><span class=\"hljs-comment\">#static routers=192.168.0.1</span><br><span class=\"hljs-comment\">#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1</span><br><br><span class=\"hljs-comment\"># eg.</span><br>interface wlan0<br>static ip_address=192.168.31.222/24<br>static routers=192.168.31.254<br>static domain_name_servers=223.5.5.5 192.168.31.254<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"I2C相关\"><a href=\"#I2C相关\" class=\"headerlink\" title=\"I2C相关\"></a>I2C相关</h2><h3 id=\"修改I2C总线速度\"><a href=\"#修改I2C总线速度\" class=\"headerlink\" title=\"修改I2C总线速度\"></a>修改I2C总线速度</h3><p><strong>启用I2C接口</strong></p>\n<p><code>sudo raspi-config</code></p>\n<p>命令将启动raspi-config实用程序。选择“Interfacing Options”:</p>\n<p>将光标移动到“P5 I2C”，选中，然后“select”。</p>\n<p><strong>编辑Config.txt文件设置I2C总线速度</strong></p>\n<p><code>sudo nano /boot/config.txt</code></p>\n<p>查找包含“<code>dtparam=i2c_arm=on</code>”的行，添加“<code>i2c_arm_baudrate=400000</code>”，其中<code>400000</code>是新设置的速度(400kbit &#x2F;s)，注意i2c前面的逗号。完整代码如下：</p>\n<p><code>dtparam=i2c_arm=on,i2c_arm_baudrate=400000</code></p>\n<p>这样可以启用I2C总线的同时，也完成了新波特率的设置。编辑完成后，使用CTRL-X，然后选择Y，保存文件并退出，<strong>并重新启动</strong>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Get-AppxPackage *WindowsStore* | Select Name, PackageFullName<br><br>https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx<br>https://aka.ms/Microsoft.VCLibs.x86.14.00.Desktop.appx<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "linux"
            ]
        }
    ]
}