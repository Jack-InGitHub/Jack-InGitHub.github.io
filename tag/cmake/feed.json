{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"cmake\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-30T02:23:15.000Z",
            "content_html": "<h1 id=\"LVGL\"><a href=\"#LVGL\" class=\"headerlink\" title=\"LVGL\"></a>LVGL</h1><p>Github：<a href=\"https://github.com/lvgl/lvgl/\">https://github.com/lvgl/lvgl/</a></p>\n<p>LVGL：<a href=\"https://lvgl.io/\">https://lvgl.io/</a></p>\n<p>LVGL（轻巧多功能图形库）是一个免费的开源图形库，提供创建具有易于使用的图形元素、精美的视觉效果和低内存占用的嵌入式 GUI 所需的一切。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>丰富且强大的模块化<a href=\"https://docs.lvgl.io/master/widgets/index.html\">图形组件</a>：按钮 (buttons)、图表 (charts)、列表 (lists)、滑动条 (sliders)、图片 (images) 等</li>\n<li>高级的图形引擎：动画、抗锯齿、透明度、平滑滚动、图层混合等效果</li>\n<li>支持多种<a href=\"https://docs.lvgl.io/master/overview/indev.html\">输入设备</a>：触摸屏、 键盘、编码器、按键等</li>\n<li>支持<a href=\"https://docs.lvgl.io/master/overview/display.html\">多显示设备</a></li>\n<li>不依赖特定的硬件平台，可以在任何显示屏上运行</li>\n<li>配置可裁剪（最低资源占用：64 kB Flash，16 kB RAM）</li>\n<li>基于UTF-8的多语种支持，例如中文、日文、韩文、阿拉伯文等</li>\n<li>可以通过<a href=\"https://docs.lvgl.io/master/overview/style.html\">类CSS</a>的方式来设计、布局图形界面（例如：<a href=\"https://docs.lvgl.io/master/layouts/flex.html\">Flexbox</a>、<a href=\"https://docs.lvgl.io/master/layouts/grid.html\">Grid</a>）</li>\n<li>支持操作系统、外置内存、以及硬件加速（LVGL已内建支持STM32 DMA2D、SWM341 DMA2D、NXP PXP和VGLite）</li>\n<li>即便仅有<a href=\"https://docs.lvgl.io/master/porting/display.html\">单缓冲区(frame buffer)</a>的情况下，也可保证渲染如丝般顺滑</li>\n<li>全部由C编写完成，并支持C++调用</li>\n<li>支持Micropython编程，参见：<a href=\"https://blog.lvgl.io/2019-02-20/micropython-bindings\">LVGL API in Micropython</a></li>\n<li>支持<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>仿真，可以无硬件依托进行开发</li>\n<li>丰富详实的<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>详尽的<a href=\"http://docs.lvgl.io/\">文档</a>以及API参考手册，可线上查阅或可下载为PDF格式</li>\n</ul>\n<h3 id=\"硬件要求\"><a href=\"#硬件要求\" class=\"headerlink\" title=\"硬件要求\"></a>硬件要求</h3><table>\n<thead>\n<tr>\n<th><strong>要求</strong></th>\n<th><strong>最低要求</strong></th>\n<th><strong>建议要求</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>架构</strong></td>\n<td>16、32、64位微控制器或微处理器</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>时钟</strong></td>\n<td>&gt; 16 MHz</td>\n<td>&gt; 48 MHz</td>\n</tr>\n<tr>\n<td><strong>Flash&#x2F;ROM</strong></td>\n<td>&gt; 64 kB</td>\n<td>&gt; 180 kB</td>\n</tr>\n<tr>\n<td><strong>Static RAM</strong></td>\n<td>&gt; 16 kB</td>\n<td>&gt; 48 kB</td>\n</tr>\n<tr>\n<td><strong>Draw buffer</strong></td>\n<td>&gt; 1 × <em>hor. res.</em> pixels</td>\n<td>&gt; 1&#x2F;10屏幕大小</td>\n</tr>\n<tr>\n<td><strong>编译器</strong></td>\n<td>C99或更新</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><em>注意：资源占用情况与具体硬件平台、编译器等因素有关，上表中仅给出参考值</em></p>\n<h1 id=\"如何入门\"><a href=\"#如何入门\" class=\"headerlink\" title=\"如何入门\"></a>如何入门</h1><p>请按照如下顺序来学习LVGL：</p>\n<ol>\n<li>使用<a href=\"https://lvgl.io/demos\">网页在线例程</a>来体验LVGL</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/intro/index.html\">简介</a>章节来初步了解LVGL</li>\n<li>再来阅读一下文档快速<a href=\"https://docs.lvgl.io/master/get-started/quick-overview.html\">快速概览</a>章节来了解LVGL的基本知识</li>\n<li>学习如何使用<a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">模拟器</a>来在电脑上仿真LVGL</li>\n<li>试着动手实践一些<a href=\"https://github.com/lvgl/lvgl/tree/master/examples\">例程</a></li>\n<li>参考<a href=\"https://docs.lvgl.io/master/porting/index.html\">移植指南</a>尝试将LVGL移植到一块开发板上，LVGL也已经提供了一些移植好的<a href=\"https://github.com/lvgl?q=lv_port_\">工程</a></li>\n<li>仔细阅读文档<a href=\"https://docs.lvgl.io/master/overview/index.html\">总览</a>章节来更加深入的了解和熟悉LVGL</li>\n<li>浏览文档<a href=\"https://docs.lvgl.io/master/widgets/index.html\">组件(Widgets)</a>章节来了解如何使用它们</li>\n<li>如果你有问题可以到LVGL<a href=\"http://forum.lvgl.io/\">论坛</a>提问</li>\n<li>阅读文档<a href=\"https://docs.lvgl.io/master/CONTRIBUTING.html\">如何向社区贡献</a>章节来看看你能帮LVGL社区做些什么，以促进LVGL软件质量的不断提高</li>\n</ol>\n<h1 id=\"模拟器入门\"><a href=\"#模拟器入门\" class=\"headerlink\" title=\"模拟器入门\"></a>模拟器入门</h1><p>您可以<strong>仅使用PC试用</strong>LVGL（即没有任何开发板）。LVGL将在PC上的模拟器环境中运行，任何人都可以编写和试验真正的LVGL应用程序。</p>\n<p>在PC上使用模拟器具有以下优点：</p>\n<ul>\n<li>硬件独立 - 编写代码，在PC上运行它，并在显示器上查看结果。</li>\n<li>跨平台 - 任何Windows，Linux或macOS系统都可以运行PC模拟器。</li>\n<li>可移植性 - 编写的代码是可移植的，这意味着您可以在迁移到嵌入式硬件时简单地复制它。</li>\n<li>易于验证 - 模拟器对于报告错误也非常有用，因为它为每个用户提供了一个通用平台。因此，最好在模拟器中重现错误并在<a href=\"https://forum.lvgl.io/\">论坛</a>中使用该代码片段。</li>\n</ul>\n<p><a href=\"https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html\">PC 上的模拟器 — LVGL 文档</a></p>\n",
            "tags": [
                "linux",
                "cmake"
            ]
        },
        {
            "id": "https://www.oikiou.top/2023/3c5e47f1/",
            "url": "https://www.oikiou.top/2023/3c5e47f1/",
            "title": "CMake的使用",
            "date_published": "2023-03-29T13:57:15.000Z",
            "content_html": "<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>CMake是开源、跨平台的构建工具，可以让我们通过编写简单的配置文件去生成本地的Makefile，这个配置文件是<strong>独立于运行平台和编译器</strong>的，这样就不用亲自去编写Makefile了，而且配置文件可以直接拿到其它平台上使用，无需修改，非常方便。</p>\n<p><a href=\"https://blog.csdn.net/whahu1989/article/details/82078563\">Linux下CMake简明教程_linux中cmake_爱就是恒久忍耐的博客-CSDN博客</a></p>\n<h1 id=\"CMake-的安装\"><a href=\"#CMake-的安装\" class=\"headerlink\" title=\"CMake 的安装\"></a>CMake 的安装</h1><h2 id=\"Ubuntu下的安装\"><a href=\"#Ubuntu下的安装\" class=\"headerlink\" title=\"Ubuntu下的安装\"></a>Ubuntu下的安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install cmake</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cmake --version</span><br>cmake version 3.16.3<br>.....<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这样就安装好了</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CMake语法\"><a href=\"#CMake语法\" class=\"headerlink\" title=\"CMake语法\"></a>CMake语法</h1><h2 id=\"最简单的版本\"><a href=\"#最简单的版本\" class=\"headerlink\" title=\"最简单的版本\"></a>最简单的版本</h2><blockquote>\n<p>  环境：只有一个main.c的<code>hello world</code>文件，没有任何依赖。</p>\n</blockquote>\n<p>在<code>main.c</code>的同级目录下建立一个文件，文件名叫<code>CMakeFileLists.txt</code>，这个文件名不能变更，只能是这个形式。</p>\n<p>文件内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-comment\"># cmake的最低版本要求是2.8</span><br><span class=\"hljs-keyword\">cmake_minimum_required</span>(VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-comment\"># 工程名</span><br><span class=\"hljs-keyword\">project</span>(download)<br><br><span class=\"hljs-comment\"># 使用main.c这个源文件 生成elf文件 生成的文件名字叫main</span><br><span class=\"hljs-keyword\">add_executable</span>(main, main.c)<br></code></pre></td></tr></table></figure>\n\n<p>我们在当前目录（<code>main.c</code>和<code>CMakeFileLists.txt</code>的目录下）运行<code>cmake .</code>，含义就是在当前目录下执行cmake。执行成功后会生成<code>Makefils</code>以及一些cmake运行时自动生成的文件。</p>\n<p>这个时候我们使用命令<code>make</code>就可以看到正确编译了。</p>\n<h2 id=\"一个目录下的多个源文件\"><a href=\"#一个目录下的多个源文件\" class=\"headerlink\" title=\"一个目录下的多个源文件\"></a>一个目录下的多个源文件</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 当前目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span>(. SRC_LIST)<br><br><span class=\"hljs-comment\"># 在add_executable里调用SRC_LIST（注意调用变量时的写法）</span><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<p><code>aux_source_directory()</code>也存在弊端，它<strong>会把指定目录下的所有源文件都加进来</strong>，可能会加入一些我们不需要的文件，此时我们可以使用<strong>set命令</strong>去新建变量来存放需要的源文件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># set 命令设置变量存放源文件</span><br><span class=\"hljs-keyword\">set</span>( SRC_LIST<br>\t ./main.c<br>\t ./testFunc1.c<br>\t ./testFunc.c)<br><br><span class=\"hljs-keyword\">add_executable</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不同目录下的多个源文件\"><a href=\"#不同目录下的多个源文件\" class=\"headerlink\" title=\"不同目录下的多个源文件\"></a>不同目录下的多个源文件</h2><blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">2.8</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-comment\"># 修改输出位置</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUT_PATH和PROJECT_SOURCE_DIR是CMake自带的预定义变量</span><br><span class=\"hljs-comment\"># EXECUTABLE_OUTPUT_PATH ：目标二进制可执行文件的存放位置</span><br><span class=\"hljs-comment\"># PROJECT_SOURCE_DIR：工程的根目录</span><br><span class=\"hljs-keyword\">set</span> (EXECUTABLE_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class=\"hljs-comment\"># 当前src目录下的源文件存列表存放到变量SRC_LIST里</span><br><span class=\"hljs-keyword\">aux_source_directory</span> (src SRC_LIST)<br><br><span class=\"hljs-comment\"># 将include文件夹设定为头文件搜索路径</span><br><span class=\"hljs-comment\"># 该命令是用来向工程添加多个指定头文件的搜索路径，路径之间用空格分隔。</span><br><span class=\"hljs-keyword\">include_directories</span> (<span class=\"hljs-keyword\">include</span>)<br><br><span class=\"hljs-comment\"># 生成elf文件</span><br><span class=\"hljs-keyword\">add_executable</span> (main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"静态库和动态库的编译\"><a href=\"#静态库和动态库的编译\" class=\"headerlink\" title=\"静态库和动态库的编译\"></a>静态库和动态库的编译</h2><p>编译出动态库和静态库，然后等着让其它程序去使用。</p>\n<blockquote>\n<p>  文件结构</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./bin<br>./build<br>./lib<br>./include<br>\txx.h<br>\txxx.h<br>./src<br>\txxx.c<br>\txx.c<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">cmake_minimum_required</span> (VERSION <span class=\"hljs-number\">3.5</span>)<br><br><span class=\"hljs-keyword\">project</span> (demo)<br><br><span class=\"hljs-keyword\">set</span> (SRC_LIST <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/xxx.c)<br><br><span class=\"hljs-comment\"># 生成动态库或静态库</span><br><span class=\"hljs-comment\"># 第1个参数指定库的名字；</span><br><span class=\"hljs-comment\"># 第2个参数决定是动态还是静态，如果没有就默认静态；</span><br><span class=\"hljs-comment\"># 第3个参数指定生成库的源文件</span><br><span class=\"hljs-keyword\">add_library</span> (testFunc_shared SHARED <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><span class=\"hljs-keyword\">add_library</span> (testFunc_static STATIC <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><br><span class=\"hljs-comment\"># 设置最终生成的库的名称，还有其它功能，如设置库的版本号等等</span><br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_shared PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><span class=\"hljs-keyword\">set_target_properties</span> (testFunc_static PROPERTIES OUTPUT_NAME <span class=\"hljs-string\">&quot;testFunc&quot;</span>)<br><br><span class=\"hljs-keyword\">set</span> (LIBRARY_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对库进行链接\"><a href=\"#对库进行链接\" class=\"headerlink\" title=\"对库进行链接\"></a>对库进行链接</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class=\"hljs-variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)<br><br><span class=\"hljs-keyword\">target_link_libraries</span> (main <span class=\"hljs-variable\">$&#123;TESTFUNC_LIB&#125;</span>)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>find_library: 在指定目录下查找指定库，并把<strong>库的绝对路径</strong>存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是HINTS，第4个参数是路径，其它用法可以参考cmake文档</li>\n<li>target_link_libraries: 把目标文件与库文件进行链接</li>\n</ul>\n<p>ps：在lib目录下有testFunc的静态库和动态库，find_library(TESTFUNC_LIB testFunc …默认是查找动态库，如果想直接指定使用动态库还是静态库，可以写成find_library(TESTFUNC_LIB libtestFunc.so …或者find_library(TESTFUNC_LIB libtestFunc.a …</p>\n<p>ps： 查看elf文件使用了哪些库，可以使用readelf -d .&#x2F;xx来查看</p>\n<p>之前本节教程使用的是库查找方法是link_directories，但是很多读者反映运行时有问题，本人去官方文档上查了下，发现不建议使用了，推荐使用find_library或者find_package</p>\n<h2 id=\"添加编译选项\"><a href=\"#添加编译选项\" class=\"headerlink\" title=\"添加编译选项\"></a>添加编译选项</h2><p>有时编译程序时想添加一些编译选项，如-Wall，-std&#x3D;c++11等，就可以使用add_compile_options来进行操作。</p>\n<p><code>add_compile_options(-std=c++11 -Wall) </code></p>\n<h2 id=\"更加完善的目录结构及编译选项\"><a href=\"#更加完善的目录结构及编译选项\" class=\"headerlink\" title=\"更加完善的目录结构及编译选项\"></a>更加完善的目录结构及编译选项</h2><blockquote>\n<p>  文件结构</p>\n<p>  构建的时候我们需要先<code>cd build</code>，然后再<code>cmake ..</code>构建，最后<code>make -j8</code>编译即可。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">.<br>├── build<br>├── CMakeLists.txt<br>├── libzip<br>│   ├── ioapi.c<br>│   ├── ioapi.h<br>│   ├── unzip.c<br>│   └── unzip.h<br>├── main<br>│   └── curl_zip.c<br>├── tools<br>    └── log<br>        └── log.h<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cmake_minimum_required(VERSION 3.0)<br>project(curl_zip)<br><br>set(Target down)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置语言标准</span><br>set(CMAKE_C_STANDARD 11)<br>set(CMAKE_CXX_STANDARD 17)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">为当前路径以及子目录的源文件加入由-D预编译定义</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_definitions(-DFOO -DDEBUG ...)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置C++编译参数(CMAKE_CXX_FLAGS是全局变量)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_FLAGS <span class=\"hljs-string\">&quot;-Wall std=c++11 -Wextra -fPIC -g&quot;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置指定的C++编译器版本是必须的，如果不设置，或者为OFF，则指定版本不可用时，会使用上一版本。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置编译器选项</span><br>add_compile_options(-O3 -Wall) <br><br><br>message(&quot;Target=&quot; $&#123;Target&#125;)<br>message(&quot;---------- Start building ----------&quot;)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置包含路径</span><br>include_directories(    $&#123;PROJECT_SOURCE_DIR&#125;/libzip<br>                        $&#123;PROJECT_SOURCE_DIR&#125;/tools/log<br>)<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把xxx目录下所有源文件写入变量SRC_LIST</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/libzip           SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/src/curl         SRC_LIST)</span><br><span class=\"hljs-meta prompt_\">aux_source_directory($</span><span class=\"language-bash\">&#123;PROJECT_SOURCE_DIR&#125;/main             SRC_LIST)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">以SRC_LIST为源文件生成目标文件xxx</span><br><span class=\"hljs-meta prompt_\">add_executable($</span><span class=\"language-bash\">&#123;Target&#125; <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建库文件</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">add_library(&lt;name&gt; [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">目标文件链接的库</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">target_link_libraries() 总是指明 PRIVATE、PUBLIC 、INTERFACE</span><br>target_link_libraries( $&#123;Target&#125;<br>    pthread<br>    curl<br>    z<br>)<br><br>message(&quot;---------- Stop  building ----------&quot;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "linux",
                "cmake"
            ]
        }
    ]
}