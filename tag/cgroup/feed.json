{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"cgroup\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2025/60641507/",
            "url": "https://www.oikiou.top/2025/60641507/",
            "title": "Docker Compose",
            "date_published": "2025-05-13T05:23:05.000Z",
            "content_html": "<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><h1 id=\"Docker-Compose是什么\"><a href=\"#Docker-Compose是什么\" class=\"headerlink\" title=\"Docker Compose是什么\"></a>Docker Compose是什么</h1><p>Docker Compose 是一个用于<strong>定义和运行多容器 Docker 应用</strong>的工具。通过一个 YAML 格式的配置文件（<code>docker-compose.yml</code>），您可以统一管理多个容器的配置（如服务依赖、网络、存储卷等），并通过简单命令一键启动或停止整个应用栈。</p>\n<h4 id=\"核心功能：\"><a href=\"#核心功能：\" class=\"headerlink\" title=\"核心功能：\"></a><strong>核心功能：</strong></h4><ul>\n<li><p><strong>单文件配置</strong>：用 YAML 文件定义所有服务、网络、卷。</p>\n</li>\n<li><p><strong>一键启停</strong>：通过一条命令启动或销毁整个应用环境。</p>\n</li>\n<li><p><strong>服务依赖管理</strong>：自动处理容器启动顺序（如先启动数据库再启动 Web 服务）。</p>\n</li>\n<li><p><strong>环境隔离</strong>：支持开发、测试、生产环境的不同配置。</p>\n</li>\n</ul>\n<blockquote>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>由于 Docker 官方已将 Compose 集成到 CLI 中，推荐使用 <code>docker compose</code> 替代旧的 <code>docker-compose</code></p>\n</blockquote>\n<hr>\n<h1 id=\"Docker-Compose-配置文件\"><a href=\"#Docker-Compose-配置文件\" class=\"headerlink\" title=\"Docker Compose 配置文件\"></a>Docker Compose 配置文件</h1><h2 id=\"基础结构示例\"><a href=\"#基础结构示例\" class=\"headerlink\" title=\"基础结构示例\"></a>基础结构示例</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3.9&quot;</span>  <span class=\"hljs-comment\"># 指定 Compose 版本（需与 Docker 引擎兼容）</span><br><br><span class=\"hljs-attr\">services:</span>        <span class=\"hljs-comment\"># 定义所有服务容器</span><br>  <span class=\"hljs-attr\">web:</span>           <span class=\"hljs-comment\"># 服务名称（自定义）</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:latest</span>  <span class=\"hljs-comment\"># 使用的镜像vim </span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;80:80&quot;</span>          <span class=\"hljs-comment\"># 端口映射（宿主机:容器）</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./html:/usr/share/nginx/html</span>  <span class=\"hljs-comment\"># 挂载宿主机目录到容器</span><br>    <span class=\"hljs-attr\">depends_on:</span>          <span class=\"hljs-comment\"># 依赖的服务</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">db</span><br><br>  <span class=\"hljs-attr\">db:</span>                    <span class=\"hljs-comment\"># 第二个服务（数据库）</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:8.0</span><br>    <span class=\"hljs-attr\">environment:</span>         <span class=\"hljs-comment\"># 环境变量</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">example</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mysql_data:/var/lib/mysql</span>  <span class=\"hljs-comment\"># 使用命名卷持久化数据</span><br><br><span class=\"hljs-attr\">volumes:</span>                 <span class=\"hljs-comment\"># 定义命名卷</span><br>  <span class=\"hljs-attr\">mysql_data:</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"关键配置项说明\"><a href=\"#关键配置项说明\" class=\"headerlink\" title=\"关键配置项说明\"></a>关键配置项说明</h2><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>version</code></td>\n<td>指定 Compose 文件格式版本（常用 3.x）。</td>\n</tr>\n<tr>\n<td><code>services</code></td>\n<td>定义所有需要运行的容器服务，每个服务需配置镜像、端口、卷等。</td>\n</tr>\n<tr>\n<td><code>image</code></td>\n<td>指定容器使用的镜像（如 <code>nginx:latest</code>）。</td>\n</tr>\n<tr>\n<td><code>ports</code></td>\n<td>映射宿主机端口到容器端口（格式：<code>&quot;宿主机端口:容器端口&quot;</code>）。</td>\n</tr>\n<tr>\n<td><code>volumes</code></td>\n<td>挂载宿主机目录或命名卷到容器路径（如 <code>./data:/app/data</code>）。</td>\n</tr>\n<tr>\n<td><code>environment</code></td>\n<td>设置容器内的环境变量（支持键值对或列表）。</td>\n</tr>\n<tr>\n<td><code>depends_on</code></td>\n<td>定义服务启动顺序（例如 Web 服务依赖数据库服务先启动）。</td>\n</tr>\n<tr>\n<td><code>networks</code></td>\n<td>自定义容器网络（默认所有服务加入同一网络，可通过服务名互相通信）。</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h3 id=\"1-启动服务\"><a href=\"#1-启动服务\" class=\"headerlink\" title=\"1. 启动服务\"></a>1. 启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 前台启动（调试用，Ctrl+C 停止）</span><br>docker-compose up<br><br><span class=\"hljs-comment\"># 后台启动（-d 表示 detached 模式）</span><br>docker-compose up -d<br><br><span class=\"hljs-comment\"># 启动时强制重新构建镜像（如果 Dockerfile 有更新）</span><br>docker-compose up -d --build<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-停止并清理\"><a href=\"#2-停止并清理\" class=\"headerlink\" title=\"2. 停止并清理\"></a>2. 停止并清理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 停止并删除容器、网络（保留卷和数据）</span><br>docker-compose down<br><br><span class=\"hljs-comment\"># 彻底清理（删除容器、网络、镜像、未使用的卷）</span><br>docker-compose down --rmi all --volumes<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker compose restart<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看服务状态\"><a href=\"#3-查看服务状态\" class=\"headerlink\" title=\"3. 查看服务状态\"></a>3. 查看服务状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 查看运行中的服务</span><br>docker-compose ps<br><br><span class=\"hljs-comment\"># 查看服务日志（-f 持续跟踪日志）</span><br>docker-compose logs -f web<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-管理单个服务\"><a href=\"#4-管理单个服务\" class=\"headerlink\" title=\"4. 管理单个服务\"></a>4. 管理单个服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 启动/停止/重启指定服务</span><br>docker-compose start web<br>docker-compose stop web<br>docker-compose restart web<br><br><span class=\"hljs-comment\"># 进入容器执行命令（例如启动 Bash）</span><br>docker-compose <span class=\"hljs-built_in\">exec</span> web bash<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-扩展服务实例\"><a href=\"#5-扩展服务实例\" class=\"headerlink\" title=\"5. 扩展服务实例\"></a>5. 扩展服务实例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 启动多个 Web 服务实例（需服务支持水平扩展）</span><br>docker-compose up -d --scale web=3<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h1><h3 id=\"1-多环境配置\"><a href=\"#1-多环境配置\" class=\"headerlink\" title=\"1. 多环境配置\"></a>1. 多环境配置</h3><ul>\n<li>使用多个 Compose 文件（如 <code>docker-compose.prod.yml</code>）覆盖默认配置：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-变量替换\"><a href=\"#2-变量替换\" class=\"headerlink\" title=\"2. 变量替换\"></a>2. 变量替换</h3><p>在 Compose 文件中使用环境变量：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">web:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:$&#123;NGINX_VERSION:-latest&#125;</span>  <span class=\"hljs-comment\"># 默认使用 latest，可覆盖</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-健康检查\"><a href=\"#3-健康检查\" class=\"headerlink\" title=\"3. 健康检查\"></a>3. 健康检查</h3><p>定义服务健康检查策略：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">db:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:8.0</span><br>    <span class=\"hljs-attr\">healthcheck:</span><br>      <span class=\"hljs-attr\">test:</span> [<span class=\"hljs-string\">&quot;CMD&quot;</span>, <span class=\"hljs-string\">&quot;mysqladmin&quot;</span>, <span class=\"hljs-string\">&quot;ping&quot;</span>, <span class=\"hljs-string\">&quot;-h&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>]<br>      <span class=\"hljs-attr\">interval:</span> <span class=\"hljs-string\">10s</span><br>      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">5s</span><br>      <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><h3 id=\"更新容器\"><a href=\"#更新容器\" class=\"headerlink\" title=\"更新容器\"></a>更新容器</h3><ul>\n<li>修改 <code>docker-compose.yml</code> 后，运行：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d --build<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据持久化失败？\"><a href=\"#数据持久化失败？\" class=\"headerlink\" title=\"数据持久化失败？\"></a>数据持久化失败？</h3><ul>\n<li>确保使用命名卷（如 <code>mysql_data:/var/lib/mysql</code>）或正确挂载宿主机路径。</li>\n</ul>\n<h3 id=\"服务间通信问题？\"><a href=\"#服务间通信问题？\" class=\"headerlink\" title=\"服务间通信问题？\"></a>服务间通信问题？</h3><ul>\n<li>使用服务名（如 <code>db</code>）代替 IP 地址，Compose 会自动解析服务名到容器 IP。</li>\n</ul>\n<hr>\n",
            "tags": [
                "docker",
                "dockerfile",
                "namespace",
                "cgroup",
                "dockerhub"
            ]
        },
        {
            "id": "https://www.oikiou.top/2022/f5f9fa9b/",
            "url": "https://www.oikiou.top/2022/f5f9fa9b/",
            "title": "Docker",
            "date_published": "2022-07-21T13:38:15.000Z",
            "content_html": "<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h1 id=\"Docker是什么-如何理解Docker\"><a href=\"#Docker是什么-如何理解Docker\" class=\"headerlink\" title=\"Docker是什么&amp;如何理解Docker\"></a>Docker是什么&amp;如何理解Docker</h1><p>Docker的底层原理</p>\n<p>cgroup</p>\n<p>namespace</p>\n<p>容器(container)有不同的状态, 停止状态</p>\n<p>镜像(image)是docker生命周期中的构建或打包阶段, 而容器(container)则是启动或执行阶段.</p>\n<p>docker hub</p>\n<p>!!ADD ME!!</p>\n<p><img src=\"/2022/f5f9fa9b/architecture.svg\" alt=\"Docker Architecture Diagram\"></p>\n<p><img src=\"/2022/f5f9fa9b/mark4536000.image\" alt=\"img\"></p>\n<p><img src=\"/2022/f5f9fa9b/watermark16682557597978.png\" alt=\"x\"></p>\n<p><img src=\"/2022/f5f9fa9b/watermark.png\" alt=\"xx\"></p>\n<p><img src=\"/2022/f5f9fa9b/202111041612065293278565.png\" alt=\"何種應用適合PaaS平台容器/微服務架構釋疑| 網管人\"></p>\n<h2 id=\"Docker-和-VM-的区别\"><a href=\"#Docker-和-VM-的区别\" class=\"headerlink\" title=\"Docker 和 VM 的区别\"></a>Docker 和 VM 的区别</h2><p>二者的不同：</p>\n<ul>\n<li>VM(VMware)在宿主机器、宿主机器操作系统的基础上创建虚拟层、虚拟化的操作系统、虚拟化的仓库，然后再安装应用；</li>\n<li>Container(Docker容器)，在宿主机器、宿主机器操作系统上创建Docker引擎，在引擎的基础上再安装应用。</li>\n</ul>\n<p><img src=\"/2022/f5f9fa9b/9114e4a753de14a7531e867b908e6660.png\" alt=\"img\"></p>\n<p><strong>与传统VM特性对比：</strong><br>作为一种轻量级的虚拟化方式，Docker在运行应用上跟传统的虚拟机方式相比具有显著优势：</p>\n<ul>\n<li>Docker 容器很快，启动和停止可以在秒级实现，这相比传统的虚拟机方式要快得多。</li>\n<li>Docker 容器对系统资源需求很少，一台主机上可以同时运行数千个Docker容器。</li>\n<li>Docker 通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。</li>\n<li>Docker 通过Dockerfile配置文件来支持灵活的自动化创建和部署机制，提高工作效率。</li>\n<li>Docker 容器除了运行其中的应用之外，基本不消耗额外的系统资源，保证应用性能的同时，尽量减小系统开销。</li>\n<li>Docker 利用Linux系统上的多种防护机制实现了严格可靠的隔离。从1.3版本开始，Docker引入了安全选项和镜像签名机制，极大地提高了使用Docker的安全性。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Docker</th>\n<th>VM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动速度</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为MB</td>\n<td>一般为GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于原生</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单机支持上千个容器</td>\n<td>一般几十个</td>\n</tr>\n</tbody></table>\n<h1 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h1><p><strong>Docker Desktop</strong></p>\n<p>参考官方的安装<a href=\"https://docs.docker.com/get-docker/\">文档</a></p>\n<p>Ubuntu的安装参考<a href=\"https://docs.docker.com/desktop/install/ubuntu/\">文档</a></p>\n<p><strong>Docker Engine</strong></p>\n<p>Engine安装<a href=\"https://docs.docker.com/engine/install/ubuntu/\">文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Add Docker<span class=\"hljs-string\">&#x27;s official GPG key:</span></span><br>sudo apt-get update<br>sudo apt-get install ca-certificates curl gnupg<br>sudo install -m 0755 -d /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br>sudo chmod a+r /etc/apt/keyrings/docker.gpg<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Add the repository to Apt sources:</span></span><br>echo \\<br>  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\<br><span class=\"hljs-meta prompt_\">  $</span><span class=\"language-bash\"><span class=\"hljs-string\">(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\</span></span><br><span class=\"hljs-string\"><span class=\"language-bash\">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br>sudo apt-get update<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Install Docker</span></span><br>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Add your user to the docker group</span></span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">可以运行docker命令不再加sudo</span></span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">!注意! 需要注销后重新登录</span></span><br>sudo usermod -aG docker $USER<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-string\">Testing the installation</span></span><br>docker version<br>sudo docker run hello-world<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Docker入门-命令\"><a href=\"#Docker入门-命令\" class=\"headerlink\" title=\"Docker入门&amp;命令\"></a>Docker入门&amp;命令</h1><h2 id=\"☆-docker-run\"><a href=\"#☆-docker-run\" class=\"headerlink\" title=\"☆ docker run\"></a>☆ docker run</h2><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-a stdin</code>: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li>\n<li>☆<code>-d</code>: 后台运行容器，并返回容器ID；</li>\n<li>☆<code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><code>-P</code>: 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>\n<li><code>-p</code>: 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>\n<li>☆<code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li>☆<code>--name=&quot;nginx-lb&quot;</code>: 为容器指定一个名称；</li>\n<li><code>--dns 8.8.8.8</code>: 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><code>--dns-search example.com</code>: 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><code>-h &quot;mars&quot;</code>: 指定容器的hostname；</li>\n<li>☆<code>-e username=&quot;ritchie&quot;</code>: 设置环境变量；</li>\n<li><code>--env-file=[]</code>: 从指定文件读入环境变量；</li>\n<li><code>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;</code>: 绑定容器到指定CPU运行；</li>\n<li><code>-m</code>:设置容器使用内存最大值；</li>\n<li><code>--net=&quot;bridge&quot;</code>: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li>\n<li><code>--link=[]</code>: 添加链接到另一个容器；</li>\n<li><code>--expose=[]</code>: 开放一个端口或一组端口；</li>\n<li>☆<code>--volume , -v</code>: 绑定一个卷, (或者称作<strong>映射文件夹</strong>，将特定文件夹映射到特定目录)</li>\n<li><code>--mount</code> 类似于<code>-v</code>有些细微差异。</li>\n<li><code>–rm</code>: 容器退出时自动删除</li>\n<li>☆<code>--restart </code>: 指定重启策略 容器在退出时应该或不应该如何重新启动。可选参数有<code>no</code>、<code> always</code>、<code>on-failure[:max-retries]</code>、<code>unless-stopped</code></li>\n</ul>\n<h3 id=\"设置工作目录-w\"><a href=\"#设置工作目录-w\" class=\"headerlink\" title=\"设置工作目录 (-w)\"></a>设置工作目录 (-w)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker  run -w /path/to/dir/ -i -t  ubuntu <span class=\"hljs-built_in\">pwd</span><br>/path/to/dir<br></code></pre></td></tr></table></figure>\n\n<p><code>-w</code> 允许命令在给定的目录中执行，这里是 <code>/path/to/dir/</code>。 如果路径不存在，则在容器内创建。</p>\n<h3 id=\"挂载卷-v-–read-only\"><a href=\"#挂载卷-v-–read-only\" class=\"headerlink\" title=\"挂载卷 (-v, –read-only)\"></a>挂载卷 (-v, –read-only)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker  run  -v `<span class=\"hljs-built_in\">pwd</span>`:`<span class=\"hljs-built_in\">pwd</span>` -w `<span class=\"hljs-built_in\">pwd</span>` -i -t  ubuntu <span class=\"hljs-built_in\">pwd</span><br><br><span class=\"hljs-comment\"># 只读(ro)和读写(rw)权限</span><br>docker run -v <span class=\"hljs-variable\">$PWD</span>/web:var/www/html/web:ro<br></code></pre></td></tr></table></figure>\n\n<p><code>-v</code>标志将当前工作目录挂载到容器中。 <code>-w</code> 让命令在当前工作目录中执行，方法是将工作目录更改为pwd返回的值。所以这个组合使用容器执行命令，但在当前工作目录中。</p>\n<h3 id=\"发布或者暴露端口-p-–expose\"><a href=\"#发布或者暴露端口-p-–expose\" class=\"headerlink\" title=\"发布或者暴露端口 (-p, –expose)\"></a>发布或者暴露端口 (-p, –expose)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -p 127.0.0.1:80:8080/tcp ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>这将容器的端口8080绑定到主机的127.0.0.1上的TCP端口80。还可以指定udp和sctp端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run --expose 80 ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>这会暴露容器的端口80，而不会将端口发布到主机系统接口。</p>\n<h3 id=\"设置环境变量-e-–env-–env-file\"><a href=\"#设置环境变量-e-–env-–env-file\" class=\"headerlink\" title=\"设置环境变量(-e, –env, –env-file)\"></a>设置环境变量(-e, –env, –env-file)</h3><p>可以通过<code>-e, --env, --env-file</code> 设置容器的环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -e MYVAR1 --<span class=\"hljs-built_in\">env</span> MYVAR2=foo --env-file ./env.list ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<p>本地已经export的环境变量，可以不用&#x3D;号和值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> VAR1=value1<br><span class=\"hljs-built_in\">export</span> VAR2=value2<br><br>$ docker run --<span class=\"hljs-built_in\">env</span> VAR1 --<span class=\"hljs-built_in\">env</span> VAR2 ubuntu <span class=\"hljs-built_in\">env</span> | grep VAR<br>VAR1=value1<br>VAR2=value2<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在容器上设置元数据-l-–label-–label-file\"><a href=\"#在容器上设置元数据-l-–label-–label-file\" class=\"headerlink\" title=\"在容器上设置元数据(-l, –label, –label-file)\"></a>在容器上设置元数据(-l, –label, –label-file)</h3><p>可以通过<code>-l, --label, --label-file</code> 设置容器的label：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker run -l my-label --label com.example.foo=bar ubuntu bash<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将容器连接到网络-–network\"><a href=\"#将容器连接到网络-–network\" class=\"headerlink\" title=\"将容器连接到网络(–network)\"></a>将容器连接到网络(–network)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run -itd --network=my-net busybox<br>docker run -itd --network=my-net --ip=10.10.9.75 busybox<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>docker connect</code> 命令</p>\n<h3 id=\"从容器挂载卷-–volumes-from\"><a href=\"#从容器挂载卷-–volumes-from\" class=\"headerlink\" title=\"从容器挂载卷(–volumes-from)\"></a>从容器挂载卷(–volumes-from)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker run --volumes-from 777f7dc92da7 --volumes-from ba8c0c54f0f2:ro -i -t ubuntu <span class=\"hljs-built_in\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-start-stop-restart\"><a href=\"#☆-docker-start-stop-restart\" class=\"headerlink\" title=\"☆ docker start&#x2F;stop&#x2F;restart\"></a>☆ docker start&#x2F;stop&#x2F;restart</h2><p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p>\n<p><strong>docker stop</strong> :停止一个运行中的容器</p>\n<p><strong>docker restart</strong> :重启容器</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker start [OPTIONS] CONTAINER [CONTAINER...]<br>docker stop [OPTIONS] CONTAINER [CONTAINER...]<br>docker restart [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>启动已被停止的容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker start myrunoob<br></code></pre></td></tr></table></figure>\n\n<p>停止运行中的容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker stop myrunoob<br></code></pre></td></tr></table></figure>\n\n<p>重启容器myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker restart myrunoob<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-kill\"><a href=\"#docker-kill\" class=\"headerlink\" title=\"docker kill\"></a>docker kill</h2><p><strong>docker kill</strong> :杀掉一个运行中的容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker kill [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-s</code>:向容器发送一个信号</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>杀掉运行中的容器“docker_ubuntu”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"hljs-built_in\">kill</span> -s KILL docker_ubuntu</span><br>docker_ubuntu<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-rm\"><a href=\"#☆-docker-rm\" class=\"headerlink\" title=\"☆ docker rm\"></a>☆ docker rm</h2><p><strong>docker rm ：</strong>删除一个或多个容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> :通过 SIGKILL 信号强制删除一个运行中的容器。</li>\n<li><code>-l</code>:移除容器间的网络连接，而非容器本身。</li>\n<li><code>-v</code>:删除与容器关联的卷。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>强制删除容器 db01、db02：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -f db01 db02<br></code></pre></td></tr></table></figure>\n\n<p>移除容器 nginx01 对容器 db01 的连接，连接名 db：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -l db <br></code></pre></td></tr></table></figure>\n\n<p>删除容器 nginx01, 并删除容器挂载的数据卷：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm -v nginx01<br></code></pre></td></tr></table></figure>\n\n<p>删除所有已经停止的容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rm $(docker ps -a -q)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-pause-unpause\"><a href=\"#docker-pause-unpause\" class=\"headerlink\" title=\"docker pause&#x2F;unpause\"></a>docker pause&#x2F;unpause</h2><p><strong>docker pause</strong> :暂停容器中所有的进程。</p>\n<p><strong>docker unpause</strong> :恢复容器中所有的进程。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pause CONTAINER [CONTAINER...]<br>docker unpause CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>暂停数据库容器db01提供服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pause db01<br></code></pre></td></tr></table></figure>\n\n<p>恢复数据库容器 db01 提供服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker unpause db01<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-create\"><a href=\"#docker-create\" class=\"headerlink\" title=\"docker create\"></a>docker create</h2><p><strong>docker create ：</strong>创建一个新的容器但不启动它</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>语法同 <code>docker run</code></p>\n<p><strong>实例</strong></p>\n<p>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker create  --name myrunoob  nginx:latest      <br>09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-exec\"><a href=\"#☆-docker-exec\" class=\"headerlink\" title=\"☆ docker exec\"></a>☆ docker exec</h2><p><strong>docker exec ：</strong>在运行的容器中执行命令</p>\n<ul>\n<li>典型的使用, 在docker中运行<code>bash</code>, 所使用的命令就是<code>docker exec -ti my_container /bin/bash</code></li>\n</ul>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-d</code>:分离模式: 在后台运行</li>\n<li><code>-i</code>:即使没有附加也保持STDIN 打开</li>\n<li><code>-t</code>:分配一个伪终端</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>在容器 mynginx 中以交互模式执行容器内 &#x2F;root&#x2F;runoob.sh 脚本:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh<br>http://www.runoob.com/<br></code></pre></td></tr></table></figure>\n\n<p>在容器 mynginx 中开启一个交互模式的终端:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash<br>root@b1a0703e41e7:/#<br></code></pre></td></tr></table></figure>\n\n<p>也可以通过 <strong>docker ps -a</strong> 命令查看已经在运行的容器，然后使用容器 ID 进入容器。</p>\n<p>查看已经在运行的容器 ID：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">docker ps -a</span> <br>...<br>9df70f9a0714        openjdk             &quot;/usercode/script.sh…&quot; <br>...<br></code></pre></td></tr></table></figure>\n\n<p>第一列的 9df70f9a0714 就是容器 ID。</p>\n<p>通过 exec 命令对指定的容器执行 bash:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">docker <span class=\"hljs-built_in\">exec</span> -it 9df70f9a0714 /bin/bash</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-容器管理-container-↓\"><a href=\"#↓-容器管理-container-↓\" class=\"headerlink\" title=\"↓ 容器管理 container ↓\"></a>↓ 容器管理 container ↓</h2><h2 id=\"☆-docker-ps\"><a href=\"#☆-docker-ps\" class=\"headerlink\" title=\"☆ docker ps\"></a>☆ docker ps</h2><p><strong>docker ps :</strong> 列出容器</p>\n<ul>\n<li>典型使用方法, 列出所有的容器(container), <code>docker ps -a</code></li>\n</ul>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker ps [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-a</code> :显示所有的容器，包括未运行的。</li>\n<li><code>-f</code> :根据条件过滤显示的内容。</li>\n<li><code>--format</code> :指定返回值的模板文件。</li>\n<li><code>-l</code>:显示最近创建的容器。</li>\n<li><code>-n</code>:列出最近创建的n个容器。</li>\n<li><code>--no-trunc</code> :不截断输出。</li>\n<li><code>-q</code> :静默模式，只显示容器编号。</li>\n<li><code>-s</code>:显示总的文件大小。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>列出所有在运行的容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps<br>CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES<br>09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myrunoob<br>96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp   mymysql<br></code></pre></td></tr></table></figure>\n\n<p>输出详情介绍：</p>\n<p><strong>CONTAINER ID:</strong> 容器 ID。</p>\n<p><strong>IMAGE:</strong> 使用的镜像。</p>\n<p><strong>COMMAND:</strong> 启动容器时运行的命令。</p>\n<p><strong>CREATED:</strong> 容器的创建时间。</p>\n<p><strong>STATUS:</strong> 容器状态。</p>\n<p>状态有7种：</p>\n<ul>\n<li>created（已创建）</li>\n<li>restarting（重启中）</li>\n<li>running（运行中）</li>\n<li>removing（迁移中）</li>\n<li>paused（暂停）</li>\n<li>exited（停止）</li>\n<li>dead（死亡）</li>\n</ul>\n<p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\\udp）。</p>\n<p><strong>NAMES:</strong> 自动分配的容器名称。</p>\n<p>列出最近创建的5个容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps -n 5<br>CONTAINER ID        IMAGE               COMMAND                   CREATED           <br>09b93464c2f7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...     <br>b8573233d675        nginx:latest        &quot;/bin/bash&quot;               2 days ago   ...     <br>b1a0703e41e7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...    <br>f46fb1dec520        5c6e1090e771        &quot;/bin/sh -c &#x27;set -x \\t&quot;   2 days ago   ...   <br>a63b4a5597de        860c279d2fec        &quot;bash&quot;                    2 days ago   ...<br></code></pre></td></tr></table></figure>\n\n<p>列出所有创建的容器ID。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker ps -a -q<br>09b93464c2f7<br>b8573233d675<br>b1a0703e41e7<br>f46fb1dec520<br>a63b4a5597de<br>6a4aa42e947b<br>de7bb36e7968<br>43a432b73776<br>664a8ab1a585<br>ba52eb632bbd<br>...<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-inspect-获取容器信息\"><a href=\"#docker-inspect-获取容器信息\" class=\"headerlink\" title=\"docker inspect 获取容器信息\"></a>docker inspect 获取容器信息</h2><p><strong>docker inspect :</strong> 获取容器&#x2F;镜像的元数据。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker inspect [OPTIONS] NAME|ID [NAME|ID...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> :指定返回值的模板文件。</li>\n<li><code>-s</code>显示总的文件大小。</li>\n<li><code>--type</code>为指定类型返回JSON。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>获取镜像mysql:5.6的元信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker inspect mysql:5.6<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec&quot;,<br>        &quot;RepoTags&quot;: [<br>            &quot;mysql:5.6&quot;<br>        ],<br>        &quot;RepoDigests&quot;: [],<br>        &quot;Parent&quot;: &quot;&quot;,<br>        &quot;Comment&quot;: &quot;&quot;,<br>        &quot;Created&quot;: &quot;2016-05-24T04:01:41.168371815Z&quot;,<br>        &quot;Container&quot;: &quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54&quot;,<br>        &quot;ContainerConfig&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;b0cf605c7757&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;ExposedPorts&quot;: &#123;<br>                &quot;3306/tcp&quot;: &#123;&#125;<br>            &#125;,<br>...<br></code></pre></td></tr></table></figure>\n\n<p>获取正在运行的容器mymysql的 IP。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mymysql<br>172.17.0.3<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-top-查看容器内进程信息\"><a href=\"#☆-docker-top-查看容器内进程信息\" class=\"headerlink\" title=\"☆ docker top 查看容器内进程信息\"></a>☆ docker top 查看容器内进程信息</h2><p>**docker top :**查看容器中运行的进程信息，支持 ps 命令参数。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker top [OPTIONS] CONTAINER [ps OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>容器运行时不一定有&#x2F;bin&#x2F;bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。</p>\n<p><strong>实例</strong></p>\n<p>查看容器mymysql的进程信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker top mymysql<br>UID    PID    PPID    C      STIME   TTY  TIME       CMD<br>999    40347  40331   18     00:58   ?    00:00:02   mysqld<br></code></pre></td></tr></table></figure>\n\n<p>查看所有运行容器的进程信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span>  `docker ps |grep Up|awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span>`;<span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> \\ &amp;&amp;docker top <span class=\"hljs-variable\">$i</span>; <span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"☆-docker-update-动态更新容器配置\"><a href=\"#☆-docker-update-动态更新容器配置\" class=\"headerlink\" title=\"☆ docker update 动态更新容器配置\"></a>☆ docker update 动态更新容器配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker update [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>The <code>docker update</code> and <code>docker container update</code> commands are not supported for Windows containers.</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称、简写</th>\n<th>默认</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--blkio-weight</code></td>\n<td></td>\n<td>块 IO（相对权重），介于 10 到 1000 之间，或 0 禁用（默认 0）</td>\n</tr>\n<tr>\n<td><code>--cpu-period</code></td>\n<td></td>\n<td>限制CPU CFS（完全公平调度程序）周期</td>\n</tr>\n<tr>\n<td><code>--cpu-quota</code></td>\n<td></td>\n<td>限制CPU CFS（完全公平调度程序）配额</td>\n</tr>\n<tr>\n<td><code>--cpu-rt-period</code></td>\n<td></td>\n<td>限制CPU实时周期（以微秒为单位）</td>\n</tr>\n<tr>\n<td><code>--cpu-rt-runtime</code></td>\n<td></td>\n<td>将CPU实时运行时间限制在微秒级</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#cpu-shares\"><code>--cpu-shares</code></a>,<a href=\"https://docs.docker.com/engine/reference/commandline/update/#cpu-shares\"><code>-c</code></a></td>\n<td></td>\n<td>CPU 份额（相对权重）</td>\n</tr>\n<tr>\n<td><code>--cpus</code></td>\n<td></td>\n<td>CPU数量</td>\n</tr>\n<tr>\n<td><code>--cpuset-cpus</code></td>\n<td></td>\n<td>允许执行的 CPU (0-3, 0,1)</td>\n</tr>\n<tr>\n<td><code>--cpuset-mems</code></td>\n<td></td>\n<td>允许执行的 MEM (0-3, 0,1)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#memory\"><code>--memory</code></a>,<a href=\"https://docs.docker.com/engine/reference/commandline/update/#memory\"><code>-m</code></a></td>\n<td></td>\n<td>内存限制 (bytes)</td>\n</tr>\n<tr>\n<td><code>--memory-reservation</code></td>\n<td></td>\n<td>内存软限制</td>\n</tr>\n<tr>\n<td><code>--memory-swap</code></td>\n<td></td>\n<td>交换限制等于内存加交换：-1 启用无限制交换</td>\n</tr>\n<tr>\n<td><code>--pids-limit</code></td>\n<td></td>\n<td><a href=\"https://docs.docker.com/engine/api/v1.40/\"><strong>API 1.40+</strong></a> 调整容器 pid 限制（设置 -1 表示无限制）</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/engine/reference/commandline/update/#restart\"><code>--restart</code></a></td>\n<td></td>\n<td>容器退出时应用的重新启动策略</td>\n</tr>\n</tbody></table>\n<h4 id=\"restart\"><a href=\"#restart\" class=\"headerlink\" title=\"restart\"></a>restart</h4><p>–restart具体参数值详细信息：</p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>no</code></td>\n<td>不要自动重启容器。 （默认）</td>\n</tr>\n<tr>\n<td><code>on-failure[:max-retries]</code></td>\n<td>如果容器因错误而退出（表现为非零退出代码），请重新启动容器。 （可选）使用该选项限制 Docker 守护进程尝试重新启动容器的次数<code>:max-retries</code>。该<code>on-failure</code>策略仅在容器因失败退出时提示重新启动。<strong>如果守护进程重新启动，它不会重新启动容器。</strong></td>\n</tr>\n<tr>\n<td><code>always</code></td>\n<td>如果容器停止，请务必重新启动容器。如果手动停止，则只有当 Docker 守护进程重新启动或手动重新启动容器本身时，它才会重新启动。 （请参阅<a href=\"https://docs.docker.com/config/containers/start-containers-automatically/#restart-policy-details\">重启政策详细信息</a>中列出的第二个项目符号 ）</td>\n</tr>\n<tr>\n<td><code>unless-stopped</code></td>\n<td>与 类似<code>always</code>，只不过当容器停止（手动或其他方式）时，即使 Docker 守护进程重新启动，它也不会重新启动。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>no - 容器退出时，不重启容器；</li>\n<li>on-failure - 只有在非0状态退出时才从新启动容器；</li>\n<li>always - 无论退出状态是如何，都重启容器；</li>\n</ul>\n<p>还可以在使用on-failure策略时，指定<a href=\"https://pythonjishu.com/tag/docker/\">Docker</a>将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> <span class=\"hljs-attribute\">--restart</span>=on-failure:10 &lt;CONTAINER ID&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-attach-附着容器\"><a href=\"#docker-attach-附着容器\" class=\"headerlink\" title=\"docker attach 附着容器\"></a>docker attach 附着容器</h2><p>**docker attach :**附着到正在运行中的容器。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker attach [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p><code>--no-stdin=false</code> 不连接标准输入</p>\n<p><code>--sig-proxy=true</code> 将所有信号传递给进程（非TTY模式时也一样）但不传送SIGCHLD、SIGKILL、SIGSTOP信号。经常使用的信号如下：</p>\n<h4 id=\"detach\"><a href=\"#detach\" class=\"headerlink\" title=\"detach\"></a><strong>detach</strong></h4><p>要在不退出 shell 的情况下分离 tty，请使用转义序列<code>Ctrl+P</code>后跟<code>Ctrl+ Q</code>。更多细节<a href=\"https://docs.docker.com/engine/reference/commandline/attach/\">在这里</a>。</p>\n<ul>\n<li>docker run -t -i → 可以<code>^P^Q</code>使用 docker attach 分离和重新附加</li>\n<li>docker run -i → 不能用<code>^P^Q</code>;分离 会破坏标准输入</li>\n<li>docker run → 不能用<code>^P^Q</code>;分离 可以 SIGKILL 客户端；可以使用 docker attach 重新附加</li>\n<li><code>docker attach --sig-proxy=false</code> 可以使用 <code>^C</code>来进行detach, <code>CTRL+c</code></li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><strong>注意</strong></h3><p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>\n<blockquote>\n<p>  官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy&#x3D;false来确保CTRL-D或CTRL-C不会关闭容器。</p>\n</blockquote>\n<p><strong>实例</strong></p>\n<p>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker attach --sig-proxy=false mynginx<br>192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-events\"><a href=\"#docker-events\" class=\"headerlink\" title=\"docker events\"></a>docker events</h2><p><strong>docker events :</strong> 从服务器获取实时事件</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker events [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-f ：</strong>根据条件过滤事件；</li>\n<li><strong>–since ：</strong>从指定的时间戳后显示所有事件;</li>\n<li><strong>–until ：</strong>流水时间显示到指定的时间为止；</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>显示docker 2016年7月1日后的所有事件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker events  --since=&quot;1467302400&quot;<br>2016-07-08T19:44:54.501277677+08:00 network connect 66f958fd13dc4314ad20034e576d5c5eba72e0849dcc38ad9e8436314a4149d4 (container=b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64, name=bridge, type=bridge)<br>2016-07-08T19:44:54.723876221+08:00 container start b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (image=nginx:latest, name=elegant_albattani)<br>2016-07-08T19:44:54.726110498+08:00 container resize b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (height=39, image=nginx:latest, name=elegant_albattani, width=167)<br>2016-07-08T19:46:22.137250899+08:00 container die b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (exitCode=0, image=nginx:latest, name=elegant_albattani)<br>...<br></code></pre></td></tr></table></figure>\n\n<p>显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~/mysql$ docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; <br>2016-07-11T00:38:53.975174837+08:00 container start 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:51:17.022572452+08:00 container kill 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql, signal=9)<br>2016-07-11T00:51:17.132532080+08:00 container die 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (exitCode=137, image=mysql:5.6, name=mymysql)<br>2016-07-11T00:51:17.514661357+08:00 container destroy 96f7f14e99ab9d2f60943a50be23035eda1623782cc5f930411bbea407a2bb10 (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.551984549+08:00 container create c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.557405864+08:00 container attach c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:18.844134112+08:00 container start c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:57:19.140141428+08:00 container die c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (exitCode=1, image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:05.941019136+08:00 container destroy c8f0a32f12f5ec061d286af0b1285601a3e33a90a08ff1706de619ac823c345c (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:07.965128417+08:00 container create a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:08.188734598+08:00 container start a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T00:58:20.010876777+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br>2016-07-11T01:06:01.395365098+08:00 container top a404c6c174a21c52f199cfce476e041074ab020453c7df2a13a7869b48f2f37e (image=mysql:5.6, name=mymysql)<br></code></pre></td></tr></table></figure>\n\n<p>如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如–since&#x3D;”2016-07-01”。</p>\n<h2 id=\"☆-docker-logs\"><a href=\"#☆-docker-logs\" class=\"headerlink\" title=\"☆ docker logs\"></a>☆ docker logs</h2><p><strong>docker logs :</strong> 获取容器的日志</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logs [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-f</code> : 跟踪日志输出</li>\n<li><code>--since</code>显示某个开始时间的所有日志</li>\n<li><code>-t</code> 显示时间戳</li>\n<li><code>--tail</code>仅列出最新N条容器日志</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>跟踪查看容器mynginx的日志输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker logs -f mynginx<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.239.130/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>...<br></code></pre></td></tr></table></figure>\n\n<p>查看容器mynginx从2016年7月1日后的最新10条日志。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-wait\"><a href=\"#docker-wait\" class=\"headerlink\" title=\"docker wait\"></a>docker wait</h2><p><strong>docker wait :</strong> 阻塞运行直到容器停止，然后打印出它的退出代码。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker wait [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker wait CONTAINER<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-export-导出\"><a href=\"#docker-export-导出\" class=\"headerlink\" title=\"docker export 导出\"></a>docker export 导出</h2><p>**docker export :**将文件系统作为一个tar归档文件导出到STDOUT。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker export [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-o</code>将输入内容写到文件。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将id为a404c6c174a2的容器按日期保存为tar文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2<br>runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar<br>mysql-20160711.tar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-port\"><a href=\"#docker-port\" class=\"headerlink\" title=\"docker port\"></a>docker port</h2><p><strong>docker port :</strong> 列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>查看容器mynginx的端口映射情况。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker port mymysql<br>3306/tcp -&gt; 0.0.0.0:3306<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-stats-统计\"><a href=\"#docker-stats-统计\" class=\"headerlink\" title=\"docker stats 统计\"></a>docker stats 统计</h2><p><strong>docker stats :</strong> 统计显示容器资源的使用情况，包括：CPU、内存、网络 I&#x2F;O 等。</p>\n<p>stats: abbr. 统计（statistics）；</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker stats [OPTIONS] [CONTAINER...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><code>--all , -a</code> :显示所有的容器，包括未运行的。</li>\n<li><code>format</code> :指定返回值的模板文件。</li>\n<li><code>--no-stream</code> :展示当前状态就直接退出了，不再实时更新。</li>\n<li><code>--no-trunc</code> :不截断输出。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>列出所有在运行的容器信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$  docker stats<br>CONTAINER ID        NAME                                    CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS<br>b95a83497c91        awesome_brattain                        0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9<br>67b2525d8ad1        foobar                                  0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2<br>e5c383697914        test-1951.1.kay7x1lh1twk9c0oig50sd5tr   0.00%               196KiB / 1.952GiB     0.01%               71.2kB / 0B         770kB / 0B          1<br>4bda148efbc0        random.1.vnc8on831idyr42slu578u3cr      0.00%               1.672MiB / 1.952GiB   0.08%               110kB / 0B          578kB / 0B          2<br></code></pre></td></tr></table></figure>\n\n<p>输出详情介绍：</p>\n<p><strong>CONTAINER ID 与 NAME:</strong> 容器 ID 与名称。</p>\n<p><strong>CPU % 与 MEM %:</strong> 容器使用的 CPU 和内存的百分比。</p>\n<p><strong>MEM USAGE &#x2F; LIMIT:</strong> 容器正在使用的总内存，以及允许使用的内存总量。</p>\n<p><strong>NET I&#x2F;O:</strong> 容器通过其网络接口发送和接收的数据量。</p>\n<p><strong>BLOCK I&#x2F;O:</strong> 容器从主机上的块设备读取和写入的数据量。</p>\n<p><strong>PIDs:</strong> 容器创建的进程或线程数。</p>\n<p>根据容器等 ID 或名称现实信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats awesome_brattain 67b2525d8ad1<br><br>CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS<br>b95a83497c91        awesome_brattain    0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9<br>67b2525d8ad1        foobar              0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2<br></code></pre></td></tr></table></figure>\n\n<p>以 JSON 格式输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats nginx --no-stream --format &quot;&#123;&#123; json . &#125;&#125;&quot;<br>  &#123;&quot;BlockIO&quot;:&quot;0B / 13.3kB&quot;,&quot;CPUPerc&quot;:&quot;0.03%&quot;,&quot;Container&quot;:&quot;nginx&quot;,&quot;ID&quot;:&quot;ed37317fbf42&quot;,&quot;MemPerc&quot;:&quot;0.24%&quot;,&quot;MemUsage&quot;:&quot;2.352MiB / 982.5MiB&quot;,&quot;Name&quot;:&quot;nginx&quot;,&quot;NetIO&quot;:&quot;539kB / 606kB&quot;,&quot;PIDs&quot;:&quot;2&quot;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出指定的信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker stats --all --format &quot;table &#123;&#123;.Container&#125;&#125;\\t&#123;&#123;.CPUPerc&#125;&#125;\\t&#123;&#123;.MemUsage&#125;&#125;&quot; fervent_panini 5acfcb1b4fd1 drunk_visvesvaraya big_heisenberg<br>  &#123;&quot;BlockIO&quot;:&quot;0B / 13.3kB&quot;,&quot;CPUPerc&quot;:&quot;0.03%&quot;,&quot;Container&quot;:&quot;nginx&quot;,&quot;ID&quot;:&quot;ed37317fbf42&quot;,&quot;MemPerc&quot;:&quot;0.24%&quot;,&quot;MemUsage&quot;:&quot;2.352MiB / 982.5MiB&quot;,&quot;Name&quot;:&quot;nginx&quot;,&quot;NetIO&quot;:&quot;539kB / 606kB&quot;,&quot;PIDs&quot;:&quot;2&quot;&#125;<br><br>CONTAINER                CPU %               MEM USAGE / LIMIT<br>fervent_panini           0.00%               56KiB / 15.57GiB<br>5acfcb1b4fd1             0.07%               32.86MiB / 15.57GiB<br>drunk_visvesvaraya       0.00%               0B / 0B<br>big_heisenberg           0.00%               0B / 0B<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-镜像管理-image-↓\"><a href=\"#↓-镜像管理-image-↓\" class=\"headerlink\" title=\"↓ 镜像管理 image ↓\"></a>↓ 镜像管理 image ↓</h2><h2 id=\"Docker-commit\"><a href=\"#Docker-commit\" class=\"headerlink\" title=\"Docker commit\"></a>Docker commit</h2><p><a href=\"https://yeasy.gitbook.io/docker_practice/image/commit\">参考链接: 利用 commit 理解镜像构成</a></p>\n<p>**docker commit :**从容器创建一个新的镜像。</p>\n<blockquote>\n<p>  我们并不推荐使用这个命令构建image, 我们会推荐使用更加强大的Dockerfile来进行构建</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :提交的镜像作者；</p>\n</li>\n<li><p><code>-c</code>使用Dockerfile指令来创建镜像；</p>\n</li>\n<li><p><code>-m</code>提交时的说明文字；</p>\n</li>\n<li><p><code>-p</code> :在commit时，将容器暂停。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 <br>sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057<br>runoob@runoob:~$ docker images mymysql:v1<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>mymysql             v1                  37af1236adef        15 seconds ago      329 MB<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <strong><code>Docker commit</code>释义</strong></p>\n<p>  要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>\n<p>  <strong>慎用 <code>docker commit</code></strong></p>\n<p>  使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p>\n<p>  首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的 <code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，将会导致镜像极为臃肿。</p>\n<p>  此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p>\n<p>  而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p>\n</blockquote>\n<h2 id=\"☆-docker-cp-Copy-Data\"><a href=\"#☆-docker-cp-Copy-Data\" class=\"headerlink\" title=\"☆ docker cp (Copy Data)\"></a>☆ docker cp (Copy Data)</h2><p><code>docker cp</code> :用于容器与主机之间的数据拷贝。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-L</code>保持源目标中的链接</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp /www/runoob 96f7f14e99ab:/www/<br></code></pre></td></tr></table></figure>\n\n<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp /www/runoob 96f7f14e99ab:/www<br></code></pre></td></tr></table></figure>\n\n<p>将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker cp  96f7f14e99ab:/www /tmp/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-diff\"><a href=\"#docker-diff\" class=\"headerlink\" title=\"docker diff\"></a>docker diff</h2><p><code>docker diff</code> : 检查容器里文件结构的更改。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker diff [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>查看容器mymysql的文件结构更改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker diff mymysql<br>A /logs<br>A /mysql_data<br>C /run<br>C /run/mysqld<br>A /run/mysqld/mysqld.pid<br>A /run/mysqld/mysqld.sock<br>C /tmp<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"↓-镜像仓库管理-↓\"><a href=\"#↓-镜像仓库管理-↓\" class=\"headerlink\" title=\"↓ 镜像仓库管理 ↓\"></a>↓ 镜像仓库管理 ↓</h2><h2 id=\"docker-login-logout\"><a href=\"#docker-login-logout\" class=\"headerlink\" title=\"docker login&#x2F;logout\"></a>docker login&#x2F;logout</h2><p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>\n<p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker login [OPTIONS] [SERVER]<br>docker logout [OPTIONS] [SERVER]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>-u</code> :登陆的用户名</li>\n<li><code>-p</code> :登陆的密码</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>登陆到Docker Hub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker login -u 用户名 -p 密码<br></code></pre></td></tr></table></figure>\n\n<p>登出Docker Hub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker logout<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a>docker pull</h2><p><strong>docker pull :</strong> 从镜像仓库中拉取或者更新指定镜像</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :拉取所有 tagged 镜像</p>\n</li>\n<li><p><code>--disable-content-trust</code>忽略镜像的校验,默认开启</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从Docker Hub下载java最新版镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull java<br></code></pre></td></tr></table></figure>\n\n<p>从Docker Hub下载REPOSITORY为java的所有镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker pull -a java<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-push\"><a href=\"#docker-push\" class=\"headerlink\" title=\"docker push\"></a>docker push</h2><p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker push [OPTIONS] NAME[:TAG]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--disable-content-trust</code> :忽略镜像的校验,默认开启</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>上传本地镜像myapache:v1到镜像仓库中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker push myapache:v1<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"☆-docker-search\"><a href=\"#☆-docker-search\" class=\"headerlink\" title=\"☆ docker search\"></a>☆ docker search</h2><p><strong>docker search :</strong> 从Docker Hub查找镜像</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker search [OPTIONS] TERM<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--automated</code> :只列出 automated build类型的镜像；</li>\n<li><code>--no-trunc</code> :显示完整的镜像描述；</li>\n<li><code>-f &lt;过滤条件&gt;</code>:列出收藏数不小于指定值的镜像。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker search -f stars=10 java<br>NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED<br>java                  Java is a concurrent, class-based...   1037    [OK]       <br>anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]<br>develar/java                                                 46                 [OK]<br>isuper/java-oracle    This repository contains all java...   38                 [OK]<br>lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]<br>nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<p><strong>NAME:</strong> 镜像仓库源的名称</p>\n<p><strong>DESCRIPTION:</strong> 镜像的描述</p>\n<p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p>\n<p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>\n<p><strong>AUTOMATED:</strong> 自动构建。</p>\n<h2 id=\"↓-本地镜像管理-↓\"><a href=\"#↓-本地镜像管理-↓\" class=\"headerlink\" title=\"↓ 本地镜像管理 ↓\"></a>↓ 本地镜像管理 ↓</h2><h2 id=\"☆-docker-images\"><a href=\"#☆-docker-images\" class=\"headerlink\" title=\"☆ docker images\"></a>☆ docker images</h2><p><strong>docker images :</strong> 列出本地镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker images [OPTIONS] [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-a</code> :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</p>\n</li>\n<li><p><code>--digests</code> :显示镜像的摘要信息；</p>\n</li>\n<li><p><code>-f</code> :显示满足条件的镜像；</p>\n</li>\n<li><p><code>--format</code> :指定返回值的模板文件；</p>\n</li>\n<li><p><code>--no-trunc</code> :显示完整的镜像信息；</p>\n</li>\n<li><p><code>-q</code> :只显示镜像ID。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>查看本地镜像列表。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker images<br>REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE<br>mymysql                 v1                  37af1236adef        5 minutes ago       329 MB<br>runoob/ubuntu           v4                  1c06aa18edee        2 days ago          142.1 MB<br>&lt;none&gt;                  &lt;none&gt;              5c6e1090e771        2 days ago          165.9 MB<br>httpd                   latest              ed38aaffef30        11 days ago         195.1 MB<br>alpine                  latest              4e38e38c8ce0        2 weeks ago         4.799 MB<br>mongo                   3.2                 282fd552add6        3 weeks ago         336.1 MB<br>redis                   latest              4465e4bcad80        3 weeks ago         185.7 MB<br>php                     5.6-fpm             025041cd3aa5        3 weeks ago         456.3 MB<br>python                  3.5                 045767ddf24a        3 weeks ago         684.1 MB<br>...<br></code></pre></td></tr></table></figure>\n\n<p>列出本地镜像中REPOSITORY为ubuntu的镜像列表。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker images  ubuntu<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>ubuntu              14.04               90d5884b1ee0        9 weeks ago         188 MB<br>ubuntu              15.10               4e3b13c8a266        3 months ago        136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-rmi\"><a href=\"#docker-rmi\" class=\"headerlink\" title=\"docker rmi\"></a>docker rmi</h2><p><strong>docker rmi :</strong> 删除本地一个或多个镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker rmi [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-f</code> :强制删除；</p>\n</li>\n<li><p><code>--no-prune</code>不移除该镜像的过程镜像，默认移除；</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>强制删除本地镜像 runoob&#x2F;ubuntu:v4。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker rmi -f runoob/ubuntu:v4<br>Untagged: runoob/ubuntu:v4<br>Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072be<br>Deleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-tag\"><a href=\"#docker-tag\" class=\"headerlink\" title=\"docker tag\"></a>docker tag</h2><p><strong>docker tag :</strong> 标记本地镜像，将其归入某一仓库。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]<br></code></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>将镜像ubuntu:15.10标记为 runoob&#x2F;ubuntu:v3 镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker tag ubuntu:15.10 runoob/ubuntu:v3<br>root@runoob:~# docker images   runoob/ubuntu:v3<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>runoob/ubuntu       v3                  4e3b13c8a266        3 months ago        136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"☆-docker-build\"><a href=\"#☆-docker-build\" class=\"headerlink\" title=\"☆ docker build\"></a>☆ docker build</h2><p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build [OPTIONS] PATH | URL | -<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><code>--build-arg=[]</code>设置镜像创建时的变量；</li>\n<li><code>--cpu-shares</code>设置 cpu 使用权重；</li>\n<li><code>--cpu-period</code>限制 CPU CFS周期；</li>\n<li><code>--cpu-quota</code>限制 CPU CFS配额；</li>\n<li><code>--cpuset-cpus</code>指定使用的CPU id；</li>\n<li><code>--cpuset-mems</code>指定使用的内存 id；</li>\n<li><code>--disable-content-trust</code>忽略校验，默认开启；</li>\n<li><code>-f</code> :指定要使用的Dockerfile路径；</li>\n<li><code>--force-rm</code>设置镜像过程中删除中间容器；</li>\n<li><code>--isolation</code>使用容器隔离技术；</li>\n<li><code>--label=[]</code>设置镜像使用的元数据；</li>\n<li><code>-m</code>设置内存最大值；</li>\n<li><code>--memory-swap</code>:设置Swap的最大值为内存+swap，”-1”表示不限swap；</li>\n<li><code>--no-cache</code>:创建镜像的过程不使用缓存；</li>\n<li><code>--pull</code>:尝试去更新镜像的新版本；</li>\n<li><code>--quiet, -q</code>:安静模式，成功后只输出镜像 ID；</li>\n<li><code>--rm</code>:设置镜像成功后删除中间容器；</li>\n<li><code>--shm-size</code>:设置&#x2F;dev&#x2F;shm的大小，默认值是64M；</li>\n<li><code>--ulimit</code>:Ulimit配置。</li>\n<li><code>--squash</code>:将 Dockerfile 中所有的操作压缩为一层。</li>\n<li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>\n<li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob&#x2F;ubuntu:v1。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build -t runoob/ubuntu:v1 . <br></code></pre></td></tr></table></figure>\n\n<p>使用URL <strong>github.com&#x2F;creack&#x2F;docker-firefox</strong> 的 Dockerfile 创建镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker build github.com/creack/docker-firefox<br></code></pre></td></tr></table></figure>\n\n<p>也可以通过 -f Dockerfile 文件的位置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -f /path/to/a/Dockerfile .</span><br></code></pre></td></tr></table></figure>\n\n<p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -t <span class=\"hljs-built_in\">test</span>/myapp .</span><br>Sending build context to Docker daemon 2.048 kB<br>Error response from daemon: Unknown instruction: RUNCMD<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"docker-history\"><a href=\"#docker-history\" class=\"headerlink\" title=\"docker history\"></a>docker history</h2><p><strong>docker history :</strong> 查看指定镜像的创建历史。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker history [OPTIONS] IMAGE<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-H</code>:以可读的格式打印镜像大小和日期，默认为true；</p>\n</li>\n<li><p><code>--no-trunc</code> :显示完整的提交记录；</p>\n</li>\n<li><p><code>-q</code> :仅列出提交记录ID。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>查看本地镜像runoob&#x2F;ubuntu:v3的创建历史。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@runoob:~# docker history runoob/ubuntu:v3<br>IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT<br>4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B                 <br>&lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#x27;s/^#\\s*\\(deb.*universe\\)$/   1.863 kB            <br>&lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /u   701 B               <br>&lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-save\"><a href=\"#docker-save\" class=\"headerlink\" title=\"docker save\"></a>docker save</h2><p><strong>docker save :</strong> 将指定镜像保存成 tar 归档文件。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker save [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><code>-o</code>:输出到的文件。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>将镜像 runoob&#x2F;ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3<br>runoob@runoob:~$ ll my_ubuntu_v3.tar<br>-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-load\"><a href=\"#docker-load\" class=\"headerlink\" title=\"docker load\"></a>docker load</h2><p><strong>docker load :</strong> 导入使用 <a href=\"https://www.runoob.com/docker/docker-save-command.html\">docker save</a> 命令导出的镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker load [OPTIONS]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS 说明：</p>\n<ul>\n<li><p><code>--input , -i</code>: 指定导入的文件，代替 STDIN。</p>\n</li>\n<li><p><code>--quiet , -q</code>: 精简输出信息。</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>导入镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker image <span class=\"hljs-built_in\">ls</span></span><br><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker load &lt; busybox.tar.gz</span><br><br>Loaded image: busybox:latest<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images</span><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>busybox             latest              769b9341d937        7 weeks ago         2.489 MB<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker load --input fedora.tar</span><br><br>Loaded image: fedora:rawhide<br><br>Loaded image: fedora:20<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images</span><br><br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>busybox             latest              769b9341d937        7 weeks ago         2.489 MB<br>fedora              rawhide             0d20aec6529d        7 weeks ago         387 MB<br>fedora              20                  58394af37342        7 weeks ago         385.5 MB<br>fedora              heisenbug           58394af37342        7 weeks ago         385.5 MB<br>fedora              latest              58394af37342        7 weeks ago         385.5 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-import\"><a href=\"#docker-import\" class=\"headerlink\" title=\"docker import\"></a>docker import</h2><p><strong>docker import :</strong> 从归档文件中创建镜像。</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>\n\n<p>OPTIONS说明：</p>\n<ul>\n<li><p><code>-c</code>:应用docker 指令创建镜像；</p>\n</li>\n<li><p><code>-m</code>:提交时的说明文字；</p>\n</li>\n</ul>\n<p><strong>实例</strong></p>\n<p>从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob&#x2F;ubuntu:v4</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">runoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  <br>sha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39<br>runoob@runoob:~$ docker images runoob/ubuntu:v4<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>runoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h2><p><code>docker info</code> : 显示 Docker 信息，主机详细系统信息，镜像和容器信息。</p>\n<h2 id=\"docker-version\"><a href=\"#docker-version\" class=\"headerlink\" title=\"docker version\"></a>docker version</h2><p><code>docker version</code> :显示 Docker 版本信息。</p>\n<h1 id=\"Dockerfile的使用\"><a href=\"#Dockerfile的使用\" class=\"headerlink\" title=\"Dockerfile的使用\"></a>Dockerfile的使用</h1><h3 id=\"什么是-Dockerfile？\"><a href=\"#什么是-Dockerfile？\" class=\"headerlink\" title=\"什么是 Dockerfile？\"></a>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h2 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">❯ mkdir web_docker<br>❯ cd web_docker<br>❯ touch Dockerfile<br>❯ tree .. -f<br>..<br>└── ../web_docker<br>    └── ../web_docker/Dockerfile<br></code></pre></td></tr></table></figure>\n\n<p>在上面的命令中, 我们创建了 <code>web_docker</code>文件夹, <code>web_docker</code>文件夹就是我们的构建环境(build environment), docker称此环境为上下文(context)，或者构建上下文(context), docker会在构建镜像时构建上下文和该上下文中的文件和目录，上传到docker守护进程，这样docker守护进程就能直接访问你想在镜像中存储的任何代码文件和其他数据。</p>\n<h2 id=\"dockerfile-示例\"><a href=\"#dockerfile-示例\" class=\"headerlink\" title=\"dockerfile 示例\"></a>dockerfile 示例</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># version 0.0.1</span><br><span class=\"hljs-keyword\">FROM</span> ubuntu:<span class=\"hljs-number\">14.04</span><br><span class=\"hljs-keyword\">MAINTAINER</span> James Turnbull <span class=\"hljs-string\">&quot;james@example.com&quot;</span><br><span class=\"hljs-keyword\">ENV</span> REFRESHED_AT <span class=\"hljs-number\">2014</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">01</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get -y -q install nginx</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;Hi i am in you container&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">80</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  Dockerfile也支持注释, 使用#开头就是注释了</p>\n</blockquote>\n<hr>\n<h2 id=\"指令详解\"><a href=\"#指令详解\" class=\"headerlink\" title=\"指令详解\"></a>指令详解</h2><h3 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h3><p>构建镜像基于哪个镜像</p>\n<h3 id=\"MANTAINER\"><a href=\"#MANTAINER\" class=\"headerlink\" title=\"MANTAINER\"></a>MANTAINER</h3><p>镜像维护者 姓名 邮箱地址</p>\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>用于执行后面跟着的命令行命令。有以下俩种格式：</p>\n<p>shell 格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">RUN &lt;命令行命令&gt;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><br></code></pre></td></tr></table></figure>\n\n<p>exec 格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">例如：</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">RUN [<span class=\"hljs-string\">&quot;./test.php&quot;</span>, <span class=\"hljs-string\">&quot;dev&quot;</span>, <span class=\"hljs-string\">&quot;offline&quot;</span>] 等价于 RUN ./test.php dev offline</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">COPY [--chown=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span>&gt;</span>] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">源路径1</span>&gt;</span>...  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">目标路径</span>&gt;</span><br>COPY [--chown=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span>&gt;</span>] [&quot;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">源路径1</span>&gt;</span>&quot;,...  &quot;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">目标路径</span>&gt;</span>&quot;]<br></code></pre></td></tr></table></figure>\n\n<p>**[–chown&#x3D;<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>\n<p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> hom* /mydir/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> hom?.txt /mydir/</span><br></code></pre></td></tr></table></figure>\n\n<p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>\n<ul>\n<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>\n<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>\n<ul>\n<li>CMD 在docker run 时运行。</li>\n<li>RUN 是在 docker build。</li>\n</ul>\n<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> &lt;shell 命令&gt; </span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...] </span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...]  <span class=\"hljs-comment\"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span><br></code></pre></td></tr></table></figure>\n\n<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>\n<h3 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>\n<p>但是, 如果运行 docker run 时使用了 –entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</p>\n<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">ENTRYPOINT <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;&lt;executeable&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"hljs-string\">&quot;&lt;param2&gt;&quot;</span>,...]</span><br></code></pre></td></tr></table></figure>\n\n<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>\n<p>示例：</p>\n<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> nginx<br><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;nginx&quot;</span>, <span class=\"hljs-string\">&quot;-c&quot;</span>] <span class=\"hljs-comment\"># 定参</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class=\"hljs-comment\"># 变参 </span></span><br></code></pre></td></tr></table></figure>\n\n<p>1、不传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ docker <span class=\"hljs-keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"hljs-built_in\">test</span></span><br></code></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">nginx -c <span class=\"hljs-regexp\">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure>\n\n<p>2、传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ docker <span class=\"hljs-keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"hljs-built_in\">test</span> -c /etc/nginx/new.conf</span><br></code></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程(&#x2F;etc&#x2F;nginx&#x2F;new.conf:假设容器内已有此文件)</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">nginx -c <span class=\"hljs-regexp\">/etc/</span>nginx/<span class=\"hljs-keyword\">new</span>.conf<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ENV <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span><br>ENV <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key1</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value1</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key2</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value2</span>&gt;</span>...<br></code></pre></td></tr></table></figure>\n\n<p>以下示例设置 NODE_VERSION &#x3D; 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENV</span> NODE_VERSION <span class=\"hljs-number\">7.2</span>.<span class=\"hljs-number\">0</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> curl -SLO <span class=\"hljs-string\">&quot;https://nodejs.org/dist/v<span class=\"hljs-variable\">$NODE_VERSION</span>/node-v<span class=\"hljs-variable\">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \\</span><br><span class=\"language-bash\">  &amp;&amp; curl -SLO <span class=\"hljs-string\">&quot;https://nodejs.org/dist/v<span class=\"hljs-variable\">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ARG\"><a href=\"#ARG\" class=\"headerlink\" title=\"ARG\"></a>ARG</h3><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>\n<p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ARG <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">参数名</span>&gt;</span>[=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">默认值</span>&gt;</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">VOLUME</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;&lt;路径1&gt;&quot;</span>, <span class=\"hljs-string\">&quot;&lt;路径2&gt;&quot;</span>...]</span><br><span class=\"hljs-keyword\">VOLUME</span><span class=\"language-bash\"> &lt;路径&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>仅仅只是声明端口。</p>\n<p>作用：</p>\n<ul>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>\n<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">EXPOSE</span> &lt;端口<span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-meta\"> [&lt;端口2&gt;...]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>\n<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">WORKDIR <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">工作目录路径</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">USER <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">用户名</span>&gt;</span>[:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">用户组</span>&gt;</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"HEALTHCHECK\"><a href=\"#HEALTHCHECK\" class=\"headerlink\" title=\"HEALTHCHECK\"></a>HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>\n<p>格式：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">HEALTHCHECK [选项] <span class=\"hljs-built_in\">CMD</span> &lt;命令&gt;：设置检查容器健康状况的命令<br>HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令<br><br>HEALTHCHECK [选项] <span class=\"hljs-built_in\">CMD</span> &lt;命令&gt; : 这边 <span class=\"hljs-built_in\">CMD</span> 后面跟随的命令使用，可以参考 <span class=\"hljs-built_in\">CMD</span> 的用法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>\n<p>格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ONBUILD <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">其它指令</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a>LABEL</h3><p>LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">LABEL <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span> ...<br></code></pre></td></tr></table></figure>\n\n<p>比如我们可以添加镜像的作者：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">LABEL org<span class=\"hljs-selector-class\">.opencontainers</span><span class=\"hljs-selector-class\">.image</span>.authors=<span class=\"hljs-string\">&quot;runoob&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h1>",
            "tags": [
                "docker",
                "dockerfile",
                "namespace",
                "cgroup",
                "dockerhub"
            ]
        }
    ]
}