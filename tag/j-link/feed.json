{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"j-link\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2022/fd90dc4c/",
            "url": "https://www.oikiou.top/2022/fd90dc4c/",
            "title": "使用Jlink 烧写SPI Flash存储芯片",
            "date_published": "2022-08-26T15:23:05.000Z",
            "content_html": "<h1 id=\"使用Jlink-烧写SPI-Flash存储芯片\"><a href=\"#使用Jlink-烧写SPI-Flash存储芯片\" class=\"headerlink\" title=\"使用Jlink 烧写SPI Flash存储芯片\"></a>使用Jlink 烧写SPI Flash存储芯片</h1><p>参考:</p>\n<p><a href=\"https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/\">https://www.segger.com/products/debug-probes/j-link/tools/j-flash-spi/</a></p>\n<h1 id=\"硬件连接\"><a href=\"#硬件连接\" class=\"headerlink\" title=\"硬件连接\"></a>硬件连接</h1><h2 id=\"SPI-amp-Single\"><a href=\"#SPI-amp-Single\" class=\"headerlink\" title=\"SPI &amp; Single\"></a>SPI &amp; Single</h2><p><img src=\"/2022/fd90dc4c/formatpng.png\" alt=\"img\"></p>\n<p><img src=\"/2022/fd90dc4c/pinout-spi-20-pin.gif\" alt=\"引出线 spi 20 针\"></p>\n<h2 id=\"QSPI-amp-Quad\"><a href=\"#QSPI-amp-Quad\" class=\"headerlink\" title=\"QSPI &amp; Quad\"></a>QSPI &amp; Quad</h2><p><img src=\"/2022/fd90dc4c/pinout-qspi-20-pin.png\" alt=\"img\"></p>\n<blockquote>\n<p>  注意:</p>\n<p>  这里要注意的一点，正版的Jlink仿真器1脚是输入引脚，是外部提供参考电平的，但由于现在大部分的JLink仿真器都是学习(dao)版的，1脚不是输入，而是3.3v的输出(并不确定也有可能是5V的, 盗版的Jlink真的是什么乱七八糟的都有)，所以正常情况下可以直接用这个管教来给SPI Flash供电。</p>\n<p>  <strong>关于 nRESET 的注意事项</strong>：如果有另一个设备&#x2F;外围设备也控制 SPI 闪存（例如闪存连接到的 CPU），则 J-Link 的 nRESET 应连接到目标系统的复位或 CPU 的复位引脚确保 J-Link 可以在对 SPI 闪存进行编程时保持 CPU 处于复位状态。</p>\n<p>  <strong>一开始没注意到这个功能, 现在回过头来再看, 有这个功能之后烧芯片简直不要太简单, 根本不需要拆芯片了, 直接用芯片夹就可以烧录了.</strong></p>\n</blockquote>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>安装Jlink套件的时候会自带<code>JFlashSPI.exe</code>在开始菜单名称应该类似<code>J-Flash SPI</code>, 这是J-Flash的GUI程序,还有一个命令行的不多做介绍.</p>\n<blockquote>\n<p>  如果没有找到自带的, 请更新Jlink套件, 旧版确实不带这个东西.</p>\n<p>  Segger Jlink套件下载链接 <a href=\"https://www.segger.com/downloads/jlink/\">https://www.segger.com/downloads/jlink/</a></p>\n</blockquote>\n<p><img src=\"/2022/fd90dc4c/image-20220826224742256.png\" alt=\"image-20220826224742256\"></p>\n<p>点击<code>target -&gt; connet</code>连接到Jlink, 它会自动检测大部分SPI闪存, </p>\n<blockquote>\n<p>  有时候识别的具体型号并不准确, 但是这不重要他们参数类似, 可以正常完成编程的工作.</p>\n<p>  Jlink支持的SPI Flash型号可以在<a href=\"https://www.segger.com/products/debug-probes/j-link/technology/cpus-and-devices/supported-spi-flashes/\">点击这里</a>找到.</p>\n</blockquote>\n<p>点击<code>file -&gt; open data file </code>我们打开要烧录的文件.</p>\n<blockquote>\n<p>  bin 文件需要设定起始地址</p>\n<p>  hex文件自带了位置信息</p>\n</blockquote>\n<p>点击<code>target -&gt; auto</code>可以自动将文件烧录进去 还会进行读回校验.</p>\n<p>至此烧录完成.</p>\n<p><strong>Tips:</strong></p>\n<blockquote>\n<p>  点击<code>target -&gt; read back</code> 可以将SPI Flash内的数据读取出来<br>  点击<code>options -&gt; settings -&gt; setup -&gt; interface speed</code>可以修改时钟速度. </p>\n</blockquote>\n<p><strong>Other:</strong></p>\n<p>Jlink真的是超级牛的工具, J-Scope, RTT这些都很好用, 还有很多高级功能我还没用上.<br>我前面有写过RTT的笔记, 在调试一个项目的时候没法使用串口, 当时就是用RTT搭建了一个log平台.</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"winbood-W25Q128封装\"><a href=\"#winbood-W25Q128封装\" class=\"headerlink\" title=\"winbood W25Q128封装\"></a>winbood W25Q128封装</h2><p><img src=\"/2022/fd90dc4c/image-20220826104542006.png\" alt=\"image-20220826104542006\"></p>\n<p><img src=\"/2022/fd90dc4c/20210622091839750557.png\" alt=\"img\"></p>\n",
            "tags": [
                "spi",
                "j-link",
                "jlink",
                "flash",
                "j-tag"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/30f8332a/",
            "url": "https://www.oikiou.top/2021/30f8332a/",
            "title": "手动添加JLink不支持的芯片",
            "date_published": "2021-11-03T06:39:31.000Z",
            "content_html": "<h1 id=\"手动添加JLink不支持的芯片\"><a href=\"#手动添加JLink不支持的芯片\" class=\"headerlink\" title=\"手动添加JLink不支持的芯片\"></a>手动添加JLink不支持的芯片</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>市场上的新芯片层出不穷，JLink的官方支持不可能完全跟得上，这就尴尬了。但是好在Segger在设计时就想到了这一点，允许用户自己添加新芯片或扩展官方已经支持的芯片。本文只讲如何添加新芯片，参考的资料为<code>UM08001_JLink.pdf</code>中的第12章——<code>Open Flashloader</code>。</p>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>在添加前，JFlash里找不到BARROT的任何型号，</p>\n<p>添加后如下图</p>\n<p><img src=\"/2021/30f8332a/image-20211019164827957.png\" alt=\"image-20211019164827957\"></p>\n<h2 id=\"添加方法\"><a href=\"#添加方法\" class=\"headerlink\" title=\"添加方法\"></a>添加方法</h2><ul>\n<li><p>找到Jlink安装目录下的<code>JLinkDevices.xml</code>并打开；</p>\n</li>\n<li><p>默认位置<code>C:\\Program Files\\SEGGER\\JLink</code></p>\n<p>在打开的文件添加如下内容，因为这个文件里没有任何BARROT的芯片，所以我添加到文件末尾，如果文件已经有同厂家的其它芯片，建议还是放一起，方便维护。效果和代码放下面了，代码的解释在后面！</p>\n<p><img src=\"/2021/30f8332a/image-20211019164859196.png\" alt=\"image-20211019164859196\"></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--                  --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- BARROT (BR8551) --&gt;</span><br><span class=\"hljs-comment\">&lt;!--                  --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Device</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChipInfo</span> <span class=\"hljs-attr\">Vendor</span>=<span class=\"hljs-string\">&quot;BARROT&quot;</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;BR8551&quot;</span> <span class=\"hljs-attr\">Core</span>=<span class=\"hljs-string\">&quot;JLINK_CORE_CORTEX_M3&quot;</span> <span class=\"hljs-attr\">WorkRAMAddr</span>=<span class=\"hljs-string\">&quot;0x2000C000&quot;</span> <span class=\"hljs-attr\">WorkRAMSize</span>=<span class=\"hljs-string\">&quot;0x00004000&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlashBankInfo</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;ROM&quot;</span> <span class=\"hljs-attr\">BaseAddr</span>=<span class=\"hljs-string\">&quot;0x00000000&quot;</span> <span class=\"hljs-attr\">MaxSize</span>=<span class=\"hljs-string\">&quot;0x00060000&quot;</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">&quot;D:\\\\Project\\\\Panda\\\\Code\\\\bamboo\\\\panda\\\\tools\\\\Keil\\\\VFlash.FLM&quot;</span> <span class=\"hljs-attr\">LoaderType</span>=<span class=\"hljs-string\">&quot;FLASH_ALGO_TYPE_OPEN&quot;</span> <span class=\"hljs-attr\">AlwaysPresent</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlashBankInfo</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;LR_IROM1&quot;</span> <span class=\"hljs-attr\">BaseAddr</span>=<span class=\"hljs-string\">&quot;0x10000000&quot;</span> <span class=\"hljs-attr\">MaxSize</span>=<span class=\"hljs-string\">&quot;0x00080000&quot;</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">&quot;D:\\\\Project\\\\Panda\\\\Code\\\\bamboo\\\\panda\\\\tools\\\\Keil\\\\VFlash.FLM&quot;</span> <span class=\"hljs-attr\">LoaderType</span>=<span class=\"hljs-string\">&quot;FLASH_ALGO_TYPE_OPEN&quot;</span> <span class=\"hljs-attr\">AlwaysPresent</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Device</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>保存文件就添加完了，可以验证是否如文章开头的效果一样</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><ul>\n<li>最开始的三行是注释，注释嘛，随便写了，清晰明了就行；</li>\n<li><code>&lt;Device&gt;</code>和<code>&lt;/Device&gt;</code>必须成对出现，而且没有属性表。每个（系列）芯片都对应着这么一对。</li>\n<li><code>ChipInfo</code>是描述芯片的信息，必须在 <code>&lt;Device&gt;</code>和<code>&lt;/Device&gt;</code>内。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Vendor</td>\n<td align=\"center\">芯片厂家的名字，比如这里的”BARROT”</td>\n</tr>\n<tr>\n<td align=\"center\">Name</td>\n<td align=\"center\">芯片的具体型号，我用的就是BR8551</td>\n</tr>\n<tr>\n<td align=\"center\">Core</td>\n<td align=\"center\">芯片的内核，这个必须是JLink支持的内核之一，具体的名字可以在文档里的12.5.3.1    Attribute values - Core章节找到。</td>\n</tr>\n<tr>\n<td align=\"center\">WorkRAMAddr</td>\n<td align=\"center\">芯片RAM的起始地址，这个可以在用户手册里找到，也可以打开SDK里的官方例程，然后在工程配置里找到</td>\n</tr>\n<tr>\n<td align=\"center\">WorkRAMSize</td>\n<td align=\"center\">芯片RAM的大小，同样可以在用户手册里找到，也可以打开SDK里的官方例程，然后在工程配置里找到</td>\n</tr>\n<tr>\n<td align=\"center\">Aliases</td>\n<td align=\"center\">同系列的相同RAM和FLASH的型号</td>\n</tr>\n<tr>\n<td align=\"center\">JLinkScriptFile</td>\n<td align=\"center\">高级用法，有些芯片操作比较特殊，可以通过脚本去实现，这里我用不上</td>\n</tr>\n</tbody></table>\n<hr>\n<ul>\n<li><code>FlashBankInfo</code>描述芯片的Flash信息，有多块flash的话，每块对应一个<code>FlashBankInfo</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Name</td>\n<td align=\"center\">flash的名字，名字可以随便起</td>\n</tr>\n<tr>\n<td align=\"center\">BaseAddr</td>\n<td align=\"center\">flash的起始地址，可以在用户手册里找到</td>\n</tr>\n<tr>\n<td align=\"center\">MaxSize</td>\n<td align=\"center\">flash的大小，可以在用户手册里找到</td>\n</tr>\n<tr>\n<td align=\"center\">Loader</td>\n<td align=\"center\">烧录的算法，segger官方的是*.elf格式，*.flm是ARM的格式，keil里就用这个。这个路径可以是绝对地址也可以是相对地址，相对地址的话是从<code>JLinkDevices.xml</code>所在的路径为起始地址。</td>\n</tr>\n<tr>\n<td align=\"center\">LoaderType</td>\n<td align=\"center\">必须是12.5.4.1    Attribute values - LoaderType中列出的类型之一，目前只有FLASH_ALGO_TYPE_OPEN一个类型，而*.flm是支持这个类型的</td>\n</tr>\n<tr>\n<td align=\"center\">AlwaysPresent</td>\n<td align=\"center\">指示这个块flash是不是一直存在，本文是内部flash，当然一直存在</td>\n</tr>\n</tbody></table>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/d7fae221ac47\">工欲善其事，必先利其器：动手给JLink添加官方不支持的芯片</a></p>\n",
            "tags": [
                "j-link",
                "jlink"
            ]
        },
        {
            "id": "https://www.oikiou.top/2021/18d811b/",
            "url": "https://www.oikiou.top/2021/18d811b/",
            "title": "J-Link RTT的使用方法",
            "date_published": "2021-09-24T12:28:40.000Z",
            "content_html": "<h1 id=\"J-Link-RTT-amp-JTrace\"><a href=\"#J-Link-RTT-amp-JTrace\" class=\"headerlink\" title=\"J-Link RTT &amp; JTrace\"></a>J-Link RTT &amp; JTrace</h1><h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>Jlink可用直接输出调试信息，省去串口工具（配置麻烦+硬件接线乱+占用IO）</p>\n<p>Jlink输出调试信息有两种</p>\n<ul>\n<li>Jlink的Trace</li>\n<li>Jlink的RTT (Real Time Transfer)</li>\n</ul>\n<h2 id=\"Jlink-Trace\"><a href=\"#Jlink-Trace\" class=\"headerlink\" title=\"Jlink Trace\"></a>Jlink Trace</h2><hr>\n<p>！！！待完善！！！</p>\n<hr>\n<p>MDK 环境下：</p>\n<p><img src=\"/2021/18d811b/132307095276873.png\" alt=\"img\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port8(n)    (*((volatile unsigned char *)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port16(n)   (*((volatile unsigned short*)(0xE0000000+4*n)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DEMCR           (*((volatile unsigned long *)(0xE000EDFC)))</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TRCENA          0x01000000</span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fputc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ch, FILE *f)</span> <br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (DEMCR &amp; TRCENA) &#123;<br>    <span class=\"hljs-keyword\">while</span> (ITM_Port32(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>);<br>    ITM_Port8(<span class=\"hljs-number\">0</span>) = ch;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span>(ch);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"RTT\"><a href=\"#RTT\" class=\"headerlink\" title=\"RTT\"></a>RTT</h2><p><a href=\"https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/\">Jlink RTT 官网资料</a></p>\n<p>RTT其实原理就是读取RAM上某个Buff的数据，这个Buff可以通过RTT的CB(control block)找到。</p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><p>下载Jlink的工具后，安装后程序目录有Samples文件夹(default: C:\\Program Files\\SEGGER\\JLink\\Samples)，文件夹内就有RTT的源码。</p>\n<ol>\n<li>将源码的<code>RTT/</code>目录下 <code>SEGGER_RTT_Printf.c</code>  <code>SEGGER_RTT.c</code> 两个文件添加到工程里，并解决头文件包含问题。</li>\n<li>看 <code>Examples/</code>目录下就有使用历程，移植到你的工程就好。可以参考<code>Main_RTT_InputEchoApp.c</code>和<code>Main_RTT_PrintfTest.c</code>。</li>\n<li>打开 <code>J-Link RTT Viewer</code>软件，选择<code>Device</code>，输入<code>RTT Control Block</code>的地址connect即可。<ol>\n<li><code>RTT Control Block</code>的地址可以输入RAM的范围让<code>J-Link RTT Viewer</code>软件自己去搜索。</li>\n<li>也可手动输入，而RTT_V754a的<code>RTT Control Block</code>是<code>_SEGGER_RTT</code> 在<code> file:SEGGER_RTT.c line:279</code>。<img src=\"/2021/18d811b/image-20210917214218565.png\" alt=\"image-20210917214218565\"></li>\n</ol>\n</li>\n<li>一顿操作下来正常就可以收到数据了。</li>\n</ol>\n<h3 id=\"RTT-源码\"><a href=\"#RTT-源码\" class=\"headerlink\" title=\"RTT 源码\"></a>RTT 源码</h3><h4 id=\"Included-files\"><a href=\"#Included-files\" class=\"headerlink\" title=\"Included files\"></a>Included files</h4><ul>\n<li><code>RTT/</code><ul>\n<li><code>SEGGER_RTT.c</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT.h</code>               - RTT的主要模块。</li>\n<li><code>SEGGER_RTT_ASM_ARMv7M.S</code>    - ARMv7M 的优化实现</li>\n<li><code>SEGGER_RTT_Printf.c</code>        - (‘ SEGGER_RTT_Printf() ‘)的简单实现。</li>\n</ul>\n</li>\n<li><code>Syscalls/</code><ul>\n<li><code>SEGGER_RTT_Syscalls_*.c</code>    - <code>printf()</code> 重定向</li>\n</ul>\n</li>\n<li><code>Config/</code><ul>\n<li><code>SEGGER_RTT_Conf.h</code>          - RTT配置文件。</li>\n</ul>\n</li>\n<li><code>Examples/</code><ul>\n<li><code>Main_RTT_InputEchoApp.c</code>    - Example application which echoes input on Channel 0.</li>\n<li><code>Main_RTT_MenuApp.c</code>         - Example application to demonstrate RTT bi-directional functionality.</li>\n<li><code>Main_RTT_PrintfTest.c</code>      - Example application to test RTT’s simple printf implementation.</li>\n<li><code>Main_RTT_SpeedTestApp.c</code>    - Example application to measure RTT performance. (Requires embOS)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">函数名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SEGGER_RTT_Read()</td>\n<td align=\"center\">从输入缓冲区读取数据。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Write()</td>\n<td align=\"center\">将数据写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WriteString()</td>\n<td align=\"center\">将\\0结尾字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_printf()</td>\n<td align=\"center\">将格式化的字符串写入输出缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_GetKey()</td>\n<td align=\"center\">从输入缓冲区 0 中获取一个字符。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_HasKey()</td>\n<td align=\"center\">检查输入缓冲区 0 中是否有字符可用。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_WaitKey()</td>\n<td align=\"center\">等待输入缓冲区 0 中的字符可用并获取它。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigUpBuffer()</td>\n<td align=\"center\">配置向上（输出）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_ConfigDownBuffer()</td>\n<td align=\"center\">配置向下（输入）缓冲区。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_Init()</td>\n<td align=\"center\">仅使用 RAM 目标时初始化 RTT 控制块结构。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_SetTerminal()</td>\n<td align=\"center\">将“虚拟”终端设置为通过 Write 和 WriteString 用于通道 0 上的输出。</td>\n</tr>\n<tr>\n<td align=\"center\">SEGGER_RTT_TerminalOut()</td>\n<td align=\"center\">通过“虚拟”终端发送以\\0结尾的字符串。</td>\n</tr>\n</tbody></table>\n<h3 id=\"RTT-软件\"><a href=\"#RTT-软件\" class=\"headerlink\" title=\"RTT 软件\"></a>RTT 软件</h3><p><img src=\"/2021/18d811b/image-20210918101414512.png\" alt=\"image-20210918101414512\"></p>\n<ul>\n<li><p><code>J-Link RTT Viewer</code>软件用的比较多</p>\n</li>\n<li><p><code>J-Link RTT Logger</code>软件可以将输出的数据保存到文件，并显示通信速率和通信数据量。</p>\n</li>\n<li><p><code>J-Link RTT Client</code>可以在调试的时候，充当客户端，输出数据。据说支持中文</p>\n</li>\n</ul>\n<h3 id=\"note：\"><a href=\"#note：\" class=\"headerlink\" title=\"note：\"></a>note：</h3><ul>\n<li>程序如果跑在RAM中，J-Link可能会错误地识别出init部分中的块，而不是数据部分中的实际块。为了防止这种情况，将SEGGER_RTT_IN_RAM的定义设置为1。现在，J-Link将在应用程序中调用第一个SEGGER_RTT函数之后找到正确的RTT缓冲区。建议在应用程序开始时调用SEGGER_RTT_Init()。</li>\n</ul>\n<h4 id=\"不同通道输出数据\"><a href=\"#不同通道输出数据\" class=\"headerlink\" title=\"不同通道输出数据\"></a>不同通道输出数据</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 0\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 1\\r\\n&quot;</span>);<br>SEGGER_RTT_TerminalOut(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_TerminalOut 2\\r\\n&quot;</span>);<br><br><br><br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">0</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 0\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">1</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 1\\r\\n&quot;</span>);<br>SEGGER_RTT_SetTerminal(<span class=\"hljs-number\">2</span>);<br>SEGGER_RTT_printf(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;SEGGER_RTT_printf 2\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输出带颜色的字符\"><a href=\"#输出带颜色的字符\" class=\"headerlink\" title=\"输出带颜色的字符\"></a>输出带颜色的字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Control sequences, based on ANSI.</span><br><span class=\"hljs-comment\">// Can be used to control color, and clear the screen</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_RESET                <span class=\"hljs-string\">&quot;\\x1B[0m&quot;</span>         <span class=\"hljs-comment\">// Reset to default colors</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_CLEAR                <span class=\"hljs-string\">&quot;\\x1B[2J&quot;</span>         <span class=\"hljs-comment\">// Clear screen, reposition cursor to top left</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLACK           <span class=\"hljs-string\">&quot;\\x1B[2;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_RED             <span class=\"hljs-string\">&quot;\\x1B[2;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_GREEN           <span class=\"hljs-string\">&quot;\\x1B[2;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_YELLOW          <span class=\"hljs-string\">&quot;\\x1B[2;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BLUE            <span class=\"hljs-string\">&quot;\\x1B[2;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_MAGENTA         <span class=\"hljs-string\">&quot;\\x1B[2;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_CYAN            <span class=\"hljs-string\">&quot;\\x1B[2;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_WHITE           <span class=\"hljs-string\">&quot;\\x1B[2;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLACK    <span class=\"hljs-string\">&quot;\\x1B[1;30m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_RED      <span class=\"hljs-string\">&quot;\\x1B[1;31m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_GREEN    <span class=\"hljs-string\">&quot;\\x1B[1;32m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_YELLOW   <span class=\"hljs-string\">&quot;\\x1B[1;33m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_BLUE     <span class=\"hljs-string\">&quot;\\x1B[1;34m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_MAGENTA  <span class=\"hljs-string\">&quot;\\x1B[1;35m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_CYAN     <span class=\"hljs-string\">&quot;\\x1B[1;36m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_TEXT_BRIGHT_WHITE    <span class=\"hljs-string\">&quot;\\x1B[1;37m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLACK             <span class=\"hljs-string\">&quot;\\x1B[24;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_RED               <span class=\"hljs-string\">&quot;\\x1B[24;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_GREEN             <span class=\"hljs-string\">&quot;\\x1B[24;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_YELLOW            <span class=\"hljs-string\">&quot;\\x1B[24;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BLUE              <span class=\"hljs-string\">&quot;\\x1B[24;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_MAGENTA           <span class=\"hljs-string\">&quot;\\x1B[24;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_CYAN              <span class=\"hljs-string\">&quot;\\x1B[24;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_WHITE             <span class=\"hljs-string\">&quot;\\x1B[24;47m&quot;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLACK      <span class=\"hljs-string\">&quot;\\x1B[4;40m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_RED        <span class=\"hljs-string\">&quot;\\x1B[4;41m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_GREEN      <span class=\"hljs-string\">&quot;\\x1B[4;42m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_YELLOW     <span class=\"hljs-string\">&quot;\\x1B[4;43m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_BLUE       <span class=\"hljs-string\">&quot;\\x1B[4;44m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_MAGENTA    <span class=\"hljs-string\">&quot;\\x1B[4;45m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_CYAN       <span class=\"hljs-string\">&quot;\\x1B[4;46m&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> RTT_CTRL_BG_BRIGHT_WHITE      <span class=\"hljs-string\">&quot;\\x1B[4;47m&quot;</span></span><br><br><br>SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,RTT_CTRL_RESET<span class=\"hljs-string\">&quot;Red: &quot;</span>\\<br>                       RTT_CTRL_TEXT_RED<span class=\"hljs-string\">&quot;This text is red.&quot;</span>\\<br>                       RTT_CTRL_BG_BRIGHT_GREEN<span class=\"hljs-string\">&quot;This background is green.\\r\\n&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入字符\"><a href=\"#输入字符\" class=\"headerlink\" title=\"输入字符\"></a>输入字符</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    <span class=\"hljs-type\">char</span> r = SEGGER_RTT_GetKey();<br>    SEGGER_RTT_WriteString(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;input:%c\\r\\n&quot;</span>, r);<br>&#125;<br><br><br><span class=\"hljs-keyword\">if</span>(SEGGER_RTT_HasKey())<br>&#123;<br>    ReadNum = SEGGER_RTT_Read(<span class=\"hljs-number\">0</span>,&amp;acIn[<span class=\"hljs-number\">0</span>], <span class=\"hljs-keyword\">sizeof</span>(acIn));<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">20</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0x0A</span> != acIn[i])<br>        &#123;<br>            ReadNum++;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    SEGGER_RTT_Write(<span class=\"hljs-number\">0</span>,acIn,ReadNum);<br>    ReadNum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(acIn,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(acIn));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n",
            "tags": [
                "j-link",
                "rtt",
                "serial",
                "debug",
                "jlink"
            ]
        }
    ]
}