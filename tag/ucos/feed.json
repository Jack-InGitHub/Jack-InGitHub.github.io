{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"ucos\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2020/2ac84091/",
            "url": "https://www.oikiou.top/2020/2ac84091/",
            "title": "UCOS",
            "date_published": "2020-08-21T14:57:15.000Z",
            "content_html": "<h2 id=\"序章\"><a href=\"#序章\" class=\"headerlink\" title=\"序章\"></a>序章</h2><h3 id=\"延时函数\"><a href=\"#延时函数\" class=\"headerlink\" title=\"延时函数\"></a>延时函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSTimeDlyHMSM</span> <span class=\"hljs-params\">(CPU_INT16U   hours,</span><br><span class=\"hljs-params\">                     CPU_INT16U   minutes,</span><br><span class=\"hljs-params\">                     CPU_INT16U   seconds,</span><br><span class=\"hljs-params\">                     CPU_INT32U   milli,</span><br><span class=\"hljs-params\">                     OS_OPT       opt,</span><br><span class=\"hljs-params\">                     OS_ERR      *p_err)</span><br><br><span class=\"hljs-title function_\">OSTimeDlyHMSM</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,OS_OPT_TIME_HMSM_STRICT,&amp;err)</span>; <span class=\"hljs-comment\">//延时1s</span><br><span class=\"hljs-comment\">//strick   adj. 严格的；绝对的；精确的；详细的</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"任务管理\"><a href=\"#任务管理\" class=\"headerlink\" title=\"任务管理\"></a>任务管理</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//创建开始任务</span><br>\tOSTaskCreate((OS_TCB \t* )&amp;StartTaskTCB,\t\t<span class=\"hljs-comment\">//任务控制块</span><br>\t\t\t\t (CPU_CHAR\t* )<span class=\"hljs-string\">&quot;start task&quot;</span>, \t\t<span class=\"hljs-comment\">//任务名字</span><br>                 (OS_TASK_PTR )start_task, \t\t\t<span class=\"hljs-comment\">//任务函数</span><br>                 (<span class=\"hljs-type\">void</span>\t\t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//传递给任务函数的参数</span><br>                 (OS_PRIO\t  )START_TASK_PRIO,     <span class=\"hljs-comment\">//任务优先级</span><br>                 (CPU_STK   * )&amp;START_TASK_STK[<span class=\"hljs-number\">0</span>],\t<span class=\"hljs-comment\">//任务堆栈基地址</span><br>                 (CPU_STK_SIZE)START_STK_SIZE/<span class=\"hljs-number\">10</span>,\t<span class=\"hljs-comment\">//任务堆栈深度限位</span><br>                 (CPU_STK_SIZE)START_STK_SIZE,\t\t<span class=\"hljs-comment\">//任务堆栈大小</span><br>                 (OS_MSG_QTY  )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//任务内部消息队列能够接收的最大消息数目,为0时禁止接收消息</span><br>                 (OS_TICK\t  )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//当使能时间片轮转时的时间片长度，为0时为默认长度，</span><br>                 (<span class=\"hljs-type\">void</span>   \t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//用户补充的存储区</span><br>                 (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR, <span class=\"hljs-comment\">//任务选项</span><br>                 (OS_ERR \t* )&amp;err);\t\t\t\t<span class=\"hljs-comment\">//存放该函数错误时的返回值</span><br><br><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>(CPU_STK_SIZE)START_STK_SIZE/10,\t//任务堆栈深度限位</code>    一般设定小于10%即可</p>\n</li>\n<li><p><code>(OS_TCB \t* )&amp;StartTaskTCB,\t\t//任务控制块</code>   <strong>不要访问和更改其中的成员变量</strong></p>\n</li>\n</ol>\n<h4 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h4><ul>\n<li><p>数值越小优先级越高</p>\n</li>\n<li><p>os_cfg.h line48   <strong>OS_CFG_PRIO_MAX</strong>  最大优先级数</p>\n</li>\n</ul>\n<h4 id=\"就绪表\"><a href=\"#就绪表\" class=\"headerlink\" title=\"就绪表\"></a>就绪表</h4><ul>\n<li>优先级位映射表**OSPrioTbl[]**：用来记录哪个优先级下有任务就绪</li>\n<li>就绪任务列表**OSRdyList[]**：用来记录每一个优先级下所有就绪的任务</li>\n</ul>\n<h4 id=\"前导零\"><a href=\"#前导零\" class=\"headerlink\" title=\"前导零\"></a>前导零</h4><ul>\n<li>硬件计算  能计算一个值前面有多少零</li>\n</ul>\n<h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><h4 id=\"任务调度-1\"><a href=\"#任务调度-1\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h4><ul>\n<li>任务调度器 进入中断   OSIntEnter();  </li>\n<li>任务调度器 退出中断   OSIntExit();</li>\n</ul>\n<h4 id=\"发生任务调度的调度点\"><a href=\"#发生任务调度的调度点\" class=\"headerlink\" title=\"发生任务调度的调度点\"></a>发生任务调度的调度点</h4><ul>\n<li>延时函数OSTimeDly()（按时间延时）或者OSTimeDlyHMSM()（按节拍延时）</li>\n<li>创建、删除任务</li>\n<li>改变优先级</li>\n<li>通过调用OSTaskSuspend()将自身挂起、或解除某个挂起的任务</li>\n<li>OSSched() 用户自行请求调度</li>\n</ul>\n<h4 id=\"调度器上锁解锁\"><a href=\"#调度器上锁解锁\" class=\"headerlink\" title=\"调度器上锁解锁\"></a>调度器上锁解锁</h4><ul>\n<li>OSSchedLock()加锁</li>\n<li>OSSchedUnlock()解锁</li>\n</ul>\n<h4 id=\"时间片轮转调度\"><a href=\"#时间片轮转调度\" class=\"headerlink\" title=\"时间片轮转调度\"></a>时间片轮转调度</h4><ul>\n<li>待补充</li>\n</ul>\n<h2 id=\"UCOS系统初始化\"><a href=\"#UCOS系统初始化\" class=\"headerlink\" title=\"UCOS系统初始化\"></a>UCOS系统初始化</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>   OS_ERR err;<br>   ……<br>   <span class=\"hljs-comment\">//其他函数，一般为外设初始化函数</span><br>   ……<br>   OSInit(&amp;err);<br>   ……<br>   <span class=\"hljs-comment\">//其他函数，一般为创建任务函数</span><br>   ……<br>   OSStart(&amp;err);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OSInit()必须先于其他的UCOS函数调用包括OSStart()</li>\n</ul>\n<h2 id=\"任务创建与管理\"><a href=\"#任务创建与管理\" class=\"headerlink\" title=\"任务创建与管理\"></a>任务创建与管理</h2><h4 id=\"任务的创建\"><a href=\"#任务的创建\" class=\"headerlink\" title=\"任务的创建\"></a>任务的创建</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">OSTaskCreate((OS_TCB \t* )&amp;StartTaskTCB,\t\t<span class=\"hljs-comment\">//任务控制块</span><br>             (CPU_CHAR\t* )<span class=\"hljs-string\">&quot;start task&quot;</span>, \t\t<span class=\"hljs-comment\">//任务名字</span><br>             (OS_TASK_PTR )start_task, \t\t\t<span class=\"hljs-comment\">//任务函数</span><br>             (<span class=\"hljs-type\">void</span>\t\t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//传递给任务函数的参数</span><br>             (OS_PRIO\t  )START_TASK_PRIO,     <span class=\"hljs-comment\">//任务优先级</span><br>             (CPU_STK   * )&amp;START_TASK_STK[<span class=\"hljs-number\">0</span>],\t<span class=\"hljs-comment\">//任务堆栈基地址</span><br>             (CPU_STK_SIZE)START_STK_SIZE/<span class=\"hljs-number\">10</span>,\t<span class=\"hljs-comment\">//任务堆栈深度限位</span><br>             (CPU_STK_SIZE)START_STK_SIZE,\t\t<span class=\"hljs-comment\">//任务堆栈大小</span><br>             (OS_MSG_QTY  )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//任务内部消息队列能够接收的最大消息数目,为0时禁止接收消息</span><br>             (OS_TICK\t  )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//当使能时间片轮转时的时间片长度，为0时为默认长度，</span><br>             (<span class=\"hljs-type\">void</span>   \t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<span class=\"hljs-comment\">//用户补充的存储区</span><br>             (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR, <span class=\"hljs-comment\">//任务选项</span><br>             (OS_ERR \t* )&amp;err);\t\t\t\t<span class=\"hljs-comment\">//存放该函数错误时的返回值</span><br></code></pre></td></tr></table></figure>\n\n<p>OS_ERR 错误代码</p>\n<h4 id=\"任务的删除\"><a href=\"#任务的删除\" class=\"headerlink\" title=\"任务的删除\"></a>任务的删除</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSTaskDel</span> <span class=\"hljs-params\">(OS_TCB  *p_tcb,</span><br><span class=\"hljs-params\">                 OS_ERR  *p_err)</span>;<br>    <br>OSTaskDel((OS_TCB*)&amp;Task2_TaskTCB,&amp;err);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>不建议在系统运行时删除任务</p>\n<blockquote>\n<p>尽管UCOSIII允许在系统运行中删除任务，但是应该尽量避免这种操作，如果这个任务可能占有与其他任务共享的资源，在删除此任务之前这个被占有的资源没有被释放就有可能导致奇怪的结果。</p>\n</blockquote>\n<h2 id=\"任务的挂起与恢复\"><a href=\"#任务的挂起与恢复\" class=\"headerlink\" title=\"任务的挂起与恢复\"></a>任务的挂起与恢复</h2><h3 id=\"挂起\"><a href=\"#挂起\" class=\"headerlink\" title=\"挂起\"></a>挂起</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>   <span class=\"hljs-title function_\">OSTaskSuspend</span> <span class=\"hljs-params\">(OS_TCB  *p_tcb,</span><br><span class=\"hljs-params\">                      OS_ERR  *p_err)</span>;<br><br>OSTaskSuspend((OS_TCB*)&amp;Task2_TaskTCB,&amp;err);<span class=\"hljs-comment\">//挂起任务2</span><br></code></pre></td></tr></table></figure>\n\n<p>挂起错误</p>\n<ul>\n<li>任务被加锁</li>\n<li>任务空闲</li>\n</ul>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSTaskResume</span> <span class=\"hljs-params\">(OS_TCB  *p_tcb,</span><br><span class=\"hljs-params\">                    OS_ERR  *p_err)</span><br><br><span class=\"hljs-title function_\">OSTaskResume</span><span class=\"hljs-params\">((OS_TCB*)&amp;Task2_TaskTCB,&amp;err)</span>;\t<span class=\"hljs-comment\">//恢复任务2</span><br></code></pre></td></tr></table></figure>\n\n<p>恢复错误</p>\n<ul>\n<li>任务状态无效（错误的状态）、任务不是已经挂起的</li>\n<li>不能恢复自己</li>\n</ul>\n<h2 id=\"时间片轮转调度-1\"><a href=\"#时间片轮转调度-1\" class=\"headerlink\" title=\"时间片轮转调度\"></a>时间片轮转调度</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSSchedRoundRobinCfg</span> <span class=\"hljs-params\">(CPU_BOOLEAN   en,</span><br><span class=\"hljs-params\">                            OS_TICK       dflt_time_quanta,</span><br><span class=\"hljs-params\">                            OS_ERR       *p_err)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span>\tOS_CFG_SCHED_ROUND_ROBIN_EN  <span class=\"hljs-comment\">//当使用时间片轮转的时候</span></span><br>\t <span class=\"hljs-comment\">//使能时间片轮转调度功能,时间片长度为1个系统时钟节拍，既1*5=5ms</span><br>\t<span class=\"hljs-title function_\">OSSchedRoundRobinCfg</span><span class=\"hljs-params\">(DEF_ENABLED,<span class=\"hljs-number\">1</span>,&amp;err)</span>;  <br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>设置宏  <strong>OS_CFG_SCHED_ROUND_ROBIN_EN</strong>  为1</li>\n<li>调用函数  <strong>OSSchedRoundRobinCfg()</strong>  开启时间片轮转调度功能</li>\n</ul>\n<h3 id=\"时间片的放弃\"><a href=\"#时间片的放弃\" class=\"headerlink\" title=\"时间片的放弃\"></a>时间片的放弃</h3><p><code>OSSchedRoundRobinYield(&amp;err);</code></p>\n<h3 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h3><p>时间片如果不够执行可能会产生奇怪的效果请注意</p>\n<h2 id=\"系统内部任务\"><a href=\"#系统内部任务\" class=\"headerlink\" title=\"系统内部任务\"></a>系统内部任务</h2><ol>\n<li><p>中断服务管理任务</p>\n</li>\n<li><p>时钟节拍任务</p>\n</li>\n<li><p>定时任务（可选）</p>\n</li>\n<li><p>统计任务（可选）</p>\n</li>\n<li><p>空闲任务</p>\n</li>\n</ol>\n<h3 id=\"中断服务管理任务\"><a href=\"#中断服务管理任务\" class=\"headerlink\" title=\"中断服务管理任务\"></a>中断服务管理任务</h3><ul>\n<li>默认优先级最高，第一，不可更改。</li>\n</ul>\n<h3 id=\"时钟节拍任务\"><a href=\"#时钟节拍任务\" class=\"headerlink\" title=\"时钟节拍任务\"></a>时钟节拍任务</h3><ul>\n<li>优先级较高，第二。</li>\n</ul>\n<h3 id=\"定时任务（可选）\"><a href=\"#定时任务（可选）\" class=\"headerlink\" title=\"定时任务（可选）\"></a>定时任务（可选）</h3><ul>\n<li><p>默认优先级，第三。</p>\n</li>\n<li><p>提供软件定时功能</p>\n</li>\n<li><p>将宏OS_CFG_TMR_EN设置为1就会使能定时任务，在OSInit()中将会调用函数OS_TmrInit()来创建定时任务。</p>\n</li>\n</ul>\n<h3 id=\"统计任务（可选）\"><a href=\"#统计任务（可选）\" class=\"headerlink\" title=\"统计任务（可选）\"></a>统计任务（可选）</h3><ul>\n<li>一般优先级，倒数第二。</li>\n<li>统计CPU使用率，堆栈使用率</li>\n<li>可选创建（将宏<strong>OS_CFG_STAT_TASK_EN</strong>置1）</li>\n<li>必须在main函数创建的以一个任务也是唯一的一个应用任务里面调用函数**OSStatTaskCPUUsageInit()**查询使用情况</li>\n</ul>\n<h3 id=\"空闲任务\"><a href=\"#空闲任务\" class=\"headerlink\" title=\"空闲任务\"></a>空闲任务</h3><ul>\n<li>优先级最低，倒数第一。</li>\n<li>不能调用会使空闲任务进入等待态的函数。</li>\n<li><span style=\"color:red\">可统计CPU使用率</span>（用处）</li>\n</ul>\n<h2 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h2><p>共有8个</p>\n<ol>\n<li>OSIdleTaskHook()，\t\t<strong>空闲任务</strong>\t\t调用这个函数，可以用来让CPU进入低功耗模式</li>\n<li>OSInitHook()，\t\t\t<strong>系统初始化</strong>\t\t函数OSInit()调用此函数</li>\n<li>OSStatTaskHook(),\t\t <strong>统计任务每秒</strong>\t\t中都会调用这个函数，此函数允许你向统计任务中添加自己的应用函数。</li>\n<li>OSTaskCreateHook(),\t\t<strong>任务创建</strong>\t\t的钩子函数。</li>\n<li>OSTaskDelHook(),\t\t<strong>任务删除</strong>\t\t的钩子函数。</li>\n<li>OSTaskReturnHook(),\t\t<strong>任务意外返回</strong>\t\t时调用的钩子函数，比如删除某个任务</li>\n<li>OSTaskSwHook(),\t\t<strong>任务切换</strong>\t\t时候调用的钩子函数。</li>\n<li>OSTimeTickHook()，\t\t<strong>滴答定时器</strong>\t\t调用的钩子函数。</li>\n</ol>\n<h2 id=\"中断时间管理\"><a href=\"#中断时间管理\" class=\"headerlink\" title=\"中断时间管理\"></a>中断时间管理</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">USART1_IRQHandler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>       OSIntEnter();<br>      <span class=\"hljs-comment\">//中断服务程序</span><br>      OSIntExit();<br>&#125;  <br><br><br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>最大250级中断嵌套</li>\n</ul>\n<h2 id=\"临界区代码保护\"><a href=\"#临界区代码保护\" class=\"headerlink\" title=\"临界区代码保护\"></a>临界区代码保护</h2><blockquote>\n<p>临界区：不可被打断的代码段</p>\n</blockquote>\n<p>OS_CFG_ISR_POST_DEFERRED_EN   的值与临界段代码保护方式</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>关中断</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>调度器上锁（可能会被其它中断打断）</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>进入临界段</p>\n<ul>\n<li>一个进入函数</li>\n</ul>\n</li>\n<li><p>退出临界段</p>\n<ul>\n<li><p>退出后产生调度——-OS_CRITICAL_EXIT()</p>\n</li>\n<li><p>退出后不产生调度—-OS_CRITICAL_EXIT_NO_SCHED()</p>\n</li>\n<li></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"CPU-SR-ALLOC\"><a href=\"#CPU-SR-ALLOC\" class=\"headerlink\" title=\"CPU_SR_ALLOC()\"></a>CPU_SR_ALLOC()</h3><ol>\n<li>函数CPU_SR_ALLOC()是为CPU_CRITICAL_ENTER()和CPU_CRITICAL_EXIT()申请一个变量：</li>\n</ol>\n<p><code>#define  CPU_SR_ALLOC()           CPU_SR  cpu_sr = (CPU_SR)0</code></p>\n<p>这个是临界代码段，在下面一个小节有详细讲解。</p>\n<ol start=\"2\">\n<li>这样做是为了防止编译器警告。</li>\n</ol>\n<h2 id=\"任务延时\"><a href=\"#任务延时\" class=\"headerlink\" title=\"任务延时\"></a>任务延时</h2><ul>\n<li>开始延时</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>OSTimeDly()</th>\n<th>相对延时</th>\n<th>基于时钟节拍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>绝对延时</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>周期延时</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OSTimeDlyHMSM()</td>\n<td>相对延时</td>\n<td>基于时间</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>取消延时</p>\n<p>延时任务任务可通过在其他任务中调用函数OSTimeDlyResume()取消延时而进入就绪状态，此函数最后会引发一次任务调度。</p>\n</li>\n</ul>\n<h2 id=\"获取系统时间\"><a href=\"#获取系统时间\" class=\"headerlink\" title=\"获取系统时间\"></a>获取系统时间</h2><p>​\tUCOSIII定义了一个 CPU_INT32U 类型的全局变量 OSTickCtr 来记录系统时钟节拍数，在调用 <strong>OSInit()</strong> 时被初始化为 0，以后每发生1个时钟节拍，OSTickCtr加1。</p>\n<ul>\n<li>OSTimeSet()允许用户改变当前时钟节拍计数器的值</li>\n<li>OSTimeGet()用来获取动迁时钟节拍计数器的值</li>\n</ul>\n<h2 id=\"软件定时器\"><a href=\"#软件定时器\" class=\"headerlink\" title=\"软件定时器\"></a>软件定时器</h2><p>​\t定时器本质是递减计数器，当计数器减到零时可以执行回调函数。应用程序可以有任意数量的定时器，UCOSIII中定时器的时间分辨率由一个宏 <strong>OS_CFG_TMR_TASK_RATE_HZ</strong> 确定，单位为HZ，默认为100Hz。</p>\n<ul>\n<li>避免在回调函数使用   <strong>阻塞</strong>，<strong>删除</strong>   定时器任务的函数。</li>\n</ul>\n<h3 id=\"软件定时器的API\"><a href=\"#软件定时器的API\" class=\"headerlink\" title=\"软件定时器的API\"></a>软件定时器的API</h3><table>\n<thead>\n<tr>\n<th><strong>OSTmrCreate()</strong></th>\n<th><strong>创建定时器并制定运行模式</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OSTmrDel()</td>\n<td>删除定时器</td>\n</tr>\n<tr>\n<td>OSTmrRemainGet()</td>\n<td>获取定时器的剩余时间</td>\n</tr>\n<tr>\n<td><strong>OSTmrStart()</strong></td>\n<td><strong>启动定时器计数</strong></td>\n</tr>\n<tr>\n<td>OSTmrStateGet()</td>\n<td>获取当前定时器状态</td>\n</tr>\n<tr>\n<td><strong>OSTmrStop()</strong></td>\n<td><strong>停止计数器倒计时</strong></td>\n</tr>\n</tbody></table>\n<p><strong>OSTmrCreate()有三种模式</strong></p>\n<ul>\n<li>单次模式（通过OSTmrStart()触发）</li>\n<li>周期无延迟模式</li>\n<li>周期有延迟模式</li>\n</ul>\n<h2 id=\"信号量、互斥信号量、内嵌信号量\"><a href=\"#信号量、互斥信号量、内嵌信号量\" class=\"headerlink\" title=\"信号量、互斥信号量、内嵌信号量\"></a>信号量、互斥信号量、内嵌信号量</h2><h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h3><p>信号量像是一种上锁机制，代码必须获得对应的钥匙才能继续执行，一旦获得了钥匙，也就意味着该任务具有进入被锁部分代码的权限。一旦执行至被锁代码段，则任务一直等待，直到对应被锁部分代码的钥匙被再次释放才能继续执行。</p>\n<ul>\n<li>信号量用于控制对共享资源的保护，但是现在基本用来做任务同步用。</li>\n</ul>\n<h4 id=\"信号量API\"><a href=\"#信号量API\" class=\"headerlink\" title=\"信号量API\"></a>信号量API</h4><table>\n<thead>\n<tr>\n<th>OSSemCreate()</th>\n<th>建立一个信号量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OSSemDel()</td>\n<td>删除一个信号量</td>\n</tr>\n<tr>\n<td><strong>OSSemPend()</strong></td>\n<td><strong>等待一个信号量</strong></td>\n</tr>\n<tr>\n<td>OSSemPendAbrot()</td>\n<td>取消等待</td>\n</tr>\n<tr>\n<td><strong>OSSemPost()</strong></td>\n<td><strong>释放或者发出一个信号量</strong></td>\n</tr>\n<tr>\n<td>OSSemSet()</td>\n<td>强制设置一个信号量的值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSSemCreate</span> <span class=\"hljs-params\">(OS_SEM      *p_sem,\t\t<span class=\"hljs-comment\">//OS_SEM\tMY_SEM;\t定义一个信号量，用于访问共享资源</span></span><br><span class=\"hljs-params\">                   CPU_CHAR    *p_name,\t\t<span class=\"hljs-comment\">//&quot;MY_SEM&quot;\t名称</span></span><br><span class=\"hljs-params\">                   OS_SEM_CTR   cnt,\t\t<span class=\"hljs-comment\">//如果设置成计数型信号量 此处设置成对应数字即可   如果设置成二进制信号量   此处设置成0即可</span></span><br><span class=\"hljs-params\">                   OS_ERR      *p_err)</span>\t\t<span class=\"hljs-comment\">//</span><br>    <br><span class=\"hljs-title function_\">OSSemCreate</span> <span class=\"hljs-params\">((OS_SEM*\t)&amp;MY_SEM,</span><br><span class=\"hljs-params\">             (CPU_CHAR*\t)<span class=\"hljs-string\">&quot;MY_SEM&quot;</span>,</span><br><span class=\"hljs-params\">             (OS_SEM_CTR)<span class=\"hljs-number\">1</span>,\t\t</span><br><span class=\"hljs-params\">             (OS_ERR*\t)&amp;err)</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OS_SEM_CTR   cnt,\t\t<ul>\n<li>如果设置成计数型信号量   此处设置成对应数字即可   </li>\n<li>如果设置成二进制信号量   此处设置成0，指示事件的发生（同步）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">OS_SEM_CTR  <span class=\"hljs-title function_\">OSSemPend</span> <span class=\"hljs-params\">(OS_SEM   *p_sem,</span><br><span class=\"hljs-params\">                       OS_TICK   timeout,</span><br><span class=\"hljs-params\">                       OS_OPT    opt,</span><br><span class=\"hljs-params\">                       CPU_TS   *p_ts,</span><br><span class=\"hljs-params\">                       OS_ERR   *p_err)</span><br><br><span class=\"hljs-title function_\">OSSemPend</span><span class=\"hljs-params\">(&amp;MY_SEM,<span class=\"hljs-number\">0</span>,OS_OPT_PEND_BLOCKING,<span class=\"hljs-number\">0</span>,&amp;err)</span>; \t<span class=\"hljs-comment\">//请求信号量</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OS_OPT    opt,<ul>\n<li>OS_OPT_PEND_BLOCKING —————-&gt;  阻塞式</li>\n<li>OS_OPT_PEND_NON_BLOCKING ——-&gt; 非阻塞式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">OS_SEM_CTR  <span class=\"hljs-title function_\">OSSemPost</span> <span class=\"hljs-params\">(OS_SEM  *p_sem,</span><br><span class=\"hljs-params\">                       OS_OPT   opt,</span><br><span class=\"hljs-params\">                       OS_ERR  *p_err)</span><br>    <br><span class=\"hljs-title function_\">OSSemPost</span> <span class=\"hljs-params\">(&amp;MY_SEM,OS_OPT_POST_1,&amp;err)</span>;\t\t\t\t<span class=\"hljs-comment\">//发送 释放 信号量</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OS_OPT    opt，<ul>\n<li>OS_OPT_POST_1 —–&gt;只使能等待信号量的最高优先级任务   (如果任务正在等待)。</li>\n<li>OS_OPT_POST_ALL  ——&gt;发送到所有等待信号量的任务</li>\n<li>OS_OPT_POST_NO_SCHED  ———&gt;不调用调度程序  可以与其他选项之一一起添加。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"互斥信号量\"><a href=\"#互斥信号量\" class=\"headerlink\" title=\"互斥信号量\"></a>互斥信号量</h3><h4 id=\"互斥信号量API\"><a href=\"#互斥信号量API\" class=\"headerlink\" title=\"互斥信号量API\"></a>互斥信号量API</h4><table>\n<thead>\n<tr>\n<th>OSMutexCreate()</th>\n<th>建立一个互斥信号量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OSMutexDel()</td>\n<td>删除一个互斥信号量</td>\n</tr>\n<tr>\n<td><strong>OSMutexPend()</strong></td>\n<td><strong>等待一个互斥信号量</strong></td>\n</tr>\n<tr>\n<td>OSMutexPendAbrot()</td>\n<td>取消等待</td>\n</tr>\n<tr>\n<td><strong>OSMutexPost()</strong></td>\n<td><strong>释放或者发布一个互斥信号量</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"内嵌信号量\"><a href=\"#内嵌信号量\" class=\"headerlink\" title=\"内嵌信号量\"></a>内嵌信号量</h3><table>\n<thead>\n<tr>\n<th>OSTaskSemPend()</th>\n<th>等待一个任务信号量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OSTaskSemPendAbort()</td>\n<td>取消等待任务信号量</td>\n</tr>\n<tr>\n<td><strong>OSTaskSemPost()</strong></td>\n<td><strong>发布任务信号量</strong></td>\n</tr>\n<tr>\n<td>OSTaskSemSet()</td>\n<td>强行设置任务信号量计数</td>\n</tr>\n</tbody></table>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><h3 id=\"消息队列-1\"><a href=\"#消息队列-1\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>OSQCreate()</strong></td>\n<td><strong>创建一个消息   队列</strong></td>\n</tr>\n<tr>\n<td>OSQDel()</td>\n<td>删除一个消息队列</td>\n</tr>\n<tr>\n<td>OSQFlush()</td>\n<td>清空消息队列</td>\n</tr>\n<tr>\n<td><strong>OSQPend()</strong></td>\n<td><strong>等待消息</strong></td>\n</tr>\n<tr>\n<td>OSQPendAbort()</td>\n<td>取消等待消息</td>\n</tr>\n<tr>\n<td><strong>OSQPost()</strong></td>\n<td><strong>向消息队列发布一则消息</strong></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">OSQCreate</span> <span class=\"hljs-params\">(OS_Q        *p_q,</span><br><span class=\"hljs-params\">                 CPU_CHAR    *p_name,</span><br><span class=\"hljs-params\">                 OS_MSG_QTY   max_qty,</span><br><span class=\"hljs-params\">                 OS_ERR      *p_err)</span><br>    <br><span class=\"hljs-title function_\">OSQCreate</span> <span class=\"hljs-params\">((OS_Q*\t\t)&amp;KEY_Msg,\t<span class=\"hljs-comment\">//消息队列</span></span><br><span class=\"hljs-params\">           (CPU_CHAR*\t)<span class=\"hljs-string\">&quot;KEY Msg&quot;</span>,\t<span class=\"hljs-comment\">//消息队列名称</span></span><br><span class=\"hljs-params\">           (OS_MSG_QTY\t)KEYMSG_Q_NUM,\t<span class=\"hljs-comment\">//消息队列长度，这里设置为1</span></span><br><span class=\"hljs-params\">           (OS_ERR*\t)&amp;err)</span>;\t\t<span class=\"hljs-comment\">//错误码</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//发送消息</span><br>OSQPost((OS_Q*\t\t)&amp;DATA_Msg,\t\t<br>        (<span class=\"hljs-type\">void</span>*\t\t)pbuf,<br>        (OS_MSG_SIZE)<span class=\"hljs-number\">10</span>,<br>        (OS_OPT\t\t)OS_OPT_POST_FIFO,<br>        (OS_ERR*\t)&amp;err);<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//请求消息</span><br>p=OSQPend((OS_Q*\t\t)&amp;DATA_Msg,   <br>          (OS_TICK\t\t)<span class=\"hljs-number\">0</span>,<br>          (OS_OPT\t\t)OS_OPT_PEND_BLOCKING,<br>          (OS_MSG_SIZE*\t)&amp;size,\t<br>          (CPU_TS*\t\t)<span class=\"hljs-number\">0</span>,<br>          (OS_ERR*\t\t)&amp;err);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"任务内建消息队列\"><a href=\"#任务内建消息队列\" class=\"headerlink\" title=\"任务内建消息队列\"></a>任务内建消息队列</h3><table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>OSTaskQPend()</strong></td>\n<td><strong>等待消息</strong></td>\n</tr>\n<tr>\n<td>OSTaskQPendAbort()</td>\n<td>取消等待消息</td>\n</tr>\n<tr>\n<td><strong>OSTaskQPost()</strong></td>\n<td><strong>向任务发布一则消息</strong></td>\n</tr>\n<tr>\n<td>OSTaskQFlush()</td>\n<td>清空任务的消息队列</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//创建MSGDIS任务</span><br>OSTaskCreate((OS_TCB \t* )&amp;Msgdis_TaskTCB,\t\t<br>             (CPU_CHAR\t* )<span class=\"hljs-string\">&quot;Msgdis task&quot;</span>, \t\t<br>             (OS_TASK_PTR )msgdis_task, \t\t\t<br>             (<span class=\"hljs-type\">void</span>\t\t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<br>             (OS_PRIO\t  )MSGDIS_TASK_PRIO,     <br>             (CPU_STK   * )&amp;MSGDIS_TASK_STK[<span class=\"hljs-number\">0</span>],\t<br>             (CPU_STK_SIZE)MSGDIS_STK_SIZE/<span class=\"hljs-number\">10</span>,\t<br>             (CPU_STK_SIZE)MSGDIS_STK_SIZE,\t\t<br>             (OS_MSG_QTY  )TASK_Q_NUM,\t\t<span class=\"hljs-comment\">//任务Msgdis_task需要使用内建消息队列，消息队列长度为4\t\t\t\t\t</span><br>             (OS_TICK\t  )<span class=\"hljs-number\">0</span>,  \t\t\t\t\t<br>             (<span class=\"hljs-type\">void</span>   \t* )<span class=\"hljs-number\">0</span>,\t\t\t\t\t<br>             (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,<br>             (OS_ERR \t* )&amp;err);<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>注意看 OS_MSG_QTY 正常时其设置为0  使用内建消息队列将之设置成对应的数量即可</li>\n</ul>\n<h2 id=\"事件标志组\"><a href=\"#事件标志组\" class=\"headerlink\" title=\"事件标志组\"></a>事件标志组</h2><p>​       在UCOSIII中事件标志组为OS_FLAG_GRP，如果需要使用事件标志组的时候需要将宏OS_CFG_FLAG_EN置1，</p>\n<table>\n<thead>\n<tr>\n<th><strong>函数名</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>OSFlagCreate()</strong></td>\n<td><strong>创建事件标志组</strong></td>\n</tr>\n<tr>\n<td>OSFlagDel()</td>\n<td>删除事件标志组</td>\n</tr>\n<tr>\n<td><strong>OSFlagPend()</strong></td>\n<td><strong>等待事件标志组</strong></td>\n</tr>\n<tr>\n<td>OSFlagPendAbort()</td>\n<td>取消等待事件标志</td>\n</tr>\n<tr>\n<td>OSFlagPendGetFlagsRdy()</td>\n<td>获取使任务就绪的事件标志</td>\n</tr>\n<tr>\n<td><strong>OSFlagPost()</strong></td>\n<td><strong>向事件标志组发布标志</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"同时等待多个内核对象\"><a href=\"#同时等待多个内核对象\" class=\"headerlink\" title=\"同时等待多个内核对象\"></a>同时等待多个内核对象</h2><p>​\t在UCOSIII中允许任务同时等待多个<strong>信号量</strong>和多个<strong>消息队列</strong>，也就是说，UCOSIII不支持同时等待多个事件标志组或互斥信号量。</p>\n<p>​    一个任务可以等待任意数量的信号量和消息队列，第一个信号量或消息队列的发布会导致该任务进入就绪态。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">OS_OBJ_QTY  <span class=\"hljs-title function_\">OSPendMulti</span> <span class=\"hljs-params\">(OS_PEND_DATA  *p_pend_data_tbl,</span><br><span class=\"hljs-params\">                         OS_OBJ_QTY     tbl_size,</span><br><span class=\"hljs-params\">                         OS_TICK        timeout,</span><br><span class=\"hljs-params\">                         OS_OPT         opt,</span><br><span class=\"hljs-params\">                         OS_ERR        *p_err)</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">OS_SEM\tTest_Sem1;\t\t\t<span class=\"hljs-comment\">//信号量1\t\t</span><br>OS_SEM\tTest_Sem2;\t\t\t<span class=\"hljs-comment\">//信号量2</span><br>OS_Q\tTest_Q;\t\t\t\t<span class=\"hljs-comment\">//消息队列</span><br><br>OS_PEND_DATA pend_multi_tbl[CORE_OBJ_NUM];\t<br><br>pend_multi_tbl[<span class=\"hljs-number\">0</span>].PendObjPtr=(OS_PEND_OBJ*)&amp;Test_Sem1;<br>pend_multi_tbl[<span class=\"hljs-number\">1</span>].PendObjPtr=(OS_PEND_OBJ*)&amp;Test_Sem2;<br>pend_multi_tbl[<span class=\"hljs-number\">2</span>].PendObjPtr=(OS_PEND_OBJ*)&amp;Test_Q;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2>",
            "tags": [
                "rtos",
                "ucos"
            ]
        }
    ]
}