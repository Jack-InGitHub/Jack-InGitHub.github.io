{
    "version": "https://jsonfeed.org/version/1",
    "title": "Oikiou's Blog • All posts by \"modbus\" tag",
    "description": "Blog",
    "home_page_url": "https://www.oikiou.top",
    "items": [
        {
            "id": "https://www.oikiou.top/2020/7d358aa2/",
            "url": "https://www.oikiou.top/2020/7d358aa2/",
            "title": "Modbus",
            "date_published": "2020-08-21T14:57:15.000Z",
            "content_html": "<h1 id=\"Modbus\"><a href=\"#Modbus\" class=\"headerlink\" title=\"Modbus\"></a>Modbus</h1><p><a href=\"https://wenku.baidu.com/view/ef2f8bfe81eb6294dd88d0d233d4b14e85243e3a.html\">百度文库 MODBUS协议最简单又是最直白的解释</a></p>\n<ul>\n<li><p>分为RTU（发Hex）模式和ASCII（发字符）模式</p>\n</li>\n<li><p>从机地址 0-247 （其中0为广播地址）</p>\n</li>\n<li><p>通信格式</p>\n</li>\n<li><p><strong>ASCII</strong></p>\n<p>起始符+<strong>设备地址(1Byte)+功能码(1Byte)+数据(nByte n&lt;253)+校验(2Byte LRC)</strong>+结束符</p>\n<ul>\n<li>起始符——ASCII的起始符为‘:’一个冒号</li>\n<li>设备地址——0-247</li>\n<li>功能码——见下文</li>\n<li>数据——略</li>\n<li>校验——<strong>起始符 和 校验符</strong>  之间的所有数据        一般用LRC校验</li>\n<li>结束符——Chr$（13）+Chr（10）</li>\n<li>例—— : (起)    02(地址) 03(功能) 0a00(数据) 0004(校验)    Chr$(13)Chr(10)(终)</li>\n<li>设备地址、功能码、数据、校验 都是用的十六进制的字符形式 例如发送0x16就发送“16”</li>\n</ul>\n</li>\n<li><p><strong>RTU</strong></p>\n<p>起始符+<strong>设备地址(1Byte)+功能码(1Byte)+数据(nByte n&lt;253)+校验(2Byte CRC16)</strong>+结束符</p>\n<ul>\n<li>起始符——3.5个字符的时间间隔</li>\n<li>设备地址——0-247</li>\n<li>功能码——见下文</li>\n<li>数据——略</li>\n<li>校验——<strong>起始符 和 校验符</strong>  之间的所有数据        一般用CRC16校验</li>\n<li>结束符——3.5个字符的时间间隔</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"功能表\"><a href=\"#功能表\" class=\"headerlink\" title=\"功能表\"></a>功能表</h1><table>\n<thead>\n<tr>\n<th align=\"center\">功能码</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td>读取线圈状态</td>\n<td>取得一组逻辑线圈的当前状态（ON&#x2F;OFF)</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>读取输入状态</td>\n<td>取得一组开关输入的当前状态（ON&#x2F;OFF)</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>读取保持寄存器</td>\n<td>在一个或多个保持寄存器中取得当前的二进制值</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>读取输入寄存器</td>\n<td>在一个或多个输入寄存器中取得当前的二进制值</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>强置单线圈</td>\n<td>强置一个逻辑线圈的通断状态</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td>预置单寄存器</td>\n<td>把具体二进值装入一个保持寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td>读取异常状态</td>\n<td>取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td>回送诊断校验</td>\n<td>把诊断校验报文送从机，以对通信处理进行评鉴</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td>编程（只用于484）</td>\n<td>使主机模拟编程器作用，修改PC从机逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td>控询（只用于484）</td>\n<td>可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td>读取事件计数</td>\n<td>可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td>读取通信事件记录</td>\n<td>可是主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td>编程（184&#x2F;384 484 584）</td>\n<td>可使主机模拟编程器功能修改PC从机逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td>探询（184&#x2F;384 484 584）</td>\n<td>可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td>强置多线圈</td>\n<td>强置一串连续逻辑线圈的通断</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td>预置多寄存器</td>\n<td>把具体的二进制值装入一串连续的保持寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">17</td>\n<td>报告从机标识</td>\n<td>可使主机判断编址从机的类型及该从机运行指示灯的状态</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td>（884和MICRO 84）</td>\n<td>可使主机模拟编程功能，修改PC状态逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td>重置通信链路</td>\n<td>发生非可修改错误后，是从机复位于已知状态，可重置顺序字节</td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td>读取通用参数（584L）</td>\n<td>显示扩展存储器文件中的数据信息</td>\n</tr>\n<tr>\n<td align=\"center\">21</td>\n<td>写入通用参数（584L）</td>\n<td>把通用参数写入扩展存储文件，或修改之</td>\n</tr>\n<tr>\n<td align=\"center\">22～64</td>\n<td>保留作扩展功能备用</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">65～72</td>\n<td>保留以备用户功能所用</td>\n<td>留作用户功能的扩展编码</td>\n</tr>\n<tr>\n<td align=\"center\">73～119</td>\n<td>非法功能</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">120～127</td>\n<td>保留</td>\n<td>留作内部作用</td>\n</tr>\n<tr>\n<td align=\"center\">128～255</td>\n<td>保留</td>\n<td>用于异常应答</td>\n</tr>\n</tbody></table>\n<h2 id=\"0x01-读取线圈状态（数字量）\"><a href=\"#0x01-读取线圈状态（数字量）\" class=\"headerlink\" title=\"0x01 读取线圈状态（数字量）\"></a>0x01 读取线圈状态（数字量）</h2><p><strong>0x01号命令，读取一个或多个    可读写数字量寄存器    （读取线圈状态）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>起始地址高八位+低八位</th>\n<th>读取寄存器数量高八位+低八位</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x01</td>\n<td>0x00+0x13</td>\n<td>0x00+0x25</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li>设备地址与功能码：在一个485总线上可以挂接多个设备，此处的设备地址表示想和哪一个设备通讯。例子中为想和0x11通讯。读取数字量的命令号固定为0x01。</li>\n<li>起始地址高8位、低8位：表示想读取的开关量的起始地址(起始地址为0)。比如例子中的起始地址为0x0013。</li>\n<li>寄存器数高8位、低8位：表示从起始地址开始读多少个开关量。例子中为37(0x0025)个开关量。</li>\n<li>CRC校验：是从开头一直校验到此之前。</li>\n</ol>\n<p><strong>设备响应</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>返回的字节个数</th>\n<th>返回的数据1+数据2+….+数据n</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x01</td>\n<td>0x05</td>\n<td>0xcd+0x6b+0xb2+0x0e+0x1b</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li><p>设备地址与功能码：上同，0x01。</p>\n</li>\n<li><p>返回的字节个数：表示数据的字节个数，也就是数据的n的值。</p>\n</li>\n<li><p>数据1…n：由于每一个数据是一个8位的数，所以每一个数据表示8个开关量的值，每一位为0表示对应的开关断开，为1表示闭合。</p>\n<p><strong>如果询问的开关量不是8的整倍数，那么最后一个字节的高位部分无意义，置为0。</strong></p>\n</li>\n<li><p>CRC校验同上。</p>\n</li>\n</ol>\n<h2 id=\"0x05强制单线圈（写一个开关数字量）\"><a href=\"#0x05强制单线圈（写一个开关数字量）\" class=\"headerlink\" title=\"0x05强制单线圈（写一个开关数字量）\"></a>0x05强制单线圈（写一个开关数字量）</h2><p><strong>0x05号命令，写一个数字量（强制单线圈） 可广播：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>需操作的寄存器地址高8位+低8位</th>\n<th>需操作的寄存器数据高8位+低8位</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x05</td>\n<td>0x00+0xac</td>\n<td>0xff+0x00</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li><p>设备地址与功能码：上同，0x05。</p>\n</li>\n<li><p>需下置的寄存器地址高8位，低8位：表明了需要置位（操作）的开关的地址。</p>\n</li>\n<li><p>置位（操作）的数据高8位，低8位：表明需要置位的开关量的状态。例子中为把该开关闭合。</p>\n<p><strong>注意，此处只可以是[FF][00]表示ON状态 闭合      [00][00]表示OFF状态 断开，其他数值非法。</strong></p>\n</li>\n<li><p>注意此命令一条只能下置一个开关量的状态。</p>\n</li>\n</ol>\n<p><strong>设备响应：</strong></p>\n<ol>\n<li>如果成功把计算机发送的命令原样返回，否则不响应。</li>\n</ol>\n<h2 id=\"0x03读取保持寄存器（模拟量）\"><a href=\"#0x03读取保持寄存器（模拟量）\" class=\"headerlink\" title=\"0x03读取保持寄存器（模拟量）\"></a>0x03读取保持寄存器（模拟量）</h2><p><strong>0x03号命令，读可读写模拟量寄存器（保持寄存器）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>起始寄存器地址高8位+低8位</th>\n<th>读取的寄存器数量高8位+低8位</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x03</td>\n<td>0x00+0x6b</td>\n<td>0x00+0x03</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li>设备地址与功能码：上同，0x03。</li>\n<li>起始地址高8位、低8位：表示想读取的模拟量的起始地址(起始地址为0)。比如例子中的起始地址为0x006b。</li>\n<li>寄存器数高8位、低8位：表示从起始地址开始读多少个模拟量。例子中为3个模拟量。注意，在返回的信息中一个模拟量需要返回两个字节。</li>\n</ol>\n<p><strong>设备响应：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>返回的字节个数</th>\n<th>返回的数据1+数据2+….+数据n</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x03</td>\n<td>0x06</td>\n<td>0x02+0x2b+0x00+0x00+0x00+0x64</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li>设备地址与功能码：上同，0x03。</li>\n<li>返回的字节个数：表示数据的字节个数，也就是数据1，2…n中的n的值。例子中返回了3个模拟量的数据，因为一个模拟量需要2个字节所以共6个字节。</li>\n<li>数据1…n：[数据1][数据2]分别是第1个模拟量的高8位和低8位，[数据3][数据4]是第2个模拟量的高8位和低8位，以此类推。例子中返回的值分别是555，0，100。</li>\n</ol>\n<h2 id=\"0x06预置单寄存器（写一个模拟量）\"><a href=\"#0x06预置单寄存器（写一个模拟量）\" class=\"headerlink\" title=\"0x06预置单寄存器（写一个模拟量）\"></a>0x06预置单寄存器（写一个模拟量）</h2><p><strong>0x06号命令，写单个模拟量寄存器（保持寄存器）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>需操作的寄存器地址高8位+低8位</th>\n<th>需操作的寄存器数据高8位+低8位</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x06</td>\n<td>0x00+0x01</td>\n<td>0x00+0x03</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li>设备地址与功能码：上同，0x06。</li>\n<li>需下置的寄存器地址高8位，低8位：表明了需要下置的模拟量寄存器的地址。</li>\n<li>下置的数据高8位，低8位：表明需要下置的模拟量数据。比如例子中就把1号寄存器的值设为3。</li>\n<li>注意此命令一条只能下置一个模拟量的状态。</li>\n</ol>\n<p><strong>设备响应：</strong></p>\n<p>如果成功把计算机发送的命令原样返回，否则不响应。</p>\n<h2 id=\"0x16-预置多寄存器（写多个模拟量）\"><a href=\"#0x16-预置多寄存器（写多个模拟量）\" class=\"headerlink\" title=\"0x16 预置多寄存器（写多个模拟量）\"></a>0x16 预置多寄存器（写多个模拟量）</h2><p><strong>0x16号命令，写多个模拟量寄存器（保持寄存器）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>需操作的地址高8位+低8位</th>\n<th>需操作数据的数量高8位+低8位</th>\n<th>操作的数据1 高8位+低8位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x16</td>\n<td>0x00+0x01</td>\n<td>0x00+0x01</td>\n<td>0x00+0x05</td>\n</tr>\n<tr>\n<td>操作的数据2 高8位+低8位</td>\n<td>………</td>\n<td>操作的数据n 高8位+低8位</td>\n<td>CRC16</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n<p><strong>意义如下：</strong></p>\n<ol>\n<li>设备地址与功能码：上同，0x16。</li>\n<li>需下置的寄存器地址高8位，低8位：表明了需要下置的模拟量寄存器的地址。</li>\n<li>需下置的数据数量高8位，低8位：表明了需要下置的数据数量，这里为1。</li>\n<li>下置的数据高8位，低8位：表明需要下置的模拟量数据。比如例子中就把1号寄存器的值设为5。</li>\n</ol>\n<p><strong>设备响应：</strong></p>\n<p>如果成功把计算机返回的如下命令，否则不响应。</p>\n<table>\n<thead>\n<tr>\n<th>设备地址+功能码</th>\n<th>需操作的寄存器地址高8位+低8位</th>\n<th>需操作的寄存器数量高8位+低8位</th>\n<th>CRC16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x11+0x16</td>\n<td>0x00+0x01</td>\n<td>0x00+0x01</td>\n<td>高8+低8</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "embedded",
                "modbus"
            ]
        }
    ]
}